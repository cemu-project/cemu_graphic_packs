#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 949069c3567f349d
// color grading / chromatic aberration
uniform ivec4 uf_remappedPS[1];
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0xf4a8e000 res 1280x720x1 dim 1 tm: 4 format 0019 compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 2 2 2 border: 0
layout(location = 0) in vec4 passParameterSem130;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
	if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
	else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
	return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){return mix(0.0, a*b, (a != 0.0) && (b != 0.0));}
void main()
{
	vec4 R0f = vec4(0.0);
	vec4 R1f = vec4(0.0);
	float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
	vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
	float PS0f = 0.0, PS1f = 0.0;
	vec4 tempf = vec4(0.0);
	float tempResultf;
	int tempResulti;
	ivec4 ARi = ivec4(0);
	bool predResult = true;
	vec3 cubeMapSTM;
	int cubeMapFaceId;
	R0f = passParameterSem130;
	R1f.x = (texture(textureUnitPS1, R0f.xy).x);
	// 0
	backupReg0f = R1f.x;
	R1f.x = backupReg0f;
	R1f.x *= 4.0;
	PV0f.z = R0f.x + -(0.5);
	PV0f.w = R0f.y + -(0.5);
	// 1
	R0f.x = (mul_nonIEEE(PV0f.z,intBitsToFloat(uf_remappedPS[0].x)*$redHz) + 0.5); // red
	R0f.y = (mul_nonIEEE(PV0f.w,intBitsToFloat(uf_remappedPS[0].x)) + 0.5);
	R0f.z = (mul_nonIEEE(PV0f.z,intBitsToFloat(uf_remappedPS[0].y)*$blueHz) + 0.5); // blur
	R0f.w = (mul_nonIEEE(PV0f.w,intBitsToFloat(uf_remappedPS[0].y)) + 0.5);
	R0f.y = (texture(textureUnitPS1, R0f.xy).y);
	R0f.z = (texture(textureUnitPS1, R0f.zw).z);
	// 0
	R1f.y = R0f.y;
	R1f.y *= 4.0;
	R1f.z = R0f.z;
	R1f.z *= 4.0;
	// export
	passPixelColor0 = vec4(R1f.x, R1f.y, R1f.z, R1f.z);
}
