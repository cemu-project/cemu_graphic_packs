#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
#ifdef VULKAN
#define ATTR_LAYOUT(__vkSet, __location) layout(set = __vkSet, location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation)
#define SET_POSITION(_v) gl_Position = _v; gl_Position.z = (gl_Position.z + gl_Position.w) / 2.0
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale.xy,gl_FragCoord.zw)
#define gl_VertexID gl_VertexIndex
#define gl_InstanceID gl_InstanceIndex
#else
#define ATTR_LAYOUT(__vkSet, __location) layout(location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation, std140) 
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation)
#define SET_POSITION(_v) gl_Position = _v
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw)
#endif
// This shader was automatically converted to be cross-compatible with Vulkan and OpenGL.

// shader c14019840473ff86 //aa
#ifdef VULKAN
layout(set = 1, binding = 2) uniform ufBlock
{
uniform vec4 uf_fragCoordScale;
};
#else
uniform vec2 uf_fragCoordScale;
#endif

const float hazeFactor = 0.1;

const float gamma = $gamma; // 1.0 is neutral  Botw is already colour graded at this stage
const float exposure = $exposure; // 1.0 is neutral
const float vibrance = $vibrance;  // 0.0 is neutral  
const float crushContrast = $crushContrast; // 0.0 is neutral. Use small increments, loss of shadow detail 
const float contrastCurve = $contrastCurve;


vec3 RGB_Lift = vec3($redShadows, $greenShadows , $blueSadows);		// [0.000 to 2.000] Adjust shadows for Red, Green and Blue.
vec3 RGB_Gamma = vec3($redMid ,$greenMid, $blueMid);				// [0.000 to 2.000] Adjust midtones for Red, Green and Blue
vec3 RGB_Gain = vec3($redHilight, $greenHilight, $blueHilight);		// [0.000 to 2.000] Adjust highlights for Red, Green and Blue
//lumasharpen
const float sharp_mix = $sharp_mix;
const float sharp_strength = 2.0; 
const float sharp_clamp = 0.75;
const float offset_bias = 1.0;
float Sigmoid (float x) {

    return 1.0 / (1.0 + (exp(-(x - 0.5) * 5.5))); 
}


#define px (1.0/1920.0*uf_fragCoordScale.x)
#define py (1.0/1080.0*uf_fragCoordScale.y)
#define CoefLuma vec3(0.2126, 0.7152, 0.0722)  

float lumasharping(sampler2D tex, vec2 pos) {
	vec4 colorInput = texture(tex, pos);

	vec3 ori = colorInput.rgb;

	// -- Combining the strength and luma multipliers --
	vec3 sharp_strength_luma = (CoefLuma * sharp_strength);

	// -- Gaussian filter --
	//   [ .25, .50, .25]     [ 1 , 2 , 1 ]
	//   [ .50,   1, .50]  =  [ 2 , 4 , 2 ]
	//   [ .25, .50, .25]     [ 1 , 2 , 1 ]

	vec3 blur_ori = texture(tex, pos + vec2(px, -py) * 0.5 * offset_bias).rgb; // South East
	blur_ori += texture(tex, pos + vec2(-px, -py) * 0.5 * offset_bias).rgb;  // South West
	blur_ori += texture(tex, pos + vec2(px, py) * 0.5 * offset_bias).rgb; // North East
	blur_ori += texture(tex, pos + vec2(-px, py) * 0.5 * offset_bias).rgb; // North West

	blur_ori *= 0.25;  // ( /= 4) Divide by the number of texture fetches

					   // -- Calculate the sharpening --
	vec3 sharp = ori - blur_ori;  //Subtracting the blurred image from the original image

								  // -- Adjust strength of the sharpening and clamp it--
	vec4 sharp_strength_luma_clamp = vec4(sharp_strength_luma * (0.5 / sharp_clamp), 0.5); //Roll part of the clamp into the dot

	float sharp_luma = clamp((dot(vec4(sharp, 1.0), sharp_strength_luma_clamp)), 0.0, 1.0); //Calculate the luma, adjust the strength, scale up and clamp
	sharp_luma = (sharp_clamp * 2.0) * sharp_luma - sharp_clamp; //scale down

	return sharp_luma;
}

vec3 LiftGammaGainPass(vec3 colorInput)
{ 	//reshade BSD https://reshade.me ,  Alexkiri port
	vec3 color = colorInput;
	color = color * (1.5 - 0.5 * RGB_Lift) + 0.5 * RGB_Lift - 0.5;
	color = clamp(color, 0.0, 1.0); 
	color *= RGB_Gain;	
	color = pow(color, 1.0 / RGB_Gamma);
	return clamp(color, 0.0, 1.0);
}

vec3 contrasty(vec3 colour){
	vec3 fColour = (colour.xyz);
//fColour = LiftGammaGainPass(fColour);
	
	fColour = clamp(exposure * fColour, 0.0, 1.0);
	fColour = pow(fColour, vec3(1.0 / gamma));
	float luminance = fColour.r*0.299 + fColour.g*0.587 + fColour.b*0.114;
	float mn = min(min(fColour.r, fColour.g), fColour.b);
	float mx = max(max(fColour.r, fColour.g), fColour.b);
	float sat = (1.0 - (mx - mn)) * (1.0 - mx) * luminance * 5.0;
	vec3 lightness = vec3((mn + mx) / 2.0);
	fColour = LiftGammaGainPass(fColour);
// vibrance
	fColour = mix(fColour, mix(fColour, lightness, -vibrance), sat);
	fColour = max(vec3(0.0), fColour - vec3(crushContrast));
	return fColour;
}


TEXTURE_LAYOUT(0, 1, 0) uniform sampler2D textureUnitPS0;
TEXTURE_LAYOUT(1, 1, 1) uniform sampler2D textureUnitPS1;
layout(location = 0) in vec4 passParameterSem0;
layout(location = 0) out vec4 passPixelColor0;

int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R0f.w = (textureGather(textureUnitPS1, R0f.xy).y);
// 0
R1f.x = R0f.x + intBitsToFloat(0xba088889);
R1f.y = R0f.y + intBitsToFloat(0xba72b9d6);
R2f.z = R0f.x;
R2f.y = R0f.y + intBitsToFloat(0xba72b9d6);
PS0f = R2f.y;
// 1
R3f.x = R0f.x + intBitsToFloat(0xba088889);
R3f.y = R0f.y;
R1f.xyzw = (textureGather(textureUnitPS1, R1f.xy).xyzw);
R2f.yz = (textureGather(textureUnitPS1, R2f.zy).yz);
R3f.xy = (textureGather(textureUnitPS1, R3f.xy).xy);
// 0


PV0f.x = R2f.z + R3f.x;
PV0f.y = R1f.w + R0f.w;
PV0f.z = R1f.z + R3f.y;
PV0f.w = R1f.x + R2f.y;
// 1
R123f.x = (R1f.y * 2.0 + -(PV0f.x));
PV1f.x = R123f.x;
R123f.y = (R1f.y * 2.0 + -(PV0f.y));
PV1f.y = R123f.y;
R123f.z = (R1f.y * 2.0 + -(PV0f.z));
PV1f.z = R123f.z;
R123f.w = (R1f.y * 2.0 + -(PV0f.w));
PV1f.w = R123f.w;
// 2
PV0f.x = max(PV1f.x, -(PV1f.x));
PV0f.y = max(PV1f.y, -(PV1f.y));
PV0f.z = max(PV1f.z, -(PV1f.z));
PV0f.w = max(PV1f.w, -(PV1f.w));
// 3
PV1f.x = PV0f.x + intBitsToFloat(0xb400d959);
PV1f.y = PV0f.y + intBitsToFloat(0xb400d959);
PV1f.z = PV0f.z + intBitsToFloat(0xb400d959);
PV1f.w = PV0f.w + intBitsToFloat(0xb400d959);
// 4
R123f.x = intBitsToFloat(((PV1f.w >= 0.0)?(floatBitsToInt(1.0)):(0)));
PV0f.x = R123f.x;
R123f.y = intBitsToFloat(((PV1f.z >= 0.0)?(floatBitsToInt(1.0)):(0)));
PV0f.y = R123f.y;
R123f.z = intBitsToFloat(((PV1f.y >= 0.0)?(floatBitsToInt(1.0)):(0)));
PV0f.z = R123f.z;
R123f.w = intBitsToFloat(((PV1f.x >= 0.0)?(floatBitsToInt(1.0)):(0)));
PV0f.w = R123f.w;
// 5
tempf.x = dot(vec4(PV0f.x,PV0f.y,PV0f.z,PV0f.w),vec4(0.25,0.25,0.25,0.25));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
// 6
R127f.z = PV1f.x * intBitsToFloat(0x3f400000)*0.5;
PV0f.z = R127f.z;
// 7
R1f.x = (PV0f.z * intBitsToFloat(0xba088889)*0.5 + R0f.x);
R1f.y = R0f.y;
R2f.z = R0f.x;
R2f.y = (PV0f.z * intBitsToFloat(0xba72b9d6)*0.5 + R0f.y);
PS1f = R2f.y;
// 8
R3f.x = (R127f.z * intBitsToFloat(0x3a088889)*0.5 + R0f.x);
R3f.y = R0f.y;
R0f.w = (R127f.z * intBitsToFloat(0x3a72b9d6) + R0f.y);
R1f.xyzw = (texture(textureUnitPS0, R1f.xy).xyzw);
R2f.xyzw = (texture(textureUnitPS0, R2f.zy).xyzw);
R3f.xyzw = (texture(textureUnitPS0, R3f.xy).xyzw);
R0f.xyzw = (texture(textureUnitPS0, R0f.xw).xyzw);
// 0
PV0f.x = R1f.w + R2f.w;
PV0f.y = R1f.z + R2f.z;
PV0f.z = R1f.y + R2f.y;
PV0f.w = R1f.x + R2f.x;
// 1
PV1f.x = R3f.w + PV0f.x;
PV1f.y = R3f.z + PV0f.y;
PV1f.z = R3f.y + PV0f.z;
PV1f.w = R3f.x + PV0f.w;
// 2
backupReg0f = R0f.y;
backupReg1f = R0f.x;
PV0f.x = R0f.w + PV1f.x;
PV0f.y = R0f.z + PV1f.y;
PV0f.z = backupReg0f + PV1f.z;
PV0f.w = backupReg1f + PV1f.w;
// 3
R0f.x = PV0f.w * 0.25;
R0f.y = PV0f.z * 0.25;
R0f.z = PV0f.y * 0.25;
R0f.w = PV0f.x * 0.25;
// export
//R0f.xyz = vec3(Sigmoid(R0f.x), Sigmoid(R0f.y),Sigmoid(R0f.z));
//R0f.x = Sigmoid(R0f.x);
//R0f.y = Sigmoid(R0f.y);

//R0f.xyz = contrasty(R0f.xyz);
//R0f.y = Sigmoid(R0f.y)
//R0f.xyz = clamp(R0f.xyz,0,1);
//R0f.x = max(0.0, R0f.x - crushContrast);

R0f.xyz = contrasty(R0f.xyz);
R0f.xyz = mix(R0f.xyz, smoothstep(0.0, 1.0, R0f.xyz), contrastCurve);
//vec3 mix(vec3 x, vec3 y, float a)
//R0f.xyz = mix(contrasty(R0f.xyz), vec3(Sigmoid(R0f.x), Sigmoid(R0f.y),Sigmoid(R0f.z)), 0.25);
float smask = lumasharping(textureUnitPS0, passParameterSem0.xy);
vec3 temp3 = R0f.xyz;
R0f.xyz = mix(R0f.xyz, (temp3.xyz += (smask)), sharp_mix);

passPixelColor0 = vec4(R0f.x, R0f.y, R0f.z, R0f.w);
}
