#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader ee4bd70a942d3687
uniform ivec4 uf_remappedPS[1];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x2f5f4000 res 256x256x1 dim 1 tm: 4 format 0031 compSel: 0 1 2 3 mipView: 0x1 (num 0x8) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 0 0 0 border: 0
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x2a7f1000 res 1280x720x1 dim 1 tm: 4 format 0031 compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 0 0 0 border: 0
layout(location = 0) in vec4 passParameterSem130;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem130;
R1f.xyzw = (texture(textureUnitPS0, R0f.xy).xyzw)*$dirt;
R0f.xyzw = (texture(textureUnitPS1, R0f.zw).xyzw)*$dirt;
// 0
backupReg0f = R0f.y;
backupReg1f = R0f.x;
PV0f.x = mul_nonIEEE(R1f.w, R0f.w);
PV0f.y = mul_nonIEEE(R1f.z, R0f.z);
PV0f.z = mul_nonIEEE(R1f.y, backupReg0f);
PV0f.w = mul_nonIEEE(R1f.x, backupReg1f);
// 1
R0f.x = mul_nonIEEE(PV0f.w, intBitsToFloat(uf_remappedPS[0].x));
R0f.y = mul_nonIEEE(PV0f.z, intBitsToFloat(uf_remappedPS[0].y));
R0f.z = mul_nonIEEE(PV0f.y, intBitsToFloat(uf_remappedPS[0].z));
R0f.w = mul_nonIEEE(PV0f.x, intBitsToFloat(uf_remappedPS[0].w));
// export
passPixelColor0 = vec4(R0f.x, R0f.y, R0f.z, R0f.w);
}
