#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
#ifdef VULKAN
#define ATTR_LAYOUT(__vkSet, __location) layout(set = __vkSet, location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation)
#define SET_POSITION(_v) gl_Position = _v; gl_Position.z = (gl_Position.z + gl_Position.w) / 2.0
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale.xy,gl_FragCoord.zw)
#define gl_VertexID gl_VertexIndex
#define gl_InstanceID gl_InstanceIndex
#else
#define ATTR_LAYOUT(__vkSet, __location) layout(location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation, std140) 
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation)
#define SET_POSITION(_v) gl_Position = _v
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw)
#endif
// This shader was automatically converted to be cross-compatible with Vulkan and OpenGL.

// shader 949069c3567f349d
// color grading / chromatic aberration
#ifdef VULKAN
layout(set = 1, binding = 1) uniform ufBlock
{
uniform ivec4 uf_remappedPS[1];
uniform vec4 uf_fragCoordScale;
};
#else
uniform ivec4 uf_remappedPS[1];
uniform vec2 uf_fragCoordScale;
#endif
TEXTURE_LAYOUT(1, 1, 0) uniform sampler2D textureUnitPS1;
layout(location = 0) in vec4 passParameterSem130;
layout(location = 0) out vec4 passPixelColor0;
// uf_fragCoordScale was moved to the ufBlock
int clampFI32(int v)
{
	if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
	else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
	return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){return mix(0.0, a*b, (a != 0.0) && (b != 0.0));}
void main()
{
	vec4 R0f = vec4(0.0);
	vec4 R1f = vec4(0.0);
	float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
	vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
	float PS0f = 0.0, PS1f = 0.0;
	vec4 tempf = vec4(0.0);
	float tempResultf;
	int tempResulti;
	ivec4 ARi = ivec4(0);
	bool predResult = true;
	vec3 cubeMapSTM;
	int cubeMapFaceId;
	R0f = passParameterSem130;
	R1f.x = (texture(textureUnitPS1, R0f.xy).x);
	// 0
	backupReg0f = R1f.x;
	R1f.x = backupReg0f;
	R1f.x *= 4.0;
	PV0f.z = R0f.x + -(0.5);
	PV0f.w = R0f.y + -(0.5);
	// 1
	R0f.x = (mul_nonIEEE(PV0f.z,intBitsToFloat(uf_remappedPS[0].x)*$redHz) + 0.5); // red
	R0f.y = (mul_nonIEEE(PV0f.w,intBitsToFloat(uf_remappedPS[0].x)) + 0.5);
	R0f.z = (mul_nonIEEE(PV0f.z,intBitsToFloat(uf_remappedPS[0].y)*$blueHz) + 0.5); // blur
	R0f.w = (mul_nonIEEE(PV0f.w,intBitsToFloat(uf_remappedPS[0].y)) + 0.5);
	R0f.y = (texture(textureUnitPS1, R0f.xy).y);
	R0f.z = (texture(textureUnitPS1, R0f.zw).z);
	// 0
	R1f.y = R0f.y;
	R1f.y *= 4.0;
	R1f.z = R0f.z;
	R1f.z *= 4.0;
	// export
	passPixelColor0 = vec4(R1f.x, R1f.y, R1f.z, R1f.z);
}
