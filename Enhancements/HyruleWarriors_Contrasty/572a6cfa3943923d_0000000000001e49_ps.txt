#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
#ifdef VULKAN
#define ATTR_LAYOUT(__vkSet, __location) layout(set = __vkSet, location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation)
#define SET_POSITION(_v) gl_Position = _v; gl_Position.z = (gl_Position.z + gl_Position.w) / 2.0
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale.xy,gl_FragCoord.zw)
#define gl_VertexID gl_VertexIndex
#define gl_InstanceID gl_InstanceIndex
#else
#define ATTR_LAYOUT(__vkSet, __location) layout(location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation, std140) 
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation)
#define SET_POSITION(_v) gl_Position = _v
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw)
#endif
// This shader was automatically converted to be cross-compatible with Vulkan and OpenGL.

// shader 572a6cfa3943923d
//ingame contrasty

#ifdef VULKAN
layout(set = 1, binding = 3) uniform ufBlock
{
uniform ivec4 uf_remappedPS[5];
uniform vec4 uf_fragCoordScale;
};
#else
uniform ivec4 uf_remappedPS[5];
uniform vec2 uf_fragCoordScale;
#endif

const float hazeFactor = 0.1;

const float gamma = $gamma; // 1.0 is neutral  Botw is already colour graded at this stage
const float exposure = $exposure; // 1.0 is neutral
const float vibrance = $vibrance;  // 0.0 is neutral  
const float crushContrast = $crushContrast; // 0.0 is neutral. Use small increments, loss of shadow detail 
const float contrastCurve = $contrastCurve;


vec3 RGB_Lift = vec3($redShadows, $greenShadows , $blueShadows);		// [0.000 to 2.000] Adjust shadows for Red, Green and Blue.
vec3 RGB_Gamma = vec3($redMid ,$greenMid, $blueMid);				// [0.000 to 2.000] Adjust midtones for Red, Green and Blue
vec3 RGB_Gain = vec3($redHilight, $greenHilight, $blueHilight);		// [0.000 to 2.000] Adjust highlights for Red, Green and Blue
//lumasharpen
const float sharp_mix = $sharp_mix;
const float sharp_strength = 2.0; 
const float sharp_clamp = 0.75;
const float offset_bias = 1.0;
float Sigmoid (float x) {

    return 1.0 / (1.0 + (exp(-(x - 0.5) * 5.5))); 
}


#define px (1.0/1920.0*uf_fragCoordScale.x)
#define py (1.0/1080.0*uf_fragCoordScale.y)
#define CoefLuma vec3(0.2126, 0.7152, 0.0722)  

float lumasharping(sampler2D tex, vec2 pos) {
	vec4 colorInput = texture(tex, pos);

	vec3 ori = colorInput.rgb;

	// -- Combining the strength and luma multipliers --
	vec3 sharp_strength_luma = (CoefLuma * sharp_strength);

	// -- Gaussian filter --
	//   [ .25, .50, .25]     [ 1 , 2 , 1 ]
	//   [ .50,   1, .50]  =  [ 2 , 4 , 2 ]
	//   [ .25, .50, .25]     [ 1 , 2 , 1 ]

	vec3 blur_ori = texture(tex, pos + vec2(px, -py) * 0.5 * offset_bias).rgb; // South East
	blur_ori += texture(tex, pos + vec2(-px, -py) * 0.5 * offset_bias).rgb;  // South West
	blur_ori += texture(tex, pos + vec2(px, py) * 0.5 * offset_bias).rgb; // North East
	blur_ori += texture(tex, pos + vec2(-px, py) * 0.5 * offset_bias).rgb; // North West

	blur_ori *= 0.25;  // ( /= 4) Divide by the number of texture fetches

					   // -- Calculate the sharpening --
	vec3 sharp = ori - blur_ori;  //Subtracting the blurred image from the original image

								  // -- Adjust strength of the sharpening and clamp it--
	vec4 sharp_strength_luma_clamp = vec4(sharp_strength_luma * (0.5 / sharp_clamp), 0.5); //Roll part of the clamp into the dot

	float sharp_luma = clamp((dot(vec4(sharp, 1.0), sharp_strength_luma_clamp)), 0.0, 1.0); //Calculate the luma, adjust the strength, scale up and clamp
	sharp_luma = (sharp_clamp * 2.0) * sharp_luma - sharp_clamp; //scale down

	return sharp_luma;
}

vec3 LiftGammaGainPass(vec3 colorInput)
{ 	//reshade BSD https://reshade.me ,  Alexkiri port
	vec3 color = colorInput;
	color = color * (1.5 - 0.5 * RGB_Lift) + 0.5 * RGB_Lift - 0.5;
	color = clamp(color, 0.0, 1.0); 
	color *= RGB_Gain;	
	color = pow(color, 1.0 / RGB_Gamma);
	return clamp(color, 0.0, 1.0);
}

vec3 contrasty(vec3 colour){
	vec3 fColour = (colour.xyz);
//fColour = LiftGammaGainPass(fColour);
	
	fColour = clamp(exposure * fColour, 0.0, 1.0);
	fColour = pow(fColour, vec3(1.0 / gamma));
	float luminance = fColour.r*0.299 + fColour.g*0.587 + fColour.b*0.114;
	float mn = min(min(fColour.r, fColour.g), fColour.b);
	float mx = max(max(fColour.r, fColour.g), fColour.b);
	float sat = (1.0 - (mx - mn)) * (1.0 - mx) * luminance * 5.0;
	vec3 lightness = vec3((mn + mx) / 2.0);
	fColour = LiftGammaGainPass(fColour);
// vibrance
	fColour = mix(fColour, mix(fColour, lightness, -vibrance), sat);
	fColour = max(vec3(0.0), fColour - vec3(crushContrast));
	return fColour;
}


// uf_remappedPS[5] was moved to the ufBlock
TEXTURE_LAYOUT(0, 1, 0) uniform sampler2D textureUnitPS0;
TEXTURE_LAYOUT(1, 1, 1) uniform sampler2D textureUnitPS1;
TEXTURE_LAYOUT(2, 1, 2) uniform sampler2D textureUnitPS2;
layout(location = 0) in vec4 passParameterSem128;
layout(location = 0) out vec4 passPixelColor0;
//uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){return mix(0.0, a*b, (a != 0.0) && (b != 0.0));}
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem128;
R1f.xyzw = (texture(textureUnitPS0, R0f.xy).xyzw);
R2f.xyz = (texture(textureUnitPS2, R0f.xy).xyz);
// 0
R0f.y = intBitsToFloat(0x3f000000);
R0f.x = (texture(textureUnitPS1, R0f.yy).x);
// 0
R127f.x = mul_nonIEEE(R1f.x, R0f.x);
PV0f.x = R127f.x;
PV0f.y = mul_nonIEEE(R1f.w, R0f.x);
R126f.z = mul_nonIEEE(R1f.z, R0f.x);
PV0f.z = R126f.z;
R127f.w = mul_nonIEEE(R1f.y, R0f.x);
PV0f.w = R127f.w;
// 1
PV1f.x = PV0f.x * intBitsToFloat(0x3e6147ae);
R127f.z = PV0f.z * intBitsToFloat(0x3e6147ae);
PV1f.z = R127f.z;
PV1f.w = PV0f.w * intBitsToFloat(0x3e6147ae);
R0f.w = mul_nonIEEE(PV0f.y, intBitsToFloat(uf_remappedPS[0].x));
PS1f = R0f.w;
// 2
PV0f.x = PV1f.w + intBitsToFloat(0x3e99999a);
PV0f.y = PV1f.x + intBitsToFloat(0x3e99999a);
PV0f.z = PV1f.x + intBitsToFloat(0x3cf5c28f);
PV0f.w = PV1f.z + intBitsToFloat(0x3e99999a);
R125f.z = PV1f.w + intBitsToFloat(0x3cf5c28f);
PS0f = R125f.z;
// 3
backupReg0f = R127f.x;
R126f.x = (mul_nonIEEE(R126f.z,PV0f.w) + intBitsToFloat(0x3d75c28f));
PV1f.y = R127f.z + intBitsToFloat(0x3cf5c28f);
R123f.z = (mul_nonIEEE(R127f.x,PV0f.y) + intBitsToFloat(0x3d75c28f));
PV1f.z = R123f.z;
R126f.w = (mul_nonIEEE(R127f.w,PV0f.x) + intBitsToFloat(0x3d75c28f));
R127f.x = (mul_nonIEEE(backupReg0f,PV0f.z) + intBitsToFloat(0x3b03126f));
PS1f = R127f.x;
// 4
backupReg0f = R126f.z;
backupReg1f = R127f.w;
R126f.z = (mul_nonIEEE(backupReg0f,PV1f.y) + intBitsToFloat(0x3b03126f));
R127f.w = (mul_nonIEEE(backupReg1f,R125f.z) + intBitsToFloat(0x3b03126f));
PS0f = 1.0 / PV1f.z;
// 5
PV1f.z = R127f.x * PS0f;
PS1f = 1.0 / R126f.w;
// 6
PV0f.y = R127f.w * PS1f;
PV0f.w = PV1f.z + -(intBitsToFloat(0x3d086595));
PS0f = 1.0 / R126f.x;
// 7
PV1f.x = R126f.z * PS0f;
PV1f.y = mul_nonIEEE(PV0f.w, intBitsToFloat(uf_remappedPS[0].x));
PV1f.z = PV0f.y + -(intBitsToFloat(0x3d086595));
// 8
R126f.x = (mul_nonIEEE(R2f.x,intBitsToFloat(uf_remappedPS[1].x)) + PV1f.y);
PV0f.y = PV1f.x + -(intBitsToFloat(0x3d086595));
PV0f.w = mul_nonIEEE(PV1f.z, intBitsToFloat(uf_remappedPS[0].x));
// 9
R123f.x = (mul_nonIEEE(R2f.y,intBitsToFloat(uf_remappedPS[1].x)) + PV0f.w);
PV1f.x = R123f.x;
PV1f.z = mul_nonIEEE(PV0f.y, intBitsToFloat(uf_remappedPS[0].x));
// 10
backupReg0f = R126f.x;
R126f.x = mul_nonIEEE(backupReg0f, intBitsToFloat(uf_remappedPS[2].x));
R127f.y = mul_nonIEEE(PV1f.x, intBitsToFloat(uf_remappedPS[2].y));
R123f.w = (mul_nonIEEE(R2f.z,intBitsToFloat(uf_remappedPS[1].x)) + PV1f.z);
PV0f.w = R123f.w;
// 11
R126f.z = mul_nonIEEE(PV0f.w, intBitsToFloat(uf_remappedPS[2].z));
PV1f.z = R126f.z;
// 12
tempf.x = dot(vec4(R126f.x,R127f.y,PV1f.z,-0.0),vec4(intBitsToFloat(0x3e990abb),intBitsToFloat(0x3f162c13),intBitsToFloat(0x3dea747e),0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R125f.z = tempf.x;
// 13
PV1f.x = R127f.y + -(PV0f.x);
PV1f.y = R126f.x + -(PV0f.x);
PV1f.w = R126f.z + -(PV0f.x);
// 14
R126f.x = (mul_nonIEEE(PV1f.w,intBitsToFloat(uf_remappedPS[3].z)) + R125f.z);
R127f.y = (mul_nonIEEE(PV1f.x,intBitsToFloat(uf_remappedPS[3].y)) + R125f.z);
R123f.z = (mul_nonIEEE(PV1f.y,intBitsToFloat(uf_remappedPS[3].x)) + R125f.z);
PV0f.z = R123f.z;
// 15
tempResultf = log2(PV0f.z);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1f = tempResultf;
// 16
R125f.z = mul_nonIEEE(PS1f, intBitsToFloat(uf_remappedPS[4].x));
tempResultf = log2(R127f.y);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0f = tempResultf;
// 17
R127f.w = mul_nonIEEE(PS0f, intBitsToFloat(uf_remappedPS[4].x));
tempResultf = log2(R126f.x);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1f = tempResultf;
// 18
R126f.x = mul_nonIEEE(PS1f, intBitsToFloat(uf_remappedPS[4].x));
PS0f = exp2(R125f.z);
// 19
R0f.x = PS0f;
PS1f = exp2(R127f.w);
// 20
R0f.y = PS1f;
PS0f = exp2(R126f.x);
// 21
R0f.z = PS0f;
// export

R0f.xyz = contrasty(R0f.xyz);
R0f.xyz = mix(R0f.xyz, smoothstep(0.0, 1.0, R0f.xyz), contrastCurve);
float smask = lumasharping(textureUnitPS0, passParameterSem128.xy);
vec3 temp3 = R0f.xyz;
R0f.xyz = mix(R0f.xyz, (temp3.xyz += (smask)), sharp_mix);

passPixelColor0 = vec4(R0f.x, R0f.y, R0f.z, R0f.w);
}
