#version 420
#extension GL_ARB_texture_gather : enable
#ifdef VULKAN
#define ATTR_LAYOUT(__vkSet, __location) layout(set = __vkSet, location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation)
#define SET_POSITION(_v) gl_Position = _v; gl_Position.z = (gl_Position.z + gl_Position.w) / 2.0
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale.xy,gl_FragCoord.zw)
#define gl_VertexID gl_VertexIndex
#define gl_InstanceID gl_InstanceIndex
#else
#define ATTR_LAYOUT(__vkSet, __location) layout(location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation, std140) 
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation)
#define SET_POSITION(_v) gl_Position = _v
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw)
#endif
// This shaders was auto-converted from OpenGL to Cemu.

// shader 8836c3a20b053cf0
// Shrine - vertical lines field
// Glow Lights Color Mod
// Credit for hsv functions http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl

#define HUE_ROTATION 134 //[0, 360] where 0 and 360 is unchanged Hue and 180 is completely opposite Hue. Check http://dba.med.sc.edu/price/irf/Adobe_tg/models/images/hsl_top.JPG
#define SATURATION_FACTOR 0.9 //[0.0, 1.0] 1.0 means unchanged Saturation, 0.0 means completely desaturated. Values above 1.0 are accepted, but they may cause clipping
#define VALUE_FACTOR 0.65 //same as above; applies to Value
#define ALPHA_FACTOR 1.0 //same as above; applies to Transparency

const float hueRotation = HUE_ROTATION / 360.0;
#ifdef VULKAN
layout(set = 1, binding = 1) uniform ufBlock
{
uniform ivec4 uf_remappedPS[1];
uniform float uf_alphaTestRef;
uniform vec4 uf_fragCoordScale;
};
#else
uniform ivec4 uf_remappedPS[1];
uniform float uf_alphaTestRef;
uniform vec2 uf_fragCoordScale;
#endif
// uf_alphaTestRef was moved to the ufBlock
TEXTURE_LAYOUT(0, 1, 0) uniform sampler2D textureUnitPS0;
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem2;
layout(location = 3) in vec4 passParameterSem4;
layout(location = 4) in vec4 passParameterSem7;
layout(location = 5) in vec4 passParameterSem8;
layout(location = 6) in vec4 passParameterSem11;
layout(location = 0) out vec4 passPixelColor0;
// uf_fragCoordScale was moved to the ufBlock
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
vec3 rgb2hsv(vec3 c) {
	vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
	vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
	vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

	float d = q.x - min(q.w, q.y);
	float e = 1.0e-10;
	return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}
vec3 hsv2rgb(vec3 c) {
	vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
	return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R122f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem1;
R2f = passParameterSem2;
R3f = passParameterSem4;
R4f = passParameterSem7;
R5f = passParameterSem8;
R6f = passParameterSem11;
R5f.xyzw = (texture(textureUnitPS0, R5f.xy).xyzw);
// 0
tempf.x = dot(vec4(R2f.x,R2f.y,R2f.z,-0.0),vec4(R2f.x,R2f.y,R2f.z,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R127f.z = -(intBitsToFloat(uf_remappedPS[0].z)) + intBitsToFloat(uf_remappedPS[0].w);
PS0f = R127f.z;
// 1
R127f.x = R0f.y + -(R1f.y);
PV1f.y = mul_nonIEEE(R4f.w, R5f.w);
R126f.z = R0f.x + -(R1f.x);
R127f.w = R0f.z + -(R1f.z);
tempResultf = 1.0 / sqrt(PV0f.x);
PS1f = tempResultf;
// 2
PV0f.x = mul_nonIEEE(R2f.x, PS1f);
PV0f.y = mul_nonIEEE(R2f.y, PS1f);
PV0f.z = mul_nonIEEE(R2f.z, PS1f);
R126f.w = mul_nonIEEE(R0f.w, PV1f.y);
R126f.w = clamp(R126f.w, 0.0, 1.0);
R127f.y = 1.0 / R127f.z;
PS0f = R127f.y;
// 3
tempf.x = dot(vec4(R6f.x,R6f.y,R6f.z,-0.0),vec4(PV0f.x,PV0f.y,PV0f.z,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R122f.x = (mul_nonIEEE(R126f.z,R5f.x) + R1f.x);
PS1f = R122f.x;
// 4
PV0f.x = max(PV1f.x, -(PV1f.x));
R123f.z = (mul_nonIEEE(R127f.x,R5f.y) + R1f.y);
PV0f.z = R123f.z;
R123f.w = (mul_nonIEEE(R127f.w,R5f.z) + R1f.z);
PV0f.w = R123f.w;
R1f.x = mul_nonIEEE(R4f.x, PS1f);
PS0f = R1f.x;
// 5
R1f.y = mul_nonIEEE(R4f.y, PV0f.z);
R1f.z = mul_nonIEEE(R4f.z, PV0f.w);
PV1f.w = PV0f.x + -(intBitsToFloat(uf_remappedPS[0].z));
// 6
PV0f.x = PV1f.w * R127f.y;
PV0f.x = clamp(PV0f.x, 0.0, 1.0);
// 7
R123f.z = (intBitsToFloat(0xc0000000) * PV0f.x + intBitsToFloat(0x40400000));
PV1f.z = R123f.z;
PV1f.w = mul_nonIEEE(PV0f.x, PV0f.x);
// 8
PV0f.y = mul_nonIEEE(PV1f.w, PV1f.z);
// 9
PV1f.x = mul_nonIEEE(R126f.w, PV0f.y);
// 10
R1f.w = mul_nonIEEE(R3f.x, PV1f.x);
// export
if( ((vec4(R1f.x, R1f.y, R1f.z, R1f.w)).a > uf_alphaTestRef) == false) discard;
passPixelColor0 = vec4(R1f.x, R1f.y, R1f.z, R1f.w);
vec3 colhsv = rgb2hsv(passPixelColor0.rgb);
passPixelColor0.rgb = hsv2rgb(vec3(mod(colhsv.x + hueRotation, 1.0), colhsv.y*SATURATION_FACTOR, colhsv.z*VALUE_FACTOR));
passPixelColor0.a *= ALPHA_FACTOR;
}
