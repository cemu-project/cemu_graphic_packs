#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
#ifdef VULKAN
#define ATTR_LAYOUT(__vkSet, __location) layout(set = __vkSet, location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation)
#define SET_POSITION(_v) gl_Position = _v; gl_Position.z = (gl_Position.z + gl_Position.w) / 2.0
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale.xy,gl_FragCoord.zw)
#define gl_VertexID gl_VertexIndex
#define gl_InstanceID gl_InstanceIndex
#else
#define ATTR_LAYOUT(__vkSet, __location) layout(location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation, std140) 
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation)
#define SET_POSITION(_v) gl_Position = _v
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw)
#endif
/* This shaders was auto-converted from OpenGL to Cemu.
Conversion output:
*/


// shader 699b238ae15d113b -- Ganons Castle Moat Fog Fragment Shader
#define basefogred $basefogred
#define basefoggreen $basefoggreen
#define basefogblue $basefogblue
#define basefogopacity $basefogopacity

#ifndef basefogred
    #define basefogred 1
#endif
#ifndef basefoggreen
    #define basefoggreen 1
#endif
#ifndef basefogblue
    #define basefogblue 1
#endif
#ifndef basefogopacity
    #define basefogopacity 1
#endif

#ifdef VULKAN
layout(set = 1, binding = 2) uniform ufBlock
{
uniform ivec4 uf_remappedPS[5];
uniform float uf_alphaTestRef;
uniform vec4 uf_fragCoordScale;
};
#else
uniform ivec4 uf_remappedPS[5];
uniform float uf_alphaTestRef;
uniform vec2 uf_fragCoordScale;
#endif
// uf_alphaTestRef was moved to the ufBlock
TEXTURE_LAYOUT(0, 1, 0) uniform sampler2D textureUnitPS0;
TEXTURE_LAYOUT(4, 1, 1) uniform sampler2D textureUnitPS4;
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem2;
layout(location = 2) in vec4 passParameterSem3;
layout(location = 3) in vec4 passParameterSem4;
layout(location = 4) in vec4 passParameterSem7;
layout(location = 5) in vec4 passParameterSem8;
layout(location = 6) in vec4 passParameterSem11;
layout(location = 7) in vec4 passParameterSem14;
layout(location = 8) in vec4 passParameterSem15;
layout(location = 9) in vec4 passParameterSem16;
layout(location = 0) out vec4 passPixelColor0;
// uf_fragCoordScale was moved to the ufBlock
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R8f = vec4(0.0);
vec4 R9f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem2;
R2f = passParameterSem3;
R3f = passParameterSem4;
R4f = passParameterSem7;
R5f = passParameterSem8;
R6f = passParameterSem11;
R7f = passParameterSem14;
R8f = passParameterSem15;
R9f = passParameterSem16;
R1f.w = (texture(textureUnitPS0, R5f.xy).w);
// 0
tempf.x = dot(vec4(R1f.x,R1f.y,R1f.z,-0.0),vec4(R1f.x,R1f.y,R1f.z,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R127f.z = tempf.x;
PS0f = 1.0 / R2f.w;
// 1
R5f.x = mul_nonIEEE(R2f.x, PS0f);
R5f.y = mul_nonIEEE(R2f.y, PS0f);
R3f.z = -(intBitsToFloat(uf_remappedPS[0].z)) + intBitsToFloat(uf_remappedPS[0].w);
R3f.w = mul_nonIEEE(R0f.x, R4f.x);
PV1f.w = R3f.w;
PS1f = 1.0 / R2f.w;
// 2
R2f.x = R2f.z * PS1f;
R2f.y = mul_nonIEEE(R0f.y, R4f.y);
R5f.z = -(PV1f.w) + intBitsToFloat(uf_remappedPS[1].x);
R2f.w = mul_nonIEEE(R4f.w, R1f.w);
tempResultf = 1.0 / sqrt(R127f.z);
R1f.w = tempResultf;
PS0f = R1f.w;
R2f.z = (texture(textureUnitPS4, R5f.xy).x);
// 0
backupReg0f = R0f.z;
PV0f.x = mul_nonIEEE(R1f.x, R1f.w);
PV0f.y = mul_nonIEEE(R1f.y, R1f.w);
PV0f.z = mul_nonIEEE(R1f.z, R1f.w);
R123f.w = (mul_nonIEEE(R2f.x,intBitsToFloat(uf_remappedPS[2].w)) + -(intBitsToFloat(uf_remappedPS[2].y)));
PV0f.w = R123f.w;
R1f.x = mul_nonIEEE(backupReg0f, R4f.z);
PS0f = R1f.x;
// 1
tempf.x = dot(vec4(R6f.x,R6f.y,R6f.z,-0.0),vec4(PV0f.x,PV0f.y,PV0f.z,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
PS1f = 1.0 / PV0f.w;
// 2
PV0f.x = max(PV1f.x, -(PV1f.x));
PV0f.y = -(intBitsToFloat(uf_remappedPS[2].z)) * PS1f;
R127f.z = mul_nonIEEE(R0f.w, R2f.w);
R127f.z = clamp(R127f.z, 0.0, 1.0);
R123f.w = (mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].w),R2f.z) + intBitsToFloat(uf_remappedPS[2].x));
PV0f.w = R123f.w;
R127f.y = 1.0 / R3f.z;
PS0f = R127f.y;
// 3
R127f.x = (mul_nonIEEE(R5f.z,R9f.y) + R3f.w);
PV1f.x = R127f.x;
PV1f.z = -(PV0f.y) + PV0f.w;
PV1f.w = PV0f.x + -(intBitsToFloat(uf_remappedPS[0].z));
PS1f = 1.0 / intBitsToFloat(uf_remappedPS[3].y);
// 4
PV0f.x = PV1f.w * R127f.y;
PV0f.x = clamp(PV0f.x, 0.0, 1.0);
PV0f.y = PV1f.z * PS1f;
PV0f.y = clamp(PV0f.y, 0.0, 1.0);
PV0f.z = R8f.x + -(PV1f.x);
// 5
backupReg0f = R127f.x;
R127f.x = mul_nonIEEE(R127f.z, PV0f.y);
R0f.y = (mul_nonIEEE(PV0f.z,R8f.w) + backupReg0f);
R123f.z = (intBitsToFloat(0xc0000000) * PV0f.x + intBitsToFloat(0x40400000));
PV1f.z = R123f.z;
PV1f.w = mul_nonIEEE(PV0f.x, PV0f.x);
// 6
PV0f.y = mul_nonIEEE(PV1f.w, PV1f.z);
// 7
PV1f.x = mul_nonIEEE(R127f.x, PV0f.y);
// 8
PV0f.w = mul_nonIEEE(R3f.x, PV1f.x);
// 9
backupReg0f = R7f.w;
R7f.w = mul_nonIEEE(backupReg0f, PV0f.w);
// 0
PV0f.x = -(R1f.x) + intBitsToFloat(uf_remappedPS[1].z);
PV0f.y = -(R2f.y) + intBitsToFloat(uf_remappedPS[1].y);
// 1
PV1f.x = -(R0f.y) + intBitsToFloat(uf_remappedPS[4].x);
R127f.y = (mul_nonIEEE(PV0f.x,R9f.y) + R1f.x);
PV1f.y = R127f.y;
R127f.z = (mul_nonIEEE(PV0f.y,R9f.y) + R2f.y);
PV1f.z = R127f.z;
// 2
R7f.x = (mul_nonIEEE(PV1f.x,R9f.x) + R0f.y);
PV0f.z = R8f.z + -(PV1f.y);
PV0f.w = R8f.y + -(PV1f.z);
// 3
R127f.x = (mul_nonIEEE(PV0f.w,R8f.w) + R127f.z);
PV1f.x = R127f.x;
R127f.w = (mul_nonIEEE(PV0f.z,R8f.w) + R127f.y);
PV1f.w = R127f.w;
// 4
PV0f.x = -(PV1f.w) + intBitsToFloat(uf_remappedPS[4].z);
PV0f.y = -(PV1f.x) + intBitsToFloat(uf_remappedPS[4].y);
// 5
R7f.y = (mul_nonIEEE(PV0f.y,R9f.x) + R127f.x);
R7f.z = (mul_nonIEEE(PV0f.x,R9f.x) + R127f.w);

// export
if( ((vec4(R7f.x, R7f.y, R7f.z, R7f.w)).a > uf_alphaTestRef) == false) discard;
passPixelColor0 = vec4(R7f.x * basefogred, R7f.y * basefoggreen, R7f.z * basefogblue, R7f.w * basefogopacity); // rgb and opacity
}
