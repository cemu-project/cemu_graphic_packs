#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable

// shader 397f3d8521c96e30 -- ganons castle swirl shader
#define aurafog $aurafog
#define aurared $aurared
#define auragreen $auragreen
#define aurablue $aurablue
#define auraopacity $auraopacity

#ifndef aurafog
    #define aurafog 1
#endif
#ifndef aurared
    #define aurared 1
#endif
#ifndef auragreen
    #define auragreen 1
#endif
#ifndef aurablue
    #define aurablue 1
#endif
#ifndef auraopacity
    #define auraopacity 1
#endif

uniform ivec4 uf_remappedPS[3];
uniform float uf_alphaTestRef;
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x20265000 res 128x128x1 dim 1 tm: 4 format 0034 compSel: 0 0 0 0 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 0 0 0 border: 0
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x202df000 res 256x256x1 dim 1 tm: 4 format 0034 compSel: 0 0 0 0 mipView: 0x0 (num 0x9) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 0 0 0 border: 0
layout(binding = 2) uniform sampler2D textureUnitPS2;// Tex2 addr 0x1bf70000 res 256x256x1 dim 1 tm: 4 format 0035 compSel: 0 0 0 1 mipView: 0x0 (num 0x9) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 0 0 0 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem4;
layout(location = 3) in vec4 passParameterSem5;
layout(location = 4) in vec4 passParameterSem7;
layout(location = 5) in vec4 passParameterSem8;
layout(location = 6) in vec4 passParameterSem9;
layout(location = 7) in vec4 passParameterSem12;
layout(location = 8) in vec4 passParameterSem14;
layout(location = 9) in vec4 passParameterSem15;
layout(location = 10) in vec4 passParameterSem16;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R8f = vec4(0.0);
vec4 R9f = vec4(0.0);
vec4 R10f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;

R0f = passParameterSem0;
R1f = passParameterSem1;
R2f = passParameterSem4;
R3f = passParameterSem5;
R4f = passParameterSem7;
R5f = passParameterSem8;
R6f = passParameterSem9;
R7f = passParameterSem12;
R8f = passParameterSem14;
R9f = passParameterSem15;
R10f = passParameterSem16;
R3f.xw = (texture(textureUnitPS0, R5f.xy).xw);

// 0
R123f.x = (R3f.x * 2.0 + -(1.0));
PV0f.x = R123f.x;
PV0f.y = 1.0;
R123f.w = (R3f.w * 2.0 + -(1.0));
PV0f.w = R123f.w;
// 1
PV1f.x = mul_nonIEEE(PV0f.y, intBitsToFloat(uf_remappedPS[0].w));
PV1f.y = mul_nonIEEE(R3f.y, PV0f.w);
PV1f.z = mul_nonIEEE(R2f.y, PV0f.x);
// 2
R3f.x = (mul_nonIEEE(R3f.z,PV1f.z) + R6f.x);
R3f.y = (mul_nonIEEE(R3f.z,PV1f.y) + R6f.y);
R3f.z = R5f.z + PV1f.z;
R3f.w = R5f.w + PV1f.y;
R5f.x = (mul_nonIEEE(R7f.z,intBitsToFloat(uf_remappedPS[0].z)) + PV1f.x);
PS0f = R5f.x;
R6f.xw = (texture(textureUnitPS2, R3f.xy).xw); // how shiny ganons spirit
R3f.x = (texture(textureUnitPS1, R3f.zw).w);
// 0
tempf.x = dot(vec4(R7f.x,R7f.y,R5f.x,0.0),vec4(intBitsToFloat(uf_remappedPS[0].x),intBitsToFloat(uf_remappedPS[0].y),1.0,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
PS0f = mul_nonIEEE(R6f.w, R6f.w);
// 1
PV1f.x = mul_nonIEEE(R6f.x, R6f.x);
R127f.y = mul_nonIEEE(R4f.w, R3f.x);
PV1f.y = R127f.y;
PV1f.z = mul_nonIEEE(R4f.w, PS0f);
PV1f.w = -(PV0f.x) + intBitsToFloat(0xc2c80000);
// 2
R127f.x = mul_nonIEEE(PV1f.z, PV1f.y);
R126f.y = -(R0f.w) + PV1f.y;
R126f.y = clamp(R126f.y, 0.0, 1.0);
R127f.z = PV1f.w * intBitsToFloat(0x3ba3d70a);
R127f.z = clamp(R127f.z, 0.0, 1.0);
PV0f.z = R127f.z;
PV0f.w = mul_nonIEEE(R4f.w, PV1f.x);
// 3
backupReg0f = R0f.x;
backupReg1f = R0f.y;
PV1f.x = mul_nonIEEE(R0f.z, PV0f.z);
PV1f.y = mul_nonIEEE(backupReg0f, PV0f.z);
PV1f.z = mul_nonIEEE(backupReg1f, PV0f.z);
R126f.w = mul_nonIEEE(PV0f.w, R127f.y);
R127f.w = mul_nonIEEE(R1f.x, PV0f.z);
PS1f = R127f.w;
// 4
R123f.x = (mul_nonIEEE(PV1f.x,R127f.x) + intBitsToFloat(0x3d23d70a));
PV0f.x = R123f.x;
R123f.y = (mul_nonIEEE(PV1f.z,R127f.x) + intBitsToFloat(0x3c75c28f));
PV0f.y = R123f.y;
R123f.z = (mul_nonIEEE(PV1f.y,R127f.x) + intBitsToFloat(0x3c75c28f));
PV0f.z = R123f.z;
PV0f.w = mul_nonIEEE(R1f.y, R127f.z);
PS0f = mul_nonIEEE(R1f.z, R127f.z);
// 5
R127f.x = (mul_nonIEEE(R126f.w,R127f.w) + PV0f.z);
PV1f.x = R127f.x;
PV1f.y = mul_nonIEEE(R1f.w, R126f.y);
PV1f.y = clamp(PV1f.y, 0.0, 1.0);
R127f.z = (mul_nonIEEE(R126f.w,PS0f) + PV0f.x);
PV1f.z = R127f.z;
R127f.w = (mul_nonIEEE(R126f.w,PV0f.w) + PV0f.y);
PV1f.w = R127f.w;
// 6
PV0f.x = -(PV1f.z) + intBitsToFloat(uf_remappedPS[1].z);
PV0f.y = -(PV1f.w) + intBitsToFloat(uf_remappedPS[1].y);
PV0f.z = -(PV1f.x) + intBitsToFloat(uf_remappedPS[1].x);
PV0f.w = mul_nonIEEE(R2f.x, PV1f.y);
// 7
backupReg0f = R8f.w;
R126f.y = (mul_nonIEEE(PV0f.x,R10f.y) + R127f.z);
PV1f.y = R126f.y;
R127f.z = (mul_nonIEEE(PV0f.y,R10f.y) + R127f.w);
PV1f.z = R127f.z;
R127f.w = (mul_nonIEEE(PV0f.z,R10f.y) + R127f.x);
PV1f.w = R127f.w;
R8f.w = mul_nonIEEE(backupReg0f, PV0f.w);
PS1f = R8f.w;

// 8
R9f = vec4(aurafog); // custom code - reinitilize the vector to set fog to 0 ------------------------------<<<<
PV0f.x = R9f.x + -(PV1f.w); // R9f looks like to be the fog
PV0f.z = R9f.z + -(PV1f.y); // R9f looks like to be the fog
PV0f.w = R9f.y + -(PV1f.z); // R9f looks like to be the fog

// 9
backupReg0f = R126f.y;
R127f.x = (mul_nonIEEE(PV0f.w,R9f.w) + R127f.z);
PV1f.x = R127f.x;
R126f.y = (mul_nonIEEE(PV0f.x,R9f.w) + R127f.w);
PV1f.y = R126f.y;
R127f.w = (mul_nonIEEE(PV0f.z,R9f.w) + backupReg0f);
PV1f.w = R127f.w;
// 10
PV0f.x = -(PV1f.w) + intBitsToFloat(uf_remappedPS[2].z);
PV0f.y = -(PV1f.x) + intBitsToFloat(uf_remappedPS[2].y);
PV0f.z = -(PV1f.y) + intBitsToFloat(uf_remappedPS[2].x);
// 11
R8f.x = (mul_nonIEEE(PV0f.z,R10f.x) + R126f.y);
R8f.y = (mul_nonIEEE(PV0f.y,R10f.x) + R127f.x);
R8f.z = (mul_nonIEEE(PV0f.x,R10f.x) + R127f.w);
// export
if( ((vec4(R8f.x, R8f.y, R8f.z, R8f.w)).a > uf_alphaTestRef) == false) discard;
passPixelColor0 = vec4(R8f.x * aurared, R8f.y * auragreen, R8f.z * aurablue, R8f.w * auraopacity); // rgb color for the top swirls effect
}
