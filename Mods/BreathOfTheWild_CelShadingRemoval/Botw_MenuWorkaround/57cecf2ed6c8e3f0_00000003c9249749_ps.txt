#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
#ifdef VULKAN
#define ATTR_LAYOUT(__vkSet, __location) layout(set = __vkSet, location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation)
#define SET_POSITION(_v) gl_Position = _v; gl_Position.z = (gl_Position.z + gl_Position.w) / 2.0
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale.xy,gl_FragCoord.zw)
#define gl_VertexID gl_VertexIndex
#define gl_InstanceID gl_InstanceIndex
#else
#define ATTR_LAYOUT(__vkSet, __location) layout(location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation, std140) 
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation)
#define SET_POSITION(_v) gl_Position = _v
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw)
#endif
/* This shaders was auto-converted from OpenGL to Cemu.
Conversion output:
*/


// shader 57cecf2ed6c8e3f0 -- -- Fragment Shader where links gets drawn in the menu

#ifdef VULKAN
layout(set = 1, binding = 10) uniform ufBlock
{
uniform ivec4 uf_remappedPS[29];
uniform vec4 uf_fragCoordScale;
};
#else
uniform ivec4 uf_remappedPS[29];
uniform vec2 uf_fragCoordScale;
#endif
TEXTURE_LAYOUT(2, 1, 0) uniform sampler2D textureUnitPS2;
TEXTURE_LAYOUT(3, 1, 1) uniform sampler2D textureUnitPS3;
TEXTURE_LAYOUT(5, 1, 2) uniform sampler2D textureUnitPS5;
TEXTURE_LAYOUT(6, 1, 3) uniform sampler2D textureUnitPS6;
TEXTURE_LAYOUT(7, 1, 4) uniform sampler2D textureUnitPS7;
TEXTURE_LAYOUT(8, 1, 5) uniform sampler2D textureUnitPS8;
TEXTURE_LAYOUT(9, 1, 6) uniform samplerCubeArray textureUnitPS9;
TEXTURE_LAYOUT(10, 1, 7) uniform sampler2DArrayShadow textureUnitPS10;
TEXTURE_LAYOUT(12, 1, 8) uniform sampler2D textureUnitPS12;
TEXTURE_LAYOUT(17, 1, 9) uniform sampler2D textureUnitPS17;
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem4;
layout(location = 3) in vec4 passParameterSem5;
layout(location = 4) in vec4 passParameterSem6;
layout(location = 0) out vec4 passPixelColor0;
// uf_fragCoordScale was moved to the ufBlock
void redcCUBE(vec4 src0, vec4 src1, out vec3 stm, out int faceId)
{
// stm -> x .. s, y .. t, z .. MajorAxis*2.0
vec3 inputCoord = normalize(vec3(src1.y, src1.x, src0.x));
float rx = inputCoord.x;
float ry = inputCoord.y;
float rz = inputCoord.z;
if( abs(rx) > abs(ry) && abs(rx) > abs(rz) )
{
stm.z = rx*2.0;
stm.xy = vec2(ry,rz);	
if( rx >= 0.0 )
{
faceId = 0;
}
else
{
faceId = 1;
}
}
else if( abs(ry) > abs(rx) && abs(ry) > abs(rz) )
{
stm.z = ry*2.0;
stm.xy = vec2(rx,rz);	
if( ry >= 0.0 )
{
faceId = 2;
}
else
{
faceId = 3;
}
}
else //if( abs(rz) > abs(ry) && abs(rz) > abs(rx) )
{
stm.z = rz*2.0;
stm.xy = vec2(rx,ry);	
if( rz >= 0.0 )
{
faceId = 4;
}
else
{
faceId = 5;
}
}
}
vec3 redcCUBEReverse(vec2 st, int faceId)
{
st.yx = st.xy;
vec3 v;
float majorAxis = 1.0;
if( faceId == 0 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = 1.0;
}
else if( faceId == 1 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = -1.0;
}
else if( faceId == 2 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = 1.0;
}
else if( faceId == 3 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = -1.0;
}
else if( faceId == 4 )
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = 1.0;
}
else
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = -1.0;
}
return v;
}
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R7i = ivec4(0);
ivec4 R8i = ivec4(0);
ivec4 R9i = ivec4(0);
ivec4 R10i = ivec4(0);
ivec4 R11i = ivec4(0);
ivec4 R12i = ivec4(0);
ivec4 R13i = ivec4(0);
ivec4 R14i = ivec4(0);
ivec4 R15i = ivec4(0);
ivec4 R16i = ivec4(0);
ivec4 R17i = ivec4(0);
ivec4 R18i = ivec4(0);
ivec4 R19i = ivec4(0);
ivec4 R20i = ivec4(0);
ivec4 R21i = ivec4(0);
ivec4 R22i = ivec4(0);
ivec4 R23i = ivec4(0);
ivec4 R24i = ivec4(0);
ivec4 R25i = ivec4(0);
ivec4 R26i = ivec4(0);
ivec4 R122i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R124i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
float cubeMapArrayIndex9 = 0.0;

R0i = floatBitsToInt(passParameterSem0);
R1i = floatBitsToInt(passParameterSem1);
R2i = floatBitsToInt(passParameterSem4);
R3i = floatBitsToInt(passParameterSem5);
R4i = floatBitsToInt(passParameterSem6);

R5i.w = floatBitsToInt(texture(textureUnitPS5, intBitsToFloat(R0i.xy)).x);
R8i.xyzw = floatBitsToInt(texture(textureUnitPS3, intBitsToFloat(R4i.zw)).xyzw);
R6i.xyzw = floatBitsToInt(textureGather(textureUnitPS7, intBitsToFloat(R0i.xy)).xyzw);
R7i.xyzw = floatBitsToInt(textureGather(textureUnitPS8, intBitsToFloat(R0i.xy)).xyzw);
R4i.xyzw = floatBitsToInt(texture(textureUnitPS2, intBitsToFloat(R4i.zw)).xyzw);

// 0
R127i.x = floatBitsToInt((intBitsToFloat(R8i.x) * 2.0 + -(1.0)));
R127i.y = floatBitsToInt((intBitsToFloat(R8i.y) * 2.0 + -(1.0)));
R127i.z = floatBitsToInt((intBitsToFloat(R8i.z) * 2.0 + -(1.0)));
R124i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.w),intBitsToFloat(uf_remappedPS[0].x)) + intBitsToFloat(uf_remappedPS[1].x)));
PV0i.w = R124i.w;
R125i.x = floatBitsToInt(-(intBitsToFloat(R5i.w)) + intBitsToFloat(R6i.x));
PS0i = R125i.x;
// 1
R20i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.z), -(intBitsToFloat(PV0i.w))));
PV1i.x = R20i.x;
R10i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.w), -(intBitsToFloat(PV0i.w))));
R9i.z = floatBitsToInt(-(intBitsToFloat(PV0i.w)));
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(uf_remappedPS[2].y)));
R125i.w = floatBitsToInt(-(intBitsToFloat(R5i.w)) + intBitsToFloat(R6i.y));
PS1i = R125i.w;
// 2
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(R127i.y),intBitsToFloat(R127i.z),-0.0),vec4(intBitsToFloat(R127i.x),intBitsToFloat(R127i.y),intBitsToFloat(R127i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(uf_remappedPS[3].x)));
PS0i = R126i.x;
// 3
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R20i.x),intBitsToFloat(R10i.y),intBitsToFloat(R9i.z),-0.0),vec4(intBitsToFloat(R20i.x),intBitsToFloat(R10i.y),intBitsToFloat(R9i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.x));
PS1i = floatBitsToInt(tempResultf);
// 4
R21i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(PS1i)));
R13i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), intBitsToFloat(PS1i)));
R12i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(PS1i)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R20i.x), intBitsToFloat(uf_remappedPS[4].x)));
PS0i = floatBitsToInt(sqrt(intBitsToFloat(PV1i.x)));
// 5
R127i.x = floatBitsToInt(-(intBitsToFloat(R5i.w)) + intBitsToFloat(R6i.w));
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R10i.y),intBitsToFloat(uf_remappedPS[4].y)) + intBitsToFloat(PV0i.w)));
PV1i.y = R123i.y;
R126i.z = floatBitsToInt(-(intBitsToFloat(R5i.w)) + intBitsToFloat(R6i.z));
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R10i.y),intBitsToFloat(uf_remappedPS[3].y)) + intBitsToFloat(R126i.x)));
PV1i.w = R123i.w;
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PS0i));
// 6
R126i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R124i.w)),intBitsToFloat(uf_remappedPS[4].z)) + intBitsToFloat(PV1i.y)));
R12i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R20i.x), intBitsToFloat(PS1i)));
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R124i.w)),intBitsToFloat(uf_remappedPS[3].z)) + intBitsToFloat(PV1i.w)));
PV0i.z = R123i.z;
R12i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R10i.y), intBitsToFloat(PS1i)));
R10i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R9i.z), intBitsToFloat(PS1i)));
PS0i = R10i.z;
// 7
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R8i.x),intBitsToFloat(R8i.y),intBitsToFloat(R8i.z),-0.0),vec4(intBitsToFloat(0x3eaaaaab),intBitsToFloat(0x3eaaaaab),intBitsToFloat(0x3eaaaaab),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R126i.w = tempi.x;
R6i.x = floatBitsToInt(intBitsToFloat(uf_remappedPS[3].w) + intBitsToFloat(PV0i.z));
PS1i = R6i.x;
// 8
backupReg0i = R126i.x;
backupReg1i = R127i.w;
R126i.x = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + intBitsToFloat(R7i.x));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R20i.x), intBitsToFloat(uf_remappedPS[5].x)));
R6i.z = floatBitsToInt(intBitsToFloat(uf_remappedPS[4].w) + intBitsToFloat(backupReg0i));
R127i.w = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + intBitsToFloat(R7i.y));
R127i.z = floatBitsToInt(1.0 / intBitsToFloat(backupReg1i));
R127i.z = floatBitsToInt(intBitsToFloat(R127i.z) * 2.0);
PS0i = R127i.z;
// 9
R7i.x = floatBitsToInt(roundEven(0.0));
R127i.y = floatBitsToInt(-(intBitsToFloat(R126i.w)) + intBitsToFloat(R7i.w));
R125i.z = floatBitsToInt(-(intBitsToFloat(R126i.w)) + intBitsToFloat(R7i.z));
R6i.w = 0;
R124i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R10i.y),intBitsToFloat(uf_remappedPS[5].y)) + intBitsToFloat(PV0i.y)));
PS1i = R124i.x;
// 10
backupReg0i = R125i.w;
backupReg0i = R125i.w;
backupReg1i = R127i.x;
backupReg1i = R127i.x;
R127i.x = floatBitsToInt(max(intBitsToFloat(R125i.x), -(intBitsToFloat(R125i.x))));
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].x), intBitsToFloat(R127i.z)));
R127i.z = floatBitsToInt(max(intBitsToFloat(R126i.z), -(intBitsToFloat(R126i.z))));
R125i.w = floatBitsToInt(max(intBitsToFloat(backupReg0i), -(intBitsToFloat(backupReg0i))));
R125i.y = floatBitsToInt(max(intBitsToFloat(backupReg1i), -(intBitsToFloat(backupReg1i))));
PS0i = R125i.y;
// 11
backupReg0i = R126i.x;
backupReg0i = R126i.x;
backupReg1i = R127i.y;
backupReg1i = R127i.y;
backupReg2i = R125i.z;
backupReg2i = R125i.z;
R126i.x = floatBitsToInt(max(intBitsToFloat(backupReg0i), -(intBitsToFloat(backupReg0i))));
R126i.x = floatBitsToInt(intBitsToFloat(R126i.x) * 4.0);
R127i.y = floatBitsToInt(max(intBitsToFloat(backupReg1i), -(intBitsToFloat(backupReg1i))));
R127i.y = floatBitsToInt(intBitsToFloat(R127i.y) * 4.0);
R125i.z = floatBitsToInt(max(intBitsToFloat(backupReg2i), -(intBitsToFloat(backupReg2i))));
R125i.z = floatBitsToInt(intBitsToFloat(R125i.z) * 4.0);
PV1i.w = floatBitsToInt(max(intBitsToFloat(R127i.w), -(intBitsToFloat(R127i.w))));
PV1i.w = floatBitsToInt(intBitsToFloat(PV1i.w) * 4.0);
R14i.z = R7i.x;
PS1i = R14i.z;
// 12
backupReg0i = R125i.w;
R5i.x = floatBitsToInt((intBitsToFloat(R6i.x) * intBitsToFloat(0x38d1b717) + 0.5));
R5i.y = floatBitsToInt((intBitsToFloat(R6i.z) * intBitsToFloat(0x3903126f) + 0.5));
R15i.z = R7i.x;
R123i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R124i.w)),intBitsToFloat(uf_remappedPS[5].z)) + intBitsToFloat(R124i.x)));
PV0i.w = R123i.w;
R125i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.y),intBitsToFloat(backupReg0i)) + intBitsToFloat(PV1i.w)));
PS0i = R125i.w;
// 13
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.y),intBitsToFloat(R127i.x)) + intBitsToFloat(R126i.x)));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.y),intBitsToFloat(R125i.y)) + intBitsToFloat(R127i.y)));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.y),intBitsToFloat(R127i.z)) + intBitsToFloat(R125i.z)));
PV1i.z = R123i.z;
R7i.w = floatBitsToInt(intBitsToFloat(uf_remappedPS[5].w) + intBitsToFloat(PV0i.w));
R16i.z = R7i.x;
PS1i = R16i.z;
// 14
R127i.x = floatBitsToInt(-(intBitsToFloat(R125i.w)) + intBitsToFloat(PV1i.y));
PV0i.x = R127i.x;
R7i.y = 0x3f800000;
R17i.z = R7i.x;
R125i.w = floatBitsToInt(intBitsToFloat(PV1i.x) + -(intBitsToFloat(PV1i.z)));
PV0i.w = R125i.w;
R11i.w = uf_remappedPS[6].z;
PS0i = R11i.w;
// 15
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R21i.x),intBitsToFloat(R13i.y),intBitsToFloat(R12i.z),-0.0),vec4(intBitsToFloat(R12i.y),intBitsToFloat(R12i.w),intBitsToFloat(R10i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R125i.z = tempi.x;
R127i.z = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(PV0i.w));
PS1i = R127i.z;
// 16
backupReg0i = R127i.x;
R127i.x = floatBitsToInt(fract(intBitsToFloat(R2i.x)));
PV0i.x = R127i.x;
PV0i.y = floatBitsToInt(intBitsToFloat(backupReg0i) + -(intBitsToFloat(R125i.w)));
R5i.z = floatBitsToInt(-(intBitsToFloat(uf_remappedPS[6].w)));
R125i.w = floatBitsToInt(fract(intBitsToFloat(R2i.y)));
PV0i.w = R125i.w;
PS0i = R21i.x;
PS0i = floatBitsToInt(intBitsToFloat(PS0i) * 2.0);
// 17
PV1i.x = R12i.z;
PV1i.x = floatBitsToInt(intBitsToFloat(PV1i.x) * 2.0);
PV1i.y = floatBitsToInt(intBitsToFloat(PV0i.y) + intBitsToFloat(PV0i.w));
PV1i.y = clampFI32(PV1i.y);
PV1i.z = floatBitsToInt(intBitsToFloat(R127i.z) + intBitsToFloat(PV0i.x));
PV1i.z = clampFI32(PV1i.z);
PV1i.w = R13i.y;
PV1i.w = floatBitsToInt(intBitsToFloat(PV1i.w) * 2.0);
R7i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R125i.z)),intBitsToFloat(PS0i)) + intBitsToFloat(R12i.y)));
PS1i = R7i.x;
// 18
R10i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R125i.z)),intBitsToFloat(PV1i.x)) + intBitsToFloat(R10i.z)));
R6i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R125i.z)),intBitsToFloat(PV1i.w)) + intBitsToFloat(R12i.w)));
PV0i.z = floatBitsToInt(-(intBitsToFloat(R125i.w)) + intBitsToFloat(PV1i.y));
PV0i.w = floatBitsToInt(-(intBitsToFloat(R127i.x)) + intBitsToFloat(PV1i.z));
R9i.w = floatBitsToInt(-(intBitsToFloat(R9i.z)) * intBitsToFloat(0x3ba3d70a));
PS0i = R9i.w;
// 19
R2i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.z),intBitsToFloat(PV0i.w)) + intBitsToFloat(R0i.x)));
R2i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.w),intBitsToFloat(PV0i.z)) + intBitsToFloat(R0i.y)));
R2i.z = floatBitsToInt(intBitsToFloat(R4i.w) * intBitsToFloat(0x437f0000));
R18i.w = floatBitsToInt((-(intBitsToFloat(R8i.w)) * intBitsToFloat(0x40400000) + intBitsToFloat(0x40400000)));
R2i.w = floatBitsToInt(max(-(intBitsToFloat(R125i.z)), 0.0));
PS1i = R2i.w;
// 20
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(uf_remappedPS[7].x),intBitsToFloat(uf_remappedPS[7].y),intBitsToFloat(uf_remappedPS[7].z),-0.0),vec4(intBitsToFloat(R7i.x),intBitsToFloat(R6i.y),intBitsToFloat(R10i.x),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R5i.w = floatBitsToInt(-(intBitsToFloat(R8i.w)) + 1.0);
PS0i = R5i.w;
// 21
R11i.x = floatBitsToInt(dot(vec4(intBitsToFloat(uf_remappedPS[8].x),intBitsToFloat(uf_remappedPS[8].y),intBitsToFloat(uf_remappedPS[8].z),-0.0),vec4(intBitsToFloat(R7i.x),intBitsToFloat(R6i.y),intBitsToFloat(R10i.x),0.0)));
PV1i.x = R11i.x;
PV1i.y = R11i.x;
PV1i.z = R11i.x;
PV1i.w = R11i.x;
R11i.z = floatBitsToInt(-(intBitsToFloat(PV0i.x)));
PS1i = R11i.z;
// 0
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R6i.x),intBitsToFloat(R7i.w),intBitsToFloat(R6i.z),intBitsToFloat(R7i.y)),vec4(intBitsToFloat(uf_remappedPS[9].x),intBitsToFloat(uf_remappedPS[9].y),intBitsToFloat(uf_remappedPS[9].z),intBitsToFloat(uf_remappedPS[9].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R10i.w = 0;
PS0i = R10i.w;
// 1
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R6i.x),intBitsToFloat(R7i.w),intBitsToFloat(R6i.z),intBitsToFloat(R7i.y)),vec4(intBitsToFloat(uf_remappedPS[10].x),intBitsToFloat(uf_remappedPS[10].y),intBitsToFloat(uf_remappedPS[10].z),intBitsToFloat(uf_remappedPS[10].w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R127i.y = floatBitsToInt(1.0 / intBitsToFloat(PV0i.x));
PS1i = R127i.y;
// 2
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R6i.x),intBitsToFloat(R7i.w),intBitsToFloat(R6i.z),intBitsToFloat(R7i.y)),vec4(intBitsToFloat(uf_remappedPS[11].x),intBitsToFloat(uf_remappedPS[11].y),intBitsToFloat(uf_remappedPS[11].z),intBitsToFloat(uf_remappedPS[11].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R9i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(PS1i)));
PS0i = R9i.x;
// 3
R127i.x = floatBitsToInt(intBitsToFloat(R12i.y) + intBitsToFloat(uf_remappedPS[12].x));
PV1i.x = R127i.x;
R9i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(R127i.y)));
R125i.z = floatBitsToInt(intBitsToFloat(R12i.w) + intBitsToFloat(uf_remappedPS[12].y));
PV1i.z = R125i.z;
R125i.w = floatBitsToInt(intBitsToFloat(R10i.z) + intBitsToFloat(uf_remappedPS[12].z));
PV1i.w = R125i.w;
R127i.w = int(intBitsToFloat(R2i.z));
PS1i = R127i.w;
// 4
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.z),intBitsToFloat(PV1i.w),-0.0),vec4(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.z),intBitsToFloat(PV1i.w),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.z = floatBitsToInt(min(intBitsToFloat(R2i.w), 1.0));
PS0i = R127i.z;
// 5
R126i.x = floatBitsToInt((intBitsToFloat(R5i.w) * 0.5 + 0.5));
R127i.y = floatBitsToInt(-(intBitsToFloat(PS0i)) + 1.0);
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R8i.w)),intBitsToFloat(R5i.w)) + intBitsToFloat(R5i.w)));
PV1i.z = R123i.z;
R13i.w = 0;
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.x));
PS1i = floatBitsToInt(tempResultf);
// 6
R6i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.w), intBitsToFloat(PS1i)));
PV0i.y = R127i.w & 0x000000fc;
R2i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.z), intBitsToFloat(PS1i)));
R5i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(PS1i)));
PS0i = floatBitsToInt(intBitsToFloat(PV1i.z) + intBitsToFloat(0x3c23d70a));
PS0i = clampFI32(PS0i);
// 7
R12i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(PS0i)));
R20i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.x), intBitsToFloat(R126i.x)));
R20i.y = floatBitsToInt(intBitsToFloat(R20i.y) / 2.0);
PV1i.y = R20i.y;
R123i.z = floatBitsToInt((-(intBitsToFloat(R8i.w)) * intBitsToFloat(0x40400000) + 4.0));
PV1i.z = R123i.z;
R125i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R127i.z)),intBitsToFloat(R127i.y)) + intBitsToFloat(R127i.y)));
PV1i.w = R125i.w;
PS1i = floatBitsToInt(float(PV0i.y));
// 8
R24i.x = floatBitsToInt(intBitsToFloat(PS1i) * intBitsToFloat(0x3b820821));
PV0i.x = R24i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.z),-(intBitsToFloat(PV1i.y))) + intBitsToFloat(R127i.z)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R127i.z)),intBitsToFloat(PV1i.w)) + intBitsToFloat(PV1i.w)));
PV0i.z = R123i.z;
R2i.w = floatBitsToInt(intBitsToFloat(uf_remappedPS[13].x) + -(intBitsToFloat(uf_remappedPS[14].x)));
R124i.w = floatBitsToInt(1.0 / intBitsToFloat(PV1i.z));
PS0i = R124i.w;
// 9
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.w), intBitsToFloat(PV0i.z)));
R123i.y = floatBitsToInt((-(intBitsToFloat(PV0i.x)) * intBitsToFloat(0x3d23d70a) + intBitsToFloat(0x3d23d70a)));
PV1i.y = R123i.y;
R8i.z = floatBitsToInt((intBitsToFloat(PV0i.x) * 0.25 + 0.25));
R7i.w = floatBitsToInt(intBitsToFloat(uf_remappedPS[13].y) + -(intBitsToFloat(uf_remappedPS[14].y)));
R125i.w = floatBitsToInt(intBitsToFloat(R20i.y) + intBitsToFloat(PV0i.y));
PS1i = R125i.w;
// 10
R13i.x = floatBitsToInt(intBitsToFloat(uf_remappedPS[13].z) + -(intBitsToFloat(uf_remappedPS[14].z)));
R21i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.y),intBitsToFloat(R24i.x)) + intBitsToFloat(PV1i.y)));
PV0i.y = R21i.y;
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(R124i.w)));
PV0i.z = R127i.z;
R19i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.x),intBitsToFloat(R24i.x)) + intBitsToFloat(PV1i.y)));
PV0i.w = R19i.w;
R22i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.z),intBitsToFloat(R24i.x)) + intBitsToFloat(PV1i.y)));
PS0i = R22i.x;
// 11
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PS0i),-(intBitsToFloat(PV0i.z))) + intBitsToFloat(PS0i)));
PV1i.x = R123i.x;
R22i.y = floatBitsToInt((intBitsToFloat(R4i.x) * intBitsToFloat(0x3f895ef0) + intBitsToFloat(0xba0a8ec8)));
R22i.y = clampFI32(R22i.y);
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),-(intBitsToFloat(PV0i.z))) + intBitsToFloat(PV0i.y)));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),-(intBitsToFloat(PV0i.z))) + intBitsToFloat(PV0i.w)));
PV1i.w = R123i.w;
PS1i = floatBitsToInt(1.0 / intBitsToFloat(R125i.w));
// 12
R23i.x = floatBitsToInt(0.25 * intBitsToFloat(PS1i));
R7i.y = floatBitsToInt(intBitsToFloat(R127i.z) + intBitsToFloat(PV1i.w));
R6i.z = floatBitsToInt(intBitsToFloat(R127i.z) + intBitsToFloat(PV1i.x));
R8i.w = floatBitsToInt(intBitsToFloat(R127i.z) + intBitsToFloat(PV1i.z));
R13i.z = floatBitsToInt((intBitsToFloat(R4i.y) * intBitsToFloat(0x3f895ef0) + intBitsToFloat(0xba0a8ec8)));
R13i.z = clampFI32(R13i.z);
PS0i = R13i.z;
// 13
R25i.x = floatBitsToInt((intBitsToFloat(R4i.z) * intBitsToFloat(0x3f895ef0) + intBitsToFloat(0xba0a8ec8)));
R25i.x = clampFI32(R25i.x);
R4i.y = R0i.y;
R7i.z = 0;
PV1i.w = R127i.w & int(1);
R4i.x = floatBitsToInt(intBitsToFloat(R0i.x) + intBitsToFloat(uf_remappedPS[6].z));
PS1i = R4i.x;
// 14
R8i.x = R0i.x;
R8i.y = floatBitsToInt(intBitsToFloat(R0i.y) + intBitsToFloat(uf_remappedPS[6].w));
R26i.w = floatBitsToInt(float(PV1i.w));
PS0i = R26i.w;
R4i.z = floatBitsToInt(texture(textureUnitPS5, intBitsToFloat(R4i.xy)).x);
R8i.y = floatBitsToInt(texture(textureUnitPS5, intBitsToFloat(R8i.xy)).x);
R19i.xyz = floatBitsToInt(textureLod(textureUnitPS17, intBitsToFloat(R5i.xy),0.0).xyz);
R9i.w = floatBitsToInt(textureLod(textureUnitPS6, intBitsToFloat(R9i.xy),intBitsToFloat(R9i.w)).x);
R2i.x = floatBitsToInt(texture(textureUnitPS12, intBitsToFloat(R2i.xy)).w);
// 0
backupReg0i = R2i.x;
backupReg0i = R2i.x;
backupReg0i = R2i.x;
R2i.x = floatBitsToInt((intBitsToFloat(backupReg0i) * 0.5 + 0.5));
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].x),intBitsToFloat(R8i.y)) + intBitsToFloat(uf_remappedPS[1].x)));
PV0i.y = R127i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].x),intBitsToFloat(R4i.z)) + intBitsToFloat(uf_remappedPS[1].x)));
PV0i.z = R123i.z;
R125i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),-(intBitsToFloat(R8i.z))) + intBitsToFloat(backupReg0i)));
// 1
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.x), -(intBitsToFloat(PV0i.z))));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), -(intBitsToFloat(PV0i.y))));
PV1i.z = floatBitsToInt(-(intBitsToFloat(PV0i.z)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.y), -(intBitsToFloat(PV0i.z))));
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.w), -(intBitsToFloat(PV0i.y))));
PS1i = R126i.x;
// 2
backupReg0i = R127i.y;
R127i.xyz = floatBitsToInt(vec3(-(intBitsToFloat(R9i.z)),-(intBitsToFloat(R10i.y)),-(intBitsToFloat(R20i.x))) + vec3(intBitsToFloat(PV1i.z),intBitsToFloat(PV1i.w),intBitsToFloat(PV1i.x)));
PV0i.x = R127i.x;
PV0i.w = floatBitsToInt(-(intBitsToFloat(backupReg0i)));
R127i.w = floatBitsToInt(-(intBitsToFloat(R20i.x)) + intBitsToFloat(PV1i.y));
PS0i = R127i.w;
// 3
R3i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.w), intBitsToFloat(uf_remappedPS[15].w)));
PV1i.y = floatBitsToInt(-(intBitsToFloat(R9i.z)) + intBitsToFloat(PV0i.w));
R125i.z = floatBitsToInt(-(intBitsToFloat(R10i.y)) + intBitsToFloat(R126i.x));
PV1i.z = R125i.z;
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(PS0i)));
R3i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.z), intBitsToFloat(uf_remappedPS[15].w)));
PS1i = R3i.y;
// 4
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), intBitsToFloat(PV1i.y)));
R126i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.y)),intBitsToFloat(R127i.z)) + intBitsToFloat(PV1i.w)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(PV1i.z)));
R5i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.x), intBitsToFloat(uf_remappedPS[15].w)));
R125i.x = uf_remappedPS[16].y;
PS0i = R125i.x;
// 5
backupReg0i = R127i.x;
R127i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R125i.z)),intBitsToFloat(backupReg0i)) + intBitsToFloat(PV0i.x)));
PV1i.x = R127i.x;
R125i.y = uf_remappedPS[17].y;
R125i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R127i.w)),intBitsToFloat(R127i.y)) + intBitsToFloat(PV0i.z)));
PV1i.z = R125i.z;
R124i.w = uf_remappedPS[18].y;
R127i.w = floatBitsToInt(intBitsToFloat(R8i.z) + intBitsToFloat(R125i.w));
PS1i = R127i.w;
// 6
tempi.x = floatBitsToInt(dot(vec4(-(intBitsToFloat(PV1i.x)),-(intBitsToFloat(R126i.y)),-(intBitsToFloat(PV1i.z)),-0.0),vec4(-(intBitsToFloat(PV1i.x)),-(intBitsToFloat(R126i.y)),-(intBitsToFloat(PV1i.z)),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R6i.x = floatBitsToInt(intBitsToFloat(R9i.w) + intBitsToFloat(uf_remappedPS[19].z));
R6i.x = clampFI32(R6i.x);
PS0i = R6i.x;
// 7
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(uf_remappedPS[20].x),intBitsToFloat(uf_remappedPS[20].y),intBitsToFloat(uf_remappedPS[20].z),-0.0),vec4(intBitsToFloat(R7i.x),intBitsToFloat(R6i.y),intBitsToFloat(R10i.x),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R11i.y = tempi.x;
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.x));
PS1i = floatBitsToInt(tempResultf);
// 8
backupReg0i = R127i.x;
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[15].w), intBitsToFloat(uf_remappedPS[15].w)));
PV0i.y = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(R125i.z)), intBitsToFloat(PS1i)));
PV0i.z = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(R126i.y)), intBitsToFloat(PS1i)));
PV0i.w = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(backupReg0i)), intBitsToFloat(PS1i)));
R8i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.w), intBitsToFloat(R7i.y)));
PS0i = R8i.z;
// 9
R126i.x = floatBitsToInt((intBitsToFloat(R21i.x) * 1.5 + intBitsToFloat(PV0i.w)));
PV1i.x = R126i.x;
R126i.y = floatBitsToInt((intBitsToFloat(R13i.y) * 1.5 + intBitsToFloat(PV0i.z)));
PV1i.y = R126i.y;
R125i.z = floatBitsToInt((intBitsToFloat(R12i.z) * 1.5 + intBitsToFloat(PV0i.y)));
PV1i.z = R125i.z;
R125i.w = floatBitsToInt(intBitsToFloat(R21i.x) + intBitsToFloat(PV0i.w));
R127i.y = floatBitsToInt(intBitsToFloat(R13i.y) + intBitsToFloat(PV0i.z));
PS1i = R127i.y;
// 10
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.z),-0.0),vec4(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R8i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(R127i.x)));
PS0i = R8i.y;
// 11
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R125i.w),intBitsToFloat(R127i.y),intBitsToFloat(R6i.w),-0.0),vec4(intBitsToFloat(R125i.w),intBitsToFloat(R127i.y),intBitsToFloat(R6i.w),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.x));
PS1i = floatBitsToInt(tempResultf);
// 12
R10i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.w), intBitsToFloat(R8i.w)));
R6i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.w), intBitsToFloat(R6i.z)));
PV0i.z = floatBitsToInt(intBitsToFloat(0x3a83126f) * intBitsToFloat(PS1i));
R6i.w = uf_remappedPS[21].x;
tempResultf = 1.0 / sqrt(intBitsToFloat(PV1i.x));
PS0i = floatBitsToInt(tempResultf);
// 13
backupReg0i = R125i.z;
backupReg1i = R127i.y;
R7i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(R126i.x)) + intBitsToFloat(R20i.x)));
R7i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(R126i.y)) + intBitsToFloat(R10i.y)));
R125i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.w), intBitsToFloat(PS0i)));
PV1i.z = R125i.z;
R8i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(backupReg0i)) + intBitsToFloat(R9i.z)));
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg1i), intBitsToFloat(PS0i)));
PS1i = R127i.y;
// 14
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.w), intBitsToFloat(R12i.z)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R12i.z), -(intBitsToFloat(R10i.w))));
PV0i.z = floatBitsToInt(intBitsToFloat(PS1i) * intBitsToFloat(0x3dcccccd));
PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.z) * intBitsToFloat(0x3dcccccd));
PS0i = floatBitsToInt(intBitsToFloat(R7i.z) * intBitsToFloat(0x3f3504f3));
// 15
backupReg0i = R0i.x;
backupReg1i = R0i.y;
backupReg2i = R125i.z;
R0i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R11i.w),intBitsToFloat(PV0i.w)) + intBitsToFloat(backupReg0i)));
R0i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.z),intBitsToFloat(PV0i.z)) + intBitsToFloat(backupReg1i)));
R125i.z = floatBitsToInt((intBitsToFloat(backupReg2i) * intBitsToFloat(0xbf3504f3) + intBitsToFloat(PS0i)));
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R12i.z),-(intBitsToFloat(R5i.w))) + intBitsToFloat(PV0i.y)));
PV1i.w = R123i.w;
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.y),intBitsToFloat(R13i.y)) + intBitsToFloat(PV0i.x)));
PS1i = R126i.x;
// 16
redcCUBE(vec4(intBitsToFloat(R11i.z),intBitsToFloat(R11i.z),intBitsToFloat(R11i.x),intBitsToFloat(R11i.y)),vec4(intBitsToFloat(R11i.y),intBitsToFloat(R11i.x),intBitsToFloat(R11i.z),intBitsToFloat(R11i.z)),cubeMapSTM,cubeMapFaceId);
R124i.x = floatBitsToInt(cubeMapSTM.x);
R124i.y = floatBitsToInt(cubeMapSTM.y);
R124i.z = floatBitsToInt(cubeMapSTM.z);
R124i.w = cubeMapFaceId;
PV0i.x = R124i.x;
PV0i.y = R124i.y;
PV0i.z = R124i.z;
PV0i.w = R124i.w;
R122i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R13i.y),-(intBitsToFloat(R3i.y))) + intBitsToFloat(PV1i.w)));
PS0i = R122i.x;
// 17
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R21i.x),-(intBitsToFloat(R3i.x))) + intBitsToFloat(PS0i)));
R123i.x = clampFI32(R123i.x);
PV1i.x = R123i.x;
R11i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.y),intBitsToFloat(R0i.y)) + intBitsToFloat(R1i.w)));
R18i.z = PV0i.w;
R123i.w = floatBitsToInt((intBitsToFloat(R127i.y) * intBitsToFloat(0x3f3504f3) + intBitsToFloat(R125i.z)));
PV1i.w = R123i.w;
PS1i = floatBitsToInt(1.0 / abs(intBitsToFloat(PV0i.z)));
// 18
backupReg0i = R1i.x;
R1i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(R0i.x)) + intBitsToFloat(R1i.z)));
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.x),intBitsToFloat(PS1i)) + 1.5));
PV0i.y = R123i.y;
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(PV1i.x)));
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.y),intBitsToFloat(PS1i)) + 1.5));
PV0i.w = R123i.w;
R1i.z = floatBitsToInt(-(intBitsToFloat(PV1i.w)) + -(0.5));
R1i.z = clampFI32(R1i.z);
PS0i = R1i.z;
// 19
R18i.x = PV0i.w;
R18i.y = PV0i.y;
R124i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R12i.x),intBitsToFloat(PV0i.z)) + -(intBitsToFloat(PV0i.z))));
PV1i.w = R124i.w;
// 20
PV0i.x = floatBitsToInt(intBitsToFloat(PV1i.w) + 1.0);
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.x),intBitsToFloat(R21i.x)) + intBitsToFloat(R126i.x))/2.0);
PV0i.z = R123i.z;
// 21
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.w),intBitsToFloat(PV0i.x)) + intBitsToFloat(PV0i.x)));
PV1i.x = R123i.x;
R1i.y = floatBitsToInt(intBitsToFloat(PV0i.z) + 0.5);
// 22
PS0i = floatBitsToInt(1.0 / intBitsToFloat(PV1i.x));
// 23
R1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R12i.x), intBitsToFloat(PS0i)));
// 0
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R7i.x), intBitsToFloat(uf_remappedPS[22].x)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R7i.x), intBitsToFloat(uf_remappedPS[23].x)));
// 1
R125i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.y),intBitsToFloat(uf_remappedPS[23].y)) + intBitsToFloat(PV0i.z)));
R124i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R7i.x), intBitsToFloat(uf_remappedPS[24].x)));
// 2
backupReg0i = R126i.x;
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.y),intBitsToFloat(uf_remappedPS[22].y)) + intBitsToFloat(backupReg0i)));
R125i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R7i.x), intBitsToFloat(uf_remappedPS[25].x)));
// 3
backupReg0i = R125i.x;
R125i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.y),intBitsToFloat(uf_remappedPS[24].y)) + intBitsToFloat(R124i.z)));
R124i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R8i.w),intBitsToFloat(uf_remappedPS[23].z)) + intBitsToFloat(backupReg0i)));
// 4
backupReg0i = R126i.x;
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.y),intBitsToFloat(uf_remappedPS[25].y)) + intBitsToFloat(R125i.z)));
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R8i.w),intBitsToFloat(uf_remappedPS[22].z)) + intBitsToFloat(backupReg0i)));
// 5
backupReg0i = R124i.y;
R124i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R8i.w),intBitsToFloat(uf_remappedPS[24].z)) + intBitsToFloat(R125i.x)));
PV1i.w = floatBitsToInt(intBitsToFloat(uf_remappedPS[23].w) + intBitsToFloat(backupReg0i));
// 6
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R8i.w),intBitsToFloat(uf_remappedPS[25].z)) + intBitsToFloat(R126i.x)));
PV0i.y = R123i.y;
PV0i.w = floatBitsToInt(intBitsToFloat(uf_remappedPS[22].w) + intBitsToFloat(R127i.y));
R125i.z = floatBitsToInt(1.0 / intBitsToFloat(PV1i.w));
PS0i = R125i.z;
// 7
PV1i.x = floatBitsToInt(intBitsToFloat(uf_remappedPS[25].w) + intBitsToFloat(PV0i.y));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(PS0i)));
PV1i.w = floatBitsToInt(intBitsToFloat(uf_remappedPS[24].w) + intBitsToFloat(R124i.y));
// 8
backupReg0i = R2i.w;
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(R125i.z)));
PV0i.x = R126i.x;
R124i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(R125i.z)));
PV0i.y = R124i.y;
R125i.z = floatBitsToInt(intBitsToFloat(PV1i.y) + intBitsToFloat(0xba83126f));
R125i.z = clampFI32(R125i.z);
PV0i.z = R125i.z;
R2i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(R1i.y)) + intBitsToFloat(uf_remappedPS[14].x)));
R7i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.w),intBitsToFloat(R1i.y)) + intBitsToFloat(uf_remappedPS[14].y)));
PS0i = R7i.y;
// 9
R14i.x = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(0x39800000));
R14i.y = floatBitsToInt(intBitsToFloat(PV0i.y) + intBitsToFloat(0x39800000));
R11i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R13i.x),intBitsToFloat(R1i.y)) + intBitsToFloat(uf_remappedPS[14].z)));
R14i.w = PV0i.z;
R15i.x = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(0x39800000));
PS1i = R15i.x;
// 10
R16i.x = floatBitsToInt(intBitsToFloat(R126i.x) + intBitsToFloat(0xb9800000));
R15i.y = floatBitsToInt(intBitsToFloat(R124i.y) + intBitsToFloat(0xb9800000));
R15i.w = R125i.z;
R16i.y = floatBitsToInt(intBitsToFloat(R124i.y) + intBitsToFloat(0x39800000));
PS0i = R16i.y;
// 11
R17i.x = floatBitsToInt(intBitsToFloat(R126i.x) + intBitsToFloat(0xb9800000));
R17i.y = floatBitsToInt(intBitsToFloat(R124i.y) + intBitsToFloat(0xb9800000));
R16i.w = R125i.z;
R17i.w = R125i.z;
PS1i = R17i.w;
R14i.w = floatBitsToInt(texture(textureUnitPS10, vec4(intBitsToFloat(R14i.x),intBitsToFloat(R14i.y),intBitsToFloat(R14i.z),intBitsToFloat(R14i.w))));
R15i.z = floatBitsToInt(texture(textureUnitPS10, vec4(intBitsToFloat(R15i.x),intBitsToFloat(R15i.y),intBitsToFloat(R15i.z),intBitsToFloat(R15i.w))));
R16i.y = floatBitsToInt(texture(textureUnitPS10, vec4(intBitsToFloat(R16i.x),intBitsToFloat(R16i.y),intBitsToFloat(R16i.z),intBitsToFloat(R16i.w))));
R17i.x = floatBitsToInt(texture(textureUnitPS10, vec4(intBitsToFloat(R17i.x),intBitsToFloat(R17i.y),intBitsToFloat(R17i.z),intBitsToFloat(R17i.w))));
R0i.x = floatBitsToInt(texture(textureUnitPS5, intBitsToFloat(R0i.xy)).x);
R18i.xyz = floatBitsToInt(textureLod(textureUnitPS9, vec4(redcCUBEReverse(intBitsToFloat(R18i.xy),R18i.z),cubeMapArrayIndex9),intBitsToFloat(R18i.w)).xyz);
// 0
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R19i.x),intBitsToFloat(R19i.y),intBitsToFloat(R19i.z),-0.0),vec4(intBitsToFloat(uf_remappedPS[26].x),intBitsToFloat(uf_remappedPS[26].y),intBitsToFloat(uf_remappedPS[26].z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
PS0i = floatBitsToInt(intBitsToFloat(R14i.w) + intBitsToFloat(R15i.z));
PS0i = floatBitsToInt(intBitsToFloat(PS0i) / 2.0);
// 1
backupReg0i = R0i.x;
backupReg1i = R8i.z;
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(PV0i.x)));
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].x),intBitsToFloat(backupReg0i)) + intBitsToFloat(uf_remappedPS[1].x)));
PV1i.y = R123i.y;
R8i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R18i.x), intBitsToFloat(backupReg1i)));
R123i.w = floatBitsToInt((intBitsToFloat(R16i.y) * 0.5 + intBitsToFloat(PS0i)));
PV1i.w = R123i.w;
R15i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R18i.y), intBitsToFloat(R10i.x)));
PS1i = R15i.z;
// 2
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(PV1i.x)));
PV0i.x = R126i.x;
PV0i.y = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(PV1i.y)), intBitsToFloat(R1i.x)));
R123i.z = floatBitsToInt((intBitsToFloat(R17i.x) * 0.5 + intBitsToFloat(PV1i.w))/2.0);
PV0i.z = R123i.z;
PV0i.w = floatBitsToInt(-(intBitsToFloat(PV1i.y)));
PS0i = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(PV1i.y)), intBitsToFloat(R11i.y)));
// 3
R125i.x = floatBitsToInt(-(intBitsToFloat(R20i.x)) + intBitsToFloat(PV0i.y));
R124i.y = floatBitsToInt(-(intBitsToFloat(R10i.y)) + intBitsToFloat(PS0i));
PV1i.z = floatBitsToInt(intBitsToFloat(PV0i.z) + -(intBitsToFloat(PV0i.x)));
R124i.w = floatBitsToInt(-(intBitsToFloat(R9i.z)) + intBitsToFloat(PV0i.w));
PV1i.w = R124i.w;
R18i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R18i.z), intBitsToFloat(R6i.y)));
PS1i = R18i.x;
// 4
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R10i.z), intBitsToFloat(PV1i.w)));
R6i.y = floatBitsToInt(intBitsToFloat(R126i.x) + intBitsToFloat(PV1i.z));
// 5
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R12i.y),intBitsToFloat(R12i.w),intBitsToFloat(PV0i.x),-0.0),vec4(intBitsToFloat(R125i.x),intBitsToFloat(R124i.y),1.0,0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R125i.w = tempi.x;
// 6
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R12i.y)),intBitsToFloat(PV1i.x)) + intBitsToFloat(R125i.x)));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R12i.w)),intBitsToFloat(PV1i.x)) + intBitsToFloat(R124i.y)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R10i.z)),intBitsToFloat(PV1i.x)) + intBitsToFloat(R124i.w)));
PV0i.z = R123i.z;
// 7
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),-0.0),vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
// 8
tempResultf = 1.0 / sqrt(intBitsToFloat(PV1i.x));
PS0i = floatBitsToInt(tempResultf);
// 9
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.w), intBitsToFloat(PS0i)));
// 10
PV0i.x = floatBitsToInt(intBitsToFloat(PV1i.y) * intBitsToFloat(0x38d1b717));
PV0i.x = clampFI32(PV0i.x);
// 11
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(R1i.z)));
PV1i.y = floatBitsToInt(intBitsToFloat(PV1i.y) * 2.0);
// 12
backupReg0i = R6i.w;
R6i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.y), intBitsToFloat(backupReg0i)));
// 0
R125i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[12].x), intBitsToFloat(uf_remappedPS[15].w)));
R124i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[12].y), intBitsToFloat(uf_remappedPS[15].w)));
// 1
R125i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[12].z), intBitsToFloat(uf_remappedPS[15].w)));
PV1i.z = R125i.z;
// 2
tempi.x = floatBitsToInt(dot(vec4(-(intBitsToFloat(R125i.x)),-(intBitsToFloat(R124i.y)),-(intBitsToFloat(PV1i.z)),-0.0),vec4(-(intBitsToFloat(R3i.x)),-(intBitsToFloat(R3i.y)),-(intBitsToFloat(R5i.w)),0.0)));
tempi.x = clampFI32(tempi.x);
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.y = tempi.x;
R122i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R6i.y),intBitsToFloat(uf_remappedPS[27].z)) + intBitsToFloat(uf_remappedPS[19].y)));
R122i.x = clampFI32(R122i.x);
PS0i = R122i.x;
// 3
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.x), intBitsToFloat(PS0i)));
PV1i.y = floatBitsToInt(-(intBitsToFloat(PV0i.x)) + 1.0);
PS1i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R12i.z), -(intBitsToFloat(R13i.w))));
// 4
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R12i.z),-(intBitsToFloat(R125i.z))) + intBitsToFloat(PS1i)));
PV0i.x = R123i.x;
R125i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R127i.y)),intBitsToFloat(PV1i.y)) + intBitsToFloat(PV1i.y)));
PV0i.w = R125i.w;
// 5
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R21i.x),intBitsToFloat(R13i.y),intBitsToFloat(PV0i.x),0.0),vec4(-(intBitsToFloat(R125i.x)),-(intBitsToFloat(R124i.y)),1.0,0.0)));
tempi.x = clampFI32(tempi.x);
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R122i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R127i.y)),intBitsToFloat(PV0i.w)) + intBitsToFloat(PV0i.w)));
PS1i = R122i.x;
// 6
backupReg0i = R126i.x;
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.w), intBitsToFloat(PS1i)));
PV0i.x = R126i.x;
PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.x) + intBitsToFloat(R2i.x));
PV0i.y = clampFI32(PV0i.y);
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),-(intBitsToFloat(R20i.y))) + intBitsToFloat(PV1i.x)));
PV0i.z = R123i.z;
R125i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(backupReg0i)));
PV0i.w = R125i.w;
// 7
R125i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(PV0i.y)));
PV1i.y = floatBitsToInt(intBitsToFloat(R20i.y) + intBitsToFloat(PV0i.z));
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R19i.w),-(intBitsToFloat(PV0i.x))) + intBitsToFloat(R19i.w)));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R21i.y),-(intBitsToFloat(PV0i.x))) + intBitsToFloat(R21i.y)));
PV1i.w = R123i.w;
R122i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R22i.x),-(intBitsToFloat(PV0i.x))) + intBitsToFloat(R22i.x)));
PS1i = R122i.x;
// 8
backupReg0i = R126i.x;
backupReg0i = R126i.x;
backupReg0i = R126i.x;
R126i.x = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(PV1i.z));
R127i.y = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(PV1i.w));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[19].x), intBitsToFloat(R125i.w)));
R125i.w = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(PS1i));
PS0i = floatBitsToInt(1.0 / intBitsToFloat(PV1i.y));
// 9
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[28].x),intBitsToFloat(R125i.x)) + intBitsToFloat(R2i.w)));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[28].y),intBitsToFloat(R125i.x)) + intBitsToFloat(R7i.y)));
PV1i.y = R123i.y;
R125i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), intBitsToFloat(R8i.y)));
R124i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[28].z),intBitsToFloat(R125i.x)) + intBitsToFloat(R11i.z)));
R124i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(R1i.w)));
PS1i = R124i.z;
// 10
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R24i.x)),intBitsToFloat(PV1i.x)) + intBitsToFloat(PV1i.x)));
PV0i.x = R123i.x;
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.x), intBitsToFloat(R23i.x)));
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.w), intBitsToFloat(R23i.x)));
R125i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), intBitsToFloat(R23i.x)));
R122i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R24i.x)),intBitsToFloat(PV1i.y)) + intBitsToFloat(PV1i.y)));
PS0i = R122i.x;
// 11
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.z), intBitsToFloat(R124i.z)));
PV1i.x = R126i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R24i.x)),intBitsToFloat(R124i.w)) + intBitsToFloat(R124i.w)));
PV1i.y = R123i.y;
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(R22i.y)));
R124i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(R13i.z)));
PS1i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[28].x), intBitsToFloat(PV0i.y)));
// 12
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PS1i),intBitsToFloat(PV1i.x)) + intBitsToFloat(R8i.z)));
PV0i.x = R123i.x;
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[28].y), intBitsToFloat(R125i.w)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.y), intBitsToFloat(R25i.x)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[28].z), intBitsToFloat(R127i.z)));
R122i.x = floatBitsToInt((intBitsToFloat(PV1i.z) * intBitsToFloat(0x3f6e896b) + intBitsToFloat(0x3a011b1e)));
PS0i = R122i.x;
// 13
R123i.x = floatBitsToInt((intBitsToFloat(PV0i.z) * intBitsToFloat(0x3f6e896b) + intBitsToFloat(0x3a011b1e)));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((intBitsToFloat(R124i.w) * intBitsToFloat(0x3f6e896b) + intBitsToFloat(0x3a011b1e)));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(R126i.x)) + intBitsToFloat(R18i.x)));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(R126i.x)) + intBitsToFloat(R15i.z)));
PV1i.w = R123i.w;
R127i.z = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(PS0i));
PS1i = R127i.z;
// 14
R126i.x = floatBitsToInt(intBitsToFloat(PV1i.w) + intBitsToFloat(PV1i.y));
PV0i.x = R126i.x;
PV0i.z = floatBitsToInt(-(intBitsToFloat(PS1i)) + intBitsToFloat(0x3f7851ec));
R124i.w = floatBitsToInt(intBitsToFloat(PV1i.z) + intBitsToFloat(PV1i.x));
PV0i.w = R124i.w;
// 15
PV1i.x = floatBitsToInt(-(intBitsToFloat(PV0i.w)) + intBitsToFloat(0x3f11eb85));
PV1i.y = floatBitsToInt(-(intBitsToFloat(PV0i.x)) + intBitsToFloat(0x3f547ae1));
R26i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(R6i.w)) + intBitsToFloat(R127i.z)));
PS1i = R26i.x;
// 16
R26i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.y),intBitsToFloat(R6i.w)) + intBitsToFloat(R126i.x)));
R26i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),intBitsToFloat(R6i.w)) + intBitsToFloat(R124i.w)));
// export
passPixelColor0 = vec4(intBitsToFloat(R26i.x), intBitsToFloat(R26i.y), intBitsToFloat(R26i.z), intBitsToFloat(R26i.w));
}
