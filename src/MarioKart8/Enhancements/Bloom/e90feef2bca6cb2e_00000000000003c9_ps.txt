#version 450
#extension GL_ARB_texture_gather : enable
#ifdef VULKAN
#define ATTR_LAYOUT(__vkSet, __location) layout(set = __vkSet, location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation)
#define SET_POSITION(_v) gl_Position = _v; gl_Position.z = (gl_Position.z + gl_Position.w) / 2.0
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale.xy,gl_FragCoord.zw)
#define gl_VertexID gl_VertexIndex
#define gl_InstanceID gl_InstanceIndex
#else
#define ATTR_LAYOUT(__vkSet, __location) layout(location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation)
#define SET_POSITION(_v) gl_Position = _v
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw)
#endif
// This shaders was auto-converted from OpenGL to Cemu.

// shader e90feef2bca6cb2e
const float bloomFactor = $bloom;

#ifdef VULKAN
layout(set = 1, binding = 2) uniform ufBlock
{
uniform ivec4 uf_remappedPS[4];
uniform vec4 uf_fragCoordScale;
};
#else
uniform ivec4 uf_remappedPS[4];
uniform vec2 uf_fragCoordScale;
#endif
TEXTURE_LAYOUT(0, 1, 0) uniform sampler2D textureUnitPS0;
TEXTURE_LAYOUT(1, 1, 1) uniform sampler2D textureUnitPS1;
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem2;
layout(location = 0) out vec4 passPixelColor0;
// uf_fragCoordScale was moved to the ufBlock
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem1;
R2f = passParameterSem2;
R3f.xyzw = (texture(textureUnitPS0, R1f.xy).xyzw);
R1f.xyzw = (texture(textureUnitPS0, R1f.zw).xyzw);
R4f.xyzw = (texture(textureUnitPS0, R2f.xy).xyzw);
R0f.x = (texture(textureUnitPS1, R0f.xy).x);
R2f.xyzw = (texture(textureUnitPS0, R2f.zw).xyzw);
// 0
backupReg0f = R0f.x;
PV0f.x = R3f.y + R1f.y;
PV0f.x /= 2.0;
PV0f.y = R3f.x + R1f.x;
PV0f.y /= 2.0;
PV0f.z = R3f.w + R1f.w;
PV0f.z /= 2.0;
PV0f.w = R3f.z + R1f.z;
PV0f.w /= 2.0;
R127f.w = (backupReg0f * intBitsToFloat(uf_remappedPS[0].z) + intBitsToFloat(uf_remappedPS[0].w));
R127f.w = clamp(R127f.w, 0.0, 1.0);
PS0f = R127f.w;
// 1
R123f.x = (R4f.y * 0.5 + PV0f.x);
PV1f.x = R123f.x;
R123f.y = (R4f.x * 0.5 + PV0f.y);
PV1f.y = R123f.y;
R123f.z = (R4f.w * 0.5 + PV0f.z);
PV1f.z = R123f.z;
R123f.w = (R4f.z * 0.5 + PV0f.w);
PV1f.w = R123f.w;
R127f.z = mul_nonIEEE(PS0f, intBitsToFloat(uf_remappedPS[1].z));
PS1f = R127f.z;
// 2
R127f.x = (R2f.x * 0.5 + PV1f.y)/2.0;
PV0f.x = R127f.x;
R127f.y = (R2f.y * 0.5 + PV1f.x)/2.0;
PV0f.y = R127f.y;
R126f.z = (R2f.z * 0.5 + PV1f.w)/2.0;
PV0f.z = R126f.z;
R126f.w = (R2f.w * 0.5 + PV1f.z)/2.0;
PV0f.w = R126f.w;
// 3
tempf.x = dot(vec4(PV0f.x,PV0f.y,PV0f.z,PV0f.w),vec4(intBitsToFloat(uf_remappedPS[2].x),intBitsToFloat(uf_remappedPS[2].y),intBitsToFloat(uf_remappedPS[2].z),intBitsToFloat(uf_remappedPS[2].w)));
tempf.x = clamp(tempf.x, 0.0, 1.0);
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
// 4
R123f.y = (R127f.w * R127f.z + PV1f.x);
PV0f.y = R123f.y;
// 5
PV1f.x = mul_nonIEEE(PV0f.y, intBitsToFloat(uf_remappedPS[3].z));
// 6
R2f.x = mul_nonIEEE(R127f.x, PV1f.x * bloomFactor);
R2f.y = mul_nonIEEE(R127f.y, PV1f.x * bloomFactor);
R2f.z = mul_nonIEEE(R126f.z, PV1f.x * bloomFactor);
R2f.w = mul_nonIEEE(R126f.w, PV1f.x * bloomFactor);
// export
passPixelColor0 = vec4(R2f.x, R2f.y, R2f.z, R2f.w);
}
