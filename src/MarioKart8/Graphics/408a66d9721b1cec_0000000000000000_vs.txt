#version 450
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 408a66d9721b1cec //Lava bowser castle, point light offset
// start of shader inputs/outputs, predetermined by Cemu. Do not touch
#ifdef VULKAN
#define ATTR_LAYOUT(__vkSet, __location) layout(set = __vkSet, location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation)
#define gl_VertexID gl_VertexIndex
#define gl_InstanceID gl_InstanceIndex
#define SET_POSITION(_v) gl_Position = _v; gl_Position.z = (gl_Position.z + gl_Position.w) / 2.0
#else
#define ATTR_LAYOUT(__vkSet, __location) layout(location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation)
#define SET_POSITION(_v) gl_Position = _v
#endif
#ifdef VULKAN
layout(set = 0, binding = 0) uniform ufBlock
{
uniform ivec4 uf_remappedVS[20];
};
#else
uniform ivec4 uf_remappedVS[20];
#endif
ATTR_LAYOUT(0, 0) in uvec4 attrDataSem0;
ATTR_LAYOUT(0, 1) in uvec4 attrDataSem1;
ATTR_LAYOUT(0, 2) in uvec4 attrDataSem2;
ATTR_LAYOUT(0, 3) in uvec4 attrDataSem3;
ATTR_LAYOUT(0, 4) in uvec4 attrDataSem4;
ATTR_LAYOUT(0, 5) in uvec4 attrDataSem5;
ATTR_LAYOUT(0, 6) in uvec4 attrDataSem6;
ATTR_LAYOUT(0, 7) in uvec4 attrDataSem7;
ATTR_LAYOUT(0, 8) in uvec4 attrDataSem8;
ATTR_LAYOUT(0, 9) in uvec4 attrDataSem9;
ATTR_LAYOUT(0, 10) in uvec4 attrDataSem10;
ATTR_LAYOUT(0, 11) in uvec4 attrDataSem11;
ATTR_LAYOUT(0, 12) in uvec4 attrDataSem12;
out gl_PerVertex
{
	vec4 gl_Position;
};
layout(location = 0) out vec4 passParameterSem0;
layout(location = 1) out vec4 passParameterSem1;
layout(location = 2) out vec4 passParameterSem3;
layout(location = 3) out vec4 passParameterSem4;
layout(location = 4) out vec4 passParameterSem6;
layout(location = 5) out vec4 passParameterSem10;
// end of shader inputs/outputs
const float resScale = float($width)/float($gameWidth);
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R7i = ivec4(0);
ivec4 R8i = ivec4(0);
ivec4 R9i = ivec4(0);
ivec4 R10i = ivec4(0);
ivec4 R11i = ivec4(0);
ivec4 R12i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R124i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
uvec4 attrDecoder;
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
bool activeMaskStack[3];
bool activeMaskStackC[4];
activeMaskStack[0] = false;
activeMaskStack[1] = false;
activeMaskStackC[0] = false;
activeMaskStackC[1] = false;
activeMaskStackC[2] = false;
activeMaskStack[0] = true;
activeMaskStackC[0] = true;
activeMaskStackC[1] = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = ivec4(gl_VertexID, 0, 0, gl_InstanceID);
attrDecoder = attrDataSem7;
attrDecoder = (attrDecoder>>24)|((attrDecoder>>8)&0xFF00)|((attrDecoder<<8)&0xFF0000)|((attrDecoder<<24));
R4i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), int(attrDecoder.w));
attrDecoder = attrDataSem10;
attrDecoder = (attrDecoder>>24)|((attrDecoder>>8)&0xFF00)|((attrDecoder<<8)&0xFF0000)|((attrDecoder<<24));
R7i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), int(attrDecoder.w));
attrDecoder = attrDataSem0;
attrDecoder = (attrDecoder>>24)|((attrDecoder>>8)&0xFF00)|((attrDecoder<<8)&0xFF0000)|((attrDecoder<<24));
R1i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), int(attrDecoder.w));
attrDecoder = attrDataSem11;
attrDecoder = (attrDecoder>>24)|((attrDecoder>>8)&0xFF00)|((attrDecoder<<8)&0xFF0000)|((attrDecoder<<24));
R8i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), int(attrDecoder.w));
attrDecoder = attrDataSem9;
attrDecoder = (attrDecoder>>24)|((attrDecoder>>8)&0xFF00)|((attrDecoder<<8)&0xFF0000)|((attrDecoder<<24));
R6i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), int(attrDecoder.w));
attrDecoder = attrDataSem8;
attrDecoder = (attrDecoder>>24)|((attrDecoder>>8)&0xFF00)|((attrDecoder<<8)&0xFF0000)|((attrDecoder<<24));
R5i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), int(attrDecoder.w));
attrDecoder = attrDataSem1;
attrDecoder = (attrDecoder>>24)|((attrDecoder>>8)&0xFF00)|((attrDecoder<<8)&0xFF0000)|((attrDecoder<<24));
R2i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), int(attrDecoder.w));
attrDecoder = attrDataSem2;
attrDecoder = (attrDecoder>>24)|((attrDecoder>>8)&0xFF00)|((attrDecoder<<8)&0xFF0000)|((attrDecoder<<24));
R3i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), int(attrDecoder.w));
// skipped unused attribute for r13
if( activeMaskStackC[1] == true ) {
// 0
R127i.x = floatBitsToInt(-(intBitsToFloat(R8i.x)) + intBitsToFloat(uf_remappedVS[0].x));
PV0i.x = R127i.x;
R127i.w = floatBitsToInt(-(intBitsToFloat(R8i.z)) + intBitsToFloat(uf_remappedVS[0].z));
PV0i.w = R127i.w;
// 1
PV1i.x = ((-(intBitsToFloat(PV0i.x)) == 0.0)?int(0xFFFFFFFF):int(0x0));
PV1i.y = ((0.0 > intBitsToFloat(PV0i.w))?int(0xFFFFFFFF):int(0x0));
PV1i.z = floatBitsToInt((0.0 > -(intBitsToFloat(PV0i.x)))?1.0:0.0);
PV1i.w = floatBitsToInt((-(intBitsToFloat(PV0i.x)) > 0.0)?1.0:0.0);
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PV0i.w));
// 2
R126i.x = floatBitsToInt(intBitsToFloat(PV1i.w) + -(intBitsToFloat(PV1i.z)));
PV0i.x = R126i.x;
PV0i.y = floatBitsToInt(-(intBitsToFloat(R127i.x)) * intBitsToFloat(PS1i));
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(PV1i.y)));
R126i.w = ((intBitsToFloat(R127i.w) == 0.0)?int(0xFFFFFFFF):int(0x0));
R126i.y = floatBitsToInt(intBitsToFloat(R4i.x) + intBitsToFloat(uf_remappedVS[1].x));
PS0i = R126i.y;
// 3
PV1i.x = floatBitsToInt((intBitsToFloat(PV0i.y) > 0.0)?1.0:0.0);
R127i.y = floatBitsToInt(max(intBitsToFloat(PV0i.y), -(intBitsToFloat(PV0i.y))));
PV1i.y = R127i.y;
R125i.z = floatBitsToInt(intBitsToFloat(PV0i.x) * intBitsToFloat(0x3fc92492));
PV1i.w = floatBitsToInt((0.0 > intBitsToFloat(PV0i.y))?1.0:0.0);
PS1i = floatBitsToInt(intBitsToFloat(R4i.y) + intBitsToFloat(uf_remappedVS[1].y));
// 4
R127i.x = ((intBitsToFloat(PV1i.y) > 1.0)?int(0xFFFFFFFF):int(0x0));
PV0i.x = R127i.x;
PV0i.z = floatBitsToInt(intBitsToFloat(PV1i.x) + -(intBitsToFloat(PV1i.w)));
R0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.y), intBitsToFloat(PS1i)));
PS0i = floatBitsToInt(1.0 / intBitsToFloat(PV1i.y));
// 5
backupReg0i = R126i.y;
R123i.x = ((PV0i.x == 0)?(R127i.y):(PS0i));
PV1i.x = R123i.x;
R126i.y = floatBitsToInt(((PV0i.x == 0)?(intBitsToFloat(PV0i.z)):(-(intBitsToFloat(PV0i.z)))));
PV1i.z = floatBitsToInt(intBitsToFloat(PV0i.z) * intBitsToFloat(0x3fc92492));
R0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.x), intBitsToFloat(backupReg0i)));
PS1i = R0i.z;
// 6
PV0i.z = floatBitsToInt(min(intBitsToFloat(PV1i.x), 1.0));
R127i.w = ((R127i.x == 0)?(0):(PV1i.z));
// 7
R127i.y = floatBitsToInt(max(intBitsToFloat(PV0i.z), -(1.0)));
PV1i.y = R127i.y;
// 8
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.y), intBitsToFloat(PV1i.y)));
PV0i.x = R127i.x;
// 9
R123i.y = floatBitsToInt((intBitsToFloat(0x3d6ee04d) * intBitsToFloat(PV0i.x) + intBitsToFloat(0x3f43b24e)));
PV1i.y = R123i.y;
R123i.w = floatBitsToInt((intBitsToFloat(0x3edcf805) * intBitsToFloat(PV0i.x) + 1.0));
PV1i.w = R123i.w;
// 10
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.x),intBitsToFloat(PV1i.y)) + 1.0));
PV0i.x = R123i.x;
R127i.z = floatBitsToInt(mul_nonIEEE(abs(intBitsToFloat(R127i.y)), intBitsToFloat(PV1i.w)));
// 11
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PV0i.x));
// 12
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(PS1i)));
// 13
R123i.y = ((intBitsToFloat(R127i.y) > 0.0)?(PV0i.z):(floatBitsToInt(-(intBitsToFloat(PV0i.z)))));
PV1i.y = R123i.y;
// 14
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.y),intBitsToFloat(PV1i.y)) + intBitsToFloat(R127i.w)));
PV0i.x = R127i.x;
// 15
PV1i.x = floatBitsToInt((intBitsToFloat(PV0i.x) > 0.0)?1.0:0.0);
PV1i.w = floatBitsToInt((0.0 > intBitsToFloat(PV0i.x))?1.0:0.0);
// 16
PV0i.z = floatBitsToInt(intBitsToFloat(PV1i.x) + -(intBitsToFloat(PV1i.w)));
// 17
PV1i.x = floatBitsToInt(-(intBitsToFloat(R126i.x)) + intBitsToFloat(PV0i.z));
// 18
PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.x) * intBitsToFloat(0x3fc92492));
// 19
PV1i.z = floatBitsToInt(intBitsToFloat(R127i.x) + -(intBitsToFloat(PV0i.w)));
// 20
R123i.y = ((R126i.z == 0)?(PV1i.z):(0x40492492));
PV0i.y = R123i.y;
// 21
R123i.x = ((R126i.w == 0)?(PV0i.y):(R125i.z));
PV1i.x = R123i.x;
// 22
R123i.w = floatBitsToInt((-(intBitsToFloat(PV1i.x)) * intBitsToFloat(0x3e22f983) + 0.5));
PV0i.w = R123i.w;
// 23
PV1i.y = floatBitsToInt(fract(intBitsToFloat(PV0i.w)));
// 24
R123i.x = floatBitsToInt((intBitsToFloat(PV1i.y) * intBitsToFloat(0x40c90fdb) + -(intBitsToFloat(0x40490fdb))));
PV0i.x = R123i.x;
// 25
R126i.w = floatBitsToInt(intBitsToFloat(PV0i.x) * intBitsToFloat(0x3e22f983));
PV1i.w = R126i.w;
// 26
R4i.w = floatBitsToInt(sin((intBitsToFloat(PV1i.w))/0.1591549367));
PS0i = R4i.w;
// 27
R6i.z = floatBitsToInt(-(intBitsToFloat(PS0i)) + 0.0);
R0i.x = floatBitsToInt(cos((intBitsToFloat(R126i.w))/0.1591549367));
PS1i = R0i.x;
// 28
R7i.z = floatBitsToInt(intBitsToFloat(PS1i) + 0.0);
}
if( activeMaskStackC[1] == true ) {
// 0
PV0i.x = uf_remappedVS[2].x & 0x08000000;
// 1
R0i.y = ((PV0i.x == 0)?(R6i.x):(R6i.y));
}
if( activeMaskStackC[1] == true ) {
// 0
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.z), intBitsToFloat(R0i.y)));
PV0i.x = R127i.x;
R127i.y = floatBitsToInt(intBitsToFloat(R8i.x) + 0.0);
R126i.z = floatBitsToInt(intBitsToFloat(R8i.y) + 0.0);
R6i.w = 0x3f800000;
PV0i.w = R6i.w;
R126i.w = floatBitsToInt(intBitsToFloat(R8i.z) + 0.0);
PS0i = R126i.w;
// 1
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R8i.x),intBitsToFloat(R8i.y),intBitsToFloat(R8i.z),intBitsToFloat(PV0i.w)),vec4(intBitsToFloat(uf_remappedVS[3].x),intBitsToFloat(uf_remappedVS[3].y),intBitsToFloat(uf_remappedVS[3].z),intBitsToFloat(uf_remappedVS[3].w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R127i.w = tempi.x;
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.w), intBitsToFloat(PV0i.x)));
PS1i = R127i.z;
// 2
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R8i.x),intBitsToFloat(R8i.y),intBitsToFloat(R8i.z),intBitsToFloat(R6i.w)),vec4(intBitsToFloat(uf_remappedVS[4].x),intBitsToFloat(uf_remappedVS[4].y),intBitsToFloat(uf_remappedVS[4].z),intBitsToFloat(uf_remappedVS[4].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
PS0i = PV1i.x;
PS0i = floatBitsToInt(intBitsToFloat(PS0i) / 2.0);
// 3
backupReg0i = R0i.z;
backupReg1i = R0i.x;
PV1i.x = floatBitsToInt(0.0);
R123i.y = floatBitsToInt((intBitsToFloat(PV0i.x) * 0.5 + intBitsToFloat(PS0i)));
PV1i.y = R123i.y;
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R7i.z), intBitsToFloat(R127i.x)));
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i)) + intBitsToFloat(R127i.z)));
PV1i.w = R123i.w;
PS1i = floatBitsToInt(1.0 / intBitsToFloat(R127i.w));
// 4
R4i.x = floatBitsToInt(intBitsToFloat(PV1i.w) + intBitsToFloat(R127i.y));
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.z),intBitsToFloat(R6i.z)) + intBitsToFloat(PV1i.z)));
PV0i.y = R123i.y;
PV0i.z = floatBitsToInt(intBitsToFloat(R0i.w) + intBitsToFloat(PV1i.x));
PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.y) * intBitsToFloat(PS1i));
R124i.w = floatBitsToInt((intBitsToFloat(R127i.x) * 0.0 + 1.0));
PS0i = R124i.w;
// 5
R0i.x = floatBitsToInt(intBitsToFloat(PV0i.y) + intBitsToFloat(R126i.w));
R124i.y = floatBitsToInt(intBitsToFloat(PV0i.z) + intBitsToFloat(R126i.z));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(uf_remappedVS[5].w)));
PV1i.w = floatBitsToInt(-(intBitsToFloat(uf_remappedVS[6].x)) + intBitsToFloat(uf_remappedVS[6].y));
R125i.x = floatBitsToInt(-(intBitsToFloat(R7i.x)) + 1.0);
PS1i = R125i.x;
// 6
R127i.x = floatBitsToInt(-(intBitsToFloat(uf_remappedVS[6].z)) + intBitsToFloat(uf_remappedVS[6].w));
PV0i.y = floatBitsToInt(-(intBitsToFloat(uf_remappedVS[5].y)) + intBitsToFloat(PV1i.z));
R126i.z = ((intBitsToFloat(R5i.x) > 0.5)?int(0xFFFFFFFF):int(0x0));
R125i.w = floatBitsToInt(-(intBitsToFloat(R7i.y)) + 1.0);
R126i.x = floatBitsToInt(1.0 / intBitsToFloat(PV1i.w));
PS0i = R126i.x;
// 7
backupReg0i = R0i.x;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R124i.y),intBitsToFloat(backupReg0i),intBitsToFloat(R124i.w)),vec4(intBitsToFloat(uf_remappedVS[3].x),intBitsToFloat(uf_remappedVS[3].y),intBitsToFloat(uf_remappedVS[3].z),intBitsToFloat(uf_remappedVS[3].w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R127i.z = tempi.x;
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PV0i.y));
// 8
R6i.x = ((R126i.z == 0)?(R7i.x):(R125i.x));
R127i.y = ((intBitsToFloat(R5i.y) > 0.5)?int(0xFFFFFFFF):int(0x0));
R126i.z = ((intBitsToFloat(R5i.x) > 0.5)?int(0xFFFFFFFF):int(0x0));
R126i.w = floatBitsToInt(-(intBitsToFloat(uf_remappedVS[5].z)) * intBitsToFloat(PS1i));
R127i.w = floatBitsToInt(1.0 / intBitsToFloat(PV1i.x));
PS0i = R127i.w;
// 9
backupReg0i = R127i.x;
R124i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R124i.y),intBitsToFloat(R0i.x),intBitsToFloat(R124i.w)),vec4(intBitsToFloat(uf_remappedVS[4].x),intBitsToFloat(uf_remappedVS[4].y),intBitsToFloat(uf_remappedVS[4].z),intBitsToFloat(uf_remappedVS[4].w))));
PV1i.x = R124i.x;
PV1i.y = R124i.x;
PV1i.z = R124i.x;
PV1i.w = R124i.x;
R127i.x = floatBitsToInt(1.0 / intBitsToFloat(backupReg0i));
PS1i = R127i.x;
// 10
PV0i.x = floatBitsToInt(intBitsToFloat(R126i.w) + -(intBitsToFloat(uf_remappedVS[6].z)));
PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.x) * intBitsToFloat(R127i.w));
PV0i.z = floatBitsToInt(intBitsToFloat(R126i.w) + -(intBitsToFloat(uf_remappedVS[6].x)));
R0i.w = ((R127i.y == 0)?(R7i.y):(R125i.w));
PS0i = ((intBitsToFloat(R5i.y) > 0.5)?int(0xFFFFFFFF):int(0x0));
// 11
PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.x) * intBitsToFloat(R127i.x));
PV1i.x = clampFI32(PV1i.x);
PV1i.y = floatBitsToInt(-(intBitsToFloat(PV0i.y)) + 1.0);
R0i.z = ((PS0i == 0)?(R7i.y):(R125i.w));
PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.z) * intBitsToFloat(R126i.x));
PV1i.w = clampFI32(PV1i.w);
R125i.w = floatBitsToInt(intBitsToFloat(uf_remappedVS[7].z) + 0.5);
PS1i = R125i.w;
// 12
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedVS[1].z), intBitsToFloat(PV1i.y)));
R127i.y = R127i.z;
R127i.y = floatBitsToInt(intBitsToFloat(R127i.y) / 2.0);
R4i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(PV1i.x)));
PV0i.z = R4i.z;
R4i.w = ((R126i.z == 0)?(R7i.x):(R125i.x));
R126i.y = floatBitsToInt(intBitsToFloat(uf_remappedVS[7].w) + 0.5);
PS0i = R126i.y;
// 13
R9i.x = ((0.0 >= intBitsToFloat(PV0i.z))?int(0xFFFFFFFF):int(0x0));
R125i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(R125i.w)));
R126i.z = floatBitsToInt(intBitsToFloat(R127i.z) * 1.0);
R125i.w = floatBitsToInt(intBitsToFloat(R124i.x) + -(intBitsToFloat(PV0i.x)));
PV1i.w = R125i.w;
R124i.x = uf_remappedVS[7].x;
R124i.x = floatBitsToInt(intBitsToFloat(R124i.x) / 2.0);
PS1i = R124i.x;
// 14
backupReg0i = R0i.x;
backupReg1i = R127i.y;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R124i.y),intBitsToFloat(backupReg0i),intBitsToFloat(R124i.w)),vec4(intBitsToFloat(uf_remappedVS[8].x),intBitsToFloat(uf_remappedVS[8].y),intBitsToFloat(uf_remappedVS[8].z),intBitsToFloat(uf_remappedVS[8].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R4i.y = tempi.x;
R127i.y = floatBitsToInt((intBitsToFloat(PV1i.w) * 0.5 + intBitsToFloat(backupReg1i)));
PS0i = R127i.y;
// 15
backupReg0i = R0i.x;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R124i.y),intBitsToFloat(backupReg0i),intBitsToFloat(R124i.w)),vec4(intBitsToFloat(uf_remappedVS[9].x),intBitsToFloat(uf_remappedVS[9].y),intBitsToFloat(uf_remappedVS[9].z),intBitsToFloat(uf_remappedVS[9].w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R127i.w = tempi.x;
R125i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(R126i.y)));
PS1i = R125i.z;
// 16
R10i.x = ((R9i.x == 0)?(PV1i.x):(PV1i.x));
R10i.y = ((R9i.x == 0)?(R4i.y):(R4i.y));
PV0i.z = floatBitsToInt(intBitsToFloat(R125i.w) + -(intBitsToFloat(uf_remappedVS[5].y)));
R124i.w = floatBitsToInt(-(intBitsToFloat(uf_remappedVS[7].y)));
R124i.w = floatBitsToInt(intBitsToFloat(R124i.w) / 2.0);
R126i.w = floatBitsToInt((intBitsToFloat(R4i.y) * 0.0 + intBitsToFloat(R125i.y)));
PS0i = R126i.w;
// 17
backupReg0i = R4i.x;
R4i.x = 0;
R0i.y = 0;
R10i.z = ((R9i.x == 0)?(R125i.w):(PV0i.z));
R10i.w = ((R9i.x == 0)?(R127i.z):(R127i.z));
R11i.x = floatBitsToInt(-(intBitsToFloat(uf_remappedVS[0].x)) + intBitsToFloat(backupReg0i));
PS1i = R11i.x;
// 18
R11i.y = floatBitsToInt(-(intBitsToFloat(uf_remappedVS[0].y)) + intBitsToFloat(R124i.y));
R11i.z = floatBitsToInt(-(intBitsToFloat(uf_remappedVS[0].z)) + intBitsToFloat(R0i.x));
R12i.w = floatBitsToInt((intBitsToFloat(R4i.y) * 0.0 + intBitsToFloat(R126i.z)));
R12i.z = floatBitsToInt((intBitsToFloat(R4i.y) * 0.0 + intBitsToFloat(R127i.y)));
PS0i = R12i.z;
// 19
R12i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.w),intBitsToFloat(R124i.x)) + intBitsToFloat(R126i.w)));
R12i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.y),intBitsToFloat(R124i.w)) + intBitsToFloat(R125i.z)));
R11i.w = 0x3f800000;
}
if( activeMaskStackC[1] == true ) {
// 0
R124i.x = floatBitsToInt(intBitsToFloat(uf_remappedVS[10].y) + intBitsToFloat(uf_remappedVS[10].z));
PS0i = int(intBitsToFloat(uf_remappedVS[10].w));
// 1
R126i.x = (PS0i == 0x00000002)?int(0xFFFFFFFF):int(0x0);
PV1i.y = uf_remappedVS[2].x & 0x00000400;
PV1i.w = (PS0i == int(1))?int(0xFFFFFFFF):int(0x0);
PS1i = int(intBitsToFloat(uf_remappedVS[11].z));
// 2
backupReg0i = R6i.x;
R6i.x = ((PV1i.w == 0)?(R5i.y):(R5i.z));
R127i.y = ((PV1i.w == 0)?(R5i.x):(R5i.y));
PV0i.y = R127i.y;
R123i.z = ((PV1i.w == 0)?(R5i.z):(R5i.x));
PV0i.z = R123i.z;
R125i.w = ((PV1i.y == 0)?(R7i.x):(backupReg0i));
R126i.z = floatBitsToInt(float(PS1i));
PS0i = R126i.z;
// 3
R127i.x = ((R126i.x == 0)?(PV0i.y):(R5i.z));
PV1i.y = floatBitsToInt((0.0 >= abs(intBitsToFloat(PS0i)))?1.0:0.0);
R123i.z = ((R126i.x == 0)?(PV0i.z):(R5i.y));
PV1i.z = R123i.z;
PV1i.w = floatBitsToInt(-(abs(intBitsToFloat(PS0i))) + 0.0);
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PS0i));
// 4
R125i.x = ((intBitsToFloat(PV1i.y) == 0.0)?(0):(PV1i.w));
PV0i.x = R125i.x;
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedVS[10].z), intBitsToFloat(PV1i.z)));
PV0i.y = floatBitsToInt(intBitsToFloat(PV0i.y) * 2.0);
R125i.z = ((R126i.x == 0)?(R6i.x):(R5i.x));
PV0i.w = floatBitsToInt(intBitsToFloat(PS1i) * 0.0);
R127i.w = uf_remappedVS[2].x & 0x00000800;
PS0i = R127i.w;
// 5
PV1i.x = floatBitsToInt(abs(intBitsToFloat(R126i.z)) + intBitsToFloat(PV0i.x));
R124i.y = floatBitsToInt(trunc(intBitsToFloat(PV0i.w)));
PV1i.z = floatBitsToInt(-(intBitsToFloat(PV0i.y)) + intBitsToFloat(R124i.x));
R124i.w = ((R126i.x == 0)?(R127i.y):(R5i.x));
R126i.w = floatBitsToInt(intBitsToFloat(uf_remappedVS[12].z) + intBitsToFloat(uf_remappedVS[13].x));
PS1i = R126i.w;
// 6
R123i.x = ((-(intBitsToFloat(R125i.x)) > 0.0)?(PV1i.x):(R125i.x));
PV0i.x = R123i.x;
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedVS[13].y), intBitsToFloat(R125i.z)));
R127i.y = floatBitsToInt(intBitsToFloat(R127i.y) * 2.0);
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedVS[13].x), intBitsToFloat(R127i.x)));
PV0i.z = floatBitsToInt(intBitsToFloat(PV0i.z) * 2.0);
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R8i.w),intBitsToFloat(uf_remappedVS[10].x)) + intBitsToFloat(PV1i.z)));
PV0i.w = R123i.w;
R125i.z = ((R127i.w == 0)?(R7i.y):(R0i.w));
PS0i = R125i.z;
// 7
backupReg0i = R126i.x;
R126i.x = ((backupReg0i == 0)?(R6i.x):(R5i.y));
R123i.y = ((intBitsToFloat(R126i.z) == 0.0)?(0):(PV0i.x));
PV1i.y = R123i.y;
PV1i.z = floatBitsToInt(intBitsToFloat(uf_remappedVS[12].w) + intBitsToFloat(uf_remappedVS[13].y));
R123i.w = floatBitsToInt((-(intBitsToFloat(PV0i.w)) * intBitsToFloat(0x3e22f983) + 0.5));
PV1i.w = R123i.w;
R125i.y = floatBitsToInt(-(intBitsToFloat(PV0i.z)) + intBitsToFloat(R126i.w));
PS1i = R125i.y;
// 8
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedVS[14].z), intBitsToFloat(R124i.w)));
PV0i.x = floatBitsToInt(intBitsToFloat(PV0i.x) * 2.0);
PV0i.y = floatBitsToInt(fract(intBitsToFloat(PV1i.w)));
PV0i.z = floatBitsToInt(intBitsToFloat(uf_remappedVS[14].x) + intBitsToFloat(uf_remappedVS[14].z));
R124i.w = floatBitsToInt(-(intBitsToFloat(R127i.y)) + intBitsToFloat(PV1i.z));
R127i.x = int(intBitsToFloat(PV1i.y));
PS0i = R127i.x;
// 9
backupReg0i = R124i.y;
R123i.x = floatBitsToInt((intBitsToFloat(PV0i.y) * intBitsToFloat(0x40c90fdb) + -(intBitsToFloat(0x40490fdb))));
PV1i.x = R123i.x;
R124i.y = floatBitsToInt(-(intBitsToFloat(PV0i.x)) + intBitsToFloat(PV0i.z));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedVS[14].w), intBitsToFloat(R126i.x)));
PV1i.z = floatBitsToInt(intBitsToFloat(PV1i.z) * 2.0);
PV1i.w = floatBitsToInt(intBitsToFloat(uf_remappedVS[14].y) + intBitsToFloat(uf_remappedVS[14].w));
R126i.x = int(intBitsToFloat(backupReg0i));
PS1i = R126i.x;
// 10
backupReg0i = R127i.x;
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.w),intBitsToFloat(uf_remappedVS[11].x)) + -(0.5)));
R127i.y = floatBitsToInt(-(intBitsToFloat(PV1i.z)) + intBitsToFloat(PV1i.w));
R126i.z = floatBitsToInt(intBitsToFloat(PV1i.x) * intBitsToFloat(0x3e22f983));
PV0i.z = R126i.z;
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.w), intBitsToFloat(uf_remappedVS[15].w)));
R125i.x = floatBitsToInt(float(backupReg0i));
PS0i = R125i.x;
// 11
R124i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R8i.w),intBitsToFloat(uf_remappedVS[12].y)) + intBitsToFloat(R124i.w)));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.w), intBitsToFloat(uf_remappedVS[16].w)));
R127i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R8i.w)),intBitsToFloat(uf_remappedVS[12].x)) + -(intBitsToFloat(R125i.y))));
R125i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(R4i.z)));
R124i.w = floatBitsToInt(sin((intBitsToFloat(PV0i.z))/0.1591549367));
PS1i = R124i.w;
// 12
R6i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.z),intBitsToFloat(uf_remappedVS[11].y)) + -(0.5)));
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(R127i.x)));
PV0i.z = uf_remappedVS[2].x & 0x00001000;
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.y), intBitsToFloat(R4i.z)));
R125i.y = floatBitsToInt(cos((intBitsToFloat(R126i.z))/0.1591549367));
PS0i = R125i.y;
// 13
backupReg0i = R127i.x;
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R8i.w),intBitsToFloat(uf_remappedVS[13].z)) + intBitsToFloat(R124i.y)));
PV1i.y = uf_remappedVS[2].x & 0x00002000;
R126i.z = ((PV0i.z == 0)?(R7i.x):(R4i.w));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(backupReg0i)));
PS1i = floatBitsToInt(float(R126i.x));
// 14
backupReg0i = R124i.x;
backupReg1i = R127i.z;
R124i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(uf_remappedVS[11].y)),intBitsToFloat(PS1i)) + intBitsToFloat(backupReg0i)));
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R124i.w)),intBitsToFloat(R6i.x)) + intBitsToFloat(PV1i.w)));
PV0i.y = R123i.y;
R127i.z = ((PV1i.y == 0)?(R7i.y):(R0i.z));
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedVS[11].x),intBitsToFloat(R125i.x)) + intBitsToFloat(backupReg1i)));
PV0i.w = R123i.w;
R125i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R8i.w),intBitsToFloat(uf_remappedVS[13].w)) + intBitsToFloat(R127i.y)));
PS0i = R125i.x;
// 15
backupReg0i = R127i.x;
backupReg1i = R126i.y;
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(PV0i.y)) + intBitsToFloat(PV0i.w)));
R126i.y = floatBitsToInt(max(intBitsToFloat(R126i.w), 0.0));
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.y),intBitsToFloat(R6i.x)) + intBitsToFloat(backupReg1i)));
PV1i.z = R123i.z;
PV1i.w = floatBitsToInt(max(intBitsToFloat(R125i.w), 0.0));
R125i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.z), intBitsToFloat(uf_remappedVS[17].x)));
PS1i = R125i.y;
// 16
backupReg0i = R125i.x;
R125i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(uf_remappedVS[17].y)));
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.x), intBitsToFloat(uf_remappedVS[15].x)));
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(PV1i.z)) + -(intBitsToFloat(R124i.x))));
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.y), intBitsToFloat(uf_remappedVS[15].y)));
R125i.z = floatBitsToInt(min(intBitsToFloat(PV1i.w), intBitsToFloat(0x41200000)));
PS0i = R125i.z;
// 17
backupReg0i = R126i.y;
backupReg1i = R127i.x;
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.y), intBitsToFloat(uf_remappedVS[16].y)));
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.x), intBitsToFloat(uf_remappedVS[16].x)));
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.z), intBitsToFloat(uf_remappedVS[15].z)));
R125i.w = floatBitsToInt(min(intBitsToFloat(backupReg0i), intBitsToFloat(0x41200000)));
R2i.x = floatBitsToInt(intBitsToFloat(backupReg1i) + 0.5);
PS1i = R2i.x;
// 18
R0i.x = ((R9i.x == 0)?(R127i.y):(R127i.y));
R2i.y = floatBitsToInt(intBitsToFloat(R127i.z) + 0.5);
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(uf_remappedVS[16].z)));
R2i.w = R125i.x;
R2i.z = R125i.y;
PS0i = R2i.z;
// 19
backupReg0i = R0i.y;
R3i.x = ((R9i.x == 0)?(R126i.y):(R126i.y));
R0i.y = ((R9i.x == 0)?(R126i.w):(R126i.w));
R0i.z = ((R9i.x == 0)?(R126i.z):(R126i.z));
R0i.w = ((R9i.x == 0)?(R125i.z):(backupReg0i));
// 20
R3i.y = ((R9i.x == 0)?(R127i.x):(R127i.x));
R3i.z = ((R9i.x == 0)?(R127i.z):(R127i.z));
// 21
R3i.w = ((R9i.x == 0)?(R125i.w):(R4i.x));
}
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
R4i.z = int(intBitsToFloat(uf_remappedVS[18].w));
PS0i = R4i.z;
// 1
predResult = (R4i.z == int(1));
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
activeMaskStack[2] = activeMaskStack[1];
activeMaskStackC[3] = activeMaskStackC[2];
// 0
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.w), intBitsToFloat(uf_remappedVS[18].z)));
R4i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.w), intBitsToFloat(uf_remappedVS[19].y)));
// 1
R127i.x = ((intBitsToFloat(PV0i.y) > intBitsToFloat(R8i.w))?int(0xFFFFFFFF):int(0x0));
PV1i.z = floatBitsToInt(-(intBitsToFloat(uf_remappedVS[18].x)) + intBitsToFloat(uf_remappedVS[18].y));
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PV0i.y));
// 2
PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.z) * intBitsToFloat(PS1i));
// 3
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R8i.w),intBitsToFloat(PV0i.y)) + intBitsToFloat(uf_remappedVS[18].x)/resScale));
PV1i.x = R123i.x;
// 4
R5i.z = ((R127i.x == 0)?(uf_remappedVS[18].y):(PV1i.x));
// 5
predResult = (intBitsToFloat(R8i.w) >= intBitsToFloat(R4i.z));
activeMaskStack[2] = predResult;
activeMaskStackC[3] = predResult == true && activeMaskStackC[2] == true;
}
else {
activeMaskStack[2] = false;
activeMaskStackC[3] = false;
}
if( activeMaskStackC[3] == true ) {
// 0
R127i.x = floatBitsToInt(-(intBitsToFloat(uf_remappedVS[18].y)) + intBitsToFloat(uf_remappedVS[19].x));
R127i.y = floatBitsToInt(intBitsToFloat(R8i.w) + -(intBitsToFloat(R4i.z)));
PV0i.z = floatBitsToInt(intBitsToFloat(R5i.w) + -(intBitsToFloat(R4i.z)));
// 1
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PV0i.z));
// 2
PV0i.y = floatBitsToInt(intBitsToFloat(R127i.x) * intBitsToFloat(PS1i));
// 3
R5i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(R127i.y)) + intBitsToFloat(uf_remappedVS[18].y)));
}
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
// 0
R11i.w = R5i.z;
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
// export
SET_POSITION(vec4(intBitsToFloat(R10i.x), intBitsToFloat(R10i.y), intBitsToFloat(R10i.z), intBitsToFloat(R10i.w)));
// export
passParameterSem0 = vec4(intBitsToFloat(R0i.x), intBitsToFloat(R0i.y), intBitsToFloat(R0i.z), intBitsToFloat(R0i.w));
// export
passParameterSem1 = vec4(intBitsToFloat(R3i.x), intBitsToFloat(R3i.y), intBitsToFloat(R3i.z), intBitsToFloat(R3i.w));
// export
passParameterSem3 = vec4(intBitsToFloat(R11i.x), intBitsToFloat(R11i.y), intBitsToFloat(R11i.z), intBitsToFloat(R11i.w));
// export
passParameterSem4 = vec4(intBitsToFloat(R12i.x), intBitsToFloat(R12i.y), intBitsToFloat(R12i.z), intBitsToFloat(R12i.w));
// export
passParameterSem6 = vec4(intBitsToFloat(R1i.x), intBitsToFloat(R1i.y), intBitsToFloat(R1i.z), intBitsToFloat(R1i.w));
// export
passParameterSem10 = vec4(intBitsToFloat(R2i.x), intBitsToFloat(R2i.y), intBitsToFloat(R2i.z), intBitsToFloat(R2i.w));
if( activeMaskStackC[1] == true ) {
// 0
}
}
