#version 460
#extension GL_ARB_texture_gather : enable
#ifdef VULKAN
#define ATTR_LAYOUT(__vkSet, __location) layout(set = __vkSet, location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation)
#define SET_POSITION(_v) gl_Position = _v; gl_Position.z = (gl_Position.z + gl_Position.w) / 2.0
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale.xy,gl_FragCoord.zw)
#define gl_VertexID gl_VertexIndex
#define gl_InstanceID gl_InstanceIndex
#else
#define ATTR_LAYOUT(__vkSet, __location) layout(location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation)
#define SET_POSITION(_v) gl_Position = _v
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw)
#endif

#ifdef VULKAN
layout(set = 1, binding = 1) uniform ufBlock
{
uniform ivec4 uf_remappedPS[5];
uniform vec4 uf_fragCoordScale;
};
#else
uniform ivec4 uf_remappedPS[5];
uniform vec2 uf_fragCoordScale;
#endif








//// shader d81508000beb90fd
//layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0xf4c24800 res 1280x720x1 dim 1 tm: 4 format 0816 compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 0
//layout(location = 0) in vec4 passParameterSem0;
//layout(location = 0) out vec4 passPixelColor0;
//uniform vec2 uf_fragCoordScale;
//int clampFI32(int v)
//{
//if( v == 0x7FFFFFFF )
//	return floatBitsToInt(1.0);
//else if( v == 0xFFFFFFFF )
//	return floatBitsToInt(0.0);
//return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
//}
//float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
//void main()
//{
//vec4 R0f = vec4(0.0);
//float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
//vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
//float PS0f = 0.0, PS1f = 0.0;
//vec4 tempf = vec4(0.0);
//float tempResultf;
//int tempResulti;
//ivec4 ARi = ivec4(0);
//bool predResult = true;
//vec3 cubeMapSTM;
//int cubeMapFaceId;
////R0f = passParameterSem0;
////R0f.xyz = (textureLod(textureUnitPS0, R0f.zw,0.0).xyz);
//// 0
//backupReg0f = R0f.x;
//backupReg1f = R0f.y;
//backupReg2f = R0f.z;
//R0f.x = dot(vec4(backupReg0f,backupReg1f,backupReg2f,-0.0),vec4(intBitsToFloat(0x3e59b3d0),intBitsToFloat(0x3f371759),intBitsToFloat(0x3d93dd98),0.0));
//PV0f.x = R0f.x;
//PV0f.y = R0f.x;
//PV0f.z = R0f.x;
//PV0f.w = R0f.x;
//// export
//passPixelColor0 = vec4(R0f.x, R0f.x, R0f.x, R0f.x);
//}
