#version 460
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader d50af77827baa4cf
// Used for: Changing the brightness of the game's rendering for EU and US versions of the game


// start of shader inputs/outputs, predetermined by Cemu. Do not touch
#ifdef VULKAN
#define ATTR_LAYOUT(__vkSet, __location) layout(set = __vkSet, location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation)
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale.xy,gl_FragCoord.zw)
#else
#define ATTR_LAYOUT(__vkSet, __location) layout(location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation, std140) 
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation)
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw)
#endif
#ifdef VULKAN
layout(set = 1, binding = 2) uniform ufBlock
{
uniform ivec4 uf_remappedPS[1];
uniform vec4 uf_fragCoordScale;
};
#else
uniform ivec4 uf_remappedPS[1];
uniform vec2 uf_fragCoordScale;
#endif
TEXTURE_LAYOUT(1, 1, 0) uniform sampler2D textureUnitPS1;
TEXTURE_LAYOUT(3, 1, 1) uniform sampler2D textureUnitPS3;
layout(location = 0) in vec4 passParameterSem128;
layout(location = 0) out vec4 passPixelColor0;
// end of shader inputs/outputs
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem128;
R1f.xyzw = (texture(textureUnitPS1, R0f.xy).xyzw);
R0f.xyz = (texture(textureUnitPS3, R0f.xy).xyz);
// 0
R127f.z = mul_nonIEEE(R1f.w, R1f.w);
PV0f.z = R127f.z;
R123f.w = (-(R1f.w) * 4.0 + 1.0);
R123f.w = clamp(R123f.w, 0.0, 1.0);
PV0f.w = R123f.w;
R2f.w = 1.0;
PS0f = R2f.w;
// 1
PV1f.x = mul_nonIEEE(R1f.z, PV0f.z);
PV1f.y = mul_nonIEEE(PV0f.w, intBitsToFloat(uf_remappedPS[0].x));
PV1f.z = mul_nonIEEE(R1f.y, PV0f.z);
PV1f.w = mul_nonIEEE(R1f.x, PV0f.z);
// 2
backupReg0f = R0f.x;
PV0f.x = R127f.z + PV1f.y;
R127f.y = (mul_nonIEEE(backupReg0f,PV1f.y) + PV1f.w);
R127f.z = (mul_nonIEEE(R0f.z,PV1f.y) + PV1f.x);
R127f.w = (mul_nonIEEE(R0f.y,PV1f.y) + PV1f.z);
// 3
PV1f.y = PV0f.x + intBitsToFloat(0x3727c5ac);
// 4
PS0f = 1.0 / PV1f.y;
// 5
R2f.x = mul_nonIEEE(R127f.y, PS0f);
R2f.y = mul_nonIEEE(R127f.w, PS0f);
R2f.z = mul_nonIEEE(R127f.z, PS0f);
// export
passPixelColor0 = clamp(vec4(R2f.x, R2f.y, R2f.z, R2f.w)*$brightness, 0.0, 1.0);
}
