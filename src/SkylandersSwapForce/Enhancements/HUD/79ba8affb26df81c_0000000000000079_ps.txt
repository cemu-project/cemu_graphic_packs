#version 460

layout(set = 1, binding = 1, std140) uniform ufBlock
{
    vec4 uf_fragCoordScale;
} _118;

layout(set = 1, binding = 0) uniform sampler2D textureUnitPS0;

layout(location = 0) in vec4 passParameterSem144;
layout(location = 1) in vec4 passParameterSem133;
layout(location = 0) out vec4 passPixelColor0;

float mul_nonIEEE(float a, float b)
{
    return ((a != 0.0) && (b != 0.0)) ? (a * b) : 0.0;
}

void main()
{
    vec4 R0f = vec4(0.0);
    vec4 R1f = vec4(0.0);
    float PV0fx = 0.0;
    float PV0fy = 0.0;
    float PV0fz = 0.0;
    float PV0fw = 0.0;
    float PV1fx = 0.0;
    float PV1fy = 0.0;
    float PV1fz = 0.0;
    float PV1fw = 0.0;
    float PS0f = 0.0;
    float PS1f = 0.0;
    vec4 tempf = vec4(0.0);
    ivec4 ARi = ivec4(0);
    bool predResult = true;
    R0f = passParameterSem144;
    R1f = passParameterSem133;
    R1f = texture(textureUnitPS0, vec2(R1f.x, R1f.y));
    float param = R0f.x;
    float param_1 = R1f.x;
    R0f.x = mul_nonIEEE(param, param_1);
    float param_2 = R0f.y;
    float param_3 = R1f.y;
    R0f.y = mul_nonIEEE(param_2, param_3);
    float param_4 = R0f.z;
    float param_5 = R1f.z;
    R0f.z = mul_nonIEEE(param_4, param_5);
    float param_6 = R0f.w;
    float param_7 = R1f.w;
    R0f.w = mul_nonIEEE(param_6, param_7);
    passPixelColor0 = vec4(R0f.x, R0f.y, R0f.z, 0.0);
}

