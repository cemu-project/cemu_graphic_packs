#version 430
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 7cd338ce4c6ea935
// Used for: Ultrawide cutscenes (when enabled)
float aspectRatio = float(($gameWidth/$gameHeight)/($width/$height));
float reverseAspectRatio = float(($width/$height)/($gameWidth/$gameHeight));


// start of shader inputs/outputs, predetermined by Cemu. Do not touch
#ifdef VULKAN
#define ATTR_LAYOUT(__vkSet, __location) layout(set = __vkSet, location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation)
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale.xy,gl_FragCoord.zw)
#else
#define ATTR_LAYOUT(__vkSet, __location) layout(location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation, std140) 
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation)
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw)
#endif
#ifdef VULKAN
layout(set = 1, binding = 1) uniform ufBlock
{
uniform ivec4 uf_remappedPS[1];
uniform vec4 uf_fragCoordScale;
};
#else
uniform ivec4 uf_remappedPS[1];
uniform vec2 uf_fragCoordScale;
#endif
TEXTURE_LAYOUT(0, 1, 0) uniform sampler2D textureUnitPS0;
layout(location = 0) in vec4 passParameterSem0;
layout(location = 0) out vec4 passPixelColor0;
// end of shader inputs/outputs
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;

#if $ultrawideHUDMode != 0
float uv_x = 0.5 + (R0f.x - 0.5) / aspectRatio;
R0f.xyzw = (texture(textureUnitPS0, vec2(uv_x, R0f.y)).xyzw);
#else
R0f.xyzw = (texture(textureUnitPS0, vec2(R0f.xy)).xyzw);
#endif
// 0
backupReg0f = R0f.x;
tempResultf = max(0.0, backupReg0f);
tempResultf = log2(tempResultf);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0f = tempResultf;
// 1
R127f.z = mul_nonIEEE(PS0f, intBitsToFloat(uf_remappedPS[0].x));
tempResultf = max(0.0, R0f.y);
tempResultf = log2(tempResultf);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1f = tempResultf;
// 2
R127f.w = mul_nonIEEE(PS1f, intBitsToFloat(uf_remappedPS[0].x));
tempResultf = max(0.0, R0f.z);
tempResultf = log2(tempResultf);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0f = tempResultf;
// 3
R127f.x = mul_nonIEEE(PS0f, intBitsToFloat(uf_remappedPS[0].x));
PS1f = exp2(R127f.z);
// 4
R0f.x = PS1f;
PS0f = exp2(R127f.w);
// 5
R0f.y = PS0f;
PS1f = exp2(R127f.x);
// 6
R0f.z = PS1f;
// export

#if $ultrawideHUDMode != 0
bool isBorder = uv_x < 0 || uv_x > 1.0;
passPixelColor0 = isBorder ? vec4(0.0) : R0f.xyzw;
#else
passPixelColor0 = vec4(R0f.x, R0f.y, R0f.z, R0f.w);
#endif
}
