#version 460
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 569ebe93f1ae5799
// Used for: Hiding text blur used in subtitles and full hearts


// start of shader inputs/outputs, predetermined by Cemu. Do not touch
#ifdef VULKAN
#define ATTR_LAYOUT(__vkSet, __location) layout(set = __vkSet, location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation)
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale.xy,gl_FragCoord.zw)
#else
#define ATTR_LAYOUT(__vkSet, __location) layout(location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation)
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw)
#endif
#ifdef VULKAN
layout(set = 1, binding = 1) uniform ufBlock
{
uniform ivec4 uf_remappedPS[2];
uniform vec4 uf_fragCoordScale;
};
#else
uniform ivec4 uf_remappedPS[2];
uniform vec2 uf_fragCoordScale;
#endif
TEXTURE_LAYOUT(0, 1, 0) uniform sampler2D textureUnitPS0;
layout(location = 0) in vec4 passParameterSem0;
layout(location = 0) out vec4 passPixelColor0;
// end of shader inputs/outputs
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R0f.xyzw = (texture(textureUnitPS0, R0f.xy).xyzw);
// 0
R1f.x = (mul_nonIEEE(R0f.x,intBitsToFloat(uf_remappedPS[0].x)) + intBitsToFloat(uf_remappedPS[1].x));
R1f.y = (mul_nonIEEE(R0f.y,intBitsToFloat(uf_remappedPS[0].y)) + intBitsToFloat(uf_remappedPS[1].y));
// 1
R1f.z = (mul_nonIEEE(R0f.z,intBitsToFloat(uf_remappedPS[0].z)) + intBitsToFloat(uf_remappedPS[1].z));
R1f.w = (mul_nonIEEE(R0f.w,intBitsToFloat(uf_remappedPS[0].w)) + intBitsToFloat(uf_remappedPS[1].w));
// export

#if ($hideSubtitles == 1)
// Hide subtitle background blur
if (textureSize(textureUnitPS0, 0).xy == ivec2(175, 38)) {
	R1f.xyzw = vec4(0.0);
}
#endif

#if ($hideHearts == 1)
// Hide red full hearts
if (textureSize(textureUnitPS0, 0).xy == ivec2(48, 48) && texelFetch(textureUnitPS0, ivec2(30, 15), 0) == vec4(0.0,0.0,0.0,1.0) && texelFetch(textureUnitPS0, ivec2(23, 15), 0) == vec4(0.0,0.0,0.0,0.0)) {
	R1f.xyzw = ivec4(0.0);
}
#endif

#if ($hideMasterModeIcon == 1)
// Hide master mode icon
if (textureSize(textureUnitPS0, 0).xy == ivec2(36, 36) && texelFetch(textureUnitPS0, ivec2(12, 18), 0) == vec4(1.0,1.0,1.0,0.0) && texelFetch(textureUnitPS0, ivec2(12, 17), 0) == vec4(1.0,1.0,1.0,1.0) && texelFetch(textureUnitPS0, ivec2(4, 30), 0) == vec4(1.0,1.0,1.0,1.0)) {
	R1f.xyzw = ivec4(0.0);
}
#endif

#if ($hideCameraGUI == 1)
// Hide vignette borders in camera view
if (textureSize(textureUnitPS0, 0).xy == ivec2(242, 162)) {
	R1f.xyzw = ivec4(0.0);
}

// Hide camera zooming triangle
if (textureSize(textureUnitPS0, 0).xy == ivec2(75, 75) && texelFetch(textureUnitPS0, ivec2(55, 39), 0) == vec4(1.0,1.0,1.0,0.0) && texelFetch(textureUnitPS0, ivec2(47, 44), 0) == vec4(1.0,1.0,1.0,1.0) && texelFetch(textureUnitPS0, ivec2(32, 21), 0) == vec4(1.0,1.0,1.0,0.0)) {
	R1f.xyzw = ivec4(0.0);
}

// Hide camera zooming bar
if (textureSize(textureUnitPS0, 0).xy == ivec2(8, 8) && texelFetch(textureUnitPS0, ivec2(7, 3), 0) == vec4(1.0,1.0,1.0,1.0) && uf_remappedPS[1].w == 0 && R1f.y >= 0.49700 && R1f.y <= 0.49900) {
	R1f.xyzw = ivec4(0.0);
}

// Hides the actual colored camera rune textures
if (textureSize(textureUnitPS0, 0).xy == ivec2(79, 187) && texelFetch(textureUnitPS0, ivec2(24, 62), 0) == vec4(0.0,0.0,0.0,0.0) && (texelFetch(textureUnitPS0, ivec2(33, 92), 0).xyzw).zw == vec2(0.125, 1.0)) {
	R1f.xyzw = ivec4(0.0);
}
if (textureSize(textureUnitPS0, 0).xy == ivec2(88, 77) && texelFetch(textureUnitPS0, ivec2(24, 40), 0) == vec4(0.0,0.0,0.0,0.0) && (texelFetch(textureUnitPS0, ivec2(36, 31), 0).xyzw).yw == vec2(0.125, 1.0) && (texelFetch(textureUnitPS0, ivec2(68, 17), 0).xyzw).xw == vec2(0.25, 1.0)) {
	R1f.xyzw = ivec4(0.0);
}
if (textureSize(textureUnitPS0, 0).xy == ivec2(151, 139) && texelFetch(textureUnitPS0, ivec2(26, 29), 0) == vec4(0.0,0.0,0.0,0.0) && (texelFetch(textureUnitPS0, ivec2(28, 77), 0).xyzw).yw == vec2(0.1875, 1.0) && (texelFetch(textureUnitPS0, ivec2(95, 22), 0).xyzw).xw == vec2(0.125, 1.0)) {
	R1f.xyzw = ivec4(0.0);
}
if (textureSize(textureUnitPS0, 0).xy == ivec2(57, 171) && texelFetch(textureUnitPS0, ivec2(30, 11), 0) == vec4(0.0,0.0,0.0,0.0) && (texelFetch(textureUnitPS0, ivec2(26, 94), 0).xyzw).xw == vec2(0.25, 1.0) && (texelFetch(textureUnitPS0, ivec2(46, 99), 0).xyzw).xw == vec2(0.125, 1.0)) {
	R1f.xyzw = ivec4(0.0);
}
if (textureSize(textureUnitPS0, 0).xy == ivec2(97, 156) && texelFetch(textureUnitPS0, ivec2(34, 100), 0) == vec4(0.0,0.0,0.0,0.0) && (texelFetch(textureUnitPS0, ivec2(40, 103), 0).xyzw).xw == vec2(0.125, 1.0) && (texelFetch(textureUnitPS0, ivec2(66, 94), 0).xyzw).xw == vec2(0.125, 1.0)) {
	R1f.xyzw = ivec4(0.0);
}
if (textureSize(textureUnitPS0, 0).xy == ivec2(96, 69) && texelFetch(textureUnitPS0, ivec2(18, 52), 0) == vec4(0.0,0.0,0.0,0.0) && (texelFetch(textureUnitPS0, ivec2(86, 33), 0).xyzw).xw == vec2(0.25, 1.0) && (texelFetch(textureUnitPS0, ivec2(16, 66), 0).xyzw).xw == vec2(0.125, 1.0)) {
	R1f.xyzw = ivec4(0.0);
}
#endif

passPixelColor0 = vec4(R1f.x, R1f.y, R1f.z, R1f.w);
}
