#version 460
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 3c6c7691f6e2f2e4
// Stages
// start of shader inputs/outputs, predetermined by Cemu. Do not touch
#ifdef VULKAN
#define ATTR_LAYOUT(__vkSet, __location) layout(set = __vkSet, location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation)
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale.xy,gl_FragCoord.zw)
#else
#define ATTR_LAYOUT(__vkSet, __location) layout(location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation)
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw)
#endif
#ifdef VULKAN
layout(set = 1, binding = 3) uniform ufBlock
{
uniform vec4 uf_fragCoordScale;
};
#else
uniform vec2 uf_fragCoordScale;
#endif
TEXTURE_LAYOUT(0, 1, 0) uniform sampler2D textureUnitPS0;
TEXTURE_LAYOUT(1, 1, 1) uniform sampler2D textureUnitPS1;
TEXTURE_LAYOUT(3, 1, 2) uniform sampler2D textureUnitPS3;
layout(location = 0) in vec4 passParameterSem136;
layout(location = 0) out vec4 passPixelColor0;
// end of shader inputs/outputs
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R123f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem136;
R2f.xyz = (texture(textureUnitPS0, R0f.xy).xyz);
R1f.xyzw = (texture(textureUnitPS1, R0f.xy).xyzw);
R0f.xyz = (texture(textureUnitPS3, R0f.xy).xyz);
// 0
PV0f.x = -(R2f.y) + R1f.y;
PV0f.y = -(R2f.x) + R1f.x;
PV0f.w = -(R2f.z) + R1f.z;
R3f.w = 1.0;
PS0f = R3f.w;
// 1
R123f.x = (mul_nonIEEE(PV0f.w,R1f.w) + R2f.z);
PV1f.x = R123f.x;
R123f.y = (mul_nonIEEE(PV0f.x,R1f.w) + R2f.y);
PV1f.y = R123f.y;
R123f.z = (mul_nonIEEE(PV0f.y,R1f.w) + R2f.x);
PV1f.z = R123f.z;
// 2 (brightness modified here)
R3f.xyz = vec3(R0f.x,R0f.y,R0f.z) + vec3(PV1f.z,PV1f.y,PV1f.x) * 1.6666666667;
// export
passPixelColor0 = vec4(R3f.x, R3f.y, R3f.z, R3f.w);
}
