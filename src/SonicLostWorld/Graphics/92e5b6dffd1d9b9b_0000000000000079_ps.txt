#version 460
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
#ifdef VULKAN
#define ATTR_LAYOUT(__vkSet, __location) layout(set = __vkSet, location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation)
#define SET_POSITION(_v) gl_Position = _v; gl_Position.z = (gl_Position.z + gl_Position.w) / 2.0
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale.xy,gl_FragCoord.zw)
#define gl_VertexID gl_VertexIndex
#define gl_InstanceID gl_InstanceIndex
#else
#define ATTR_LAYOUT(__vkSet, __location) layout(location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation, std140) 
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation)
#define SET_POSITION(_v) gl_Position = _v
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw)
#endif
// This shader was automatically converted to be cross-compatible with Vulkan and OpenGL.

// shader 92e5b6dffd1d9b9b
const float resXScale = float($width)/float($gameWidth);
const float resYScale = float($height)/float($gameHeight);
#ifdef VULKAN
layout(set = 1, binding = 1) uniform ufBlock
{
uniform ivec4 uf_remappedPS[30];
uniform vec4 uf_fragCoordScale;
};
#else
uniform ivec4 uf_remappedPS[30];
uniform vec2 uf_fragCoordScale;
#endif
TEXTURE_LAYOUT(0, 1, 0) uniform sampler2D textureUnitPS0;
layout(location = 0) in vec4 passParameterSem136;
layout(location = 0) out vec4 passPixelColor0;
// uf_fragCoordScale was moved to the ufBlock
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R123f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem136;
// 0
R1f.x = R0f.x + intBitsToFloat(uf_remappedPS[0].x);
R1f.y = R0f.y + intBitsToFloat(uf_remappedPS[0].y);
R0f.z = R0f.x + intBitsToFloat(uf_remappedPS[1].x) / resXScale;
R0f.w = R0f.y + intBitsToFloat(uf_remappedPS[1].y) / resYScale;
// 1
R2f.x = R0f.x + intBitsToFloat(uf_remappedPS[2].x) / resXScale;
R2f.y = R0f.y + intBitsToFloat(uf_remappedPS[2].y) / resYScale;
R1f.z = R0f.x + intBitsToFloat(uf_remappedPS[3].x) / resXScale;
R1f.w = R0f.y + intBitsToFloat(uf_remappedPS[3].y) / resYScale;
R3f.xyzw = (texture(textureUnitPS0, R1f.xy).xyzw);
R4f.xyzw = (texture(textureUnitPS0, R0f.zw).xyzw);
R2f.xyzw = (texture(textureUnitPS0, R2f.xy).xyzw);
R1f.xyzw = (texture(textureUnitPS0, R1f.zw).xyzw);
// 0
R123f.x = (mul_nonIEEE(R3f.y,intBitsToFloat(uf_remappedPS[4].y)) + 0.0);
PV0f.x = R123f.x;
R123f.y = (mul_nonIEEE(R3f.x,intBitsToFloat(uf_remappedPS[4].x)) + 0.0);
PV0f.y = R123f.y;
R123f.z = (mul_nonIEEE(R3f.w,intBitsToFloat(uf_remappedPS[4].w)) + 0.0);
PV0f.z = R123f.z;
R123f.w = (mul_nonIEEE(R3f.z,intBitsToFloat(uf_remappedPS[4].z)) + 0.0);
PV0f.w = R123f.w;
// 1
R123f.x = (mul_nonIEEE(R4f.y,intBitsToFloat(uf_remappedPS[5].y)) + PV0f.x);
PV1f.x = R123f.x;
R123f.y = (mul_nonIEEE(R4f.x,intBitsToFloat(uf_remappedPS[5].x)) + PV0f.y);
PV1f.y = R123f.y;
R123f.z = (mul_nonIEEE(R4f.w,intBitsToFloat(uf_remappedPS[5].w)) + PV0f.z);
PV1f.z = R123f.z;
R123f.w = (mul_nonIEEE(R4f.z,intBitsToFloat(uf_remappedPS[5].z)) + PV0f.w);
PV1f.w = R123f.w;
// 2
R123f.x = (mul_nonIEEE(R2f.w,intBitsToFloat(uf_remappedPS[6].w)) + PV1f.z);
PV0f.x = R123f.x;
R123f.y = (mul_nonIEEE(R2f.z,intBitsToFloat(uf_remappedPS[6].z)) + PV1f.w);
PV0f.y = R123f.y;
R123f.z = (mul_nonIEEE(R2f.y,intBitsToFloat(uf_remappedPS[6].y)) + PV1f.x);
PV0f.z = R123f.z;
R123f.w = (mul_nonIEEE(R2f.x,intBitsToFloat(uf_remappedPS[6].x)) + PV1f.y);
PV0f.w = R123f.w;
// 3
R4f.x = (mul_nonIEEE(R1f.z,intBitsToFloat(uf_remappedPS[7].z)) + PV0f.y);
R4f.y = (mul_nonIEEE(R1f.w,intBitsToFloat(uf_remappedPS[7].w)) + PV0f.x);
R4f.z = (mul_nonIEEE(R1f.y,intBitsToFloat(uf_remappedPS[7].y)) + PV0f.z);
R4f.w = (mul_nonIEEE(R1f.x,intBitsToFloat(uf_remappedPS[7].x)) + PV0f.w);
// 4
R1f.xyz = vec3(R0f.x,R0f.y,R0f.x) + vec3(intBitsToFloat(uf_remappedPS[8].x) / resXScale,intBitsToFloat(uf_remappedPS[8].y) / resYScale,intBitsToFloat(uf_remappedPS[9].x) / resXScale);
R1f.w = R0f.y + intBitsToFloat(uf_remappedPS[9].y) / resYScale;
// 5
R2f.xyz = vec3(R0f.x,R0f.y,R0f.x) + vec3(intBitsToFloat(uf_remappedPS[10].x) / resXScale,intBitsToFloat(uf_remappedPS[10].y) / resYScale,intBitsToFloat(uf_remappedPS[11].x) / resXScale);
R2f.w = R0f.y + intBitsToFloat(uf_remappedPS[11].y) / resYScale;
R3f.xyzw = (texture(textureUnitPS0, R1f.xy).xyzw);
R1f.xyzw = (texture(textureUnitPS0, R1f.zw).xyzw);
R5f.xyzw = (texture(textureUnitPS0, R2f.xy).xyzw);
R2f.xyzw = (texture(textureUnitPS0, R2f.zw).xyzw);
// 0
R123f.x = (mul_nonIEEE(R3f.y,intBitsToFloat(uf_remappedPS[12].y)) + R4f.z);
PV0f.x = R123f.x;
R123f.y = (mul_nonIEEE(R3f.x,intBitsToFloat(uf_remappedPS[12].x)) + R4f.w);
PV0f.y = R123f.y;
R123f.z = (mul_nonIEEE(R3f.w,intBitsToFloat(uf_remappedPS[12].w)) + R4f.y);
PV0f.z = R123f.z;
R123f.w = (mul_nonIEEE(R3f.z,intBitsToFloat(uf_remappedPS[12].z)) + R4f.x);
PV0f.w = R123f.w;
// 1
R123f.x = (mul_nonIEEE(R1f.y,intBitsToFloat(uf_remappedPS[13].y)) + PV0f.x);
PV1f.x = R123f.x;
R123f.y = (mul_nonIEEE(R1f.x,intBitsToFloat(uf_remappedPS[13].x)) + PV0f.y);
PV1f.y = R123f.y;
R123f.z = (mul_nonIEEE(R1f.w,intBitsToFloat(uf_remappedPS[13].w)) + PV0f.z);
PV1f.z = R123f.z;
R123f.w = (mul_nonIEEE(R1f.z,intBitsToFloat(uf_remappedPS[13].z)) + PV0f.w);
PV1f.w = R123f.w;
// 2
R123f.x = (mul_nonIEEE(R5f.w,intBitsToFloat(uf_remappedPS[14].w)) + PV1f.z);
PV0f.x = R123f.x;
R123f.y = (mul_nonIEEE(R5f.z,intBitsToFloat(uf_remappedPS[14].z)) + PV1f.w);
PV0f.y = R123f.y;
R123f.z = (mul_nonIEEE(R5f.y,intBitsToFloat(uf_remappedPS[14].y)) + PV1f.x);
PV0f.z = R123f.z;
R123f.w = (mul_nonIEEE(R5f.x,intBitsToFloat(uf_remappedPS[14].x)) + PV1f.y);
PV0f.w = R123f.w;
// 3
R1f.x = (mul_nonIEEE(R2f.z,intBitsToFloat(uf_remappedPS[15].z)) + PV0f.y);
R1f.y = (mul_nonIEEE(R2f.w,intBitsToFloat(uf_remappedPS[15].w)) + PV0f.x);
R1f.z = (mul_nonIEEE(R2f.y,intBitsToFloat(uf_remappedPS[15].y)) + PV0f.z);
R1f.w = (mul_nonIEEE(R2f.x,intBitsToFloat(uf_remappedPS[15].x)) + PV0f.w);
// 4
R2f.xyz = vec3(R0f.x,R0f.y,R0f.x) + vec3(intBitsToFloat(uf_remappedPS[16].x) / resXScale,intBitsToFloat(uf_remappedPS[16].y) / resYScale,intBitsToFloat(uf_remappedPS[17].x) / resXScale);
R2f.w = R0f.y + intBitsToFloat(uf_remappedPS[17].y) / resYScale;
// 5
R5f.xyz = vec3(R0f.x,R0f.y,R0f.x) + vec3(intBitsToFloat(uf_remappedPS[18].x) / resXScale,intBitsToFloat(uf_remappedPS[18].y) / resYScale,intBitsToFloat(uf_remappedPS[19].x) / resXScale);
R5f.w = R0f.y + intBitsToFloat(uf_remappedPS[19].y) / resYScale;
R3f.xyzw = (texture(textureUnitPS0, R2f.xy).xyzw);
R2f.xyzw = (texture(textureUnitPS0, R2f.zw).xyzw);
R4f.xyzw = (texture(textureUnitPS0, R5f.xy).xyzw);
R5f.xyzw = (texture(textureUnitPS0, R5f.zw).xyzw);
// 0
R123f.x = (mul_nonIEEE(R3f.y,intBitsToFloat(uf_remappedPS[20].y)) + R1f.z);
PV0f.x = R123f.x;
R123f.y = (mul_nonIEEE(R3f.x,intBitsToFloat(uf_remappedPS[20].x)) + R1f.w);
PV0f.y = R123f.y;
R123f.z = (mul_nonIEEE(R3f.w,intBitsToFloat(uf_remappedPS[20].w)) + R1f.y);
PV0f.z = R123f.z;
R123f.w = (mul_nonIEEE(R3f.z,intBitsToFloat(uf_remappedPS[20].z)) + R1f.x);
PV0f.w = R123f.w;
// 1
R123f.x = (mul_nonIEEE(R2f.y,intBitsToFloat(uf_remappedPS[21].y)) + PV0f.x);
PV1f.x = R123f.x;
R123f.y = (mul_nonIEEE(R2f.x,intBitsToFloat(uf_remappedPS[21].x)) + PV0f.y);
PV1f.y = R123f.y;
R123f.z = (mul_nonIEEE(R2f.w,intBitsToFloat(uf_remappedPS[21].w)) + PV0f.z);
PV1f.z = R123f.z;
R123f.w = (mul_nonIEEE(R2f.z,intBitsToFloat(uf_remappedPS[21].z)) + PV0f.w);
PV1f.w = R123f.w;
// 2
R123f.x = (mul_nonIEEE(R4f.w,intBitsToFloat(uf_remappedPS[22].w)) + PV1f.z);
PV0f.x = R123f.x;
R123f.y = (mul_nonIEEE(R4f.z,intBitsToFloat(uf_remappedPS[22].z)) + PV1f.w);
PV0f.y = R123f.y;
R123f.z = (mul_nonIEEE(R4f.y,intBitsToFloat(uf_remappedPS[22].y)) + PV1f.x);
PV0f.z = R123f.z;
R123f.w = (mul_nonIEEE(R4f.x,intBitsToFloat(uf_remappedPS[22].x)) + PV1f.y);
PV0f.w = R123f.w;
// 3
R4f.x = (mul_nonIEEE(R5f.z,intBitsToFloat(uf_remappedPS[23].z)) + PV0f.y);
R4f.y = (mul_nonIEEE(R5f.w,intBitsToFloat(uf_remappedPS[23].w)) + PV0f.x);
R4f.z = (mul_nonIEEE(R5f.y,intBitsToFloat(uf_remappedPS[23].y)) + PV0f.z);
R4f.w = (mul_nonIEEE(R5f.x,intBitsToFloat(uf_remappedPS[23].x)) + PV0f.w);
// 4
R5f.xyz = vec3(R0f.x,R0f.y,R0f.x) + vec3(intBitsToFloat(uf_remappedPS[24].x) / resXScale,intBitsToFloat(uf_remappedPS[24].y) / resYScale,intBitsToFloat(uf_remappedPS[25].x) / resXScale);
R5f.w = R0f.y + intBitsToFloat(uf_remappedPS[25].y) / resYScale;
// 5
backupReg0f = R0f.x;
backupReg1f = R0f.y;
R0f.x = backupReg0f + intBitsToFloat(uf_remappedPS[26].x);
R0f.y = backupReg1f + intBitsToFloat(uf_remappedPS[26].y);
R2f.xyzw = (texture(textureUnitPS0, R5f.xy).xyzw);
R5f.xyzw = (texture(textureUnitPS0, R5f.zw).xyzw);
R0f.xyzw = (texture(textureUnitPS0, R0f.xy).xyzw);
// 0
R123f.x = (mul_nonIEEE(R2f.y,intBitsToFloat(uf_remappedPS[27].y)) + R4f.z);
PV0f.x = R123f.x;
R123f.y = (mul_nonIEEE(R2f.x,intBitsToFloat(uf_remappedPS[27].x)) + R4f.w);
PV0f.y = R123f.y;
R123f.z = (mul_nonIEEE(R2f.w,intBitsToFloat(uf_remappedPS[27].w)) + R4f.y);
PV0f.z = R123f.z;
R123f.w = (mul_nonIEEE(R2f.z,intBitsToFloat(uf_remappedPS[27].z)) + R4f.x);
PV0f.w = R123f.w;
// 1
R123f.x = (mul_nonIEEE(R5f.y,intBitsToFloat(uf_remappedPS[28].y)) + PV0f.x);
PV1f.x = R123f.x;
R123f.y = (mul_nonIEEE(R5f.x,intBitsToFloat(uf_remappedPS[28].x)) + PV0f.y);
PV1f.y = R123f.y;
R123f.z = (mul_nonIEEE(R5f.w,intBitsToFloat(uf_remappedPS[28].w)) + PV0f.z);
PV1f.z = R123f.z;
R123f.w = (mul_nonIEEE(R5f.z,intBitsToFloat(uf_remappedPS[28].z)) + PV0f.w);
PV1f.w = R123f.w;
// 2
backupReg0f = R0f.x;
backupReg1f = R0f.y;
backupReg2f = R0f.z;
backupReg3f = R0f.w;
R0f.x = (mul_nonIEEE(backupReg0f,intBitsToFloat(uf_remappedPS[29].x)) + PV1f.y);
R0f.y = (mul_nonIEEE(backupReg1f,intBitsToFloat(uf_remappedPS[29].y)) + PV1f.x);
R0f.z = (mul_nonIEEE(backupReg2f,intBitsToFloat(uf_remappedPS[29].z)) + PV1f.w);
R0f.w = (mul_nonIEEE(backupReg3f,intBitsToFloat(uf_remappedPS[29].w)) + PV1f.z);
// export
passPixelColor0 = vec4(R0f.x, R0f.y, R0f.z, R0f.w);
}
