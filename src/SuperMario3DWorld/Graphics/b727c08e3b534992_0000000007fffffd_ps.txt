#version 450
#extension GL_ARB_texture_gather : enable
#ifdef VULKAN
#define ATTR_LAYOUT(__vkSet, __location) layout(set = __vkSet, location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation)
#define SET_POSITION(_v) gl_Position = _v; gl_Position.z = (gl_Position.z + gl_Position.w) / 2.0
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale.xy,gl_FragCoord.zw)
#define gl_VertexID gl_VertexIndex
#define gl_InstanceID gl_InstanceIndex
#else
#define ATTR_LAYOUT(__vkSet, __location) layout(location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation)
#define SET_POSITION(_v) gl_Position = _v
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw)
#endif
// This shader was automatically converted to be cross-compatible with Vulkan and OpenGL.

// shader b727c08e3b534992
// Used for: Second glitter bloom pass
const float resXScale =  float($width)/float($gameWidth);
const float resYScale = float($height)/float($gameHeight);

#ifdef VULKAN
layout(set = 1, binding = 1) uniform ufBlock
{
uniform ivec4 uf_remappedPS[10];
uniform vec4 uf_fragCoordScale;
};
#else
uniform ivec4 uf_remappedPS[10];
uniform vec2 uf_fragCoordScale;
#endif
TEXTURE_LAYOUT(1, 1, 0) uniform sampler2DArray textureUnitPS1;
layout(location = 0) in vec4 passParameterSem0;
layout(location = 0) out vec4 passPixelColor0;
layout(location = 1) out vec4 passPixelColor1;
layout(location = 2) out vec4 passPixelColor2;
layout(location = 3) out vec4 passPixelColor3;
layout(location = 4) out vec4 passPixelColor4;
layout(location = 5) out vec4 passPixelColor5;
// uf_fragCoordScale was moved to the ufBlock
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ return min(a*b,min(abs(a)*3.40282347E+38F,abs(b)*3.40282347E+38F)); }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R8f = vec4(0.0);
vec4 R9f = vec4(0.0);
vec4 R10f = vec4(0.0);
vec4 R11f = vec4(0.0);
vec4 R12f = vec4(0.0);
vec4 R13f = vec4(0.0);
vec4 R14f = vec4(0.0);
vec4 R15f = vec4(0.0);
vec4 R16f = vec4(0.0);
vec4 R17f = vec4(0.0);
vec4 R18f = vec4(0.0);
vec4 R19f = vec4(0.0);
vec4 R20f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
// 0
R1f.x = R0f.x + intBitsToFloat(uf_remappedPS[0].x)/resXScale;
R5f.y = intBitsToFloat(uf_remappedPS[1].y)/resYScale * intBitsToFloat(uf_remappedPS[1].y);
PV0f.y = R5f.y;
R0f.z = roundEven(0.0);
PV0f.z = R0f.z;
R1f.w = R0f.y + intBitsToFloat(uf_remappedPS[0].y)/resYScale;
R2f.x = (intBitsToFloat(uf_remappedPS[0].x)/resXScale * 2.0 + R0f.x);
PS0f = R2f.x;
// 1
R11f.x = intBitsToFloat(uf_remappedPS[2].x)/resXScale * intBitsToFloat(uf_remappedPS[1].y);
R14f.y = intBitsToFloat(uf_remappedPS[2].y)/resYScale * intBitsToFloat(uf_remappedPS[1].y);
R1f.z = PV0f.z;
R0f.w = intBitsToFloat(uf_remappedPS[1].y)/resYScale * PV0f.y;
R2f.z = PV0f.z;
PS1f = R2f.z;
// 2
R14f.z = intBitsToFloat(uf_remappedPS[2].z)/resXScale * intBitsToFloat(uf_remappedPS[1].y);
R3f.w = R0f.z;
// 3
R3f.x = (intBitsToFloat(uf_remappedPS[0].x)/resXScale * intBitsToFloat(0x40400000) + R0f.x);
R2f.y = (intBitsToFloat(uf_remappedPS[0].y)/resYScale * 2.0 + R0f.y);
R16f.z = intBitsToFloat(uf_remappedPS[3].y)/resYScale * R5f.y;
R6f.w = intBitsToFloat(uf_remappedPS[3].x)/resXScale * R5f.y;
R3f.y = (intBitsToFloat(uf_remappedPS[0].y)/resYScale * intBitsToFloat(0x40400000) + R0f.y);
PS1f = R3f.y;
R4f.xyz = (texture(textureUnitPS1, vec3(R0f.x,R0f.y,R0f.z)).xyz);
R1f.xyz = (texture(textureUnitPS1, vec3(R1f.x,R1f.w,R1f.z)).xyz);
R2f.xyz = (texture(textureUnitPS1, vec3(R2f.x,R2f.y,R2f.z)).xyz);
R3f.xyz = (texture(textureUnitPS1, vec3(R3f.x,R3f.y,R3f.w)).xyz);
// 0
R123f.x = (R1f.y * R14f.y + R4f.y);
PV0f.x = R123f.x;
R123f.y = (R1f.x * R11f.x + R4f.x);
PV0f.y = R123f.y;
R0f.z = roundEven(1.0);
PV0f.z = R0f.z;
R127f.w = (R1f.z * R14f.z + R4f.z);
R17f.z = intBitsToFloat(uf_remappedPS[4].x)/resXScale * R0f.w;
PS0f = R17f.z;
// 1
R123f.x = (R2f.x * R6f.w + PV0f.y);
PV1f.x = R123f.x;
R16f.y = intBitsToFloat(uf_remappedPS[3].z)/resXScale * R5f.y;
PV1f.y = R16f.y;
R18f.z = intBitsToFloat(uf_remappedPS[4].y)/resYScale * R0f.w;
PV1f.z = R18f.z;
R123f.w = (R2f.y * R16f.z + PV0f.x);
PV1f.w = R123f.w;
R5f.z = PV0f.z;
PS1f = R5f.z;
// 2
R20f.x = (R3f.x * R17f.z + PV1f.x);
R20f.y = (R3f.y * PV1f.z + PV1f.w);
R19f.z = intBitsToFloat(uf_remappedPS[4].z)/resXScale * R0f.w;
PV0f.z = R19f.z;
R123f.w = (R2f.z * PV1f.y + R127f.w);
PV0f.w = R123f.w;
R5f.x = R0f.x + intBitsToFloat(uf_remappedPS[5].x)/resXScale;
PS0f = R5f.x;
// 3
R2f.x = (intBitsToFloat(uf_remappedPS[5].x)/resXScale * 2.0 + R0f.x);
R5f.y = R0f.y + intBitsToFloat(uf_remappedPS[5].y)/resYScale;
R20f.z = (R3f.z * PV0f.z + PV0f.w);
R2f.w = (intBitsToFloat(uf_remappedPS[5].y)/resYScale * 2.0 + R0f.y);
R2f.z = R0f.z;
PS1f = R2f.z;
// 4
R6f.x = R0f.x;
R6f.y = R0f.y;
R6f.z = roundEven(2.0);
R4f.w = R0f.y;
R4f.z = roundEven(intBitsToFloat(0x40400000));
PS0f = R4f.z;
// 5
R4f.x = R0f.x;
R11f.y = R0f.y;
R11f.z = roundEven(4.0);
R11f.w = R0f.x;
R13f.z = roundEven(intBitsToFloat(0x40a00000));
PS1f = R13f.z;
// 6
R13f.x = R0f.x;
R13f.y = R0f.y;
R3f.xyz = (texture(textureUnitPS1, vec3(R0f.x,R0f.y,R0f.z)).xyz);
R8f.xyz = (texture(textureUnitPS1, vec3(R6f.x,R6f.y,R6f.z)).xyz);
R10f.xyz = (texture(textureUnitPS1, vec3(R4f.x,R4f.w,R4f.z)).xyz);
R12f.xyz = (texture(textureUnitPS1, vec3(R11f.w,R11f.y,R11f.z)).xyz);
R15f.xyz = (texture(textureUnitPS1, vec3(R13f.x,R13f.y,R13f.z)).xyz);
R5f.xyz = (texture(textureUnitPS1, vec3(R5f.x,R5f.y,R5f.z)).xyz);
// 0
backupReg0f = R5f.x;
R5f.x = (backupReg0f * R11f.x + R3f.x);
R4f.y = (R5f.z * R14f.z + R3f.z);
R0f.w = (R5f.y * R14f.y + R3f.y);
// 1
R3f.x = (intBitsToFloat(uf_remappedPS[5].x)/resXScale * intBitsToFloat(0x40400000) + R0f.x);
R3f.y = (intBitsToFloat(uf_remappedPS[5].y)/resYScale * intBitsToFloat(0x40400000) + R0f.y);
R3f.z = R0f.z;
R5f.w = R0f.x + intBitsToFloat(uf_remappedPS[6].x)/resXScale;
R5f.y = R0f.y + intBitsToFloat(uf_remappedPS[6].y)/resYScale;
PS1f = R5f.y;
// 2
R1f.x = (intBitsToFloat(uf_remappedPS[6].x)/resXScale * 2.0 + R0f.x);
R1f.y = (intBitsToFloat(uf_remappedPS[6].y)/resYScale * 2.0 + R0f.y);
R5f.z = R6f.z;
R1f.w = R6f.z;
R9f.x = (intBitsToFloat(uf_remappedPS[6].x)/resXScale * intBitsToFloat(0x40400000) + R0f.x);
PS0f = R9f.x;
R2f.xyz = (texture(textureUnitPS1, vec3(R2f.x,R2f.w,R2f.z)).xyz);
R3f.xyz = (texture(textureUnitPS1, vec3(R3f.x,R3f.y,R3f.z)).xyz);
R7f.xyz = (texture(textureUnitPS1, vec3(R5f.w,R5f.y,R5f.z)).xyz);
R1f.xyz = (texture(textureUnitPS1, vec3(R1f.x,R1f.y,R1f.w)).xyz);
// 0
R123f.x = (R2f.y * R16f.z + R0f.w);
PV0f.x = R123f.x;
R127f.y = (R2f.z * R16f.y + R4f.y);
R9f.z = R6f.z;
R123f.w = (R2f.x * R6f.w + R5f.x);
PV0f.w = R123f.w;
R2f.x = R0f.x + intBitsToFloat(uf_remappedPS[7].x)/resXScale;
PS0f = R2f.x;
// 1
R6f.x = (R3f.x * R17f.z + PV0f.w);
R6f.y = (R3f.y * R18f.z + PV0f.x);
R2f.z = R4f.z;
R9f.w = (intBitsToFloat(uf_remappedPS[6].y) * intBitsToFloat(0x40400000) + R0f.y);
R2f.y = R0f.y + intBitsToFloat(uf_remappedPS[7].y)/resYScale;
PS1f = R2f.y;
// 2
R123f.x = (R7f.x * R11f.x + R8f.x);
PV0f.x = R123f.x;
R3f.y = (intBitsToFloat(uf_remappedPS[7].y)/resYScale * 2.0 + R0f.y);
R6f.z = (R3f.z * R19f.z + R127f.y);
R3f.w = R4f.z;
R5f.y = (intBitsToFloat(uf_remappedPS[7].y)/resYScale * intBitsToFloat(0x40400000) + R0f.y);
PS0f = R5f.y;
// 3
R7f.x = (R1f.x * R6f.w + PV0f.x);
R123f.y = (R7f.y * R14f.y + R8f.y);
PV1f.y = R123f.y;
R123f.w = (R7f.z * R14f.z + R8f.z);
PV1f.w = R123f.w;
R3f.x = (intBitsToFloat(uf_remappedPS[7].x)/resXScale * 2.0 + R0f.x);
PS1f = R3f.x;
// 4
backupReg0f = R1f.y;
R1f.x = (R1f.z * R16f.y + PV1f.w);
R1f.y = R0f.y + intBitsToFloat(uf_remappedPS[8].y)/resYScale;
R5f.z = R4f.z;
R4f.w = (backupReg0f * R16f.z + PV1f.y);
R5f.x = (intBitsToFloat(uf_remappedPS[7].x)/resXScale * intBitsToFloat(0x40400000) + R0f.x);
PS0f = R5f.x;
R9f.xyz = (texture(textureUnitPS1, vec3(R9f.x,R9f.w,R9f.z)).xyz);
R2f.xyz = (texture(textureUnitPS1, vec3(R2f.x,R2f.y,R2f.z)).xyz);
R3f.xyz = (texture(textureUnitPS1, vec3(R3f.x,R3f.y,R3f.w)).xyz);
R5f.xyz = (texture(textureUnitPS1, vec3(R5f.x,R5f.y,R5f.z)).xyz);
// 0
backupReg0f = R7f.x;
R7f.x = (R9f.x * R17f.z + backupReg0f);
R7f.y = (R9f.y * R18f.z + R4f.w);
R1f.z = R11f.z;
R1f.w = R0f.x + intBitsToFloat(uf_remappedPS[8].x)/resXScale;
R4f.y = (intBitsToFloat(uf_remappedPS[8].y)/resYScale * 2.0 + R0f.y);
PS0f = R4f.y;
// 1
R127f.x = (R2f.y * R14f.y + R10f.y);
R7f.z = (R9f.z * R19f.z + R1f.x);
R4f.w = (intBitsToFloat(uf_remappedPS[8].x)/resXScale * 2.0 + R0f.x);
R4f.z = R11f.z;
PS1f = R4f.z;
// 2
R123f.x = (R2f.z * R14f.z + R10f.z);
PV0f.x = R123f.x;
R2f.y = (intBitsToFloat(uf_remappedPS[8].y)/resYScale * intBitsToFloat(0x40400000) + R0f.y);
R123f.w = (R2f.x * R11f.x + R10f.x);
PV0f.w = R123f.w;
R10f.y = R0f.y + intBitsToFloat(uf_remappedPS[9].y)/resYScale;
PS0f = R10f.y;
// 3
R123f.x = (R3f.y * R16f.z + R127f.x);
PV1f.x = R123f.x;
R127f.y = (R3f.z * R16f.y + PV0f.x);
R2f.z = R11f.z;
R123f.w = (R3f.x * R6f.w + PV0f.w);
PV1f.w = R123f.w;
R2f.x = (intBitsToFloat(uf_remappedPS[8].x)/resXScale * intBitsToFloat(0x40400000) + R0f.x);
PS1f = R2f.x;
// 4
R9f.x = (R5f.x * R17f.z + PV1f.w);
R9f.y = (R5f.y * R18f.z + PV1f.x);
R10f.z = R13f.z;
R10f.w = R0f.x + intBitsToFloat(uf_remappedPS[9].x)/resXScale;
R3f.x = (intBitsToFloat(uf_remappedPS[9].x)/resXScale * 2.0 + R0f.x);
PS0f = R3f.x;
// 5
backupReg0f = R0f.x;
backupReg1f = R0f.y;
R0f.x = (intBitsToFloat(uf_remappedPS[9].x)/resXScale * intBitsToFloat(0x40400000) + backupReg0f);
R3f.y = (intBitsToFloat(uf_remappedPS[9].y)/resYScale * 2.0 + R0f.y);
R9f.z = (R5f.z * R19f.z + R127f.y);
R3f.w = R13f.z;
R0f.y = (intBitsToFloat(uf_remappedPS[9].y)/resYScale * intBitsToFloat(0x40400000) + backupReg1f);
PS1f = R0f.y;
R1f.xyz = (texture(textureUnitPS1, vec3(R1f.w,R1f.y,R1f.z)).xyz);
R4f.xyz = (texture(textureUnitPS1, vec3(R4f.w,R4f.y,R4f.z)).xyz);
R2f.xyz = (texture(textureUnitPS1, vec3(R2f.x,R2f.y,R2f.z)).xyz);
R10f.xyz = (texture(textureUnitPS1, vec3(R10f.w,R10f.y,R10f.z)).xyz);
// 0
R123f.x = (R1f.y * R14f.y + R12f.y);
PV0f.x = R123f.x;
R123f.y = (R1f.x * R11f.x + R12f.x);
PV0f.y = R123f.y;
R123f.w = (R1f.z * R14f.z + R12f.z);
PV0f.w = R123f.w;
// 1
R123f.x = (R4f.y * R16f.z + PV0f.x);
PV1f.x = R123f.x;
R127f.y = (R4f.z * R16f.y + PV0f.w);
R0f.z = R13f.z;
R123f.w = (R4f.x * R6f.w + PV0f.y);
PV1f.w = R123f.w;
// 2
R4f.x = (R2f.x * R17f.z + PV1f.w);
R4f.y = (R2f.y * R18f.z + PV1f.x);
// 3
R2f.x = (R10f.x * R11f.x + R15f.x);
R4f.z = (R2f.z * R19f.z + R127f.y);
// 4
backupReg0f = R10f.y;
R10f.y = (backupReg0f * R14f.y + R15f.y);
R10f.w = (R10f.z * R14f.z + R15f.z);
R3f.xyz = (texture(textureUnitPS1, vec3(R3f.x,R3f.y,R3f.w)).xyz);
R0f.xyz = (texture(textureUnitPS1, vec3(R0f.x,R0f.y,R0f.z)).xyz);
// 0
R123f.x = (R3f.x * R6f.w + R2f.x);
PV0f.x = R123f.x;
R127f.y = (R3f.z * R16f.y + R10f.w);
R123f.w = (R3f.y * R16f.z + R10f.y);
PV0f.w = R123f.w;
// 1
R17f.x = (R0f.x * R17f.z + PV0f.x);
R17f.y = (R0f.y * R18f.z + PV0f.w);
// 2
R17f.z = (R0f.z * R19f.z + R127f.y);
PV0f.z = R17f.z;
// 3
R15f.xyz = vec3(R17f.x,R17f.y,PV0f.z);
R15f.w = R17f.w;
// 4
R14f.xyz = vec3(R4f.x,R4f.y,R4f.z);
R14f.w = R4f.w;
// 5
R13f.xyz = vec3(R9f.x,R9f.y,R9f.z);
R13f.w = R9f.w;
// 6
R12f.xyz = vec3(R7f.x,R7f.y,R7f.z);
R12f.w = R7f.w;
// 7
R11f.xyz = vec3(R6f.x,R6f.y,R6f.z);
R11f.w = R6f.w;
// 8
R10f.xyz = vec3(R20f.x,R20f.y,R20f.z);
R10f.w = R20f.w;
// export
passPixelColor0 = vec4(R10f.x, R10f.y, R10f.z, R10f.w);
passPixelColor1 = vec4(R11f.x, R11f.y, R11f.z, R11f.w);
passPixelColor2 = vec4(R12f.x, R12f.y, R12f.z, R12f.w);
passPixelColor3 = vec4(R13f.x, R13f.y, R13f.z, R13f.w);
passPixelColor4 = vec4(R14f.x, R14f.y, R14f.z, R14f.w);
passPixelColor5 = vec4(R15f.x, R15f.y, R15f.z, R15f.w);
}
