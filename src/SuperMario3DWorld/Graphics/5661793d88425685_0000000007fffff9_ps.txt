#version 450
#extension GL_ARB_texture_gather : enable
#ifdef VULKAN
#define ATTR_LAYOUT(__vkSet, __location) layout(set = __vkSet, location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation)
#define SET_POSITION(_v) gl_Position = _v; gl_Position.z = (gl_Position.z + gl_Position.w) / 2.0
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale.xy,gl_FragCoord.zw)
#define gl_VertexID gl_VertexIndex
#define gl_InstanceID gl_InstanceIndex
#else
#define ATTR_LAYOUT(__vkSet, __location) layout(location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation)
#define SET_POSITION(_v) gl_Position = _v
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw)
#endif
// This shader was automatically converted to be cross-compatible with Vulkan and OpenGL.

// shader 5661793d88425685
// Used for: First glitter bloom pass
const float resXScale =  float($width)/float($gameWidth);
const float resYScale = float($height)/float($gameHeight);

#ifdef VULKAN
layout(set = 1, binding = 1) uniform ufBlock
{
uniform ivec4 uf_remappedPS[7];
uniform vec4 uf_fragCoordScale;
};
#else
uniform ivec4 uf_remappedPS[7];
uniform vec2 uf_fragCoordScale;
#endif
TEXTURE_LAYOUT(0, 1, 0) uniform sampler2D textureUnitPS0;
layout(location = 0) in vec4 passParameterSem0;
layout(location = 0) out vec4 passPixelColor0;
layout(location = 1) out vec4 passPixelColor1;
layout(location = 2) out vec4 passPixelColor2;
layout(location = 3) out vec4 passPixelColor3;
layout(location = 4) out vec4 passPixelColor4;
layout(location = 5) out vec4 passPixelColor5;
// uf_fragCoordScale was moved to the ufBlock
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ return min(a*b,min(abs(a)*3.40282347E+38F,abs(b)*3.40282347E+38F)); }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R8f = vec4(0.0);
vec4 R9f = vec4(0.0);
vec4 R10f = vec4(0.0);
vec4 R11f = vec4(0.0);
vec4 R12f = vec4(0.0);
vec4 R13f = vec4(0.0);
vec4 R14f = vec4(0.0);
vec4 R15f = vec4(0.0);
vec4 R16f = vec4(0.0);
vec4 R17f = vec4(0.0);
vec4 R18f = vec4(0.0);
vec4 R122f = vec4(0.0);
vec4 R123f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R8f.xyz = (texture(textureUnitPS0, R0f.xy).xyz);
// 0
R1f.x = R0f.x + intBitsToFloat(uf_remappedPS[0].x)/resXScale;
R1f.y = R0f.y + intBitsToFloat(uf_remappedPS[0].y)/resYScale;
R2f.z = (intBitsToFloat(uf_remappedPS[0].x)/resXScale * 2.0 + R0f.x);
R4f.w = intBitsToFloat(uf_remappedPS[1].y)/resYScale * intBitsToFloat(uf_remappedPS[1].y);
PV0f.w = R4f.w;
R2f.y = (intBitsToFloat(uf_remappedPS[0].y)/resYScale * 2.0 + R0f.y);
PS0f = R2f.y;
// 1
R3f.x = (intBitsToFloat(uf_remappedPS[0].x)/resXScale * intBitsToFloat(0x40400000) + R0f.x);
R3f.y = (intBitsToFloat(uf_remappedPS[0].y)/resYScale * intBitsToFloat(0x40400000) + R0f.y);
R9f.z = intBitsToFloat(uf_remappedPS[1].y)/resYScale * PV0f.w;
// 2
R4f.x = R0f.x + intBitsToFloat(uf_remappedPS[2].x)/resXScale;
R4f.y = R0f.y + intBitsToFloat(uf_remappedPS[2].y)/resYScale;
R0f.z = (intBitsToFloat(uf_remappedPS[2].x)/resXScale * 2.0 + R0f.x);
R0f.w = (intBitsToFloat(uf_remappedPS[2].y)/resYScale * 2.0 + R0f.y);
R5f.x = (intBitsToFloat(uf_remappedPS[2].x)/resXScale * intBitsToFloat(0x40400000) + R0f.x);
PS0f = R5f.x;
R1f.xyz = (texture(textureUnitPS0, R1f.xy).xyz);
R2f.xyz = (texture(textureUnitPS0, R2f.zy).xyz);
R3f.xyz = (texture(textureUnitPS0, R3f.xy).xyz);
R4f.xyz = (texture(textureUnitPS0, R4f.xy).xyz);
// 0
backupReg0f = R1f.y;
R123f.x = (intBitsToFloat(uf_remappedPS[1].y)/resYScale * R1f.z + R8f.z);
PV0f.x = R123f.x;
R1f.y = (intBitsToFloat(uf_remappedPS[1].y)/resYScale * R4f.x + R8f.x);
R123f.z = (intBitsToFloat(uf_remappedPS[1].y)/resYScale * backupReg0f + R8f.y);
PV0f.z = R123f.z;
R123f.w = (intBitsToFloat(uf_remappedPS[1].y)/resYScale * R1f.x + R8f.x);
PV0f.w = R123f.w;
R1f.w = (intBitsToFloat(uf_remappedPS[1].y)/resYScale * R4f.y + R8f.y);
PS0f = R1f.w;
// 1
R123f.x = (R4f.w * R2f.z + PV0f.x);
PV1f.x = R123f.x;
R6f.y = (intBitsToFloat(uf_remappedPS[1].y)/resYScale * R4f.z + R8f.z);
R123f.z = (R4f.w * R2f.y + PV0f.z);
PV1f.z = R123f.z;
R123f.w = (R4f.w * R2f.x + PV0f.w);
PV1f.w = R123f.w;
R5f.y = (intBitsToFloat(uf_remappedPS[2].y)/resYScale * intBitsToFloat(0x40400000) + R0f.y);
PS1f = R5f.y;
// 2
R12f.x = (R9f.z * R3f.x + PV1f.w);
R12f.y = (R9f.z * R3f.y + PV1f.z);
R12f.z = (R9f.z * R3f.z + PV1f.x);
R3f.w = R0f.x + intBitsToFloat(uf_remappedPS[3].x)/resXScale;
R3f.y = R0f.y + intBitsToFloat(uf_remappedPS[3].y)/resYScale;
PS0f = R3f.y;
// 3
R2f.x = (intBitsToFloat(uf_remappedPS[3].x)/resXScale * 2.0 + R0f.x);
R2f.y = (intBitsToFloat(uf_remappedPS[3].y)/resYScale * 2.0 + R0f.y);
R6f.z = (intBitsToFloat(uf_remappedPS[3].x)/resXScale * intBitsToFloat(0x40400000) + R0f.x);
R6f.w = (intBitsToFloat(uf_remappedPS[3].y)/resYScale * intBitsToFloat(0x40400000) + R0f.y);
R7f.x = R0f.x + intBitsToFloat(uf_remappedPS[4].x)/resXScale;
PS1f = R7f.x;
R4f.xyz = (texture(textureUnitPS0, R0f.zw).xyz);
R5f.xyz = (texture(textureUnitPS0, R5f.xy).xyz);
R3f.xyz = (texture(textureUnitPS0, R3f.wy).xyz);
R2f.xyz = (texture(textureUnitPS0, R2f.xy).xyz);
// 0
R123f.x = (R4f.w * R4f.z + R6f.y);
PV0f.x = R123f.x;
R123f.y = (intBitsToFloat(uf_remappedPS[1].y)/resYScale * R3f.x + R8f.x);
PV0f.y = R123f.y;
R123f.z = (R4f.w * R4f.x + R1f.y);
PV0f.z = R123f.z;
R123f.w = (R4f.w * R4f.y + R1f.w);
PV0f.w = R123f.w;
R122f.x = (intBitsToFloat(uf_remappedPS[1].y)/resYScale * R3f.z + R8f.z);
PS0f = R122f.x;
// 1
R11f.x = (R9f.z * R5f.x + PV0f.z);
R11f.y = (R9f.z * R5f.y + PV0f.w);
R11f.z = (R9f.z * R5f.z + PV0f.x);
R1f.w = (R4f.w * R2f.x + PV0f.y);
R0f.w = (R4f.w * R2f.z + PS0f);
PS1f = R0f.w;
// 2
R3f.x = (intBitsToFloat(uf_remappedPS[4].x)/resXScale * 2.0 + R0f.x);
R7f.y = R0f.y + intBitsToFloat(uf_remappedPS[4].y)/resYScale;
R123f.z = (intBitsToFloat(uf_remappedPS[1].y)/resYScale * R3f.y + R8f.y);
PV0f.z = R123f.z;
R3f.w = (intBitsToFloat(uf_remappedPS[4].y)/resYScale * 2.0 + R0f.y);
R5f.x = (intBitsToFloat(uf_remappedPS[4].x)/resXScale * intBitsToFloat(0x40400000) + R0f.x);
PS0f = R5f.x;
// 3
R2f.x = R0f.x + intBitsToFloat(uf_remappedPS[5].x)/resXScale;
R5f.y = (intBitsToFloat(uf_remappedPS[4].y)/resYScale * intBitsToFloat(0x40400000) + R0f.y);
R2f.z = (R4f.w * R2f.y + PV0f.z);
R2f.w = R0f.y + intBitsToFloat(uf_remappedPS[5].y)/resYScale;
R1f.x = (intBitsToFloat(uf_remappedPS[5].x)/resXScale * 2.0 + R0f.x);
PS1f = R1f.x;
R6f.xyz = (texture(textureUnitPS0, R6f.zw).xyz);
R7f.xyz = (texture(textureUnitPS0, R7f.xy).xyz);
R3f.xyz = (texture(textureUnitPS0, R3f.xw).xyz);
R5f.xyz = (texture(textureUnitPS0, R5f.xy).xyz);
// 0
R10f.x = (R9f.z * R6f.x + R1f.w);
R10f.y = (R9f.z * R6f.y + R2f.z);
R10f.z = (R9f.z * R6f.z + R0f.w);
R123f.w = (intBitsToFloat(uf_remappedPS[1].y)/resYScale * R7f.x + R8f.x);
PV0f.w = R123f.w;
R122f.x = (intBitsToFloat(uf_remappedPS[1].y)/resYScale * R7f.y + R8f.y);
PS0f = R122f.x;
// 1
R123f.x = (intBitsToFloat(uf_remappedPS[1].y)/resYScale * R7f.z + R8f.z);
PV1f.x = R123f.x;
R1f.y = (intBitsToFloat(uf_remappedPS[5].y)/resYScale * 2.0 + R0f.y);
R123f.z = (R4f.w * R3f.y + PS0f);
PV1f.z = R123f.z;
R123f.w = (R4f.w * R3f.x + PV0f.w);
PV1f.w = R123f.w;
R7f.x = (intBitsToFloat(uf_remappedPS[5].x)/resXScale * intBitsToFloat(0x40400000) + R0f.x);
PS1f = R7f.x;
// 2
R4f.x = (R9f.z * R5f.x + PV1f.w);
R4f.y = (R9f.z * R5f.y + PV1f.z);
R7f.z = (intBitsToFloat(uf_remappedPS[5].y)/resYScale * intBitsToFloat(0x40400000) + R0f.y);
R123f.w = (R4f.w * R3f.z + PV1f.x);
PV0f.w = R123f.w;
R3f.x = R0f.x + intBitsToFloat(uf_remappedPS[6].x)/resXScale;
PS0f = R3f.x;
// 3
R5f.x = (intBitsToFloat(uf_remappedPS[6].x) * 2.0 + R0f.x);
R3f.y = R0f.y + intBitsToFloat(uf_remappedPS[6].y)/resYScale;
R4f.z = (R9f.z * R5f.z + PV0f.w);
R5f.w = (intBitsToFloat(uf_remappedPS[6].y)/resYScale * 2.0 + R0f.y);
R6f.x = (intBitsToFloat(uf_remappedPS[6].x)/resXScale * intBitsToFloat(0x40400000) + R0f.x);
PS1f = R6f.x;
R2f.xyz = (texture(textureUnitPS0, R2f.xw).xyz);
R1f.xyz = (texture(textureUnitPS0, R1f.xy).xyz);
R7f.xyz = (texture(textureUnitPS0, R7f.xz).xyz);
R3f.xyz = (texture(textureUnitPS0, R3f.xy).xyz);
// 0
backupReg0f = R2f.y;
R123f.x = (intBitsToFloat(uf_remappedPS[1].y)/resYScale * R2f.z + R8f.z);
PV0f.x = R123f.x;
R2f.y = (intBitsToFloat(uf_remappedPS[1].y)/resYScale * R3f.x + R8f.x);
R123f.z = (intBitsToFloat(uf_remappedPS[1].y)/resYScale * backupReg0f + R8f.y);
PV0f.z = R123f.z;
R123f.w = (intBitsToFloat(uf_remappedPS[1].y)/resYScale * R2f.x + R8f.x);
PV0f.w = R123f.w;
R2f.x = (intBitsToFloat(uf_remappedPS[1].y)/resYScale * R3f.y + R8f.y);
PS0f = R2f.x;
// 1
backupReg0f = R0f.y;
R123f.x = (R4f.w * R1f.z + PV0f.x);
PV1f.x = R123f.x;
R0f.y = (intBitsToFloat(uf_remappedPS[1].y)/resYScale * R3f.z + R8f.z);
R123f.z = (R4f.w * R1f.y + PV0f.z);
PV1f.z = R123f.z;
R123f.w = (R4f.w * R1f.x + PV0f.w);
PV1f.w = R123f.w;
R6f.y = (intBitsToFloat(uf_remappedPS[6].y)/resYScale * intBitsToFloat(0x40400000) + backupReg0f);
PS1f = R6f.y;
// 2
backupReg0f = R7f.x;
backupReg1f = R7f.y;
backupReg2f = R7f.z;
R7f.x = (R9f.z * backupReg0f + PV1f.w);
R7f.y = (R9f.z * backupReg1f + PV1f.z);
R7f.z = (R9f.z * backupReg2f + PV1f.x);
R5f.xyz = (texture(textureUnitPS0, R5f.xw).xyz);
R6f.xyz = (texture(textureUnitPS0, R6f.xy).xyz);
// 0
R123f.x = (R4f.w * R5f.z + R0f.y);
PV0f.x = R123f.x;
R123f.z = (R4f.w * R5f.y + R2f.x);
PV0f.z = R123f.z;
R123f.w = (R4f.w * R5f.x + R2f.y);
PV0f.w = R123f.w;
// 1
backupReg0f = R6f.x;
backupReg1f = R6f.y;
backupReg2f = R6f.z;
R6f.x = (R9f.z * backupReg0f + PV0f.w);
PV1f.x = R6f.x;
R6f.y = (R9f.z * backupReg1f + PV0f.z);
PV1f.y = R6f.y;
R6f.z = (R9f.z * backupReg2f + PV0f.x);
PV1f.z = R6f.z;
// 2
R18f.xyz = vec3(PV1f.x,PV1f.y,PV1f.z);
R18f.w = R6f.w;
// 3
R17f.xyz = vec3(R7f.x,R7f.y,R7f.z);
R17f.w = R7f.w;
// 4
R16f.xyz = vec3(R4f.x,R4f.y,R4f.z);
R16f.w = R4f.w;
// 5
R15f.xyz = vec3(R10f.x,R10f.y,R10f.z);
R15f.w = R10f.w;
// 6
R14f.xyz = vec3(R11f.x,R11f.y,R11f.z);
R14f.w = R11f.w;
// 7
R13f.xyz = vec3(R12f.x,R12f.y,R12f.z);
R13f.w = R12f.w;
// export
passPixelColor0 = vec4(R13f.x, R13f.y, R13f.z, R13f.w);
passPixelColor1 = vec4(R14f.x, R14f.y, R14f.z, R14f.w);
passPixelColor2 = vec4(R15f.x, R15f.y, R15f.z, R15f.w);
passPixelColor3 = vec4(R16f.x, R16f.y, R16f.z, R16f.w);
passPixelColor4 = vec4(R17f.x, R17f.y, R17f.z, R17f.w);
passPixelColor5 = vec4(R18f.x, R18f.y, R18f.z, R18f.w);
}
