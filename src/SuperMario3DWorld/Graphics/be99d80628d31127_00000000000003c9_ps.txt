#version 450
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
#ifdef VULKAN
#define ATTR_LAYOUT(__vkSet, __location) layout(set = __vkSet, location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation)
#define SET_POSITION(_v) gl_Position = _v; gl_Position.z = (gl_Position.z + gl_Position.w) / 2.0
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale.xy,gl_FragCoord.zw)
#define gl_VertexID gl_VertexIndex
#define gl_InstanceID gl_InstanceIndex
#else
#define ATTR_LAYOUT(__vkSet, __location) layout(location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation)
#define SET_POSITION(_v) gl_Position = _v
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw)
#endif
// This shader was automatically converted to be cross-compatible with Vulkan and OpenGL.

// shader be99d80628d31127 //AA PS
// Used for: Another vertical blur
const float resXScale =  float($width)/float($gameWidth);
const float resYScale = float($height)/float($gameHeight);

#ifdef VULKAN
layout(set = 1, binding = 2) uniform ufBlock
{
uniform ivec4 uf_remappedPS[4];
uniform vec4 uf_fragCoordScale;
};
#else
uniform ivec4 uf_remappedPS[4];
uniform vec2 uf_fragCoordScale;
#endif
TEXTURE_LAYOUT(0, 1, 0) uniform sampler2D textureUnitPS0;
TEXTURE_LAYOUT(1, 1, 1) uniform sampler2D textureUnitPS1;
layout(location = 0) in vec4 passParameterSem2;
layout(location = 0) out vec4 passPixelColor0;
// uf_fragCoordScale was moved to the ufBlock
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){return mix(0.0, a*b, (a != 0.0) && (b != 0.0));}
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
bool activeMaskStack[2];
bool activeMaskStackC[3];
activeMaskStack[0] = false;
activeMaskStackC[0] = false;
activeMaskStackC[1] = false;
activeMaskStack[0] = true;
activeMaskStackC[0] = true;
activeMaskStackC[1] = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem2;
if( activeMaskStackC[1] == true ) {
R4f.xyzw = (texture(textureUnitPS0, R0f.xy).xyzw);
R2f.xyzw = (textureGather(textureUnitPS1, R0f.xy).wzxy);
}
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
PV0f.x = min(R2f.z, R2f.x);
PV0f.y = max(R2f.z, R2f.x);
PV0f.z = mul_nonIEEE(R4f.x, intBitsToFloat(uf_remappedPS[0].x));
PV0f.w = min(R2f.w, R2f.y);
PS0f = max(R2f.w, R2f.y);
// 1
PV1f.x = min(PV0f.x, PV0f.w);
R123f.y = (mul_nonIEEE(R4f.y,intBitsToFloat(uf_remappedPS[0].y)) + PV0f.z);
PV1f.y = R123f.y;
R127f.z = R2f.z + -(R2f.y);
PV1f.z = R127f.z;
PV1f.w = max(PV0f.y, PS0f);
R126f.z = R2f.w + -(R2f.x);
PS1f = R126f.z;
// 2
PV0f.x = mul_nonIEEE(PV1f.w, intBitsToFloat(uf_remappedPS[1].x));
PV0f.y = max(PV1f.y, PV1f.w);
PV0f.z = min(PV1f.y, PV1f.x);
R3f.x = PV1f.z + PS1f;
PS0f = R3f.x;
// 3
R1f.x = max(PV0f.x, intBitsToFloat(uf_remappedPS[1].y));
R3f.y = -(PV0f.z) + PV0f.y;
R1f.y = R127f.z + -(R126f.z);
PS1f = R1f.y;
// 4
predResult = (R3f.y > R1f.x);
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
backupReg0f = R2f.y;
R1f.x = max(R3f.x, -(R3f.x));
PV0f.x = R1f.x;
R2f.y = backupReg0f + R2f.x;
PV0f.y = R2f.y;
R0f.z = intBitsToFloat(uf_remappedPS[2].z) * 0.25;
R0f.w = max(R1f.y, -(R1f.y));
PV0f.w = R0f.w;
R2f.x = -(intBitsToFloat(uf_remappedPS[3].x));
PS0f = R2f.x;
// 1
R3f.y = R2f.z + PV0f.y;
PV1f.y = R3f.y;
R2f.y = min(PV0f.x, PV0f.w);
PS1f = R2f.y;
// 2
R3f.y = R2f.w + PV1f.y;
PV0f.y = R3f.y;
R1f.z = intBitsToFloat(uf_remappedPS[3].x);
R0f.w = intBitsToFloat(uf_remappedPS[3].y);
R5f.y = -(intBitsToFloat(uf_remappedPS[3].y));
PS0f = R5f.y;
// 3
backupReg0f = R0f.z;
R0f.z = (mul_nonIEEE(backupReg0f,PV0f.y) + intBitsToFloat(uf_remappedPS[2].w));
PV1f.z = R0f.z;
// 4
backupReg0f = R2f.y;
R2f.y = max(PV1f.z, backupReg0f);
PV0f.y = R2f.y;
// 5
R2f.y = 1.0 / PV0f.y;
PS1f = R2f.y;
// 6
backupReg0f = R1f.y;
R1f.x = mul_nonIEEE(R3f.x, PS1f);
PV0f.x = R1f.x;
R1f.y = mul_nonIEEE(backupReg0f, PS1f);
PV0f.y = R1f.y;
// 7
R1f.x = max(PV0f.x, -(intBitsToFloat(uf_remappedPS[2].y)));
PV1f.x = R1f.x;
R1f.y = max(PV0f.y, -(intBitsToFloat(uf_remappedPS[2].y)));
PV1f.y = R1f.y;
// 8
R1f.x = min(PV1f.x, intBitsToFloat(uf_remappedPS[2].y));
PV0f.x = R1f.x;
R1f.y = min(PV1f.y, intBitsToFloat(uf_remappedPS[2].y));
PV0f.y = R1f.y;
// 9
backupReg0f = R0f.x;
backupReg1f = R0f.y;
backupReg0f = R0f.x;
backupReg2f = R0f.w;
backupReg1f = R0f.y;
R0f.x = (mul_nonIEEE(PV0f.x,R2f.x) /resXScale + backupReg0f);
R0f.y = (mul_nonIEEE(PV0f.y,R5f.y) /resYScale+ backupReg1f);
R0f.z = (mul_nonIEEE(PV0f.x,R1f.z) /resXScale + backupReg0f);
R0f.w = (mul_nonIEEE(PV0f.y,backupReg2f)/ resXScale + backupReg1f);
}
if( activeMaskStackC[2] == true ) {
R1f.xyzw = (texture(textureUnitPS0, R0f.zw).xyzw);
R0f.xyzw = (texture(textureUnitPS0, R0f.xy).xyzw);
}
if( activeMaskStackC[2] == true ) {
// 0
backupReg0f = R0f.y;
backupReg1f = R0f.x;
PV0f.x = R0f.w + R1f.w;
PV0f.x /= 2.0;
PV0f.y = R0f.z + R1f.z;
PV0f.y /= 2.0;
PV0f.z = backupReg0f + R1f.y;
PV0f.z /= 2.0;
PV0f.w = backupReg1f + R1f.x;
PV0f.w /= 2.0;
// 1
PV1f.x = -(R4f.w) + PV0f.x;
PV1f.y = -(R4f.z) + PV0f.y;
PV1f.z = -(R4f.y) + PV0f.z;
PV1f.w = -(R4f.x) + PV0f.w;
// 2
backupReg0f = R4f.x;
backupReg1f = R4f.y;
backupReg2f = R4f.z;
backupReg3f = R4f.w;
R4f.x = (PV1f.w * intBitsToFloat(0x3f4ccccd) + backupReg0f);
R4f.y = (PV1f.z * intBitsToFloat(0x3f4ccccd) + backupReg1f);
R4f.z = (PV1f.y * intBitsToFloat(0x3f4ccccd) + backupReg2f);
R4f.w = (PV1f.x * intBitsToFloat(0x3f4ccccd) + backupReg3f);
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
// export
passPixelColor0 = vec4(R4f.x, R4f.y, R4f.z, R4f.w);
}
