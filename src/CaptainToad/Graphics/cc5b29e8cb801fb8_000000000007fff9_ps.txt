#version 450
#extension GL_ARB_texture_gather : enable
#ifdef VULKAN
#define ATTR_LAYOUT(__vkSet, __location) layout(set = __vkSet, location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation)
#define SET_POSITION(_v) gl_Position = _v; gl_Position.z = (gl_Position.z + gl_Position.w) / 2.0
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale.xy,gl_FragCoord.zw)
#define gl_VertexID gl_VertexIndex
#define gl_InstanceID gl_InstanceIndex
#else
#define ATTR_LAYOUT(__vkSet, __location) layout(location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation)
#define SET_POSITION(_v) gl_Position = _v
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw)
#endif
// This shader was automatically converted to be cross-compatible with Vulkan and OpenGL.

// shader cc5b29e8cb801fb8
// Used for: First glitter bloom pass
const float resXScale = float($width)/float($gameWidth);
const float resYScale = float($height)/float($gameHeight);

#ifdef VULKAN
layout(set = 1, binding = 1) uniform ufBlock
{
uniform ivec4 uf_remappedPS[5];
uniform vec4 uf_fragCoordScale;
};
#else
uniform ivec4 uf_remappedPS[5];
uniform vec2 uf_fragCoordScale;
#endif
TEXTURE_LAYOUT(0, 1, 0) uniform sampler2D textureUnitPS0;
layout(location = 0) in vec4 passParameterSem0;
layout(location = 0) out vec4 passPixelColor0;
layout(location = 1) out vec4 passPixelColor1;
layout(location = 2) out vec4 passPixelColor2;
layout(location = 3) out vec4 passPixelColor3;
// uf_fragCoordScale was moved to the ufBlock
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ return min(a*b,min(abs(a)*3.40282347E+38F,abs(b)*3.40282347E+38F)); }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R8f = vec4(0.0);
vec4 R9f = vec4(0.0);
vec4 R10f = vec4(0.0);
vec4 R11f = vec4(0.0);
vec4 R12f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R124f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R10f.xyz = (texture(textureUnitPS0, R0f.xy).xyz);
// 0
R1f.x = (intBitsToFloat(uf_remappedPS[0].x)/resXScale* 1.0 + R0f.x);
R1f.y = (intBitsToFloat(uf_remappedPS[0].y)/resYScale * 1.0 + R0f.y);
R0f.z = (intBitsToFloat(uf_remappedPS[1].x)/resXScale * 1.0 + R0f.x);
R0f.w = (intBitsToFloat(uf_remappedPS[1].y)/resYScale * 1.0 + R0f.y);
R3f.x = (intBitsToFloat(uf_remappedPS[0].x)/resXScale * 2.0 + R0f.x);
PS0f = R3f.x;
// 1
R2f.x = (intBitsToFloat(uf_remappedPS[2].x)/resXScale * 1.0 + R0f.x);
R2f.y = (intBitsToFloat(uf_remappedPS[2].y)/resYScale * 1.0 + R0f.y);
R1f.z = (intBitsToFloat(uf_remappedPS[3].x)/resXScale * 1.0 + R0f.x);
R1f.w = (intBitsToFloat(uf_remappedPS[3].y)/resYScale * 1.0 + R0f.y);
R5f.x = (intBitsToFloat(uf_remappedPS[2].x)/resXScale * 2.0 + R0f.x);
PS1f = R5f.x;
// 2
R4f.x = (intBitsToFloat(uf_remappedPS[1].x)/resXScale * 2.0 + R0f.x);
R3f.y = (intBitsToFloat(uf_remappedPS[0].y)/resYScale * 2.0 + R0f.y);
R4f.z = (intBitsToFloat(uf_remappedPS[1].y)/resYScale * 2.0 + R0f.y);
R4f.w = (intBitsToFloat(uf_remappedPS[0].x)/resXScale * intBitsToFloat(0x40400000) + R0f.x);
R4f.y = (intBitsToFloat(uf_remappedPS[0].y)/resYScale * intBitsToFloat(0x40400000) + R0f.y);
PS0f = R4f.y;
// 3
R6f.x = (intBitsToFloat(uf_remappedPS[3].x)/resXScale * 2.0 + R0f.x);
R5f.y = (intBitsToFloat(uf_remappedPS[2].y)/resYScale * 2.0 + R0f.y);
R6f.z = (intBitsToFloat(uf_remappedPS[3].y)/resYScale * 2.0 + R0f.y);
R6f.w = (intBitsToFloat(uf_remappedPS[2].x)/resXScale * intBitsToFloat(0x40400000) + R0f.x);
R6f.y = (intBitsToFloat(uf_remappedPS[2].y)/resYScale * intBitsToFloat(0x40400000) + R0f.y);
PS1f = R6f.y;
R7f.xyz = (texture(textureUnitPS0, R1f.xy).xyz);
R8f.xyz = (texture(textureUnitPS0, R0f.zw).xyz);
R2f.xyz = (texture(textureUnitPS0, R2f.xy).xyz);
R9f.xyz = (texture(textureUnitPS0, R1f.zw).xyz);
R3f.xyz = (texture(textureUnitPS0, R3f.xy).xyz);
R11f.xyz = (texture(textureUnitPS0, R4f.xz).xyz);
R5f.xyz = (texture(textureUnitPS0, R5f.xy).xyz);
R12f.xyz = (texture(textureUnitPS0, R6f.xz).xyz);
// 0
backupReg0f = R0f.x;
backupReg1f = R0f.y;
backupReg0f = R0f.x;
backupReg1f = R0f.y;
R0f.x = (intBitsToFloat(uf_remappedPS[1].x)/resXScale * intBitsToFloat(0x40400000) + backupReg0f);
R0f.y = (intBitsToFloat(uf_remappedPS[1].y)/resYScale * intBitsToFloat(0x40400000) + backupReg1f);
R1f.z = (intBitsToFloat(uf_remappedPS[3].x)/resXScale * intBitsToFloat(0x40400000) + backupReg0f);
R1f.w = (intBitsToFloat(uf_remappedPS[3].y)/resYScale * intBitsToFloat(0x40400000) + backupReg1f);
// 1
backupReg0f = R7f.x;
backupReg1f = R7f.y;
backupReg2f = R7f.z;
R7f.x = (intBitsToFloat(uf_remappedPS[4].y)/resYScale * backupReg0f + R10f.x);
R7f.y = intBitsToFloat(uf_remappedPS[4].y)/resYScale * intBitsToFloat(uf_remappedPS[4].y);
R7f.z = (intBitsToFloat(uf_remappedPS[4].y)/resYScale * backupReg1f + R10f.y);
R0f.w = (intBitsToFloat(uf_remappedPS[4].y)/resYScale * backupReg2f + R10f.z);
R2f.w = (intBitsToFloat(uf_remappedPS[4].y)/resYScale * R8f.x + R10f.x);
PS1f = R2f.w;
R4f.xyz = (texture(textureUnitPS0, R4f.wy).xyz);
R0f.xyz = (texture(textureUnitPS0, R0f.xy).xyz);
R6f.xyz = (texture(textureUnitPS0, R6f.wy).xyz);
R1f.xyz = (texture(textureUnitPS0, R1f.zw).xyz);
// 0
R127f.x = (intBitsToFloat(uf_remappedPS[4].y)/resYScale * R2f.x + R10f.x);
R127f.y = (intBitsToFloat(uf_remappedPS[4].y)/resYScale * R2f.y + R10f.y);
R127f.z = (intBitsToFloat(uf_remappedPS[4].y)/resYScale * R8f.y + R10f.y);
R127f.w = (intBitsToFloat(uf_remappedPS[4].y)/resYScale * R8f.z + R10f.z);
R126f.w = (intBitsToFloat(uf_remappedPS[4].y)/resYScale * R2f.z + R10f.z);
PS0f = R126f.w;
// 1
R126f.x = (intBitsToFloat(uf_remappedPS[4].y)/resYScale * R9f.y + R10f.y);
R126f.y = (intBitsToFloat(uf_remappedPS[4].y)/resYScale * R9f.x + R10f.x);
R126f.z = (R7f.y * R3f.z + R0f.w);
R125f.w = (intBitsToFloat(uf_remappedPS[4].y)/resYScale * R9f.z + R10f.z);
R124f.w = (R7f.y * R11f.x + R2f.w);
PS1f = R124f.w;
// 2
backupReg0f = R127f.w;
R125f.x = (R7f.y * R11f.y + R127f.z);
R125f.y = intBitsToFloat(uf_remappedPS[4].y)/resYScale * R7f.y;
PV0f.y = R125f.y;
R127f.z = (R7f.y * R3f.y + R7f.z);
R123f.w = (R7f.y * R3f.x + R7f.x);
PV0f.w = R123f.w;
R127f.w = (R7f.y * R11f.z + backupReg0f);
PS0f = R127f.w;
// 3
backupReg0f = R127f.y;
backupReg1f = R127f.x;
R127f.x = (R7f.y * R5f.z + R126f.w);
R127f.y = (R7f.y * R12f.z + R125f.w);
R125f.z = (R7f.y * R5f.y + backupReg0f);
R126f.w = (R7f.y * R5f.x + backupReg1f);
R5f.x = (PV0f.y * R4f.x + PV0f.w);
PS1f = R5f.x;
// 4
R124f.z = (R7f.y * R12f.y + R126f.x);
R123f.w = (R7f.y * R12f.x + R126f.y);
PV0f.w = R123f.w;
// 5
R7f.x = (R125f.y * R0f.x + R124f.w);
R5f.y = (R125f.y * R4f.y + R127f.z);
R5f.z = (R125f.y * R4f.z + R126f.z);
R12f.w = (R125f.y * R6f.x + R126f.w);
R4f.x = (R125f.y * R1f.x + PV0f.w);
PS1f = R4f.x;
// 6
R12f.x = (R125f.y * R6f.y + R125f.z);
R7f.y = (R125f.y * R0f.y + R125f.x);
R7f.z = (R125f.y * R0f.z + R127f.w);
R12f.z = (R125f.y * R6f.z + R127f.x);
PS0f = R12f.z;
// 7
R4f.y = (R125f.y * R1f.y + R124f.z);
PV1f.y = R4f.y;
R4f.z = (R125f.y * R1f.z + R127f.y);
PV1f.z = R4f.z;
// 8
R3f.xyz = vec3(R4f.x,PV1f.y,PV1f.z);
R3f.w = R4f.w;
// 9
R2f.xyz = vec3(R12f.w,R12f.x,R12f.z);
R2f.w = R12f.w;
// 10
R1f.xyz = vec3(R7f.x,R7f.y,R7f.z);
R1f.w = R7f.w;
// 11
R0f.xyz = vec3(R5f.x,R5f.y,R5f.z);
R0f.w = R5f.w;
// export
passPixelColor0 = vec4(R0f.x, R0f.y, R0f.z, R0f.w);
passPixelColor1 = vec4(R1f.x, R1f.y, R1f.z, R1f.w);
passPixelColor2 = vec4(R2f.x, R2f.y, R2f.z, R2f.w);
passPixelColor3 = vec4(R3f.x, R3f.y, R3f.z, R3f.w);
}
