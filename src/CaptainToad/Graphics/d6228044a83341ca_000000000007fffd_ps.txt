#version 450
#extension GL_ARB_texture_gather : enable
#ifdef VULKAN
#define ATTR_LAYOUT(__vkSet, __location) layout(set = __vkSet, location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation)
#define SET_POSITION(_v) gl_Position = _v; gl_Position.z = (gl_Position.z + gl_Position.w) / 2.0
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale.xy,gl_FragCoord.zw)
#define gl_VertexID gl_VertexIndex
#define gl_InstanceID gl_InstanceIndex
#else
#define ATTR_LAYOUT(__vkSet, __location) layout(location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation)
#define SET_POSITION(_v) gl_Position = _v
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw)
#endif
// This shader was automatically converted to be cross-compatible with Vulkan and OpenGL.

// shader d6228044a83341ca
// Used for: Second glitter bloom pass
const float resXScale = float($width)/float($gameWidth);
const float resYScale = float($height)/float($gameHeight);

#ifdef VULKAN
layout(set = 1, binding = 1) uniform ufBlock
{
uniform ivec4 uf_remappedPS[8];
uniform vec4 uf_fragCoordScale;
};
#else
uniform ivec4 uf_remappedPS[8];
uniform vec2 uf_fragCoordScale;
#endif
TEXTURE_LAYOUT(1, 1, 0) uniform sampler2DArray textureUnitPS1;
layout(location = 0) in vec4 passParameterSem0;
layout(location = 0) out vec4 passPixelColor0;
layout(location = 1) out vec4 passPixelColor1;
layout(location = 2) out vec4 passPixelColor2;
layout(location = 3) out vec4 passPixelColor3;
// uf_fragCoordScale was moved to the ufBlock
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ return min(a*b,min(abs(a)*3.40282347E+38F,abs(b)*3.40282347E+38F)); }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R8f = vec4(0.0);
vec4 R9f = vec4(0.0);
vec4 R10f = vec4(0.0);
vec4 R11f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
// 0
R1f.x = (intBitsToFloat(uf_remappedPS[0].x)/resXScale * 1.0 + R0f.x);
R1f.y = (intBitsToFloat(uf_remappedPS[0].y)/resYScale * 1.0 + R0f.y);
R0f.z = roundEven(0.0);
PV0f.z = R0f.z;
R1f.w = intBitsToFloat(uf_remappedPS[1].y)/resYScale * intBitsToFloat(uf_remappedPS[1].y);
PV0f.w = R1f.w;
R2f.x = (intBitsToFloat(uf_remappedPS[0].x)/resXScale * 2.0 + R0f.x);
PS0f = R2f.x;
// 1
R3f.x = (intBitsToFloat(uf_remappedPS[0].x)/resXScale * intBitsToFloat(0x40400000) + R0f.x);
R2f.y = (intBitsToFloat(uf_remappedPS[0].y)/resYScale * 2.0 + R0f.y);
R1f.z = PV0f.z;
R2f.w = intBitsToFloat(uf_remappedPS[1].y)/resYScale * PV0f.w;
R2f.z = PV0f.z;
PS1f = R2f.z;
// 2
R5f.x = (intBitsToFloat(uf_remappedPS[2].x)/resXScale * 1.0 + R0f.x);
R3f.y = (intBitsToFloat(uf_remappedPS[0].y)/resYScale * intBitsToFloat(0x40400000) + R0f.y);
R3f.z = R0f.z;
R5f.w = (intBitsToFloat(uf_remappedPS[2].y)/resYScale * 1.0 + R0f.y);
R6f.x = (intBitsToFloat(uf_remappedPS[2].x)/resXScale * 2.0 + R0f.x);
PS0f = R6f.x;
R4f.xyz = (texture(textureUnitPS1, vec3(R0f.x,R0f.y,R0f.z)).xyz);
R1f.xyz = (texture(textureUnitPS1, vec3(R1f.x,R1f.y,R1f.z)).xyz);
R2f.xyz = (texture(textureUnitPS1, vec3(R2f.x,R2f.y,R2f.z)).xyz);
R3f.xyz = (texture(textureUnitPS1, vec3(R3f.x,R3f.y,R3f.z)).xyz);
// 0
PV0f.x = R1f.x * intBitsToFloat(uf_remappedPS[3].x)/resXScale;
PV0f.y = R1f.y * intBitsToFloat(uf_remappedPS[3].y)/resYScale;
R0f.z = roundEven(1.0);
PV0f.w = R1f.z * intBitsToFloat(uf_remappedPS[3].z)/resXScale;
// 1
R127f.x = (intBitsToFloat(uf_remappedPS[1].y)/resYScale * PV0f.w + R4f.z);
PV1f.y = R2f.x * intBitsToFloat(uf_remappedPS[4].x)/resXScale;
R123f.z = (intBitsToFloat(uf_remappedPS[1].y)/resYScale * PV0f.y + R4f.y);
PV1f.z = R123f.z;
R123f.w = (intBitsToFloat(uf_remappedPS[1].y)/resYScale * PV0f.x + R4f.x);
PV1f.w = R123f.w;
PS1f = R2f.y * intBitsToFloat(uf_remappedPS[4].y)/resYScale;
// 2
PV0f.x = R3f.x * intBitsToFloat(uf_remappedPS[5].x)/resXScale;
R123f.y = (R1f.w * PS1f + PV1f.z);
PV0f.y = R123f.y;
R123f.z = (R1f.w * PV1f.y + PV1f.w);
PV0f.z = R123f.z;
PV0f.w = R2f.z * intBitsToFloat(uf_remappedPS[4].z)/resXScale;
PS0f = R3f.y * intBitsToFloat(uf_remappedPS[5].y)/resYScale;
// 3
backupReg0f = R0f.z;
R11f.x = (R2f.w * PV0f.x + PV0f.z);
R11f.y = (R2f.w * PS0f + PV0f.y);
PV1f.z = R3f.z * intBitsToFloat(uf_remappedPS[5].z)/resXScale;
R123f.w = (R1f.w * PV0f.w + R127f.x);
PV1f.w = R123f.w;
R5f.z = backupReg0f;
PS1f = R5f.z;
// 4
R1f.x = R0f.x;
R6f.y = (intBitsToFloat(uf_remappedPS[2].y)/resYScale * 2.0 + R0f.y);
R11f.z = (R2f.w * PV1f.z + PV1f.w);
R6f.w = R0f.z;
R1f.z = roundEven(2.0);
PS0f = R1f.z;
// 5
R9f.x = R0f.x;
R1f.y = R0f.y;
R9f.z = roundEven(intBitsToFloat(0x40400000));
R9f.w = R0f.y;
R3f.xyz = (texture(textureUnitPS1, vec3(R0f.x,R0f.y,R0f.z)).xyz);
R7f.xyz = (texture(textureUnitPS1, vec3(R1f.x,R1f.y,R1f.z)).xyz);
R10f.xyz = (texture(textureUnitPS1, vec3(R9f.x,R9f.w,R9f.z)).xyz);
R5f.xyz = (texture(textureUnitPS1, vec3(R5f.x,R5f.w,R5f.z)).xyz);
// 0
backupReg0f = R0f.z;
PV0f.x = intBitsToFloat(uf_remappedPS[3].z)/resXScale * R5f.z;
PV0f.y = intBitsToFloat(uf_remappedPS[3].y)/resYScale * R5f.y;
PV0f.z = intBitsToFloat(uf_remappedPS[3].x)/resXScale * R5f.x;
R5f.w = backupReg0f;
R2f.z = R1f.z;
PS0f = R2f.z;
// 1
backupReg0f = R3f.x;
R3f.x = (intBitsToFloat(uf_remappedPS[1].y)/resYScale * PV0f.x + R3f.z);
R5f.y = (intBitsToFloat(uf_remappedPS[2].y)/resYScale * intBitsToFloat(0x40400000) + R0f.y);
R5f.z = (intBitsToFloat(uf_remappedPS[1].y)/resYScale * PV0f.y + R3f.y);
R0f.w = (intBitsToFloat(uf_remappedPS[1].y)/resYScale * PV0f.z + backupReg0f);
R5f.x = (intBitsToFloat(uf_remappedPS[2].x)/resXScale * intBitsToFloat(0x40400000) + R0f.x);
PS1f = R5f.x;
// 2
R2f.x = (intBitsToFloat(uf_remappedPS[6].x)/resXScale * 1.0 + R0f.x);
R2f.y = (intBitsToFloat(uf_remappedPS[6].y)/resYScale * 1.0 + R0f.y);
R3f.z = R1f.z;
R3f.w = (intBitsToFloat(uf_remappedPS[6].x)/resXScale * 2.0 + R0f.x);
R3f.y = (intBitsToFloat(uf_remappedPS[6].y)/resYScale * 2.0 + R0f.y);
PS0f = R3f.y;
R6f.xyz = (texture(textureUnitPS1, vec3(R6f.x,R6f.y,R6f.w)).xyz);
R4f.xyz = (texture(textureUnitPS1, vec3(R5f.x,R5f.y,R5f.w)).xyz);
R2f.xyz = (texture(textureUnitPS1, vec3(R2f.x,R2f.y,R2f.z)).xyz);
R8f.xyz = (texture(textureUnitPS1, vec3(R3f.w,R3f.y,R3f.z)).xyz);
// 0
PV0f.x = intBitsToFloat(uf_remappedPS[4].y)/resYScale * R6f.y;
PV0f.y = intBitsToFloat(uf_remappedPS[4].x)/resXScale * R6f.x;
R127f.z = intBitsToFloat(uf_remappedPS[4].x)/resXScale * R8f.x;
PV0f.w = intBitsToFloat(uf_remappedPS[4].z)/resXScale * R6f.z;
R127f.y = intBitsToFloat(uf_remappedPS[4].y)/resYScale * R8f.y;
PS0f = R127f.y;
// 1
PV1f.x = intBitsToFloat(uf_remappedPS[5].x)/resXScale * R4f.x;
R123f.y = (R1f.w * PV0f.x + R5f.z);
PV1f.y = R123f.y;
R123f.z = (R1f.w * PV0f.y + R0f.w);
PV1f.z = R123f.z;
R127f.w = (R1f.w * PV0f.w + R3f.x);
PS1f = intBitsToFloat(uf_remappedPS[5].y)/resYScale * R4f.y;
// 2
R3f.x = (R2f.w * PV1f.x + PV1f.z);
R3f.y = (R2f.w * PS1f + PV1f.y);
PV0f.z = intBitsToFloat(uf_remappedPS[3].x)/resXScale * R2f.x;
PV0f.w = intBitsToFloat(uf_remappedPS[5].z)/resXScale * R4f.z;
PS0f = intBitsToFloat(uf_remappedPS[3].y)/resYScale * R2f.y;
// 3
R123f.x = (intBitsToFloat(uf_remappedPS[1].y)/resYScale * PV0f.z + R7f.x);
PV1f.x = R123f.x;
PV1f.y = intBitsToFloat(uf_remappedPS[3].z)/resXScale * R2f.z;
R3f.z = (R2f.w * PV0f.w + R127f.w);
R123f.w = (intBitsToFloat(uf_remappedPS[1].y)/resYScale * PS0f + R7f.y);
PV1f.w = R123f.w;
// 4
R4f.x = (R1f.w * R127f.z + PV1f.x);
PV0f.y = intBitsToFloat(uf_remappedPS[4].z)/resXScale * R8f.z;
R4f.z = (R1f.w * R127f.y + PV1f.w);
R123f.w = (intBitsToFloat(uf_remappedPS[1].y)/resYScale * PV1f.y + R7f.z);
PV0f.w = R123f.w;
// 5
R1f.x = (intBitsToFloat(uf_remappedPS[6].x)/resXScale * intBitsToFloat(0x40400000) + R0f.x);
R1f.y = (intBitsToFloat(uf_remappedPS[6].y)/resYScale * intBitsToFloat(0x40400000) + R0f.y);
R7f.z = R9f.z;
R0f.w = (R1f.w * PV0f.y + PV0f.w);
R7f.x = (intBitsToFloat(uf_remappedPS[7].x)/resXScale * 1.0 + R0f.x);
PS1f = R7f.x;
// 6
R8f.x = (intBitsToFloat(uf_remappedPS[7].x)/resXScale * 2.0 + R0f.x);
R7f.y = (intBitsToFloat(uf_remappedPS[7].y)/resYScale * 1.0 + R0f.y);
R8f.z = R9f.z;
R8f.w = (intBitsToFloat(uf_remappedPS[7].y)/resYScale * 2.0 + R0f.y);
R2f.x = (intBitsToFloat(uf_remappedPS[7].x)/resXScale * intBitsToFloat(0x40400000) + R0f.x);
PS0f = R2f.x;
// 7
R2f.y = (intBitsToFloat(uf_remappedPS[7].y)/resYScale * intBitsToFloat(0x40400000) + R0f.y);
R2f.z = R9f.z;
R1f.xyz = (texture(textureUnitPS1, vec3(R1f.x,R1f.y,R1f.z)).xyz);
R7f.xyz = (texture(textureUnitPS1, vec3(R7f.x,R7f.y,R7f.z)).xyz);
R8f.xyz = (texture(textureUnitPS1, vec3(R8f.x,R8f.w,R8f.z)).xyz);
R2f.xyz = (texture(textureUnitPS1, vec3(R2f.x,R2f.y,R2f.z)).xyz);
// 0
PV0f.x = intBitsToFloat(uf_remappedPS[5].y)/resYScale * R1f.y;
PV0f.y = intBitsToFloat(uf_remappedPS[5].x)/resXScale * R1f.x;
R127f.z = intBitsToFloat(uf_remappedPS[5].x)/resXScale * R2f.x;
PV0f.w = intBitsToFloat(uf_remappedPS[5].z)/resXScale * R1f.z;
R126f.x = intBitsToFloat(uf_remappedPS[5].y)/resYScale * R2f.y;
PS0f = R126f.x;
// 1
backupReg0f = R4f.x;
R4f.x = (R2f.w * PV0f.y + backupReg0f);
R4f.y = (R2f.w * PV0f.x + R4f.z);
R4f.z = (R2f.w * PV0f.w + R0f.w);
PV1f.w = intBitsToFloat(uf_remappedPS[3].x)/resXScale * R7f.x;
PS1f = intBitsToFloat(uf_remappedPS[3].y)/resYScale * R7f.y;
// 2
R127f.x = (intBitsToFloat(uf_remappedPS[1].y)/resYScale * PV1f.w + R10f.x);
PV0f.y = intBitsToFloat(uf_remappedPS[3].z)/resXScale * R7f.z;
R127f.w = (intBitsToFloat(uf_remappedPS[1].y)/resYScale * PS1f + R10f.y);
// 3
PV1f.y = intBitsToFloat(uf_remappedPS[4].y)/resYScale * R8f.y;
PV1f.z = intBitsToFloat(uf_remappedPS[4].x)/resXScale * R8f.x;
R126f.w = (intBitsToFloat(uf_remappedPS[1].y)/resYScale * PV0f.y + R10f.z);
// 4
PV0f.x = intBitsToFloat(uf_remappedPS[4].z)/resXScale * R8f.z;
R127f.y = intBitsToFloat(uf_remappedPS[5].z)/resXScale * R2f.z;
R123f.z = (R1f.w * PV1f.y + R127f.w);
PV0f.z = R123f.z;
R123f.w = (R1f.w * PV1f.z + R127f.x);
PV0f.w = R123f.w;
// 5
R2f.x = (R2f.w * R127f.z + PV0f.w);
R2f.y = (R2f.w * R126f.x + PV0f.z);
R123f.w = (R1f.w * PV0f.x + R126f.w);
PV1f.w = R123f.w;
// 6
R2f.z = (R2f.w * R127f.y + PV1f.w);
PV0f.z = R2f.z;
// 7
R8f.xyz = vec3(R2f.x,R2f.y,PV0f.z);
R8f.w = R2f.w;
// 8
R7f.xyz = vec3(R4f.x,R4f.y,R4f.z);
R7f.w = R4f.w;
// 9
R6f.xyz = vec3(R3f.x,R3f.y,R3f.z);
R6f.w = R3f.w;
// 10
R5f.xyz = vec3(R11f.x,R11f.y,R11f.z);
R5f.w = R11f.w;
// export
passPixelColor0 = vec4(R5f.x, R5f.y, R5f.z, R5f.w);
passPixelColor1 = vec4(R6f.x, R6f.y, R6f.z, R6f.w);
passPixelColor2 = vec4(R7f.x, R7f.y, R7f.z, R7f.w);
passPixelColor3 = vec4(R8f.x, R8f.y, R8f.z, R8f.w);
}
