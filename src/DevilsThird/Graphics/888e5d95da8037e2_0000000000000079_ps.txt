#version 460
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
#ifdef VULKAN
#define ATTR_LAYOUT(__vkSet, __location) layout(set = __vkSet, location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation)
#define SET_POSITION(_v) gl_Position = _v; gl_Position.z = (gl_Position.z + gl_Position.w) / 2.0
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale.xy,gl_FragCoord.zw)
#define gl_VertexID gl_VertexIndex
#define gl_InstanceID gl_InstanceIndex
#else
#define ATTR_LAYOUT(__vkSet, __location) layout(location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation, std140) 
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation)
#define SET_POSITION(_v) gl_Position = _v
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw)
#endif
// This shader was automatically converted to be cross-compatible with Vulkan and OpenGL.

// shader 888e5d95da8037e2
// Used for: Horizontal & Vertical Blur Pass
float resScale = ($width/$gameWidth);

#ifdef VULKAN
layout(set = 1, binding = 1) uniform ufBlock
{
uniform ivec4 uf_remappedPS[1];
uniform vec4 uf_fragCoordScale;
};
#else
uniform ivec4 uf_remappedPS[1];
uniform vec2 uf_fragCoordScale;
#endif
// uf_fragCoordScale was moved to the ufBlock
TEXTURE_LAYOUT(0, 1, 0) uniform sampler2D textureUnitPS0;
layout(location = 0) in vec4 passParameterSem129;
layout(location = 0) out vec4 passPixelColor0;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem129;
R3f.xy = (texture(textureUnitPS0, R0f.xy).xy);
// 0
R1f.x = (-(intBitsToFloat(uf_remappedPS[0].z)/resScale) * 2.0 + R0f.x);
R1f.y = (-(intBitsToFloat(uf_remappedPS[0].w)/resScale) * 2.0 + R0f.y);
R0f.z = R0f.x + -(intBitsToFloat(uf_remappedPS[0].z)/resScale);
R0f.w = R0f.y + -(intBitsToFloat(uf_remappedPS[0].w)/resScale);
R2f.x = R0f.x + intBitsToFloat(uf_remappedPS[0].z)/resScale;
PS0f = R2f.x;
// 1
R2f.y = R0f.y + intBitsToFloat(uf_remappedPS[0].w)/resScale;
R4f.z = 0.0;
R1f.w = R3f.y + -(R3f.y);
R4f.y = R3f.y;
PS1f = R4f.y;
R0f.xy = (texture(textureUnitPS0, R1f.xy).xy);
R1f.xy = (texture(textureUnitPS0, R0f.zw).xy);
R2f.xy = (texture(textureUnitPS0, R2f.xy).xy);
// 0
PV0f.x = mul_nonIEEE(R1f.w, R1f.w);
PV0f.z = -(R3f.y) + R0f.y;
PV0f.w = -(R3f.y) + R1f.y;
// 1
PV1f.x = -(R3f.y) + R2f.y;
PV1f.y = mul_nonIEEE(PV0f.z, PV0f.z);
PV1f.z = mul_nonIEEE(PV0f.w, PV0f.w);
PV1f.w = PV0f.x * intBitsToFloat(0x38d1b717);
PV1f.w = clamp(PV1f.w, 0.0, 1.0);
// 2
PV0f.x = PV1f.y * intBitsToFloat(0x38d1b717);
PV0f.x = clamp(PV0f.x, 0.0, 1.0);
PV0f.y = PV1f.z * intBitsToFloat(0x38d1b717);
PV0f.y = clamp(PV0f.y, 0.0, 1.0);
PV0f.z = mul_nonIEEE(PV1f.x, PV1f.x);
PV0f.w = -(PV1f.w) + 1.0;
// 3
PV1f.x = -(PV0f.y) + 1.0;
PV1f.y = PV0f.z * intBitsToFloat(0x38d1b717);
PV1f.y = clamp(PV1f.y, 0.0, 1.0);
R126f.z = PV0f.w + intBitsToFloat(0x3e4ccccd);
PV1f.w = -(PV0f.x) + 1.0;
// 4
PV0f.x = -(PV1f.y) + 1.0;
R127f.z = PV1f.w + intBitsToFloat(0x3e4ccccd);
PV0f.z = R127f.z;
PV0f.w = PV1f.x + intBitsToFloat(0x3e4ccccd);
// 5
R127f.x = PV0f.x + intBitsToFloat(0x3e4ccccd);
PV1f.y = mul_nonIEEE(R1f.x, PV0f.w);
PV1f.z = PV0f.z + PV0f.w;
// 6
R123f.x = (mul_nonIEEE(R0f.x,R127f.z) + PV1f.y);
PV0f.x = R123f.x;
PV0f.z = PV1f.z + R126f.z;
// 7
PV1f.x = PV0f.z + R127f.x;
R123f.w = (mul_nonIEEE(R3f.x,R126f.z) + PV0f.x);
PV1f.w = R123f.w;
// 8
R123f.y = (mul_nonIEEE(R2f.x,R127f.x) + PV1f.w);
PV0f.y = R123f.y;
PS0f = 1.0 / PV1f.x;
// 9
R4f.x = PV0f.y * PS0f;
// export
passPixelColor0 = vec4(R4f.x, R4f.y, R4f.z, R4f.z);
}
