#version 460
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 3e6020499611fa99
// Used for: Bloom
const float resXScale = (float($width)/float($gameWidth)); 
const float resYScale = (float($height)/float($gameHeight)); 
// start of shader inputs/outputs, predetermined by Cemu. Do not touch
#ifdef VULKAN
#define ATTR_LAYOUT(__vkSet, __location) layout(set = __vkSet, location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation)
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale.xy,gl_FragCoord.zw)
#else
#define ATTR_LAYOUT(__vkSet, __location) layout(location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation, std140) 
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation)
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw)
#endif
#ifdef VULKAN
layout(set = 1, binding = 1) uniform ufBlock
{
uniform ivec4 uf_remappedPS[1];
uniform vec4 uf_fragCoordScale;
};
#else
uniform ivec4 uf_remappedPS[1];
uniform vec2 uf_fragCoordScale;
#endif
TEXTURE_LAYOUT(0, 1, 0) uniform sampler2D textureUnitPS0;
layout(location = 0) in vec4 passParameterSem136;
layout(location = 0) out vec4 passPixelColor0;
// end of shader inputs/outputs
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem136;
// 0
R127f.x = intBitsToFloat(uf_remappedPS[0].x) / resXScale * intBitsToFloat(0x3f1f30d4);
PV0f.x = R127f.x;
R127f.y = intBitsToFloat(uf_remappedPS[0].y) / resYScale * intBitsToFloat(0x3f1f30d4);
PV0f.z = intBitsToFloat(uf_remappedPS[0].y) / resYScale * intBitsToFloat(0x40117a87);
PV0f.w = intBitsToFloat(uf_remappedPS[0].x) / resXScale * intBitsToFloat(0x40117a87);
R127f.w = intBitsToFloat(uf_remappedPS[0].x) / resXScale * intBitsToFloat(0x4084b060);
PS0f = R127f.w;
// 1
R1f.x = R0f.x + -(PV0f.w);
R1f.y = R0f.y + -(PV0f.z);
R0f.z = R0f.x + PV0f.w;
R0f.w = R0f.y + PV0f.z;
R2f.x = R0f.x + -(PV0f.x);
PS1f = R2f.x;
// 2
R3f.x = R0f.x + R127f.x;
R2f.y = R0f.y + -(R127f.y);
R3f.z = R0f.y + R127f.y;
PV0f.w = intBitsToFloat(uf_remappedPS[0].y) / resYScale * intBitsToFloat(0x4084b060);
R4f.x = R0f.x + -(R127f.w);
PS0f = R4f.x;
// 3
R5f.x = R0f.x + R127f.w;
R4f.y = R0f.y + -(PV0f.w);
R5f.z = R0f.y + PV0f.w;
R1f.xyzw = (texture(textureUnitPS0, R1f.xy).xyzw);
R0f.xyzw = (texture(textureUnitPS0, R0f.zw).xyzw);
R2f.xyzw = (texture(textureUnitPS0, R2f.xy).xyzw);
R3f.xyzw = (texture(textureUnitPS0, R3f.xz).xyzw);
R4f.xyzw = (texture(textureUnitPS0, R4f.xy).xyzw);
R5f.xyzw = (texture(textureUnitPS0, R5f.xz).xyzw);
// 0
R127f.xyz = vec3(R1f.w,R1f.z,R1f.y) + vec3(R0f.w,R0f.z,R0f.y);
PV0f.w = R1f.x + R0f.x;
// 1
R126f.xyz = vec3(R2f.w,R2f.z,R2f.y) + vec3(R3f.w,R3f.z,R3f.y);
PV1f.w = R2f.x + R3f.x;
PS1f = PV0f.w * intBitsToFloat(0x3e20c7a7);
// 2
PV0f.x = R127f.x * intBitsToFloat(0x3e20c7a7);
PV0f.y = R127f.y * intBitsToFloat(0x3e20c7a7);
PV0f.z = R127f.z * intBitsToFloat(0x3e20c7a7);
R126f.w = (PV1f.w * intBitsToFloat(0x3ea913a1) + PS1f);
R127f.w = R4f.x + R5f.x;
PS0f = R127f.w;
// 3
backupReg0f = R126f.x;
R126f.x = (backupReg0f * intBitsToFloat(0x3ea913a1) + PV0f.x);
R123f.y = (R126f.y * intBitsToFloat(0x3ea913a1) + PV0f.y);
PV1f.y = R123f.y;
R123f.z = (R126f.z * intBitsToFloat(0x3ea913a1) + PV0f.z);
PV1f.z = R123f.z;
PV1f.w = R4f.y + R5f.y;
PS1f = R4f.z + R5f.z;
// 4
PV0f.x = R4f.w + R5f.w;
R4f.y = (PV1f.w * intBitsToFloat(0x3c51115e) + PV1f.z);
R4f.z = (PS1f * intBitsToFloat(0x3c51115e) + PV1f.y);
// 5
R4f.x = (R127f.w * intBitsToFloat(0x3c51115e) + R126f.w);
R4f.w = (PV0f.x * intBitsToFloat(0x3c51115e) + R126f.x);
// export
passPixelColor0 = vec4(R4f.x, R4f.y, R4f.z, R4f.w);
}
