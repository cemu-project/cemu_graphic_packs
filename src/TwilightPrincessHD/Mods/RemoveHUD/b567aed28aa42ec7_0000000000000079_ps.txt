#version 430
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader b567aed28aa42ec7
// Used for: Removing the text from the HUD


#ifdef VULKAN
#define ATTR_LAYOUT(__vkSet, __location) layout(set = __vkSet, location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation)
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale.xy,gl_FragCoord.zw)
#else
#define ATTR_LAYOUT(__vkSet, __location) layout(location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation, std140) 
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation)
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw)
#endif
#ifdef VULKAN
layout(set = 1, binding = 1) uniform ufBlock
{
uniform ivec4 uf_remappedPS[2];
uniform vec4 uf_fragCoordScale;
};
#else
uniform ivec4 uf_remappedPS[2];
uniform vec2 uf_fragCoordScale;
#endif
TEXTURE_LAYOUT(0, 1, 0) uniform sampler2D textureUnitPS0;
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem2;
layout(location = 0) out vec4 passPixelColor0;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){return mix(0.0, a*b, (a != 0.0) && (b != 0.0));}
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem2;
R1f.w = (texture(textureUnitPS0, R1f.xy).w);
// 0
PV0f.x = intBitsToFloat(uf_remappedPS[0].w) * intBitsToFloat(0x3f7f0000);
PV0f.y = intBitsToFloat(uf_remappedPS[0].z) * intBitsToFloat(0x3f7f0000);
PV0f.z = intBitsToFloat(uf_remappedPS[0].y) * intBitsToFloat(0x3f7f0000);
PV0f.w = intBitsToFloat(uf_remappedPS[0].x) * intBitsToFloat(0x3f7f0000);
// 1
PV1f.x = fract(PV0f.w);
R127f.y = fract(PV0f.x);
R127f.z = fract(PV0f.y);
PV1f.w = fract(PV0f.z);
R127f.w = intBitsToFloat(uf_remappedPS[1].x) * intBitsToFloat(0x3f7f0000);
PS1f = R127f.w;
// 2
R127f.x = intBitsToFloat(uf_remappedPS[1].w) * intBitsToFloat(0x3f7f0000);
PV0f.y = intBitsToFloat(uf_remappedPS[1].z) * intBitsToFloat(0x3f7f0000);
PV0f.z = intBitsToFloat(uf_remappedPS[1].y) * intBitsToFloat(0x3f7f0000);
R126f.w = PV1f.x * intBitsToFloat(0x3f808081);
R126f.x = PV1f.w * intBitsToFloat(0x3f808081);
PS0f = R126f.x;
// 3
R125f.x = R127f.y * intBitsToFloat(0x3f808081);
PV1f.y = fract(R127f.w);
PV1f.z = fract(PV0f.z);
R127f.w = R127f.z * intBitsToFloat(0x3f808081);
PV1f.w = R127f.w;
PS1f = fract(PV0f.y);
// 4
PV0f.x = fract(R127f.x);
R123f.y = (PS1f * intBitsToFloat(0x3f808081) + -(PV1f.w));
PV0f.y = R123f.y;
R123f.z = (PV1f.z * intBitsToFloat(0x3f808081) + -(R126f.x));
PV0f.z = R123f.z;
R123f.w = (PV1f.y * intBitsToFloat(0x3f808081) + -(R126f.w));
PV0f.w = R123f.w;
// 5
PV1f.x = R126f.w + PV0f.w;
PV1f.x = clamp(PV1f.x, 0.0, 1.0);
R123f.y = (PV0f.x * intBitsToFloat(0x3f808081) + -(R125f.x));
PV1f.y = R123f.y;
PV1f.z = R127f.w + PV0f.y;
PV1f.z = clamp(PV1f.z, 0.0, 1.0);
PV1f.w = R126f.x + PV0f.z;
PV1f.w = clamp(PV1f.w, 0.0, 1.0);
// 6
R123f.x = (mul_nonIEEE(PV1f.y,R1f.w) + R125f.x);
R123f.x = clamp(R123f.x, 0.0, 1.0);
PV0f.x = R123f.x;
R1f.y = mul_nonIEEE(R0f.y, PV1f.w);
R1f.y = clamp(R1f.y, 0.0, 1.0);
R1f.z = mul_nonIEEE(R0f.z, PV1f.z);
R1f.z = clamp(R1f.z, 0.0, 1.0);
R1f.x = mul_nonIEEE(R0f.x, PV1f.x);
R1f.x = clamp(R1f.x, 0.0, 1.0);
PS0f = R1f.x;
// 7
R1f.w = mul_nonIEEE(R0f.w, PV0f.x);
R1f.w = clamp(R1f.w, 0.0, 1.0);
// export
passPixelColor0 = vec4(R1f.x, R1f.y, R1f.z, 0.0);
}
