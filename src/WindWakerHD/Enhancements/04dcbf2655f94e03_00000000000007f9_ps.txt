#version 420
#extension GL_ARB_texture_gather : enable
#ifdef VULKAN
#define ATTR_LAYOUT(__vkSet, __location) layout(set = __vkSet, location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation)
#define SET_POSITION(_v) gl_Position = _v; gl_Position.z = (gl_Position.z + gl_Position.w) / 2.0
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale.xy,gl_FragCoord.zw)
#define gl_VertexID gl_VertexIndex
#define gl_InstanceID gl_InstanceIndex
#else
#define ATTR_LAYOUT(__vkSet, __location) layout(location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation, std140) 
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation)
#define SET_POSITION(_v) gl_Position = _v
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw)
#endif
// This shader was automatically converted to be cross-compatible with Vulkan and OpenGL.

// shader 04dcbf2655f94e03 //hoirzon cloud layer lighten up
#ifdef VULKAN
layout(set = 1, binding = 1) uniform ufBlock
{
uniform ivec4 uf_remappedPS[2];
uniform vec4 uf_fragCoordScale;
};
#else
uniform ivec4 uf_remappedPS[2];
uniform vec2 uf_fragCoordScale;
#endif

const float skyboxRed = float($skyboxRed);
const float skyboxGreen = float($skyboxGreen); 
const float skyboxBlue = float($skyboxBlue);
const float skyboxMix = float($skyboxMix);

TEXTURE_LAYOUT(3, 1, 0) uniform sampler2D textureUnitPS3;
layout(location = 0) in vec4 passParameterSem6;
layout(location = 0) out vec4 passPixelColor0;
layout(location = 1) out vec4 passPixelColor1;
// uf_fragCoordScale was moved to the ufBlock
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem6;
R0f.xyzw = (texture(textureUnitPS3, R0f.xy).xyzw);
// 0
backupReg0f = R0f.x;
PV0f.x = R0f.w;
PV0f.x = clamp(PV0f.x, 0.0, 1.0);
R2f.y = (intBitsToFloat(uf_remappedPS[0].z) * 0.5 + 0.5);
R1f.x = mul_nonIEEE(backupReg0f, intBitsToFloat(uf_remappedPS[1].x));
PS0f = R1f.x;
// 1
R2f.x = PV0f.x;
R1f.y = mul_nonIEEE(R0f.y, intBitsToFloat(uf_remappedPS[1].y));
PV1f.y = R1f.y;
R1f.z = mul_nonIEEE(R0f.z, intBitsToFloat(uf_remappedPS[1].z));
PV1f.z = R1f.z;
R1f.w = PV0f.x;
PV1f.w = R1f.w;
// 2
R0f.xyz = vec3(R1f.x,PV1f.y,PV1f.z);
R0f.w = PV1f.w;
// 3
R1f.xyz = vec3(R2f.y,R2f.y,R2f.y);
R1f.w = R2f.x;
// export

//passPixelColor0 = vec4(R0f.x*$skyboxRed, R0f.y, R0f.z*1.1, R0f.w)*1.3;
passPixelColor0 = vec4(R0f.x*skyboxRed, R0f.y*skyboxGreen, R0f.z*skyboxBlue*1.1, R0f.w)*skyboxMix*1.3;
passPixelColor1 = vec4(R1f.x, R1f.y, R1f.z, R1f.w);
}
