#version 450
#extension GL_ARB_texture_gather : enable
#ifdef VULKAN
#define ATTR_LAYOUT(__vkSet, __location) layout(set = __vkSet, location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation)
#define SET_POSITION(_v) gl_Position = _v; gl_Position.z = (gl_Position.z + gl_Position.w) / 2.0
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale.xy,gl_FragCoord.zw)
#define gl_VertexID gl_VertexIndex
#define gl_InstanceID gl_InstanceIndex
#else
#define ATTR_LAYOUT(__vkSet, __location) layout(location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation)
#define SET_POSITION(_v) gl_Position = _v
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw)
#endif

#ifdef VULKAN
layout(set = 1, binding = 1) uniform ufBlock
{
uniform ivec4 uf_remappedPS[5];
uniform vec4 uf_fragCoordScale;
};
#else
uniform ivec4 uf_remappedPS[5];
uniform vec2 uf_fragCoordScale;
#endif







//// shader ff71dcd2ad4defdc
//uniform ivec4 uf_remappedPS[4];
//layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0xf5807800 res 1920x1080x1 dim 1 tm: 4 format 0019 compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
//layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0xf4000800 res 1920x1080x1 dim 1 tm: 4 format 0001 compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 2 2 2 border: 1
//layout(location = 0) in vec4 passParameterSem2;
//layout(location = 0) out vec4 passPixelColor0;
//uniform vec2 uf_fragCoordScale;
//int clampFI32(int v)
//{
//if( v == 0x7FFFFFFF )
//	return floatBitsToInt(1.0);
//else if( v == 0xFFFFFFFF )
//	return floatBitsToInt(0.0);
//return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
//}
//float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
//void main()
//{
//vec4 R0f = vec4(0.0);
//vec4 R1f = vec4(0.0);
//vec4 R2f = vec4(0.0);
//vec4 R3f = vec4(0.0);
//vec4 R4f = vec4(0.0);
//vec4 R123f = vec4(0.0);
//vec4 R126f = vec4(0.0);
//vec4 R127f = vec4(0.0);
//float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
//vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
//float PS0f = 0.0, PS1f = 0.0;
//vec4 tempf = vec4(0.0);
//float tempResultf;
//int tempResulti;
//ivec4 ARi = ivec4(0);
//bool predResult = true;
//bool activeMaskStack[2];
//bool activeMaskStackC[3];
//activeMaskStack[0] = false;
//activeMaskStackC[0] = false;
//activeMaskStackC[1] = false;
//activeMaskStack[0] = true;
//activeMaskStackC[0] = true;
//activeMaskStackC[1] = true;
//vec3 cubeMapSTM;
//int cubeMapFaceId;
//R0f = passParameterSem2;
////R1f.xyzw = (textureGather(textureUnitPS1, R0f.xy).wzxy);
//R2f.xyzw= (texture(textureUnitPS0, R0f.xy).xyzw);
//passPixelColor0 = R2f.xyzw;
//}
