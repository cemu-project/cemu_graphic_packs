<?php
include 'Source/functions.php';
$fullWidth = $argv[1];
$fullHeight = $argv[2];
$scaleFactorX = always_decimal_format($fullWidth / 1280.0);
$scaleFactorY = always_decimal_format($fullHeight / 720.0);
?>
#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 6e828da50daedc79
// cut scene blur
const float resScale = <?=$scaleFactorX?>;
uniform ivec4 uf_remappedPS[3];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0xf5195800 res 1280x720x1 dim 1 tm: 4 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 0 border: 0
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0xf4709800 res 1280x720x1 dim 1 tm: 4 format 080e compSel: 0 0 0 0 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 2 2 0 border: 0
layout(location = 0) in vec4 passParameterSem128;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R8f = vec4(0.0);
vec4 R9f = vec4(0.0);
vec4 R10f = vec4(0.0);
vec4 R11f = vec4(0.0);
vec4 R12f = vec4(0.0);
vec4 R13f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem128;
R9f.xyz = (texture(textureUnitPS0, R0f.xy).xyz);
R10f.x = (texture(textureUnitPS1, R0f.xy).x);
// 0
PV0f.x = -(1.0) + R0f.z;
R127f.y = intBitsToFloat(0xba4ccccd) / resScale * intBitsToFloat(uf_remappedPS[0].x);
PV0f.y = R127f.y;
R2f.z = intBitsToFloat(0x3a4ccccd) / resScale * intBitsToFloat(uf_remappedPS[0].x);
R2f.w = intBitsToFloat(0xbab60b61) / resScale * intBitsToFloat(uf_remappedPS[0].x);
PV0f.w = R2f.w;
R3f.y = intBitsToFloat(0x3ab60b61) / resScale * intBitsToFloat(uf_remappedPS[0].x);
PS0f = R3f.y;
// 1
R7f.x = intBitsToFloat(0x3ab60b61) / resScale * intBitsToFloat(uf_remappedPS[0].x);
R1f.y = R0f.y + PV0f.w;
R6f.z = 1.0 + PV0f.x;
R3f.w = intBitsToFloat(0x3a4ccccd) / resScale* intBitsToFloat(uf_remappedPS[0].x);
R1f.x = R0f.x + PV0f.y;
PS1f = R1f.x;
// 2
R3f.x = -(intBitsToFloat(uf_remappedPS[1].z)) + intBitsToFloat(uf_remappedPS[1].w);
R2f.y = -(intBitsToFloat(uf_remappedPS[1].x)) + intBitsToFloat(uf_remappedPS[1].y);
R1f.z = R0f.x + R127f.y;
R1f.w = R0f.y + R3f.y;
R6f.x = R0f.x + R2f.z;
PS0f = R6f.x;
R5f.xyz = (texture(textureUnitPS0, R1f.xy).xyz);
R1f.x = (texture(textureUnitPS1, R1f.xy).x);
R4f.xyz = (texture(textureUnitPS0, R1f.zw).xyz);
R2f.x = (texture(textureUnitPS1, R1f.zw).x);
// 0
backupReg0f = R1f.x;
R1f.x = R0f.x + R2f.z;
R127f.y = R2f.x + R6f.z;
PV0f.z = backupReg0f + R6f.z;
R6f.w = R0f.y + R2f.w;
R1f.z = 1.0 / R2f.y;
PS0f = R1f.z;
// 1
R12f.x = mul_nonIEEE(PS0f, intBitsToFloat(uf_remappedPS[1].x));
R1f.y = R0f.y + R3f.y;
PS1f = 1.0 / PV0f.z;
// 2
R127f.w = mul_nonIEEE(R0f.w, PS1f);
PV0f.w = R127f.w;
R7f.z = 1.0 / R3f.x;
PS0f = R7f.z;
// 3
R13f.x = mul_nonIEEE(PS0f, intBitsToFloat(uf_remappedPS[1].z));
PV1f.x = R13f.x;
R2f.y = R0f.y + R7f.x;
R2f.z = R0f.x;
R126f.w = (mul_nonIEEE(PV0f.w,R1f.z) + -(R12f.x));
R126f.w = clamp(R126f.w, 0.0, 1.0);
PS1f = 1.0 / R127f.y;
// 4
backupReg0f = R0f.w;
R8f.x = R6f.x;
R8f.y = R0f.y;
R123f.z = (mul_nonIEEE(R127f.w,R7f.z) + -(PV1f.x));
R123f.z = clamp(R123f.z, 0.0, 1.0);
PV0f.z = R123f.z;
PV0f.w = mul_nonIEEE(backupReg0f, PS1f);
// 5
backupReg0f = R126f.w;
R123f.y = (mul_nonIEEE(R7f.z,PV0f.w) + -(R13f.x));
R123f.y = clamp(R123f.y, 0.0, 1.0);
PV1f.y = R123f.y;
R123f.z = (mul_nonIEEE(R1f.z,PV0f.w) + -(R12f.x));
R123f.z = clamp(R123f.z, 0.0, 1.0);
PV1f.z = R123f.z;
R126f.w = max(backupReg0f, PV0f.z);
// 6
backupReg0f = R0f.x;
PV0f.x = max(PV1f.z, PV1f.y);
R11f.y = R0f.y;
R11f.x = backupReg0f + -(R3f.w);
PS0f = R11f.x;
// 7
R2f.x = R126f.w + PV0f.x;
PV1f.y = mul_nonIEEE(R4f.z, PV0f.x);
PV1f.z = mul_nonIEEE(R4f.y, PV0f.x);
PV1f.w = mul_nonIEEE(R4f.x, PV0f.x);
// 8
backupReg0f = R5f.x;
backupReg1f = R5f.z;
R5f.x = (mul_nonIEEE(backupReg0f,R126f.w) + PV1f.w);
R5f.z = (mul_nonIEEE(backupReg1f,R126f.w) + PV1f.y);
R3f.w = (mul_nonIEEE(R5f.y,R126f.w) + PV1f.z);
R4f.xyz = (texture(textureUnitPS0, R6f.xw).xyz);
R6f.x = (texture(textureUnitPS1, R6f.xw).x);
R3f.xyz = (texture(textureUnitPS0, R1f.xy).xyz);
R1f.x = (texture(textureUnitPS1, R1f.xy).x);
// 0
R127f.x = R1f.x + R6f.z;
PV0f.y = R6f.x + R6f.z;
// 1
backupReg0f = R0f.y;
R0f.y = backupReg0f + -(R7f.x);
PS1f = 1.0 / PV0f.y;
// 2
PV0f.x = mul_nonIEEE(R0f.w, PS1f);
PS0f = 1.0 / R127f.x;
// 3
PV1f.x = mul_nonIEEE(R0f.w, PS0f);
R123f.y = (mul_nonIEEE(R7f.z,PV0f.x) + -(R13f.x));
R123f.y = clamp(R123f.y, 0.0, 1.0);
PV1f.y = R123f.y;
R123f.w = (mul_nonIEEE(R1f.z,PV0f.x) + -(R12f.x));
R123f.w = clamp(R123f.w, 0.0, 1.0);
PV1f.w = R123f.w;
// 4
R123f.x = (mul_nonIEEE(R1f.z,PV1f.x) + -(R12f.x));
R123f.x = clamp(R123f.x, 0.0, 1.0);
PV0f.x = R123f.x;
R123f.y = (mul_nonIEEE(R7f.z,PV1f.x) + -(R13f.x));
R123f.y = clamp(R123f.y, 0.0, 1.0);
PV0f.y = R123f.y;
R8f.z = max(PV1f.w, PV1f.y);
PV0f.z = R8f.z;
// 5
R123f.x = (mul_nonIEEE(R4f.z,PV0f.z) + R5f.z);
PV1f.x = R123f.x;
PV1f.y = max(PV0f.x, PV0f.y);
R123f.z = (mul_nonIEEE(R4f.y,PV0f.z) + R3f.w);
PV1f.z = R123f.z;
R123f.w = (mul_nonIEEE(R4f.x,PV0f.z) + R5f.x);
PV1f.w = R123f.w;
// 6
backupReg0f = R3f.y;
backupReg1f = R3f.x;
R3f.x = R2f.x + PV1f.y;
R3f.y = (mul_nonIEEE(R3f.z,PV1f.y) + PV1f.x);
R3f.z = (mul_nonIEEE(backupReg0f,PV1f.y) + PV1f.z);
R3f.w = (mul_nonIEEE(backupReg1f,PV1f.y) + PV1f.w);
R5f.xyz = (texture(textureUnitPS0, R8f.xy).xyz);
R8f.x = (texture(textureUnitPS1, R8f.xy).x);
R4f.xyz = (texture(textureUnitPS0, R2f.zy).xyz);
R2f.x = (texture(textureUnitPS1, R2f.zy).x);
// 0
backupReg0f = R3f.y;
backupReg1f = R2f.x;
R2f.x = R9f.y + R3f.z;
R3f.y = R9f.x + R3f.w;
PV0f.z = R8f.x + R6f.z;
R2f.w = R9f.z + backupReg0f;
R127f.y = backupReg1f + R6f.z;
PS0f = R127f.y;
// 1
R126f.y = R10f.x + R6f.z;
PS1f = 1.0 / PV0f.z;
// 2
PV0f.x = mul_nonIEEE(R0f.w, PS1f);
PS0f = 1.0 / R127f.y;
// 3
PV1f.x = mul_nonIEEE(R0f.w, PS0f);
R123f.z = (mul_nonIEEE(R7f.z,PV0f.x) + -(R13f.x));
R123f.z = clamp(R123f.z, 0.0, 1.0);
PV1f.z = R123f.z;
R123f.w = (mul_nonIEEE(R1f.z,PV0f.x) + -(R12f.x));
R123f.w = clamp(R123f.w, 0.0, 1.0);
PV1f.w = R123f.w;
PS1f = 1.0 / R126f.y;
// 4
PV0f.x = mul_nonIEEE(R0f.w, PS1f);
R123f.y = (mul_nonIEEE(R7f.z,PV1f.x) + -(R13f.x));
R123f.y = clamp(R123f.y, 0.0, 1.0);
PV0f.y = R123f.y;
R123f.z = (mul_nonIEEE(R1f.z,PV1f.x) + -(R12f.x));
R123f.z = clamp(R123f.z, 0.0, 1.0);
PV0f.z = R123f.z;
R126f.w = max(PV1f.w, PV1f.z);
// 5
PV1f.x = max(PV0f.z, PV0f.y);
R123f.y = (mul_nonIEEE(R7f.z,PV0f.x) + -(R13f.x));
R123f.y = clamp(R123f.y, 0.0, 1.0);
PV1f.y = R123f.y;
R123f.z = (mul_nonIEEE(R1f.z,PV0f.x) + -(R12f.x));
R123f.z = clamp(R123f.z, 0.0, 1.0);
PV1f.z = R123f.z;
// 6
PV0f.x = max(PV1f.z, PV1f.y);
PV0f.y = mul_nonIEEE(R4f.z, PV1f.x);
PV0f.z = mul_nonIEEE(R4f.y, PV1f.x);
PV0f.w = mul_nonIEEE(R4f.x, PV1f.x);
R6f.w = R126f.w + PV1f.x;
PS0f = R6f.w;
// 7
backupReg0f = R5f.y;
R5f.y = (mul_nonIEEE(R5f.z,R126f.w) + PV0f.y);
R5f.z = (mul_nonIEEE(backupReg0f,R126f.w) + PV0f.z);
R3f.w = (mul_nonIEEE(R5f.x,R126f.w) + PV0f.w);
R9f.w = mul_nonIEEE(PV0f.x, intBitsToFloat(uf_remappedPS[2].w));
PS1f = R9f.w;
R4f.xyz = (texture(textureUnitPS0, R11f.xy).xyz);
R11f.x = (texture(textureUnitPS1, R11f.xy).x);
R10f.xyz = (texture(textureUnitPS0, R0f.xy).xyz);
R5f.x = (texture(textureUnitPS1, R0f.xy).x);
// 0
PV0f.x = R11f.x + R6f.z;
R126f.y = R6f.z + R5f.x;
// 1
PS1f = 1.0 / PV0f.x;
// 2
backupReg0f = R0f.w;
PV0f.w = mul_nonIEEE(backupReg0f, PS1f);
PS0f = 1.0 / R126f.y;
// 3
R123f.x = (mul_nonIEEE(R7f.z,PV0f.w) + -(R13f.x));
R123f.x = clamp(R123f.x, 0.0, 1.0);
PV1f.x = R123f.x;
R123f.y = (mul_nonIEEE(R1f.z,PV0f.w) + -(R12f.x));
R123f.y = clamp(R123f.y, 0.0, 1.0);
PV1f.y = R123f.y;
PV1f.z = mul_nonIEEE(R0f.w, PS0f);
// 4
R123f.x = (mul_nonIEEE(R7f.z,PV1f.z) + -(R13f.x));
R123f.x = clamp(R123f.x, 0.0, 1.0);
PV0f.x = R123f.x;
R123f.y = (mul_nonIEEE(R1f.z,PV1f.z) + -(R12f.x));
R123f.y = clamp(R123f.y, 0.0, 1.0);
PV0f.y = R123f.y;
PV0f.z = max(PV1f.y, PV1f.x);
// 5
PV1f.x = max(PV0f.y, PV0f.x);
R123f.y = (mul_nonIEEE(R4f.y,PV0f.z) + R5f.z);
PV1f.y = R123f.y;
R123f.z = (mul_nonIEEE(R4f.z,PV0f.z) + R5f.y);
PV1f.z = R123f.z;
R123f.w = (mul_nonIEEE(R4f.x,PV0f.z) + R3f.w);
PV1f.w = R123f.w;
PS1f = R6f.w + PV0f.z;
// 6
R123f.x = (mul_nonIEEE(R10f.z,PV1f.x) + PV1f.z);
PV0f.x = R123f.x;
R123f.y = (mul_nonIEEE(R10f.y,PV1f.x) + PV1f.y);
PV0f.y = R123f.y;
R123f.z = (mul_nonIEEE(R10f.x,PV1f.x) + PV1f.w);
PV0f.z = R123f.z;
R126f.w = PS1f + R8f.z;
PS0f = 1.0 + PV1f.x;
// 7
R127f.x = PV0f.x + R2f.w;
R126f.y = PV0f.y + R2f.x;
R127f.z = PV0f.z + R3f.y;
PV1f.w = PS0f + R3f.x;
// 8
PV0f.z = PV1f.w + R126f.w;
// 9
PS1f = 1.0 / PV0f.z;
// 10
PV0f.x = mul_nonIEEE(R127f.z, PS1f);
PV0f.z = mul_nonIEEE(R127f.x, PS1f);
PV0f.w = mul_nonIEEE(R126f.y, PS1f);
// 11
R9f.x = mul_nonIEEE(PV0f.x, intBitsToFloat(uf_remappedPS[2].x));
R9f.y = mul_nonIEEE(PV0f.w, intBitsToFloat(uf_remappedPS[2].y));
R9f.z = mul_nonIEEE(PV0f.z, intBitsToFloat(uf_remappedPS[2].z));
// export
passPixelColor0 = vec4(R9f.x, R9f.y, R9f.z, R9f.w);
}
