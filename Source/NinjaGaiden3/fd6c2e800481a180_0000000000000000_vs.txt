#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_packing : enable
// shader fd6c2e800481a180 //Cinematic bloom

const float resXScale =  intBitsToFloat($width)/intBitsToFloat($gameWidth);
const float resYScale = intBitsToFloat($height)/intBitsToFloat($gameHeight); 


uniform ivec4 uf_remappedVS[8];
uniform vec2 uf_windowSpaceToClipSpaceTransform;
layout(location = 0) in uvec4 attrDataSem0;
layout(location = 1) in uvec4 attrDataSem5;
out gl_PerVertex
{
	vec4 gl_Position;
	float gl_PointSize;
};
layout(location = 0) out vec4 passParameterSem128;
layout(location = 1) out vec4 passParameterSem129;
layout(location = 2) out vec4 passParameterSem130;
layout(location = 3) out vec4 passParameterSem131;
layout(location = 4) out vec4 passParameterSem132;
layout(location = 5) out vec4 passParameterSem133;
layout(location = 6) out vec4 passParameterSem134;
layout(location = 7) out vec4 passParameterSem135;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R8f = vec4(0.0);
vec4 R9f = vec4(0.0);
vec4 R10f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
uvec4 attrDecoder;
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = floatBitsToInt(ivec4(gl_VertexID, 0, 0, gl_InstanceID));
attrDecoder.xy = attrDataSem0.xy;
attrDecoder.xy = (attrDecoder.xy>>24)|((attrDecoder.xy>>8)&0xFF00)|((attrDecoder.xy<<8)&0xFF0000)|((attrDecoder.xy<<24));
attrDecoder.z = 0;
attrDecoder.w = 0;
R1f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(floatBitsToInt(0.0)), intBitsToFloat(floatBitsToInt(1.0)));
attrDecoder.xy = attrDataSem5.xy;
attrDecoder.xy = (attrDecoder.xy>>24)|((attrDecoder.xy>>8)&0xFF00)|((attrDecoder.xy<<8)&0xFF0000)|((attrDecoder.xy<<24));
attrDecoder.z = 0;
attrDecoder.w = 0;
R2f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(floatBitsToInt(0.0)), intBitsToFloat(floatBitsToInt(1.0)));
// 0
R127f.xyz = vec3(R2f.y,R2f.x,R2f.y) + vec3(-(intBitsToFloat(uf_remappedVS[0].y)/resYScale),-(intBitsToFloat(uf_remappedVS[0].x)/resXScale),-(intBitsToFloat(uf_remappedVS[1].y)/resYScale));
PV0f.w = R2f.x + -(intBitsToFloat(uf_remappedVS[1].x)/resXScale);
R0f.x = R2f.x + intBitsToFloat(uf_remappedVS[1].x)/resXScale;
PS0f = R0f.x;
// 1
R126f.xyz = vec3(R2f.y,R2f.x,R2f.y) + vec3(-(intBitsToFloat(uf_remappedVS[2].y)/resYScale),-(intBitsToFloat(uf_remappedVS[2].x)/resXScale),-(intBitsToFloat(uf_remappedVS[3].y)/resYScale));
R127f.w = R2f.x + -(intBitsToFloat(uf_remappedVS[3].x)/resXScale);
R0f.z = PV0f.w;
PS1f = R0f.z;
// 2
backupReg0f = R127f.z;
R125f.x = R2f.y + -(intBitsToFloat(uf_remappedVS[4].y)/resXScale);
R125f.y = R2f.x + -(intBitsToFloat(uf_remappedVS[4].x)/resYScale);
R127f.z = R2f.y + -(intBitsToFloat(uf_remappedVS[5].y)/resXScale);
R126f.w = R2f.x + -(intBitsToFloat(uf_remappedVS[5].x)/resYScale);
R0f.w = backupReg0f;
PS0f = R0f.w;
// 3
R9f.x = R2f.y + -(intBitsToFloat(uf_remappedVS[6].y)/resXScale);
R9f.y = R2f.x + -(intBitsToFloat(uf_remappedVS[6].x)/resYScale);
R125f.z = R2f.y + -(intBitsToFloat(uf_remappedVS[7].y)/resXScale);
R125f.w = R2f.x + -(intBitsToFloat(uf_remappedVS[7].x)/resYScale);
R3f.z = R127f.y;
PS1f = R3f.z;
// 4
R3f.x = R2f.x + intBitsToFloat(uf_remappedVS[0].x)/resXScale;
R0f.y = R2f.y + intBitsToFloat(uf_remappedVS[1].y)/resYScale;
R4f.z = R127f.w;
R3f.w = R127f.x;
R3f.y = R2f.y + intBitsToFloat(uf_remappedVS[0].y)/resXScale;
PS0f = R3f.y;
// 5
R4f.x = R2f.x + intBitsToFloat(uf_remappedVS[3].x)/resXScale;
R4f.y = R2f.y + intBitsToFloat(uf_remappedVS[3].y)/resYScale;
R5f.z = R126f.y;
R4f.w = R126f.z;
R5f.x = R2f.x + intBitsToFloat(uf_remappedVS[2].x)/resXScale;
PS1f = R5f.x;
// 6
R6f.x = R2f.x + intBitsToFloat(uf_remappedVS[5].x)/resXScale;
R5f.y = R2f.y + intBitsToFloat(uf_remappedVS[2].y)/resYScale;
R6f.z = R126f.w;
R5f.w = R126f.x;
R6f.y = R2f.y + intBitsToFloat(uf_remappedVS[5].y)/resYScale;
PS0f = R6f.y;
// 7
R7f.x = R2f.x + intBitsToFloat(uf_remappedVS[4].x)/resXScale;
R7f.y = R2f.y + intBitsToFloat(uf_remappedVS[4].y)/resYScale;
R7f.z = R125f.y;
R6f.w = R127f.z;
R7f.w = R125f.x;
PS1f = R7f.w;
// 8
R8f.x = R2f.x + intBitsToFloat(uf_remappedVS[7].x)/resXScale;
R8f.y = R2f.y + intBitsToFloat(uf_remappedVS[7].y)/resYScale;
R8f.z = R125f.w;
R8f.w = R125f.z;
R10f.x = R2f.x + intBitsToFloat(uf_remappedVS[6].x)/resXScale;
PS0f = R10f.x;
// export
gl_Position = vec4(R1f.x, R1f.y, R1f.z, R1f.w);
// export
passParameterSem128 = vec4(R0f.x, R0f.y, R0f.z, R0f.w);
// export
passParameterSem129 = vec4(R3f.x, R3f.y, R3f.z, R3f.w);
// export
passParameterSem130 = vec4(R4f.x, R4f.y, R4f.z, R4f.w);
// export
passParameterSem131 = vec4(R5f.x, R5f.y, R5f.z, R5f.w);
// export
passParameterSem132 = vec4(R6f.x, R6f.y, R6f.z, R6f.w);
// export
passParameterSem133 = vec4(R7f.x, R7f.y, R7f.z, R7f.w);
// export
passParameterSem134 = vec4(R8f.x, R8f.y, R8f.z, R8f.w);
// 0
R10f.y = R2f.y + intBitsToFloat(uf_remappedVS[6].y)/resYScale;
R10f.z = R9f.y;
R10f.w = R9f.x;
// export
passParameterSem135 = vec4(R10f.x, R10f.y, R10f.z, R10f.w);
// 0
}
