<?php
include 'Source/functions.php';
$fullWidth = $argv[1];
$fullHeight = $argv[2];
$scaleFactorX = always_decimal_format($fullWidth / 1280.0);
$scaleFactorY = always_decimal_format($fullHeight / 720.0);
?>

#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 294904d1771460cf
//vertical blur
const float resScale = <?=$scaleFactorX?>;
uniform ivec4 uf_remappedPS[1];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0xf5b14800 res 480x270x1 dim 1 tm: 4 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 0
layout(location = 0) in vec4 passParameterSem128;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem128;
R4f.xyzw = (texture(textureUnitPS0, R0f.xy).xyzw);
// 0
R127f.x = intBitsToFloat(uf_remappedPS[0].x) * intBitsToFloat(0x404ec4ec)/ resScale;
PV0f.x = R127f.x;
PV0f.y = intBitsToFloat(uf_remappedPS[0].x) * intBitsToFloat(0x3fb13b14)/ resScale;
R127f.z = 0.0;
PV0f.z = R127f.z;
// 1
R1f.x = PV0f.z + R0f.x;
PV1f.y = PV0f.x;
PV1f.z = -(PV0f.y);
PV1f.w = PV0f.y;
R2f.x = PV0f.z + R0f.x;
PS1f = R2f.x;
// 2
R3f.x = R127f.z + R0f.x;
R1f.y = PV1f.w + R0f.y;
R2f.z = PV1f.z + R0f.y;
R3f.w = PV1f.y + R0f.y;
PS0f = -(R127f.x);
// 3
backupReg0f = R0f.x;
backupReg1f = R0f.y;
R0f.x = R127f.z + backupReg0f;
R0f.y = PS0f + backupReg1f;
R1f.xyzw = (texture(textureUnitPS0, R1f.xy).xyzw);
R2f.xyzw = (texture(textureUnitPS0, R2f.xz).xyzw);
R3f.xyzw = (texture(textureUnitPS0, R3f.xw).xyzw);
R0f.xyzw = (texture(textureUnitPS0, R0f.xy).xyzw);
// 0
PV0f.x = R1f.z * intBitsToFloat(0x3ea1e718);
PV0f.y = R1f.y * intBitsToFloat(0x3ea1e718);
PV0f.z = R1f.x * intBitsToFloat(0x3ea1e718);
PV0f.w = R1f.w * intBitsToFloat(0x3ea1e718);
// 1
R123f.x = (R4f.z * intBitsToFloat(0x3e6879c6) + PV0f.x);
PV1f.x = R123f.x;
R123f.y = (R4f.y * intBitsToFloat(0x3e6879c6) + PV0f.y);
PV1f.y = R123f.y;
R123f.z = (R4f.x * intBitsToFloat(0x3e6879c6) + PV0f.z);
PV1f.z = R123f.z;
R123f.w = (R4f.w * intBitsToFloat(0x3e6879c6) + PV0f.w);
PV1f.w = R123f.w;
// 2
R123f.x = (R2f.w * intBitsToFloat(0x3ea1e718) + PV1f.w);
PV0f.x = R123f.x;
R123f.y = (R2f.z * intBitsToFloat(0x3ea1e718) + PV1f.x);
PV0f.y = R123f.y;
R123f.z = (R2f.y * intBitsToFloat(0x3ea1e718) + PV1f.y);
PV0f.z = R123f.z;
R123f.w = (R2f.x * intBitsToFloat(0x3ea1e718) + PV1f.z);
PV0f.w = R123f.w;
// 3
R123f.x = (R3f.z * intBitsToFloat(0x3d8fe9dc) + PV0f.y);
PV1f.x = R123f.x;
R123f.y = (R3f.y * intBitsToFloat(0x3d8fe9dc) + PV0f.z);
PV1f.y = R123f.y;
R123f.z = (R3f.x * intBitsToFloat(0x3d8fe9dc) + PV0f.w);
PV1f.z = R123f.z;
R123f.w = (R3f.w * intBitsToFloat(0x3d8fe9dc) + PV0f.x);
PV1f.w = R123f.w;
// 4
backupReg0f = R0f.x;
backupReg1f = R0f.y;
backupReg2f = R0f.z;
backupReg3f = R0f.w;
R0f.x = (backupReg0f * intBitsToFloat(0x3d8fe9dc) + PV1f.z);
R0f.y = (backupReg1f * intBitsToFloat(0x3d8fe9dc) + PV1f.y);
R0f.z = (backupReg2f * intBitsToFloat(0x3d8fe9dc) + PV1f.x);
R0f.w = (backupReg3f * intBitsToFloat(0x3d8fe9dc) + PV1f.w);
// export
passPixelColor0 = vec4(R0f.x, R0f.y, R0f.z, R0f.w);
}
