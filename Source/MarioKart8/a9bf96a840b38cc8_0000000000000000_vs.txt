<?php
include 'Source/functions.php';
$fullWidth = $argv[1];
$fullHeight = $argv[2];
$scaleFactorX = always_decimal_format($fullWidth / 1280.0);
$scaleFactorY = always_decimal_format($fullHeight / 720.0);
?>

#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_packing : enable
// shader a9bf96a840b38cc8
//Motion blur turbo 
const float resScale = <?=$scaleFactorX?>;
uniform ivec4 uf_remappedVS[2];
uniform vec2 uf_windowSpaceToClipSpaceTransform;
layout(location = 0) in uvec4 attrDataSem0;
layout(location = 1) in uvec4 attrDataSem1;
out gl_PerVertex
{
	vec4 gl_Position;
	float gl_PointSize;
};
layout(location = 0) out vec4 passParameterSem0;
layout(location = 1) out vec4 passParameterSem1;
layout(location = 2) out vec4 passParameterSem2;
layout(location = 3) out vec4 passParameterSem3;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{

vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
uvec4 attrDecoder;
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = floatBitsToInt(ivec4(gl_VertexID, 0, 0, gl_InstanceID));
attrDecoder.xyz = attrDataSem0.xyz;
attrDecoder.xyz = (attrDecoder.xyz>>24)|((attrDecoder.xyz>>8)&0xFF00)|((attrDecoder.xyz<<8)&0xFF0000)|((attrDecoder.xyz<<24));
attrDecoder.w = 0;
R1f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(int(attrDecoder.z)), intBitsToFloat(floatBitsToInt(1.0)));
// 0
R125f.x = mul_nonIEEE(R1f.x, intBitsToFloat(uf_remappedVS[0].x));
PV0f.x = R125f.x;
R127f.y = intBitsToFloat(uf_remappedVS[1].w) * intBitsToFloat(0x3e124925)/resScale;
PV0f.y = R127f.y;
R1f.z = intBitsToFloat(uf_remappedVS[1].z);
R127f.w = mul_nonIEEE(R1f.y, intBitsToFloat(uf_remappedVS[0].y));
PV0f.w = R127f.w;
R1f.w = 1.0;
PS0f = R1f.w;
// 1
R126f.x = (intBitsToFloat(uf_remappedVS[1].y) * 0.5 + 0.5);
PV1f.x = R126f.x;
PV1f.y = PV0f.w;
PV1f.y *= 2.0;
PV1f.z = PV0f.x;
PV1f.z *= 2.0;
R123f.w = (mul_nonIEEE(PV0f.w,-(PV0f.y)) + PV0f.w);
PV1f.w = R123f.w;
R126f.y = (-(PV0f.y) * 2.0 + 1.0);
PS1f = R126f.y;
// 2
R1f.x = PV1f.z + intBitsToFloat(uf_remappedVS[1].x);
R1f.y = PV1f.y + intBitsToFloat(uf_remappedVS[1].y);
R126f.z = (-(R127f.y) * intBitsToFloat(0x40400000) + 1.0);
PV0f.z = R126f.z;
PV0f.w = PV1f.x + PV1f.w;
R127f.x = (mul_nonIEEE(R127f.w,PS1f) + PV1f.x);
PS0f = R127f.x;
// 3
R123f.x = (mul_nonIEEE(R127f.w,PV0f.z) + R126f.x);
PV1f.x = R123f.x;
R125f.y = (intBitsToFloat(uf_remappedVS[1].x) * 0.5 + 0.5);
PV1f.y = R125f.y;
R123f.z = (mul_nonIEEE(R125f.x,-(R127f.y)) + R125f.x);
PV1f.z = R123f.z;
R126f.w = (-(R127f.y) * 4.0 + 1.0);
PV1f.w = R126f.w;
R127f.z = PV0f.w;
PS1f = R127f.z;
// 4
backupReg0f = R127f.w;
PV0f.x = PV1f.x;
R127f.y = (mul_nonIEEE(R127f.w,PV1f.w) + R126f.x);
PV0f.z = R127f.x;
R127f.w = backupReg0f + R126f.x;
R2f.x = PV1f.y + PV1f.z;
PS0f = R2f.x;
// 5
backupReg0f = R126f.z;
R3f.x = (mul_nonIEEE(R125f.x,R126f.y) + R125f.y);
R126f.y = -(PV0f.z) + 1.0;
R126f.z = -(PV0f.x) + 1.0;
R125f.w = -(R127f.z) + 1.0;
PV1f.w = R125f.w;
R4f.x = (mul_nonIEEE(R125f.x,backupReg0f) + R125f.y);
PS1f = R4f.x;
// 6
backupReg0f = R125f.x;
backupReg0f = R125f.x;
R125f.x = R127f.y;
R0f.y = -(R127f.w) + 1.0;
R127f.z = (mul_nonIEEE(backupReg0f,R126f.w) + R125f.y);
R0f.w = PV1f.w;
R0f.x = backupReg0f + R125f.y;
PS0f = R0f.x;
// 7
R2f.y = R125f.w;
R0f.z = R2f.x;
R2f.w = R126f.y;
R2f.z = R3f.x;
PS1f = R2f.z;
// 8
R3f.yzw = vec3(R126f.y,R4f.x,R126f.z);
R4f.z = R127f.z;
PS0f = R4f.z;
// 9
R4f.y = R126f.z;
R4f.w = -(R125f.x) + 1.0;
// export
gl_Position = vec4(R1f.x, R1f.y, R1f.z, R1f.w);
// export
passParameterSem0 = vec4(R0f.x, R0f.y, R0f.z, R0f.w);
// export
passParameterSem1 = vec4(R2f.x, R2f.y, R2f.z, R2f.w);
// export
passParameterSem2 = vec4(R3f.x, R3f.y, R3f.z, R3f.w);
// export
passParameterSem3 = vec4(R4f.x, R4f.y, R4f.z, R4f.w);
// 0
}
