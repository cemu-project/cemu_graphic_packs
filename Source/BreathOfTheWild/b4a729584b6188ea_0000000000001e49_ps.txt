<?php
include 'Source/functions.php';
$fullWidth = $argv[1];
$fullHeight = $argv[2];
$scaleFactorX = always_decimal_format($fullWidth / 1280.0);
$scaleFactorY = always_decimal_format($fullHeight / 720.0);
?>
#version 420
#extension GL_ARB_texture_gather : enable
// shader b4a729584b6188ea
// AA restore for distant trees
// shader dumped from BotW v1.4.0, using Cemu 1.11.1
const float resXScale = <?=$scaleFactorX?>;
const float resYScale = <?=$scaleFactorY?>;

uniform ivec4 uf_remappedPS[3];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0xf46ad000 res 640x360x1 dim 1 tm: 4 format 0820 compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0xf4e91800 res 1280x720x1 dim 1 tm: 4 format 0806 compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 2) uniform sampler2D textureUnitPS2;// Tex2 addr 0xf5054000 res 640x360x1 dim 1 tm: 4 format 080e compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 2 2 2 border: 1
layout(location = 0) in vec4 passParameterSem0;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R2f.w = (texture(textureUnitPS1, R0f.xy).x);
R1f.xyzw = (textureGather(textureUnitPS2, R0f.xy).xyzw);
// 0
PV0f.x = -(R2f.w) + R1f.y;
PV0f.y = -(R2f.w) + R1f.x;
PV0f.z = -(R2f.w) + R1f.w;
PV0f.w = -(R2f.w) + R1f.z;
PS0f = R2f.w + intBitsToFloat(uf_remappedPS[0].x);
// 1
PV1f.x = max(PV0f.x, -(PV0f.x));
PV1f.y = max(PV0f.y, -(PV0f.y));
PV1f.z = max(PV0f.z, -(PV0f.z));
PV1f.w = max(PV0f.w, -(PV0f.w));
PS1f = 1.0 / PS0f;
// 2
PV0f.x = PV1f.y + -(PV1f.w);
PV0f.y = -(PV1f.x) + PV1f.z;
R127f.z = intBitsToFloat(uf_remappedPS[1].w) * PS1f;
R127f.w = fract(R0f.z);
R127f.y = fract(R0f.w);
PS0f = R127f.y;
// 3
PV1f.z = PV0f.y + -(PV0f.x);
PV1f.w = PV0f.y + PV0f.x;
// 4
R123f.x = (mul_nonIEEE(R127f.z,PV1f.z) + R127f.y);
R123f.x = clamp(R123f.x, 0.0, 1.0);
PV0f.x = R123f.x;
R123f.y = (mul_nonIEEE(R127f.z,PV1f.w) + R127f.w);
R123f.y = clamp(R123f.y, 0.0, 1.0);
PV0f.y = R123f.y;
// 5
PV1f.z = -(R127f.y) + PV0f.x;
PV1f.w = -(R127f.w) + PV0f.y;
// 6
backupReg0f = R0f.x;
backupReg1f = R0f.y;
R0f.x = (mul_nonIEEE(PV1f.w,intBitsToFloat(uf_remappedPS[2].z) / resXScale) + backupReg0f);
R0f.y = (mul_nonIEEE(PV1f.z,intBitsToFloat(uf_remappedPS[2].w) / resYScale) + backupReg1f);
R0f.xyzw = (texture(textureUnitPS0, R0f.xy).xyzw);
// export
passPixelColor0 = vec4(R0f.x, R0f.y, R0f.z, R0f.w);
}
