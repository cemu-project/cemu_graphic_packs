#version 420
#extension GL_ARB_texture_gather : enable
// shader f14bb57cd5c9cb77
// AARestore - restores native aa in game 
// also includes code from Contrasty pack
// Credit to bestminr for vibrance logic
// original shader dumped using cemu 1.10.0f, BotW 1.3.1

#define ENABLE_CONTRASTY 0

/*Gamma, exposure, vibrance and crushContrast can be modified */
const float gamma = 0.81; // 1.0 is neutral  Botw is already colour graded at this stage
const float exposure = 1.17; // 1.0 is neutral
const float vibrance = 0.008;  // 0.0 is neutral  
const float crushContrast = 0.004; // 0.0 is neutral. Use small increments, loss of shadow detail 

//Uncomment below and in body  to  scale 16-235  not recommended */
/*
const float floor = 16.0 / 255;
const float scale = 255.0/(235.0-16.0);
*/

uniform ivec4 uf_remappedPS[4];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0xf4713800 res 1280x720x1 dim 1 tm: 4 format 0019 compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x387f8000 res 1280x720x1 dim 1 tm: 4 format 0001 compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 2 2 2 border: 1
layout(location = 0) in vec4 passParameterSem2;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;

ivec2 texSize = textureSize(textureUnitPS0, 0);
vec2 framebufferSize = vec2(float(texSize.x), float(texSize.y));
vec2 invFramebufferSize = vec2(1.0 / framebufferSize.x, 1.0 / framebufferSize.y);

int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
bool activeMaskStack[2];
bool activeMaskStackC[3];
activeMaskStack[0] = false;
activeMaskStackC[0] = false;
activeMaskStackC[1] = false;
activeMaskStack[0] = true;
activeMaskStackC[0] = true;
activeMaskStackC[1] = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem2;
if( activeMaskStackC[1] == true ) {
R1f.xyzw = (textureGather(textureUnitPS1, R0f.xy).wzxy);
R2f.xyzw = (texture(textureUnitPS0, R0f.xy).xyzw);
}
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
PV0f.x = R1f.w + -(R1f.x);
PV0f.y = R1f.z + -(R1f.y);
PV0f.z = mul_nonIEEE(R2f.x, intBitsToFloat(uf_remappedPS[0].x));
R127f.w = min(R1f.z, R1f.x);
R127f.x = min(R1f.w, R1f.y);
PS0f = R127f.x;
// 1
R123f.x = (mul_nonIEEE(R2f.y,intBitsToFloat(uf_remappedPS[0].y)) + PV0f.z);
PV1f.x = R123f.x;
PV1f.y = max(R1f.z, R1f.x);
R127f.z = PV0f.y + -(PV0f.x);
PV1f.z = R127f.z;
R126f.w = PV0f.y + PV0f.x;
PV1f.w = R126f.w;
PS1f = max(R1f.w, R1f.y);
// 2
PV0f.x = max(PV1f.z, -(PV1f.z));
PV0f.y = max(PV1f.w, -(PV1f.w));
R123f.z = (mul_nonIEEE(R2f.z,intBitsToFloat(uf_remappedPS[0].z)) + PV1f.x);
PV0f.z = R123f.z;
PV0f.w = min(R127f.w, R127f.x);
PS0f = max(PV1f.y, PS1f);
// 3
PV1f.x = mul_nonIEEE(PS0f, intBitsToFloat(uf_remappedPS[1].x));
PV1f.y = max(PV0f.z, PS0f);
PV1f.z = min(PV0f.z, PV0f.w);
PV1f.w = min(PV0f.y, PV0f.x);
// 4
R1f.x = -(PV1f.z) + PV1f.y;
R0f.z = max(PV1f.x, intBitsToFloat(uf_remappedPS[1].y));
PS0f = 1.0 / PV1f.w;
// 5
PV1f.x = mul_nonIEEE(R127f.z, PS0f);
PV1f.y = mul_nonIEEE(R126f.w, PS0f);
// 6
PV0f.z = max(PV1f.x, -(intBitsToFloat(uf_remappedPS[2].y)));
PV0f.w = max(PV1f.y, -(intBitsToFloat(uf_remappedPS[2].y)));
// 7
R3f.x = min(PV0f.w, intBitsToFloat(uf_remappedPS[2].y));
R1f.y = min(PV0f.z, intBitsToFloat(uf_remappedPS[2].y));
// 8
predResult = (R1f.x > R0f.z);
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
backupReg0f = R3f.x;
backupReg0f = R3f.x;
R3f.x = (mul_nonIEEE(backupReg0f,0.5*invFramebufferSize.x) + R0f.x);
R3f.y = (mul_nonIEEE(R1f.y,0.5*invFramebufferSize.y) + R0f.y);
R1f.x = (mul_nonIEEE(backupReg0f,-0.5*invFramebufferSize.x) + R0f.x);
PS0f = R1f.x;
// 1
backupReg0f = R1f.y;
R1f.y = (mul_nonIEEE(backupReg0f,-0.5*invFramebufferSize.y) + R0f.y);
}
if( activeMaskStackC[2] == true ) {
R0f.xyzw = (texture(textureUnitPS0, R3f.xy).xyzw);
R1f.xyzw = (texture(textureUnitPS0, R1f.xy).xyzw);
}
if( activeMaskStackC[2] == true ) {
// 0
R127f.x = R0f.w + R1f.w;
R127f.x /= 2.0;
PV0f.x = R127f.x;
R127f.y = R0f.z + R1f.z;
R127f.y /= 2.0;
PV0f.y = R127f.y;
R127f.z = R0f.y + R1f.y;
R127f.z /= 2.0;
PV0f.z = R127f.z;
R127f.w = R0f.x + R1f.x;
R127f.w /= 2.0;
PV0f.w = R127f.w;
// 1
PV1f.x = R2f.w + -(PV0f.x);
PV1f.y = R2f.z + -(PV0f.y);
PV1f.z = R2f.y + -(PV0f.z);
PV1f.w = R2f.x + -(PV0f.w);
// 2
R2f.x = (PV1f.w * intBitsToFloat(0x3eb33333) + R127f.w);
R2f.y = (PV1f.z * intBitsToFloat(0x3eb33333) + R127f.z);
R2f.z = (PV1f.y * intBitsToFloat(0x3eb33333) + R127f.y);
R2f.w = (PV1f.x * intBitsToFloat(0x3eb33333) + R127f.x);
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
// export
passPixelColor0 = vec4(R2f.x, R2f.y, R2f.z, R2f.w);

#if (ENABLE_CONTRASTY == 1)
	vec3 fColour = (passPixelColor0.xyz);
	fColour = max(vec3(0.0), fColour - vec3(crushContrast));
	fColour = clamp(exposure * fColour, 0.0, 1.0);
	fColour = pow(fColour, vec3(1.0 / gamma));
	float luminance = fColour.r*0.299 + fColour.g*0.587 + fColour.b*0.114;
	float mn = min(min(fColour.r, fColour.g), fColour.b);
	float mx = max(max(fColour.r, fColour.g), fColour.b);
	float sat = (1.0-(mx - mn)) * (1.0-mx) * luminance * 5.0;
	vec3 lightness = vec3((mn + mx)/2.0);
	// vibrance
	fColour = mix(fColour, mix(fColour, lightness, -vibrance), sat);
	//vec3 fColour = (fColour.xyz - floor) * scale;  // Not recommended 0-255->16-235..
	passPixelColor0 = vec4(fColour.x, fColour.y, fColour.z, 1.0);
#endif
}
