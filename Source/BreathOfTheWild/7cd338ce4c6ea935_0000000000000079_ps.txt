<?php
$width = $argv[1];
$height = $argv[2];

$aspect = $width / (float)$height;

if (round($aspect*100.0) == 178)
	exit(1);

?>
#version 420
#extension GL_ARB_texture_gather : enable
// shader 7cd338ce4c6ea935
uniform ivec4 uf_remappedPS[1];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0xac200800 res 1280x720x1 dim 1 tm: 4 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
layout(location = 0) in vec4 passParameterSem0;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R1f = passParameterSem0;
R1f.x = (R1f.x - 0.5)*1.3125+0.5;

if (R1f.x>0.0 && R1f.x<1.0) R0f.xyzw = (texture(textureUnitPS0, R1f.xy).xyzw);
// 0
backupReg0f = R0f.x;
tempResultf = log2(backupReg0f);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0f = tempResultf;
// 1
R127f.z = mul_nonIEEE(PS0f, intBitsToFloat(uf_remappedPS[0].x));
tempResultf = log2(R0f.y);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1f = tempResultf;
// 2
R127f.w = mul_nonIEEE(PS1f, intBitsToFloat(uf_remappedPS[0].x));
tempResultf = log2(R0f.z);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0f = tempResultf;
// 3
R127f.x = mul_nonIEEE(PS0f, intBitsToFloat(uf_remappedPS[0].x));
PS1f = exp2(R127f.z);
// 4
R0f.x = PS1f;
PS0f = exp2(R127f.w);
// 5
R0f.y = PS0f;
PS1f = exp2(R127f.x);
// 6
R0f.z = PS1f;
// export
passPixelColor0 = vec4(R0f.x, R0f.y, R0f.z, R0f.w);
}
