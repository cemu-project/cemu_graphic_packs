<?php
include 'Source/functions.php';
$fullWidth = $argv[1];
$fullHeight = $argv[2];
$scaleFactorX = always_decimal_format($fullWidth / 1280.0);
$scaleFactorY = always_decimal_format($fullHeight / 720.0);
?>
#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 73ac09c3fff4b657
//cut scene vert blur //redundant?
const float resScale = <?=$scaleFactorX?>;
uniform ivec4 uf_remappedPS[2];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x462fa000 res 320x180x1 dim 1 tm: 4 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 0
layout(location = 0) in vec4 passParameterSem133;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R8f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem133;
R4f.xyzw = (texture(textureUnitPS0, R0f.xy).xyzw);
// 0
backupReg0f = R0f.y;
R8f.x = mul_nonIEEE(R4f.w, intBitsToFloat(uf_remappedPS[0].x)/ resScale);
PV0f.x = R8f.x;
PV0f.y = max(R0f.x, 0.0);
PV0f.z = backupReg0f + 0.0;
PV0f.z = clamp(PV0f.z, 0.0, 1.0);
PV0f.w = max(R4f.w, intBitsToFloat(0x3a83126f));
R127f.w = max(R0f.x, 0.0);
PS0f = R127f.w;
// 1
backupReg0f = R0f.x;
PV1f.x = max(PV0f.z, 0.0);
PV1f.y = max(backupReg0f, 0.0);
R1f.z = min(PV0f.y, 1.0);
R8f.w = mul_nonIEEE(PV0f.x, intBitsToFloat(uf_remappedPS[1].y)/ resScale);
PV1f.w = R8f.w;
R8f.z = 1.0 / PV0f.w;
PS1f = R8f.z;
// 2
PV0f.x = R0f.y + PV1f.w;
PV0f.x = clamp(PV0f.x, 0.0, 1.0);
R1f.y = min(PV1f.x, 1.0);
R2f.z = min(R127f.w, 1.0);
R123f.w = (PV1f.w * 2.0 + R0f.y);
R123f.w = clamp(R123f.w, 0.0, 1.0);
PV0f.w = R123f.w;
R3f.x = min(PV1f.y, 1.0);
PS0f = R3f.x;
// 3
backupReg0f = R0f.x;
PV1f.x = max(PV0f.w, 0.0);
R123f.y = (R8f.w * intBitsToFloat(0x40400000)/ + R0f.y);
R123f.y = clamp(R123f.y, 0.0, 1.0);
PV1f.y = R123f.y;
PV1f.z = max(PV0f.x, 0.0);
PV1f.w = max(backupReg0f, 0.0);
R127f.x = (R8f.w * 4.0 + R0f.y);
R127f.x = clamp(R127f.x, 0.0, 1.0);
PS1f = R127f.x;
// 4
backupReg0f = R0f.x;
PV0f.x = max(PV1f.y, 0.0);
R2f.y = min(PV1f.z, 1.0);
R3f.z = min(PV1f.x, 1.0);
R3f.w = min(PV1f.w, 1.0);
PS0f = max(backupReg0f, 0.0);
// 5
R6f.x = min(PS0f, 1.0);
R3f.y = min(PV0f.x, 1.0);
R0f.z = max(R127f.x, 0.0);
R0f.w = (R8f.w * intBitsToFloat(0x40a00000) + R0f.y);
R0f.w = clamp(R0f.w, 0.0, 1.0);
R6f.w = max(R0f.x, 0.0);
PS1f = R6f.w;
R1f.xyzw = (texture(textureUnitPS0, R1f.zy).xyzw);
R2f.xyzw = (texture(textureUnitPS0, R2f.zy).xyzw);
R5f.xyzw = (texture(textureUnitPS0, R3f.xz).xyzw);
R3f.xyzw = (texture(textureUnitPS0, R3f.wy).xyzw);
// 0
R127f.x = R8f.z * R5f.w;
R127f.x = clamp(R127f.x, 0.0, 1.0);
PV0f.y = R1f.w * R8f.z;
PV0f.y = clamp(PV0f.y, 0.0, 1.0);
R127f.w = R8f.z * R2f.w;
R127f.w = clamp(R127f.w, 0.0, 1.0);
R6f.y = min(R0f.z, 1.0);
PS0f = R6f.y;
// 1
R123f.x = (mul_nonIEEE(R1f.x,PV0f.y) + R4f.x);
PV1f.x = R123f.x;
PV1f.y = PV0f.y + 1.0;
R123f.z = (mul_nonIEEE(R1f.z,PV0f.y) + R4f.z);
PV1f.z = R123f.z;
R123f.w = (mul_nonIEEE(R1f.y,PV0f.y) + R4f.y);
PV1f.w = R123f.w;
R127f.y = R8f.z * R3f.w;
R127f.y = clamp(R127f.y, 0.0, 1.0);
PS1f = R127f.y;
// 2
backupReg0f = R0f.w;
R123f.x = (mul_nonIEEE(R2f.z,R127f.w) + PV1f.z);
PV0f.x = R123f.x;
R123f.y = (mul_nonIEEE(R2f.y,R127f.w) + PV1f.w);
PV0f.y = R123f.y;
R123f.z = (mul_nonIEEE(R2f.x,R127f.w) + PV1f.x);
PV0f.z = R123f.z;
PV0f.w = PV1f.y + R127f.w;
R127f.z = max(backupReg0f, 0.0);
PS0f = R127f.z;
// 3
R123f.x = (mul_nonIEEE(R5f.z,R127f.x) + PV0f.x);
PV1f.x = R123f.x;
R123f.y = (mul_nonIEEE(R5f.y,R127f.x) + PV0f.y);
PV1f.y = R123f.y;
R123f.z = (mul_nonIEEE(R5f.x,R127f.x) + PV0f.z);
PV1f.z = R123f.z;
PV1f.w = PV0f.w + R127f.x;
R5f.x = min(R6f.w, 1.0);
PS1f = R5f.x;
// 4
R2f.x = (mul_nonIEEE(R3f.x,R127f.y) + PV1f.z);
R2f.y = PV1f.w + R127f.y;
R2f.z = (mul_nonIEEE(R3f.z,R127f.y) + PV1f.x);
R3f.w = (mul_nonIEEE(R3f.y,R127f.y) + PV1f.y);
R5f.y = min(R127f.z, 1.0);
PS0f = R5f.y;
// 5
backupReg0f = R0f.y;
backupReg0f = R0f.y;
R123f.x = (R8f.w * intBitsToFloat(0x40e00000) + R0f.y);
R123f.x = clamp(R123f.x, 0.0, 1.0);
PV1f.x = R123f.x;
PV1f.y = max(R0f.x, 0.0);
R123f.z = (R8f.w * intBitsToFloat(0x40c00000) + backupReg0f);
R123f.z = clamp(R123f.z, 0.0, 1.0);
PV1f.z = R123f.z;
PV1f.w = max(R0f.x, 0.0);
R127f.x = (R8f.w * intBitsToFloat(0x41000000) + backupReg0f);
R127f.x = clamp(R127f.x, 0.0, 1.0);
PS1f = R127f.x;
// 6
backupReg0f = R0f.x;
PV0f.x = max(PV1f.z, 0.0);
PV0f.y = max(PV1f.x, 0.0);
R3f.z = min(PV1f.y, 1.0);
R5f.w = min(PV1f.w, 1.0);
PS0f = max(backupReg0f, 0.0);
// 7
R3f.x = max(R127f.x, 0.0);
R3f.y = min(PV0f.x, 1.0);
R5f.z = min(PV0f.y, 1.0);
R0f.w = min(PS0f, 1.0);
R4f.x = (R8f.w * intBitsToFloat(0x41100000) + R0f.y);
R4f.x = clamp(R4f.x, 0.0, 1.0);
PS1f = R4f.x;
R6f.xyzw = (texture(textureUnitPS0, R6f.xy).xyzw);
R1f.xyzw = (texture(textureUnitPS0, R5f.xy).xyzw);
R7f.xyzw = (texture(textureUnitPS0, R3f.zy).xyzw);
R5f.xyzw = (texture(textureUnitPS0, R5f.wz).xyzw);
// 0
R127f.x = R8f.z * R7f.w;
R127f.x = clamp(R127f.x, 0.0, 1.0);
PV0f.y = R8f.z * R6f.w;
PV0f.y = clamp(PV0f.y, 0.0, 1.0);
R0f.z = min(R3f.x, 1.0);
R127f.w = R8f.z * R1f.w;
R127f.w = clamp(R127f.w, 0.0, 1.0);
R126f.w = max(R0f.x, 0.0);
PS0f = R126f.w;
// 1
R123f.x = (mul_nonIEEE(R6f.x,PV0f.y) + R2f.x);
PV1f.x = R123f.x;
PV1f.y = R2f.y + PV0f.y;
R123f.z = (mul_nonIEEE(R6f.z,PV0f.y) + R2f.z);
PV1f.z = R123f.z;
R123f.w = (mul_nonIEEE(R6f.y,PV0f.y) + R3f.w);
PV1f.w = R123f.w;
R127f.y = R8f.z * R5f.w;
R127f.y = clamp(R127f.y, 0.0, 1.0);
PS1f = R127f.y;
// 2
R123f.x = (mul_nonIEEE(R1f.z,R127f.w) + PV1f.z);
PV0f.x = R123f.x;
R123f.y = (mul_nonIEEE(R1f.y,R127f.w) + PV1f.w);
PV0f.y = R123f.y;
R123f.z = (mul_nonIEEE(R1f.x,R127f.w) + PV1f.x);
PV0f.z = R123f.z;
PV0f.w = PV1f.y + R127f.w;
R127f.z = max(R4f.x, 0.0);
PS0f = R127f.z;
// 3
R123f.x = (mul_nonIEEE(R7f.z,R127f.x) + PV0f.x);
PV1f.x = R123f.x;
R123f.y = (mul_nonIEEE(R7f.y,R127f.x) + PV0f.y);
PV1f.y = R123f.y;
R123f.z = (mul_nonIEEE(R7f.x,R127f.x) + PV0f.z);
PV1f.z = R123f.z;
PV1f.w = PV0f.w + R127f.x;
R7f.x = min(R126f.w, 1.0);
PS1f = R7f.x;
// 4
R1f.x = (mul_nonIEEE(R5f.x,R127f.y) + PV1f.z);
R1f.y = PV1f.w + R127f.y;
R1f.z = (mul_nonIEEE(R5f.z,R127f.y) + PV1f.x);
R5f.w = (mul_nonIEEE(R5f.y,R127f.y) + PV1f.y);
R7f.y = min(R127f.z, 1.0);
PS0f = R7f.y;
// 5
backupReg0f = R0f.y;
backupReg0f = R0f.y;
R123f.x = (R8f.w * intBitsToFloat(0x41300000) + R0f.y);
R123f.x = clamp(R123f.x, 0.0, 1.0);
PV1f.x = R123f.x;
PV1f.y = max(R0f.x, 0.0);
R123f.z = (R8f.w * intBitsToFloat(0x41200000) + backupReg0f);
R123f.z = clamp(R123f.z, 0.0, 1.0);
PV1f.z = R123f.z;
PV1f.w = max(R0f.x, 0.0);
R127f.x = (R8f.w * intBitsToFloat(0x41400000) + backupReg0f);
R127f.x = clamp(R127f.x, 0.0, 1.0);
PS1f = R127f.x;
// 6
backupReg0f = R0f.x;
PV0f.x = max(PV1f.z, 0.0);
PV0f.y = max(PV1f.x, 0.0);
R5f.z = min(PV1f.y, 1.0);
R7f.w = min(PV1f.w, 1.0);
PS0f = max(backupReg0f, 0.0);
// 7
R5f.x = max(R127f.x, 0.0);
R5f.y = min(PV0f.x, 1.0);
R7f.z = min(PV0f.y, 1.0);
R6f.w = min(PS0f, 1.0);
R6f.x = (R8f.w * intBitsToFloat(0x41500000) + R0f.y);
R6f.x = clamp(R6f.x, 0.0, 1.0);
PS1f = R6f.x;
R4f.xyzw = (texture(textureUnitPS0, R0f.wz).xyzw);
R2f.xyzw = (texture(textureUnitPS0, R7f.xy).xyzw);
R3f.xyzw = (texture(textureUnitPS0, R5f.zy).xyzw);
R7f.xyzw = (texture(textureUnitPS0, R7f.wz).xyzw);
// 0
R127f.x = R8f.z * R3f.w;
R127f.x = clamp(R127f.x, 0.0, 1.0);
PV0f.y = R8f.z * R4f.w;
PV0f.y = clamp(PV0f.y, 0.0, 1.0);
R6f.z = min(R5f.x, 1.0);
R126f.w = R8f.z * R2f.w;
R126f.w = clamp(R126f.w, 0.0, 1.0);
R127f.w = max(R0f.x, 0.0);
PS0f = R127f.w;
// 1
R123f.x = (mul_nonIEEE(R4f.x,PV0f.y) + R1f.x);
PV1f.x = R123f.x;
PV1f.y = R1f.y + PV0f.y;
R123f.z = (mul_nonIEEE(R4f.z,PV0f.y) + R1f.z);
PV1f.z = R123f.z;
R123f.w = (mul_nonIEEE(R4f.y,PV0f.y) + R5f.w);
PV1f.w = R123f.w;
R127f.y = R8f.z * R7f.w;
R127f.y = clamp(R127f.y, 0.0, 1.0);
PS1f = R127f.y;
// 2
R123f.x = (mul_nonIEEE(R2f.z,R126f.w) + PV1f.z);
PV0f.x = R123f.x;
R123f.y = (mul_nonIEEE(R2f.y,R126f.w) + PV1f.w);
PV0f.y = R123f.y;
R123f.z = (mul_nonIEEE(R2f.x,R126f.w) + PV1f.x);
PV0f.z = R123f.z;
PV0f.w = PV1f.y + R126f.w;
R127f.z = max(R6f.x, 0.0);
PS0f = R127f.z;
// 3
R123f.x = (mul_nonIEEE(R3f.z,R127f.x) + PV0f.x);
PV1f.x = R123f.x;
R123f.y = (mul_nonIEEE(R3f.y,R127f.x) + PV0f.y);
PV1f.y = R123f.y;
R123f.z = (mul_nonIEEE(R3f.x,R127f.x) + PV0f.z);
PV1f.z = R123f.z;
PV1f.w = PV0f.w + R127f.x;
R3f.x = min(R127f.w, 1.0);
PS1f = R3f.x;
// 4
R2f.x = (mul_nonIEEE(R7f.x,R127f.y) + PV1f.z);
R2f.y = PV1f.w + R127f.y;
R2f.z = (mul_nonIEEE(R7f.z,R127f.y) + PV1f.x);
R7f.w = (mul_nonIEEE(R7f.y,R127f.y) + PV1f.y);
R3f.y = min(R127f.z, 1.0);
PS0f = R3f.y;
// 5
backupReg0f = R0f.y;
backupReg0f = R0f.y;
R123f.x = (R8f.w * intBitsToFloat(0x41700000) + R0f.y);
R123f.x = clamp(R123f.x, 0.0, 1.0);
PV1f.x = R123f.x;
PV1f.y = max(R0f.x, 0.0);
R123f.z = (R8f.w * intBitsToFloat(0x41600000) + backupReg0f);
R123f.z = clamp(R123f.z, 0.0, 1.0);
PV1f.z = R123f.z;
PV1f.w = max(R0f.x, 0.0);
R127f.x = (R8f.w * intBitsToFloat(0x41800000) + backupReg0f);
R127f.x = clamp(R127f.x, 0.0, 1.0);
PS1f = R127f.x;
// 6
backupReg0f = R0f.x;
PV0f.x = max(PV1f.z, 0.0);
PV0f.y = max(PV1f.x, 0.0);
R7f.z = min(PV1f.y, 1.0);
R3f.w = min(PV1f.w, 1.0);
PS0f = max(backupReg0f, 0.0);
// 7
R7f.x = max(R127f.x, 0.0);
R7f.y = min(PV0f.x, 1.0);
R3f.z = min(PV0f.y, 1.0);
R4f.w = min(PS0f, 1.0);
R4f.x = (R8f.w * intBitsToFloat(0x41880000) + R0f.y);
R4f.x = clamp(R4f.x, 0.0, 1.0);
PS1f = R4f.x;
R6f.xyzw = (texture(textureUnitPS0, R6f.wz).xyzw);
R1f.xyzw = (texture(textureUnitPS0, R3f.xy).xyzw);
R5f.xyzw = (texture(textureUnitPS0, R7f.zy).xyzw);
R3f.xyzw = (texture(textureUnitPS0, R3f.wz).xyzw);
// 0
R127f.x = R8f.z * R5f.w;
R127f.x = clamp(R127f.x, 0.0, 1.0);
PV0f.y = R8f.z * R6f.w;
PV0f.y = clamp(PV0f.y, 0.0, 1.0);
R4f.z = min(R7f.x, 1.0);
R127f.w = R8f.z * R1f.w;
R127f.w = clamp(R127f.w, 0.0, 1.0);
R126f.w = max(R0f.x, 0.0);
PS0f = R126f.w;
// 1
R123f.x = (mul_nonIEEE(R6f.x,PV0f.y) + R2f.x);
PV1f.x = R123f.x;
PV1f.y = R2f.y + PV0f.y;
R123f.z = (mul_nonIEEE(R6f.z,PV0f.y) + R2f.z);
PV1f.z = R123f.z;
R123f.w = (mul_nonIEEE(R6f.y,PV0f.y) + R7f.w);
PV1f.w = R123f.w;
R127f.y = R8f.z * R3f.w;
R127f.y = clamp(R127f.y, 0.0, 1.0);
PS1f = R127f.y;
// 2
R123f.x = (mul_nonIEEE(R1f.z,R127f.w) + PV1f.z);
PV0f.x = R123f.x;
R123f.y = (mul_nonIEEE(R1f.y,R127f.w) + PV1f.w);
PV0f.y = R123f.y;
R123f.z = (mul_nonIEEE(R1f.x,R127f.w) + PV1f.x);
PV0f.z = R123f.z;
PV0f.w = PV1f.y + R127f.w;
R127f.z = max(R4f.x, 0.0);
PS0f = R127f.z;
// 3
R123f.x = (mul_nonIEEE(R5f.z,R127f.x) + PV0f.x);
PV1f.x = R123f.x;
R123f.y = (mul_nonIEEE(R5f.y,R127f.x) + PV0f.y);
PV1f.y = R123f.y;
R123f.z = (mul_nonIEEE(R5f.x,R127f.x) + PV0f.z);
PV1f.z = R123f.z;
PV1f.w = PV0f.w + R127f.x;
R5f.x = min(R126f.w, 1.0);
PS1f = R5f.x;
// 4
R1f.x = (mul_nonIEEE(R3f.x,R127f.y) + PV1f.z);
R1f.y = PV1f.w + R127f.y;
R1f.z = (mul_nonIEEE(R3f.z,R127f.y) + PV1f.x);
R3f.w = (mul_nonIEEE(R3f.y,R127f.y) + PV1f.y);
R5f.y = min(R127f.z, 1.0);
PS0f = R5f.y;
// 5
backupReg0f = R0f.y;
backupReg0f = R0f.y;
R123f.x = (R8f.w * intBitsToFloat(0x41980000) + R0f.y);
R123f.x = clamp(R123f.x, 0.0, 1.0);
PV1f.x = R123f.x;
PV1f.y = max(R0f.x, 0.0);
R123f.z = (R8f.w * intBitsToFloat(0x41900000) + backupReg0f);
R123f.z = clamp(R123f.z, 0.0, 1.0);
PV1f.z = R123f.z;
PV1f.w = max(R0f.x, 0.0);
R127f.x = (R8f.w * intBitsToFloat(0x41a00000) + backupReg0f);
R127f.x = clamp(R127f.x, 0.0, 1.0);
PS1f = R127f.x;
// 6
backupReg0f = R0f.x;
PV0f.x = max(PV1f.z, 0.0);
PV0f.y = max(PV1f.x, 0.0);
R3f.z = min(PV1f.y, 1.0);
R5f.w = min(PV1f.w, 1.0);
PS0f = max(backupReg0f, 0.0);
// 7
R3f.x = max(R127f.x, 0.0);
R3f.y = min(PV0f.x, 1.0);
R5f.z = min(PV0f.y, 1.0);
R6f.w = min(PS0f, 1.0);
R6f.x = (R8f.w * intBitsToFloat(0x41a80000) + R0f.y);
R6f.x = clamp(R6f.x, 0.0, 1.0);
PS1f = R6f.x;
R4f.xyzw = (texture(textureUnitPS0, R4f.wz).xyzw);
R2f.xyzw = (texture(textureUnitPS0, R5f.xy).xyzw);
R7f.xyzw = (texture(textureUnitPS0, R3f.zy).xyzw);
R5f.xyzw = (texture(textureUnitPS0, R5f.wz).xyzw);
// 0
R127f.x = R8f.z * R7f.w;
R127f.x = clamp(R127f.x, 0.0, 1.0);
PV0f.y = R8f.z * R4f.w;
PV0f.y = clamp(PV0f.y, 0.0, 1.0);
R6f.z = min(R3f.x, 1.0);
R126f.w = R8f.z * R2f.w;
R126f.w = clamp(R126f.w, 0.0, 1.0);
R127f.w = max(R0f.x, 0.0);
PS0f = R127f.w;
// 1
R123f.x = (mul_nonIEEE(R4f.x,PV0f.y) + R1f.x);
PV1f.x = R123f.x;
PV1f.y = R1f.y + PV0f.y;
R123f.z = (mul_nonIEEE(R4f.z,PV0f.y) + R1f.z);
PV1f.z = R123f.z;
R123f.w = (mul_nonIEEE(R4f.y,PV0f.y) + R3f.w);
PV1f.w = R123f.w;
R127f.y = R8f.z * R5f.w;
R127f.y = clamp(R127f.y, 0.0, 1.0);
PS1f = R127f.y;
// 2
R123f.x = (mul_nonIEEE(R2f.z,R126f.w) + PV1f.z);
PV0f.x = R123f.x;
R123f.y = (mul_nonIEEE(R2f.y,R126f.w) + PV1f.w);
PV0f.y = R123f.y;
R123f.z = (mul_nonIEEE(R2f.x,R126f.w) + PV1f.x);
PV0f.z = R123f.z;
PV0f.w = PV1f.y + R126f.w;
R127f.z = max(R6f.x, 0.0);
PS0f = R127f.z;
// 3
R123f.x = (mul_nonIEEE(R7f.z,R127f.x) + PV0f.x);
PV1f.x = R123f.x;
R123f.y = (mul_nonIEEE(R7f.y,R127f.x) + PV0f.y);
PV1f.y = R123f.y;
R123f.z = (mul_nonIEEE(R7f.x,R127f.x) + PV0f.z);
PV1f.z = R123f.z;
PV1f.w = PV0f.w + R127f.x;
R7f.x = min(R127f.w, 1.0);
PS1f = R7f.x;
// 4
backupReg0f = R5f.x;
backupReg1f = R5f.z;
backupReg2f = R5f.y;
R5f.x = (mul_nonIEEE(backupReg0f,R127f.y) + PV1f.z);
R5f.y = PV1f.w + R127f.y;
R5f.z = (mul_nonIEEE(backupReg1f,R127f.y) + PV1f.x);
R5f.w = (mul_nonIEEE(backupReg2f,R127f.y) + PV1f.y);
R7f.y = min(R127f.z, 1.0);
PS0f = R7f.y;
// 5
backupReg0f = R0f.y;
R123f.x = (R8f.w * intBitsToFloat(0x41b80000) + R0f.y);
R123f.x = clamp(R123f.x, 0.0, 1.0);
PV1f.x = R123f.x;
PV1f.y = max(R0f.x, 0.0);
R123f.z = (R8f.w * intBitsToFloat(0x41b00000) + backupReg0f);
R123f.z = clamp(R123f.z, 0.0, 1.0);
PV1f.z = R123f.z;
PV1f.w = max(R0f.x, 0.0);
R1f.w = R8f.x;
R1f.w *= 2.0;
PS1f = R1f.w;
// 6
PV0f.x = max(PV1f.z, 0.0);
PV0f.y = max(PV1f.x, 0.0);
R0f.z = min(PV1f.y, 1.0);
R0f.w = min(PV1f.w, 1.0);
// 7
R0f.x = min(PV0f.y, 1.0);
R0f.y = min(PV0f.x, 1.0);
R6f.xyzw = (texture(textureUnitPS0, R6f.wz).xyzw);
R7f.xyzw = (texture(textureUnitPS0, R7f.xy).xyzw);
R2f.xyzw = (texture(textureUnitPS0, R0f.zy).xyzw);
R0f.xyzw = (texture(textureUnitPS0, R0f.wx).xyzw);
// 0
R127f.x = R8f.z * R2f.w;
R127f.x = clamp(R127f.x, 0.0, 1.0);
PV0f.y = R8f.z * R6f.w;
PV0f.y = clamp(PV0f.y, 0.0, 1.0);
R127f.w = R8f.z * R7f.w;
R127f.w = clamp(R127f.w, 0.0, 1.0);
// 1
R123f.x = (mul_nonIEEE(R6f.x,PV0f.y) + R5f.x);
PV1f.x = R123f.x;
PV1f.y = R5f.y + PV0f.y;
R123f.z = (mul_nonIEEE(R6f.z,PV0f.y) + R5f.z);
PV1f.z = R123f.z;
R123f.w = (mul_nonIEEE(R6f.y,PV0f.y) + R5f.w);
PV1f.w = R123f.w;
R127f.y = R8f.z * R0f.w;
R127f.y = clamp(R127f.y, 0.0, 1.0);
PS1f = R127f.y;
// 2
R123f.x = (mul_nonIEEE(R7f.z,R127f.w) + PV1f.z);
PV0f.x = R123f.x;
R123f.y = (mul_nonIEEE(R7f.y,R127f.w) + PV1f.w);
PV0f.y = R123f.y;
R123f.z = (mul_nonIEEE(R7f.x,R127f.w) + PV1f.x);
PV0f.z = R123f.z;
PV0f.w = PV1f.y + R127f.w;
// 3
R123f.x = (mul_nonIEEE(R2f.z,R127f.x) + PV0f.x);
PV1f.x = R123f.x;
R123f.y = (mul_nonIEEE(R2f.y,R127f.x) + PV0f.y);
PV1f.y = R123f.y;
R123f.z = (mul_nonIEEE(R2f.x,R127f.x) + PV0f.z);
PV1f.z = R123f.z;
PV1f.w = PV0f.w + R127f.x;
// 4
backupReg0f = R0f.y;
R127f.x = (mul_nonIEEE(R0f.x,R127f.y) + PV1f.z);
PV0f.y = PV1f.w + R127f.y;
R127f.z = (mul_nonIEEE(R0f.z,R127f.y) + PV1f.x);
R127f.w = (mul_nonIEEE(backupReg0f,R127f.y) + PV1f.y);
// 5
PS1f = 1.0 / PV0f.y;
// 6
R1f.x = R127f.x * PS1f;
R1f.y = R127f.w * PS1f;
R1f.z = R127f.z * PS1f;
// export
passPixelColor0 = vec4(R1f.x, R1f.y, R1f.z, R1f.w);
}
