<?php
include 'Source/functions.php';
$fullWidth = $argv[1];
$fullHeight = $argv[2];
$scaleFactorX = always_decimal_format($fullWidth / 1280.0);
$scaleFactorY = always_decimal_format($fullHeight / 720.0);
?>

#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 37a4ec1a7dbc7391
// AA fix
const float resScale = <?=$scaleFactorX?>;
uniform ivec4 uf_remappedPS[4];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0xf45c6000 res 1280x720x1 dim 1 tm: 4 format 0019 compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x1d7ae000 res 1280x720x1 dim 1 tm: 4 format 0001 compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 2 2 2 border: 1
layout(location = 0) in vec4 passParameterSem2;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
bool activeMaskStack[2];
bool activeMaskStackC[3];
activeMaskStack[0] = false;
activeMaskStackC[0] = false;
activeMaskStackC[1] = false;
activeMaskStack[0] = true;
activeMaskStackC[0] = true;
activeMaskStackC[1] = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem2;
if( activeMaskStackC[1] == true ) {
R2f.xyzw = (texture(textureUnitPS0, R0f.xy).xyzw);
R4f.xyzw = (textureGather(textureUnitPS1, R0f.xy).wzxy);
}
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
PV0f.x = max(R4f.z, R4f.x);
PV0f.y = min(R4f.w, R4f.y);
PV0f.z = R2f.x * intBitsToFloat(uf_remappedPS[0].x);
PV0f.w = min(R4f.z, R4f.x);
PS0f = max(R4f.w, R4f.y);
// 1
R123f.x = (mul_nonIEEE(R2f.y,intBitsToFloat(uf_remappedPS[0].y)) + PV0f.z);
PV1f.x = R123f.x;
PV1f.y = max(PV0f.x, PS0f);
R127f.z = R4f.z + -(R4f.y);
PV1f.z = R127f.z;
PV1f.w = min(PV0f.w, PV0f.y);
R126f.z = R4f.w + -(R4f.x);
PS1f = R126f.z;
// 2
PV0f.x = max(PV1f.x, PV1f.y);
PV0f.y = PV1f.y * intBitsToFloat(uf_remappedPS[1].x);
PV0f.z = min(PV1f.x, PV1f.w);
R3f.x = PV1f.z + PS1f;
PS0f = R3f.x;
// 3
R1f.x = max(PV0f.y, intBitsToFloat(uf_remappedPS[1].y));
R3f.y = R127f.z + -(R126f.z);
R0f.w = -(PV0f.z) + PV0f.x;
// 4
predResult = (R0f.w > R1f.x);
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
R1f.x = R4f.y + R4f.x;
PV0f.x = R1f.x;
R1f.y = intBitsToFloat(uf_remappedPS[2].z) * 0.25;
R0f.w = max(R3f.x, -(R3f.x));
PV0f.w = R0f.w;
R4f.x = max(R3f.y, -(R3f.y));
PS0f = R4f.x;
// 1
R1f.x = min(PV0f.w, PS0f);
R4f.y = -(intBitsToFloat(uf_remappedPS[3].y)/ resScale);
R0f.z = intBitsToFloat(uf_remappedPS[3].x);
R0f.w = R4f.z + PV0f.x;
PV1f.w = R0f.w;
R4f.x = -(intBitsToFloat(uf_remappedPS[3].x)/ resScale);
PS1f = R4f.x;
// 2
R1f.z = R4f.w + PV1f.w;
PV0f.z = R1f.z;
R0f.w = intBitsToFloat(uf_remappedPS[3].y);
// 3
backupReg0f = R1f.y;
R1f.y = (mul_nonIEEE(backupReg0f,PV0f.z) + intBitsToFloat(uf_remappedPS[2].w)/ resScale);
PV1f.y = R1f.y;
// 4
backupReg0f = R1f.x;
R1f.x = max(PV1f.y, backupReg0f);
PV0f.x = R1f.x;
// 5
R1f.w = 1.0 / PV0f.x;
PS1f = R1f.w;
// 6
R1f.x = R3f.x * PS1f;
PV0f.x = R1f.x;
R1f.y = R3f.y * PS1f;
PV0f.y = R1f.y;
// 7
R1f.x = max(PV0f.x, -(intBitsToFloat(uf_remappedPS[2].y)/resScale));
PV1f.x = R1f.x;
R1f.y = max(PV0f.y, -(intBitsToFloat(uf_remappedPS[2].y)/ resScale));
PV1f.y = R1f.y;
// 8
R1f.x = min(PV1f.x, intBitsToFloat(uf_remappedPS[2].y));
PV0f.x = R1f.x;
R1f.y = min(PV1f.y, intBitsToFloat(uf_remappedPS[2].y));
PV0f.y = R1f.y;
// 9
backupReg0f = R0f.x;
backupReg1f = R0f.y;
backupReg2f = R0f.z;
backupReg0f = R0f.x;
backupReg3f = R0f.w;
backupReg1f = R0f.y;
R0f.x = (mul_nonIEEE(PV0f.x,R4f.x) + backupReg0f);
R0f.y = (mul_nonIEEE(PV0f.y,R4f.y) + backupReg1f);
R0f.z = (mul_nonIEEE(PV0f.x,backupReg2f) + backupReg0f);
R0f.w = (mul_nonIEEE(PV0f.y,backupReg3f) + backupReg1f);
}
if( activeMaskStackC[2] == true ) {
R1f.xyzw = (texture(textureUnitPS0, R0f.zw).xyzw);
R0f.xyzw = (texture(textureUnitPS0, R0f.xy).xyzw);
}
if( activeMaskStackC[2] == true ) {
// 0
backupReg0f = R0f.y;
backupReg1f = R0f.x;
PV0f.x = R0f.w + R1f.w;
PV0f.x /= 2.0;
PV0f.y = R0f.z + R1f.z;
PV0f.y /= 2.0;
PV0f.z = backupReg0f + R1f.y;
PV0f.z /= 2.0;
PV0f.w = backupReg1f + R1f.x;
PV0f.w /= 2.0;
// 1
PV1f.x = -(R2f.w) + PV0f.x;
PV1f.y = -(R2f.z) + PV0f.y;
PV1f.z = -(R2f.y) + PV0f.z;
PV1f.w = -(R2f.x) + PV0f.w;
// 2
backupReg0f = R2f.x;
backupReg1f = R2f.y;
backupReg2f = R2f.z;
backupReg3f = R2f.w;
R2f.x = (PV1f.w * intBitsToFloat(0x3f4ccccd) + backupReg0f);
R2f.y = (PV1f.z * intBitsToFloat(0x3f4ccccd) + backupReg1f);
R2f.z = (PV1f.y * intBitsToFloat(0x3f4ccccd) + backupReg2f);
R2f.w = (PV1f.x * intBitsToFloat(0x3f4ccccd) + backupReg3f);
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
// export
passPixelColor0 = vec4(R2f.x, R2f.y, R2f.z, R2f.w);
}
