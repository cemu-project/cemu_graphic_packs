<?php
include 'Source/functions.php';
$fullWidth = $argv[1];
$fullHeight = $argv[2];
$scaleFactorX = always_decimal_format($fullWidth / 1280.0);
$scaleFactorY = always_decimal_format($fullHeight / 720.0);
?>

#version 420
#extension GL_ARB_texture_gather : enable
// shader 8c1e55fd967b0496 
// 1/4 -> 1/16  bloom pyramid . Pixelated unless scaled but still needs blur for light bleed.. 
// To-do. Check if screen res is * samples stable
const float resScale = <?=$scaleFactorX?>;
const float lightBloom = 0.95; 
highp float lineRand(vec2 co)
{
	highp float a = 12.9898;
	highp float b = 78.233;
	highp float c = 43758.5453;
	highp float dt = dot(co.xy, vec2(a, b));
	highp float sn = mod(dt, 3.14);
	return fract(sin(sn) * c);
}

uniform ivec4 uf_remappedPS[5];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0xf4e76000 res 320x180x1 dim 1 tm: 4 format 0816 compSel: 0 1 2 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 6 6 6 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
// FabriceNeyret2, single pass gaussian by intermediate MIPmap level. https://www.shadertoy.com/view/ltScRG
// I hereby pledge my loyalty to  the FabriceNeyret2 fanclub, this is bloody beautiful! 

const int samples = 16, //check if must scale to pascal levels
LOD = 2,         // gaussian done on MIPmap at scale LOD
sLOD = 1 << LOD; // tile size = 2^LOD
const float sigma = float(samples) * .25;

float gaussian(vec2 i) {
	return exp(-.5* dot(i /= sigma, i)) / (6.28 * sigma*sigma);
}

vec4 blur(sampler2D sp, vec2 U, vec2 scale) {
	vec4 O = vec4(0);
	int s = samples / sLOD;

	for (int i = 0; i < s*s; i++) {
		vec2 d = vec2(i%s, i / s)*float(sLOD) - float(samples) / 2.;
		O += gaussian(d) * textureLod(sp, U + scale * d, float(LOD));
	}

	return O / O.a;
}


int clampFI32(int v)
{
	if (v == 0x7FFFFFFF)
		return floatBitsToInt(1.0);
	else if (v == 0xFFFFFFFF)
		return floatBitsToInt(0.0);
	return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b) { return min(a*b, min(abs(a)*3.40282347E+38F, abs(b)*3.40282347E+38F)); }
void main()
{
	vec4 R0f = vec4(0.0);
	vec4 R1f = vec4(0.0);
	vec4 R2f = vec4(0.0);
	vec4 R3f = vec4(0.0);
	vec4 R4f = vec4(0.0);
	vec4 R5f = vec4(0.0);
	vec4 R123f = vec4(0.0);
	vec4 R126f = vec4(0.0);
	vec4 R127f = vec4(0.0);
	float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
	vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
	float PS0f = 0.0, PS1f = 0.0;
	vec4 tempf = vec4(0.0);
	float tempResultf;
	int tempResulti;
	ivec4 ARi = ivec4(0);
	bool predResult = true;
	vec3 cubeMapSTM;
	int cubeMapFaceId;
	R0f = passParameterSem0;
	//R0f.xy = R0f.xy - (lineRand(gl_FragCoord.xy)*0.015);
	//R0f.xy = vec2((passParameterSem0.x + passParameterSem0.z), (passParameterSem0.y + passParameterSem0.w));
								  // 0
	R1f.x = R0f.x + (intBitsToFloat(uf_remappedPS[0].x) / resScale);
	R1f.y = R0f.y + (intBitsToFloat(uf_remappedPS[0].y) / resScale);
	R0f.z = R0f.x + (intBitsToFloat(uf_remappedPS[1].x) / resScale);
	R0f.w = R0f.y + (intBitsToFloat(uf_remappedPS[1].y) / resScale);
	R5f.w = 1.0;
	PS0f = R5f.w;
	// 1
	R2f.x = R0f.x + (intBitsToFloat(uf_remappedPS[2].x) / resScale);
	R2f.y = R0f.y + (intBitsToFloat(uf_remappedPS[2].y) / resScale);
	R1f.z = R0f.x + (intBitsToFloat(uf_remappedPS[3].x) / resScale);
	R1f.w = R0f.y + (intBitsToFloat(uf_remappedPS[3].y) / resScale);
	// 2
	backupReg0f = R0f.x;
	backupReg1f = R0f.y;
	R0f.x = backupReg0f + (intBitsToFloat(uf_remappedPS[4].x) / resScale);
	R0f.y = backupReg1f + (intBitsToFloat(uf_remappedPS[4].y) / resScale);

	
	vec2 coord = passParameterSem0.xy*textureSize(textureUnitPS0, 0); // R0f.xy;// vec2(0.5, 0.5);
	vec2 ps = vec2(1.0) / textureSize(textureUnitPS0, 0);
	vec2 uv = coord * ps;

	R4f.xyz =	blur(textureUnitPS0, uv, ps*0.5).xyz;
	R4f.xyz += (texture(textureUnitPS0, R1f.xy).xyz)/2;
	R3f.xyz = (texture(textureUnitPS0, R0f.zw).xyz);
	R2f.xyz = (texture(textureUnitPS0, R2f.xy).xyz);// prob?
	R1f.xyz = (texture(textureUnitPS0, R1f.zw).xyz);
	R0f.xyz  = (texture(textureUnitPS0, R0f.xy).xyz);

	/*	//org
	R4f.xyz = (texture(textureUnitPS0, R1f.xy).xyz);
	R3f.xyz = (texture(textureUnitPS0, R0f.zw).xyz);
	R2f.xyz = (texture(textureUnitPS0, R2f.xy).xyz);// prob?
	R1f.xyz = (texture(textureUnitPS0, R1f.zw).xyz);
	R0f.xyz = (texture(textureUnitPS0, R0f.xy).xyz);

	*/
	// 0
	PV0f.x = R4f.y * intBitsToFloat(uf_remappedPS[0].z);
	PV0f.y = R4f.x * intBitsToFloat(uf_remappedPS[0].z);
	PV0f.z = R4f.z * intBitsToFloat(uf_remappedPS[0].z);
	PV0f.w = max(R3f.x, R4f.x);
	R127f.z = max(R3f.y, R4f.y);
	PS0f = R127f.z;
	// 1
	R123f.x = (R3f.z * intBitsToFloat(uf_remappedPS[1].z) + PV0f.z);
	PV1f.x = R123f.x;
	PV1f.y = max(R3f.z, R4f.z);
	R123f.z = (R3f.y * intBitsToFloat(uf_remappedPS[1].z) + PV0f.x);
	PV1f.z = R123f.z;
	R123f.w = (R3f.x * intBitsToFloat(uf_remappedPS[1].z) + PV0f.y);
	PV1f.w = R123f.w;
	R127f.y = max(PV0f.w, R2f.x);
	PS1f = R127f.y;
	// 2
	R127f.x = max(R127f.z, R2f.y);
	R123f.y = (R2f.y * intBitsToFloat(uf_remappedPS[2].z) + PV1f.z);
	PV0f.y = R123f.y;
	R123f.z = (R2f.x * intBitsToFloat(uf_remappedPS[2].z) + PV1f.w);
	PV0f.z = R123f.z;
	R123f.w = (R2f.z * intBitsToFloat(uf_remappedPS[2].z) + PV1f.x);
	PV0f.w = R123f.w;
	R127f.w = max(PV1f.y, R2f.z);
	PS0f = R127f.w;
	// 3
	backupReg0f = R0f.y;
	R123f.x = (R1f.x * intBitsToFloat(uf_remappedPS[3].z) + PV0f.z);
	PV1f.x = R123f.x;
	PV1f.y = max(R0f.x, R1f.x);
	R123f.z = (R1f.y * intBitsToFloat(uf_remappedPS[3].z) + PV0f.y);
	PV1f.z = R123f.z;
	R126f.w = (R1f.z * intBitsToFloat(uf_remappedPS[3].z) + PV0f.w);
	PS1f = max(backupReg0f, R1f.y);
	// 4
	backupReg0f = R0f.x;
	backupReg1f = R0f.y;
	PV0f.x = max(R127f.y, PV1f.y);
	PV0f.y = max(R0f.z, R1f.z);
	R127f.z = (backupReg0f * intBitsToFloat(uf_remappedPS[4].z) + PV1f.x);
	PV0f.z = R127f.z;
	PV0f.w = max(R127f.x, PS1f);
	R127f.x = (backupReg1f * intBitsToFloat(uf_remappedPS[4].z) + PV1f.z);
	PS0f = R127f.x;
	// 5
	backupReg0f = R0f.z;
	PV1f.x = PV0f.x + -(PV0f.z);
	PV1f.y = PV0f.w + -(PS0f);
	PV1f.z = max(R127f.w, PV0f.y);
	R127f.w = (backupReg0f * intBitsToFloat(uf_remappedPS[4].z) + R126f.w);
	PV1f.w = R127f.w;
	// 6
	PV0f.x = PV1f.z + -(PV1f.w);
	R5f.y = (PV1f.y * 0.275 + R127f.x)*lightBloom;//degree of bloom
	R5f.x = (PV1f.x * 0.275 + R127f.z)*lightBloom;
	PS0f = R5f.x;
	// 7
	R5f.z = (PV0f.x * 0.275 + R127f.w)*lightBloom;
	// export
	passPixelColor0 = vec4(R5f.x, R5f.y, R5f.z, R5f.w);
}
