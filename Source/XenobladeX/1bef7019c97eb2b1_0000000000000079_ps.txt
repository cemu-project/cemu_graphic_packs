
#version 420
#extension GL_ARB_texture_gather : enable
// shader 1bef7019c97eb2b1 
//Vertlica line glare (anamorphic lens )
// To-do - As long as brigntess fix is needed, this is disabled. 
const float resScale = 4.0;
//const float resScale = 3.0;
uniform ivec4 uf_remappedPS[2];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0xf4f51000 res 80x46x1 dim 1 tm: 4 format 0816 compSel: 0 1 2 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 6 6 6 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;

int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ return min(a*b,min(abs(a)*3.40282347E+38F,abs(b)*3.40282347E+38F)); }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R8f = vec4(0.0);
vec4 R9f = vec4(0.0);
vec4 R10f = vec4(0.0);
vec4 R11f = vec4(0.0);
vec4 R12f = vec4(0.0);
vec4 R13f = vec4(0.0);
vec4 R14f = vec4(0.0);
vec4 R15f = vec4(0.0);
vec4 R16f = vec4(0.0);
vec4 R17f = vec4(0.0);
vec4 R18f = vec4(0.0);
vec4 R19f = vec4(0.0);
vec4 R20f = vec4(0.0);
vec4 R21f = vec4(0.0);
vec4 R22f = vec4(0.0);
vec4 R23f = vec4(0.0);
vec4 R24f = vec4(0.0);
vec4 R25f = vec4(0.0);
vec4 R26f = vec4(0.0);
vec4 R27f = vec4(0.0);
vec4 R28f = vec4(0.0);
vec4 R29f = vec4(0.0);
vec4 R30f = vec4(0.0);
vec4 R31f = vec4(0.0);
vec4 R32f = vec4(0.0);
vec4 R33f = vec4(0.0);
vec4 R34f = vec4(0.0);
vec4 R35f = vec4(0.0);
vec4 R36f = vec4(0.0);
vec4 R37f = vec4(0.0);
vec4 R38f = vec4(0.0);
vec4 R39f = vec4(0.0);
vec4 R122f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R4f.xyz = (texture(textureUnitPS0, R0f.xy).xyz);
// 0
R1f.x = R0f.x + intBitsToFloat(uf_remappedPS[0].x);
R1f.y = R0f.y + intBitsToFloat(uf_remappedPS[0].y);
R2f.z = R0f.x + -(intBitsToFloat(uf_remappedPS[0].x));
R1f.w = intBitsToFloat(uf_remappedPS[1].x) * intBitsToFloat(uf_remappedPS[1].y);
PV0f.w = R1f.w;
R2f.y = R0f.y + -(intBitsToFloat(uf_remappedPS[0].y)); //m
PS0f = R2f.y;
// 1
R5f.x = PV0f.w * intBitsToFloat(uf_remappedPS[1].y); //n
// 2
R3f.z = intBitsToFloat(uf_remappedPS[0].y) * intBitsToFloat(uf_remappedPS[0].z);
PV0f.z = R3f.z;
R127f.w = intBitsToFloat(uf_remappedPS[0].x) * intBitsToFloat(uf_remappedPS[0].z);
PV0f.w = R127f.w;
// 3
R8f.x = R5f.x * intBitsToFloat(uf_remappedPS[1].y);
R5f.y = PV0f.w + (intBitsToFloat(uf_remappedPS[0].x)/ resScale); //y
PV1f.y = R5f.y;
R2f.w = PV0f.z + intBitsToFloat(uf_remappedPS[0].y);
PV1f.w = R2f.w;
// 4
R3f.x = R0f.x + PV1f.y;
R3f.y = R0f.y + PV1f.w;
R0f.z = R0f.x + -(PV1f.y);
R0f.w = R0f.y + -(PV1f.w);
R7f.x = R127f.w * (intBitsToFloat(uf_remappedPS[0].z) / resScale);
PS0f = R7f.x;
R1f.xyz = (texture(textureUnitPS0, R1f.xy).xyz);
R2f.xyz = (texture(textureUnitPS0, R2f.zy).xyz);
R12f.xyz = (texture(textureUnitPS0, R3f.xy).xyz);
R6f.xyz = (texture(textureUnitPS0, R0f.zw).xyz);
// 0
PV0f.x = max(R4f.y, R1f.y);
PV0f.y = max(R4f.x, R1f.x);
R127f.z = max(R4f.z, R1f.z);
PV0f.w = R1f.w * R1f.x;
PS0f = R1f.w * R1f.y;
// 1
PV1f.x = R1f.w * R1f.z;
PV1f.y = max(PV0f.y, R2f.x);
R123f.z = (R4f.x * intBitsToFloat(uf_remappedPS[1].x) + PV0f.w);
PV1f.z = R123f.z;
R123f.w = (R4f.y * intBitsToFloat(uf_remappedPS[1].x) + PS0f);
PV1f.w = R123f.w;
R127f.y = max(PV0f.x, R2f.y);
PS1f = R127f.y;
// 2
PV0f.x = max(R127f.z, R2f.z);
R123f.y = (R1f.w * R2f.x + PV1f.z);
PV0f.y = R123f.y;
R123f.z = (R1f.w * R2f.y + PV1f.w);
PV0f.z = R123f.z;
R123f.w = (R4f.z * intBitsToFloat(uf_remappedPS[1].x) + PV1f.x);
PV0f.w = R123f.w;
R0f.w = max(PV1f.y, R6f.x);
PS0f = R0f.w;
// 3
R123f.x = (R5f.x * R12f.x + PV0f.y);
PV1f.x = R123f.x;
R123f.y = (R1f.w * R2f.z + PV0f.w);
PV1f.y = R123f.y;
R123f.z = (R5f.x * R12f.y + PV0f.z);
PV1f.z = R123f.z;
R1f.w = max(R127f.y, R6f.y);
R4f.y = max(PV0f.x, R6f.z);
PS1f = R4f.y;
// 4
R2f.x = (R5f.x * R6f.x + PV1f.x);
R2f.y = (R5f.x * R6f.y + PV1f.z);
R127f.z = R3f.z * intBitsToFloat(uf_remappedPS[0].z);
PV0f.z = R127f.z;
R123f.w = (R5f.x * R12f.z + PV1f.y);
PV0f.w = R123f.w;
R126f.z = R5f.y + R7f.x;
PS0f = R126f.z;
// 5
backupReg0f = R5f.x;
R5f.x = R0f.x + PS0f;
R1f.y = R8f.x * intBitsToFloat(uf_remappedPS[1].y);
PV1f.y = R1f.y;
R3f.z = (backupReg0f * R6f.z + PV0f.w);
R127f.w = R2f.w + PV0f.z;
PV1f.w = R127f.w;
R6f.x = R0f.x + -(PS0f);
PS1f = R6f.x;
// 6
PV0f.x = R7f.x *( intBitsToFloat(uf_remappedPS[0].z)/ resScale);
R5f.y = R0f.y + PV1f.w;
R6f.z = R0f.y + -(PV1f.w);
PV0f.w = R127f.z * intBitsToFloat(uf_remappedPS[0].z); //n
R3f.w = PV1f.y * intBitsToFloat(uf_remappedPS[1].y); //n
PS0f = R3f.w;
// 7
R4f.x = PV0f.x * intBitsToFloat(uf_remappedPS[0].z);
PV1f.x = R4f.x;
R3f.y = PV0f.w * intBitsToFloat(uf_remappedPS[0].z);
R4f.z = R127f.w + PV0f.w;
PV1f.z = R4f.z;
PV1f.w = R126f.z + PV0f.x;
R3f.x = PS0f * intBitsToFloat(uf_remappedPS[1].y);
PS1f = R3f.x;
// 8
R7f.x = R0f.x + PV1f.w;
R7f.y = R0f.y + PV1f.z;
R2f.z = R0f.x + -(PV1f.w);
R2f.w = R0f.y + -(PV1f.z);
R1f.x = PV1f.w + PV1f.x;
PS0f = R1f.x;
R11f.xyz = (texture(textureUnitPS0, R5f.xy).xyz);
R6f.xyz = (texture(textureUnitPS0, R6f.xz).xyz);
R13f.xyz = (texture(textureUnitPS0, R7f.xy).xyz);
R7f.xyz = (texture(textureUnitPS0, R2f.zw).xyz);
// 0
R127f.x = max(R1f.w, R6f.y);
R123f.y = (R8f.x * R11f.x + R2f.x);
PV0f.y = R123f.y;
R123f.z = (R8f.x * R11f.y + R2f.y);
PV0f.z = R123f.z;
R123f.w = (R8f.x * R11f.z + R3f.z);
PV0f.w = R123f.w;
// 1
PV1f.x = max(R0f.w, R6f.x);
R123f.y = (R8f.x * R6f.x + PV0f.y);
PV1f.y = R123f.y;
R126f.z = max(R4f.y, R6f.z);
R123f.w = (R8f.x * R6f.y + PV0f.z);
PV1f.w = R123f.w;
R122f.x = (R8f.x * R6f.z + PV0f.w);
PS1f = R122f.x;
// 2
R123f.x = (R1f.y * R13f.z + PS1f);
PV0f.x = R123f.x;
R6f.y = max(PV1f.x, R7f.x);
R123f.z = (R1f.y * R13f.y + PV1f.w);
PV0f.z = R123f.z;
R123f.w = (R1f.y * R13f.x + PV1f.y);
PV0f.w = R123f.w;
R6f.x = max(R127f.x, R7f.y);
PS0f = R6f.x;
// 3
backupReg0f = R7f.y;
backupReg1f = R7f.x;
backupReg2f = R7f.z;
R7f.x = (R1f.y * R7f.z + PV0f.x);
R7f.y = (R1f.y * backupReg0f + PV0f.z);
R7f.z = (R1f.y * backupReg1f + PV0f.w);
R0f.w = max(R126f.z, backupReg2f);
R127f.w = R4f.z + R3f.y;
PS1f = R127f.w;
// 4
backupReg0f = R4f.x;
R4f.xyz = vec3(R0f.x,R0f.y,R0f.x) + vec3(R1f.x,PS1f,-(R1f.x));
R4f.w = R0f.y + -(PS1f);
PS0f = backupReg0f * intBitsToFloat(uf_remappedPS[0].z);
// 5
R5f.x = R3f.x * intBitsToFloat(uf_remappedPS[1].y);
PV1f.y = R1f.x + PS0f;
PV1f.z = R3f.y * intBitsToFloat(uf_remappedPS[0].z);
R1f.w = PS0f * intBitsToFloat(uf_remappedPS[0].z);
PV1f.w = R1f.w;
// 6
R1f.x = R0f.x + PV1f.y;
R2f.y = PV1f.z * intBitsToFloat(uf_remappedPS[0].z);
PV0f.y = R2f.y;
R3f.z = R0f.x + -(PV1f.y);
PV0f.w = R127f.w + PV1f.z;
R6f.z = PV1f.y + PV1f.w;
PS0f = R6f.z;
// 7
R8f.x = R0f.x + PS0f;
R1f.y = R0f.y + PV0f.w;
R5f.z = R0f.x + -(PS0f);
R2f.w = PV0f.w + PV0f.y;
R3f.y = R0f.y + -(PV0f.w);
PS1f = R3f.y;
R14f.xyz = (texture(textureUnitPS0, R4f.xy).xyz);
R4f.xyz = (texture(textureUnitPS0, R4f.zw).xyz);
R15f.xyz = (texture(textureUnitPS0, R1f.xy).xyz);
R1f.xyz = (texture(textureUnitPS0, R3f.zy).xyz);
// 0
R123f.x = (R3f.w * R14f.z + R7f.x);
PV0f.x = R123f.x;
PV0f.y = max(R6f.y, R4f.x);
R123f.z = (R3f.w * R14f.x + R7f.z);
PV0f.z = R123f.z;
R123f.w = (R3f.w * R14f.y + R7f.y);
PV0f.w = R123f.w;
R127f.x = max(R0f.w, R4f.z);
PS0f = R127f.x;
// 1
R123f.x = (R3f.w * R4f.z + PV0f.x);
PV1f.x = R123f.x;
PV1f.y = max(R6f.x, R4f.y);
R123f.z = (R3f.w * R4f.y + PV0f.w);
PV1f.z = R123f.z;
R123f.w = (R3f.w * R4f.x + PV0f.z);
PV1f.w = R123f.w;
R0f.w = max(PV0f.y, R1f.x);
PS1f = R0f.w;
// 2
R123f.x = (R3f.x * R15f.x + PV1f.w);
PV0f.x = R123f.x;
R4f.y = max(PV1f.y, R1f.y);
R123f.z = (R3f.x * R15f.y + PV1f.z);
PV0f.z = R123f.z;
R123f.w = (R3f.x * R15f.z + PV1f.x);
PV0f.w = R123f.w;
R6f.y = max(R127f.x, R1f.z);
PS0f = R6f.y;
// 3
backupReg0f = R1f.x;
backupReg1f = R1f.z;
R1f.x = (R3f.x * backupReg0f + PV0f.x);
R8f.y = R0f.y + R2f.w;
R1f.z = (R3f.x * backupReg1f + PV0f.w);
R3f.w = (R3f.x * R1f.y + PV0f.z);
R5f.y = R0f.y + -(R2f.w);
PS1f = R5f.y;
// 4
PV0f.x = R2f.y * intBitsToFloat(uf_remappedPS[0].z);
PV0f.y = R1f.w * intBitsToFloat(uf_remappedPS[0].z);
R4f.z = R5f.x * intBitsToFloat(uf_remappedPS[1].y);
PV0f.z = R4f.z;
// 5
backupReg0f = R6f.z;
R4f.x = PV0f.z * intBitsToFloat(uf_remappedPS[1].y);
R1f.y = PV0f.y * intBitsToFloat(uf_remappedPS[0].z);
PV1f.y = R1f.y;
R6f.z = R2f.w + PV0f.x;
PV1f.z = R6f.z;
PV1f.w = backupReg0f + PV0f.y;
R7f.y = PV0f.x * intBitsToFloat(uf_remappedPS[0].z);
PS1f = R7f.y;
// 6
R2f.xyz = vec3(R0f.x,R0f.y,R0f.x) + vec3(PV1f.w,PV1f.z,-(PV1f.w));
R2f.w = R0f.y + -(PV1f.z);
R3f.x = PV1f.w + PV1f.y;
PS0f = R3f.x;
R16f.xyz = (texture(textureUnitPS0, R8f.xy).xyz);
R8f.xyz = (texture(textureUnitPS0, R5f.zy).xyz);
R17f.xyz = (texture(textureUnitPS0, R2f.xy).xyz);
R2f.xyz = (texture(textureUnitPS0, R2f.zw).xyz);
// 0
R127f.x = max(R4f.y, R8f.y);
R123f.y = (R5f.x * R16f.x + R1f.x);
PV0f.y = R123f.y;
R123f.z = (R5f.x * R16f.y + R3f.w);
PV0f.z = R123f.z;
R123f.w = (R5f.x * R16f.z + R1f.z);
PV0f.w = R123f.w;
// 1
PV1f.x = max(R0f.w, R8f.x);
R123f.y = (R5f.x * R8f.x + PV0f.y);
PV1f.y = R123f.y;
R126f.z = max(R6f.y, R8f.z);
R123f.w = (R5f.x * R8f.y + PV0f.z);
PV1f.w = R123f.w;
R122f.x = (R5f.x * R8f.z + PV0f.w);
PS1f = R122f.x;
// 2
R123f.x = (R4f.z * R17f.z + PS1f);
PV0f.x = R123f.x;
R8f.y = max(PV1f.x, R2f.x);
R123f.z = (R4f.z * R17f.y + PV1f.w);
PV0f.z = R123f.z;
R123f.w = (R4f.z * R17f.x + PV1f.y);
PV0f.w = R123f.w;
R8f.x = max(R127f.x, R2f.y);
PS0f = R8f.x;
// 3
backupReg0f = R4f.z;
R5f.x = (R4f.z * R2f.z + PV0f.x);
R6f.y = (R4f.z * R2f.y + PV0f.z);
R4f.z = (backupReg0f * R2f.x + PV0f.w);
R0f.w = max(R126f.z, R2f.z);
R2f.x = R0f.x + R3f.x;
PS1f = R2f.x;
// 4
backupReg0f = R7f.y;
backupReg0f = R7f.y;
R6f.x = R0f.x + -(R3f.x);
R7f.y = R4f.x * intBitsToFloat(uf_remappedPS[1].y);
PV0f.y = R7f.y;
R126f.z = R1f.y * intBitsToFloat(uf_remappedPS[0].z);
PV0f.z = R126f.z;
PV0f.w = R6f.z + backupReg0f;
R8f.z = backupReg0f * intBitsToFloat(uf_remappedPS[0].z);
PS0f = R8f.z;
// 5
R7f.x = R3f.x + PV0f.z;
PV1f.x = R7f.x;
R2f.y = R0f.y + PV0f.w;
R6f.z = R0f.y + -(PV0f.w);
R3f.w = PV0f.w + PS0f;
PV1f.w = R3f.w;
R4f.y = PV0f.y * intBitsToFloat(uf_remappedPS[1].y);
PS1f = R4f.y;
// 6
R3f.x = R0f.x + PV1f.x;
R3f.y = R0f.y + PV1f.w;
R2f.z = R0f.x + -(PV1f.x);
R2f.w = R0f.y + -(PV1f.w);
R9f.x = R126f.z * intBitsToFloat(uf_remappedPS[0].z);
PS0f = R9f.x;
R18f.xyz = (texture(textureUnitPS0, R2f.xy).xyz);
R1f.xyz = (texture(textureUnitPS0, R6f.xz).xyz);
R19f.xyz = (texture(textureUnitPS0, R3f.xy).xyz);
R2f.xyz = (texture(textureUnitPS0, R2f.zw).xyz);
// 0
R123f.x = (R4f.x * R18f.z + R5f.x);
PV0f.x = R123f.x;
R127f.y = max(R0f.w, R1f.z);
R123f.z = (R4f.x * R18f.x + R4f.z);
PV0f.z = R123f.z;
R123f.w = (R4f.x * R18f.y + R6f.y);
PV0f.w = R123f.w;
R4f.z = R4f.y * intBitsToFloat(uf_remappedPS[1].y);
PS0f = R4f.z;
// 1
R123f.x = (R4f.x * R1f.y + PV0f.w);
PV1f.x = R123f.x;
PV1f.y = max(R8f.x, R1f.y);
PV1f.z = max(R8f.y, R1f.x);
R123f.w = (R4f.x * R1f.x + PV0f.z);
PV1f.w = R123f.w;
R122f.x = (R4f.x * R1f.z + PV0f.x);
PS1f = R122f.x;
// 2
R123f.x = (R7f.y * R19f.x + PV1f.w);
PV0f.x = R123f.x;
R1f.y = max(PV1f.z, R2f.x);
R123f.z = (R7f.y * R19f.y + PV1f.x);
PV0f.z = R123f.z;
R123f.w = (R7f.y * R19f.z + PS1f);
PV0f.w = R123f.w;
R1f.z = max(PV1f.y, R2f.y);
PS0f = R1f.z;
// 3
backupReg0f = R2f.z;
backupReg1f = R2f.y;
R1f.x = (R7f.y * R2f.x + PV0f.x);
R2f.y = max(R127f.y, R2f.z);
R2f.z = (R7f.y * backupReg0f + PV0f.w);
R0f.w = (R7f.y * backupReg1f + PV0f.z);
PS1f = R8f.z * intBitsToFloat(uf_remappedPS[0].z);
// 4
R127f.x = PS1f * intBitsToFloat(uf_remappedPS[0].z);
R127f.y = R9f.x * intBitsToFloat(uf_remappedPS[0].z);
PV0f.y = R127f.y;
PV0f.z = R7f.x + R9f.x;
R127f.w = R3f.w + PS1f;
PV0f.w = R127f.w;
R4f.w = R4f.z * intBitsToFloat(uf_remappedPS[1].y);
PS0f = R4f.w;
// 5
R7f.x = R0f.x + PV0f.z;
R7f.y = R0f.y + PV0f.w;
R3f.z = R0f.x + -(PV0f.z);
R3f.w = R0f.y + -(PV0f.w);
R126f.w = PV0f.z + PV0f.y;
PS1f = R126f.w;
// 6
R9f.x = R0f.x + PS1f;
R8f.y = R127f.y * intBitsToFloat(uf_remappedPS[0].z);
PV0f.y = R8f.y;
PV0f.z = R127f.w + R127f.x;
R2f.w = R0f.x + -(PS1f);
R6f.y = R127f.x * intBitsToFloat(uf_remappedPS[0].z);
PS0f = R6f.y;
// 7
R2f.x = R0f.y + -(PV0f.z);
R9f.y = R0f.y + PV0f.z;
R8f.z = R126f.w + PV0f.y;
R1f.w = PV0f.z + PS0f;
R4f.x = R4f.w * intBitsToFloat(uf_remappedPS[1].y);
PS1f = R4f.x;
R20f.xyz = (texture(textureUnitPS0, R7f.xy).xyz);
R3f.xyz = (texture(textureUnitPS0, R3f.zw).xyz);
R21f.xyz = (texture(textureUnitPS0, R9f.xy).xyz);
R9f.xyz = (texture(textureUnitPS0, R2f.wx).xyz);
// 0
R127f.x = max(R1f.y, R3f.x);
R123f.y = (R4f.y * R20f.x + R1f.x);
PV0f.y = R123f.y;
R123f.z = (R4f.y * R20f.y + R0f.w);
PV0f.z = R123f.z;
R123f.w = (R4f.y * R20f.z + R2f.z);
PV0f.w = R123f.w;
// 1
R123f.x = (R4f.y * R3f.y + PV0f.z);
PV1f.x = R123f.x;
R123f.y = (R4f.y * R3f.x + PV0f.y);
PV1f.y = R123f.y;
R126f.z = max(R2f.y, R3f.z);
PV1f.w = max(R1f.z, R3f.y);
R122f.x = (R4f.y * R3f.z + PV0f.w);
PS1f = R122f.x;
// 2
R123f.x = (R4f.z * R21f.z + PS1f);
PV0f.x = R123f.x;
R3f.y = max(R127f.x, R9f.x);
R123f.z = (R4f.z * R21f.y + PV1f.x);
PV0f.z = R123f.z;
R123f.w = (R4f.z * R21f.x + PV1f.y);
PV0f.w = R123f.w;
R1f.x = max(PV1f.w, R9f.y);
PS0f = R1f.x;
// 3
backupReg0f = R4f.z;
R3f.x = (R4f.z * R9f.z + PV0f.x);
R2f.y = (R4f.z * R9f.y + PV0f.z);
R4f.z = (backupReg0f * R9f.x + PV0f.w);
R0f.w = max(R126f.z, R9f.z);
R9f.y = R0f.y + R1f.w;
PS1f = R9f.y;
// 4
backupReg0f = R6f.y;
R9f.x = R0f.x + R8f.z;
R6f.y = R0f.y + -(R1f.w);
R6f.z = R0f.x + -(R8f.z);
PV0f.w = R8f.y * intBitsToFloat(uf_remappedPS[0].z);
PS0f = backupReg0f * intBitsToFloat(uf_remappedPS[0].z);
// 5
R2f.x = R4f.x * intBitsToFloat(uf_remappedPS[1].y);
PV1f.y = R8f.z + PV0f.w;
R9f.z = PV0f.w * intBitsToFloat(uf_remappedPS[0].z);
PV1f.z = R9f.z;
R2f.w = R1f.w + PS0f;
PV1f.w = R2f.w;
R3f.w = PS0f * intBitsToFloat(uf_remappedPS[0].z);
PS1f = R3f.w;
// 6
R8f.x = R0f.x + PV1f.y;
R8f.y = R0f.y + PV1f.w;
R1f.z = R0f.x + -(PV1f.y);
R1f.w = R0f.y + -(PV1f.w);
R3f.z = PV1f.y + PV1f.z;
PS0f = R3f.z;
R22f.xyz = (texture(textureUnitPS0, R9f.xy).xyz);
R6f.xyz = (texture(textureUnitPS0, R6f.zy).xyz);
R23f.xyz = (texture(textureUnitPS0, R8f.xy).xyz);
R8f.xyz = (texture(textureUnitPS0, R1f.zw).xyz);
// 0
R123f.x = (R4f.w * R22f.z + R3f.x);
PV0f.x = R123f.x;
PV0f.y = max(R3f.y, R6f.x);
R123f.z = (R4f.w * R22f.x + R4f.z);
PV0f.z = R123f.z;
R123f.w = (R4f.w * R22f.y + R2f.y);
PV0f.w = R123f.w;
R127f.x = max(R0f.w, R6f.z);
PS0f = R127f.x;
// 1
R123f.x = (R4f.w * R6f.z + PV0f.x);
PV1f.x = R123f.x;
PV1f.y = max(R1f.x, R6f.y);
R123f.z = (R4f.w * R6f.y + PV0f.w);
PV1f.z = R123f.z;
R123f.w = (R4f.w * R6f.x + PV0f.z);
PV1f.w = R123f.w;
R4f.w = max(PV0f.y, R8f.x);
PS1f = R4f.w;
// 2
R123f.x = (R4f.x * R23f.x + PV1f.w);
PV0f.x = R123f.x;
R6f.y = max(PV1f.y, R8f.y);
R123f.z = (R4f.x * R23f.y + PV1f.z);
PV0f.z = R123f.z;
R123f.w = (R4f.x * R23f.z + PV1f.x);
PV0f.w = R123f.w;
R2f.y = max(R127f.x, R8f.z);
PS0f = R2f.y;
// 3
backupReg0f = R8f.z;
R1f.x = (R4f.x * R8f.x + PV0f.x);
R127f.y = R2f.w + R3f.w;
PV1f.y = R127f.y;
R8f.z = (R4f.x * backupReg0f + PV0f.w);
R2f.w = (R4f.x * R8f.y + PV0f.z);
R4f.x = R0f.x + R3f.z;
PS1f = R4f.x;
// 4
backupReg0f = R9f.z;
R9f.x = R0f.x + -(R3f.z);
R4f.y = R0f.y + PV1f.y;
R9f.z = R0f.y + -(PV1f.y);
R0f.w = R2f.x * intBitsToFloat(uf_remappedPS[1].y);
PV0f.w = R0f.w;
PS0f = backupReg0f * intBitsToFloat(uf_remappedPS[0].z);
// 5
PV1f.x = R3f.w * intBitsToFloat(uf_remappedPS[0].z);
R10f.y = PV0f.w * intBitsToFloat(uf_remappedPS[1].y);
R6f.z = PS0f * intBitsToFloat(uf_remappedPS[0].z);
PV1f.z = R6f.z;
PV1f.w = R3f.z + PS0f;
// 6
R8f.x = R0f.x + PV1f.w;
R1f.y = PV1f.x * intBitsToFloat(uf_remappedPS[0].z);
PV0f.y = R1f.y;
PV0f.z = R127f.y + PV1f.x;
R3f.w = R0f.x + -(PV1f.w);
R6f.x = PV1f.w + PV1f.z;
PS0f = R6f.x;
// 7
R7f.x = R0f.x + PS0f;
R8f.y = R0f.y + PV0f.z;
R3f.z = R0f.y + -(PV0f.z);
R1f.w = PV0f.z + PV0f.y;
R5f.x = R0f.x + -(PS0f);
PS1f = R5f.x;
R24f.xyz = (texture(textureUnitPS0, R4f.xy).xyz);
R9f.xyz = (texture(textureUnitPS0, R9f.xz).xyz);
R25f.xyz = (texture(textureUnitPS0, R8f.xy).xyz);
R3f.xyz = (texture(textureUnitPS0, R3f.wz).xyz);
// 0
R127f.x = max(R6f.y, R9f.y);
R123f.y = (R2f.x * R24f.x + R1f.x);
PV0f.y = R123f.y;
R123f.z = (R2f.x * R24f.y + R2f.w);
PV0f.z = R123f.z;
R123f.w = (R2f.x * R24f.z + R8f.z);
PV0f.w = R123f.w;
R126f.w = R6f.z * intBitsToFloat(uf_remappedPS[0].z);
PS0f = R126f.w;
// 1
PV1f.x = max(R4f.w, R9f.x);
R123f.y = (R2f.x * R9f.x + PV0f.y);
PV1f.y = R123f.y;
R126f.z = max(R2f.y, R9f.z);
R123f.w = (R2f.x * R9f.y + PV0f.z);
PV1f.w = R123f.w;
R122f.x = (R2f.x * R9f.z + PV0f.w);
PS1f = R122f.x;
// 2
R123f.x = (R0f.w * R25f.z + PS1f);
PV0f.x = R123f.x;
R2f.y = max(PV1f.x, R3f.x);
R123f.z = (R0f.w * R25f.y + PV1f.w);
PV0f.z = R123f.z;
R123f.w = (R0f.w * R25f.x + PV1f.y);
PV0f.w = R123f.w;
R9f.x = max(R127f.x, R3f.y);
PS0f = R9f.x;
// 3
backupReg0f = R3f.y;
backupReg1f = R3f.x;
backupReg2f = R3f.z;
R3f.x = (R0f.w * R3f.z + PV0f.x);
R3f.y = (R0f.w * backupReg0f + PV0f.z);
R3f.z = (R0f.w * backupReg1f + PV0f.w);
R0f.w = max(R126f.z, backupReg2f);
R7f.y = R0f.y + R1f.w;
PS1f = R7f.y;
// 4
backupReg0f = R126f.w;
backupReg0f = R126f.w;
R8f.x = R10f.y * intBitsToFloat(uf_remappedPS[1].y);
PV0f.x = R8f.x;
R5f.y = R0f.y + -(R1f.w);
PV0f.z = R1f.y * intBitsToFloat(uf_remappedPS[0].z);
R126f.w = R6f.x + backupReg0f;
PV0f.w = R126f.w;
R2f.x = backupReg0f * intBitsToFloat(uf_remappedPS[0].z);
PS0f = R2f.x;
// 5
R1f.x = R0f.x + PV0f.w;
R9f.y = PV0f.x * intBitsToFloat(uf_remappedPS[1].y);
PV1f.y = R9f.y;
R6f.z = R0f.x + -(PV0f.w);
PV1f.w = R1f.w + PV0f.z;
R1f.w = PV0f.z * intBitsToFloat(uf_remappedPS[0].z);
PS1f = R1f.w;
// 6
R6f.x = R0f.y + -(PV1f.w);
R1f.y = R0f.y + PV1f.w;
R9f.z = R126f.w + R2f.x;
R4f.w = PV1f.w + PS1f;
R8f.z = PV1f.y * intBitsToFloat(uf_remappedPS[1].y);
PS0f = R8f.z;
R26f.xyz = (texture(textureUnitPS0, R7f.xy).xyz);
R5f.xyz = (texture(textureUnitPS0, R5f.xy).xyz);
R27f.xyz = (texture(textureUnitPS0, R1f.xy).xyz);
R6f.xyz = (texture(textureUnitPS0, R6f.zx).xyz);
// 0
R123f.x = (R10f.y * R26f.z + R3f.x);
PV0f.x = R123f.x;
R127f.y = max(R0f.w, R5f.z);
R123f.z = (R10f.y * R26f.x + R3f.z);
PV0f.z = R123f.z;
R123f.w = (R10f.y * R26f.y + R3f.y);
PV0f.w = R123f.w;
R126f.y = R2f.x * intBitsToFloat(uf_remappedPS[0].z);
PS0f = R126f.y;
// 1
R123f.x = (R10f.y * R5f.y + PV0f.w);
PV1f.x = R123f.x;
PV1f.y = max(R9f.x, R5f.y);
PV1f.z = max(R2f.y, R5f.x);
R123f.w = (R10f.y * R5f.x + PV0f.z);
PV1f.w = R123f.w;
R122f.x = (R10f.y * R5f.z + PV0f.x);
PS1f = R122f.x;
// 2
R123f.x = (R8f.x * R27f.x + PV1f.w);
PV0f.x = R123f.x;
R2f.y = max(PV1f.z, R6f.x);
R123f.z = (R8f.x * R27f.y + PV1f.x);
PV0f.z = R123f.z;
R123f.w = (R8f.x * R27f.z + PS1f);
PV0f.w = R123f.w;
R3f.z = max(PV1f.y, R6f.y);
PS0f = R3f.z;
// 3
backupReg0f = R6f.z;
R5f.x = (R8f.x * R6f.x + PV0f.x);
R5f.y = max(R127f.y, R6f.z);
R6f.z = (R8f.x * backupReg0f + PV0f.w);
R0f.w = (R8f.x * R6f.y + PV0f.z);
R6f.x = R0f.x + R9f.z;
PS1f = R6f.x;
// 4
backupReg0f = R9f.z;
R9f.x = R0f.x + -(R9f.z);
R6f.y = R0f.y + R4f.w;
R9f.z = R0f.y + -(R4f.w);
R126f.w = R1f.w * intBitsToFloat(uf_remappedPS[0].z);
PV0f.w = R126f.w;
R127f.w = backupReg0f + R126f.y;
PS0f = R127f.w;
// 5
R8f.x = R0f.x + PS0f;
R3f.y = R8f.z * intBitsToFloat(uf_remappedPS[1].y);
PV1f.y = R3f.y;
R1f.z = R4f.w + PV0f.w;
PV1f.z = R1f.z;
R4f.w = R0f.x + -(PS0f);
R5f.z = R126f.y * intBitsToFloat(uf_remappedPS[0].z);
PS1f = R5f.z;
// 6
R4f.x = R0f.y + -(PV1f.z);
R8f.y = R0f.y + PV1f.z;
R2f.z = R126f.w * intBitsToFloat(uf_remappedPS[0].z);
R1f.w = R127f.w + PS1f;
R3f.x = PV1f.y * intBitsToFloat(uf_remappedPS[1].y);
PS0f = R3f.x;
R28f.xyz = (texture(textureUnitPS0, R6f.xy).xyz);
R10f.xyz = (texture(textureUnitPS0, R9f.xz).xyz);
R29f.xyz = (texture(textureUnitPS0, R8f.xy).xyz);
R4f.xyz = (texture(textureUnitPS0, R4f.wx).xyz);
// 0
R127f.x = max(R2f.y, R10f.x);
R123f.y = (R9f.y * R28f.x + R5f.x);
PV0f.y = R123f.y;
R123f.z = (R9f.y * R28f.y + R0f.w);
PV0f.z = R123f.z;
R123f.w = (R9f.y * R28f.z + R6f.z);
PV0f.w = R123f.w;
R127f.w = R5f.z * intBitsToFloat(uf_remappedPS[0].z);
PS0f = R127f.w;
// 1
R123f.x = (R9f.y * R10f.y + PV0f.z);
PV1f.x = R123f.x;
R123f.y = (R9f.y * R10f.x + PV0f.y);
PV1f.y = R123f.y;
R126f.z = max(R5f.y, R10f.z);
PV1f.w = max(R3f.z, R10f.y);
R122f.x = (R9f.y * R10f.z + PV0f.w);
PS1f = R122f.x;
// 2
R123f.x = (R8f.z * R29f.z + PS1f);
PV0f.x = R123f.x;
R10f.y = max(R127f.x, R4f.x);
R123f.z = (R8f.z * R29f.y + PV1f.x);
PV0f.z = R123f.z;
R123f.w = (R8f.z * R29f.x + PV1f.y);
PV0f.w = R123f.w;
R8f.x = max(PV1f.w, R4f.y);
PS0f = R8f.x;
// 3
backupReg0f = R4f.z;
R10f.x = (R8f.z * R4f.z + PV0f.x);
R9f.y = (R8f.z * R4f.y + PV0f.z);
R4f.z = (R8f.z * R4f.x + PV0f.w);
R0f.w = max(R126f.z, backupReg0f);
R4f.x = R0f.x + R1f.w;
PS1f = R4f.x;
// 4
R1f.x = R0f.x + -(R1f.w);
R8f.y = R1f.w + R127f.w;
PV0f.y = R8f.y;
R126f.z = R2f.z * intBitsToFloat(uf_remappedPS[0].z);
PV0f.z = R126f.z;
PV0f.w = R1f.z + R2f.z;
R6f.y = R3f.x * intBitsToFloat(uf_remappedPS[1].y);
PS0f = R6f.y;
// 5
R5f.x = R0f.x + PV0f.y;
R4f.y = R0f.y + PV0f.w;
R1f.z = R0f.y + -(PV0f.w);
R1f.w = PV0f.w + PV0f.z;
PV1f.w = R1f.w;
R2f.x = R0f.x + -(PV0f.y);
PS1f = R2f.x;
// 6
R9f.x = R127f.w * intBitsToFloat(uf_remappedPS[0].z);
R5f.y = R0f.y + PV1f.w;
R2f.z = R0f.y + -(PV1f.w);
R4f.w = R126f.z * intBitsToFloat(uf_remappedPS[0].z);
R3f.z = R6f.y * intBitsToFloat(uf_remappedPS[1].y);
PS0f = R3f.z;
R30f.xyz = (texture(textureUnitPS0, R4f.xy).xyz);
R1f.xyz = (texture(textureUnitPS0, R1f.xz).xyz);
R31f.xyz = (texture(textureUnitPS0, R5f.xy).xyz);
R2f.xyz = (texture(textureUnitPS0, R2f.xz).xyz);
// 0
R123f.x = (R3f.y * R30f.z + R10f.x);
PV0f.x = R123f.x;
R126f.y = max(R0f.w, R1f.z);
R123f.z = (R3f.y * R30f.x + R4f.z);
PV0f.z = R123f.z;
R123f.w = (R3f.y * R30f.y + R9f.y);
PV0f.w = R123f.w;
R127f.w = R1f.w + R4f.w;
PS0f = R127f.w;
// 1
R123f.x = (R3f.y * R1f.y + PV0f.w);
PV1f.x = R123f.x;
PV1f.y = max(R8f.x, R1f.y);
PV1f.z = max(R10f.y, R1f.x);
R123f.w = (R3f.y * R1f.x + PV0f.z);
PV1f.w = R123f.w;
R122f.x = (R3f.y * R1f.z + PV0f.x);
PS1f = R122f.x;
// 2
R123f.x = (R3f.x * R31f.x + PV1f.w);
PV0f.x = R123f.x;
R1f.y = max(PV1f.z, R2f.x);
R123f.z = (R3f.x * R31f.y + PV1f.x);
PV0f.z = R123f.z;
R123f.w = (R3f.x * R31f.z + PS1f);
PV0f.w = R123f.w;
R8f.z = max(PV1f.y, R2f.y);
PS0f = R8f.z;
// 3
backupReg0f = R3f.x;
backupReg0f = R3f.x;
backupReg0f = R3f.x;
backupReg1f = R8f.y;
R3f.x = (backupReg0f * R2f.x + PV0f.x);
R8f.y = max(R126f.y, R2f.z);
R1f.z = (backupReg0f * R2f.z + PV0f.w);
R0f.w = (backupReg0f * R2f.y + PV0f.z);
R126f.z = backupReg1f + R9f.x;
PS1f = R126f.z;
// 4
backupReg0f = R9f.x;
R9f.x = R0f.x + PS1f;
R9f.y = R0f.y + R127f.w;
R2f.z = R0f.x + -(PS1f);
R2f.w = R0f.y + -(R127f.w);
PS0f = backupReg0f * intBitsToFloat(uf_remappedPS[0].z);
// 5
PV1f.x = R4f.w * intBitsToFloat(uf_remappedPS[0].z);
R4f.y = R3f.z * intBitsToFloat(uf_remappedPS[1].y);
R4f.z = PS0f * intBitsToFloat(uf_remappedPS[0].z);
PV1f.z = R4f.z;
PV1f.w = R126f.z + PS0f;
// 6
R2f.x = R0f.x + PV1f.w;
R3f.y = PV1f.x * intBitsToFloat(uf_remappedPS[0].z);
PV0f.y = R3f.y;
PV0f.z = R127f.w + PV1f.x;
R4f.w = R0f.x + -(PV1f.w);
R1f.x = PV1f.w + PV1f.z;
PS0f = R1f.x;
// 7
R4f.x = R0f.y + -(PV0f.z);
R2f.y = R0f.y + PV0f.z;
R10f.z = R0f.x + PS0f;
R1f.w = PV0f.z + PV0f.y;
R5f.x = R0f.x + -(PS0f);
PS1f = R5f.x;
R32f.xyz = (texture(textureUnitPS0, R9f.xy).xyz);
R9f.xyz = (texture(textureUnitPS0, R2f.zw).xyz);
R33f.xyz = (texture(textureUnitPS0, R2f.xy).xyz);
R2f.xyz = (texture(textureUnitPS0, R4f.wx).xyz);
// 0
R127f.x = max(R1f.y, R9f.x);
R123f.y = (R6f.y * R32f.x + R3f.x);
PV0f.y = R123f.y;
R123f.z = (R6f.y * R32f.y + R0f.w);
PV0f.z = R123f.z;
R123f.w = (R6f.y * R32f.z + R1f.z);
PV0f.w = R123f.w;
R127f.w = R4f.z * intBitsToFloat(uf_remappedPS[0].z);
PS0f = R127f.w;
// 1
R123f.x = (R6f.y * R9f.y + PV0f.z);
PV1f.x = R123f.x;
R123f.y = (R6f.y * R9f.x + PV0f.y);
PV1f.y = R123f.y;
R126f.z = max(R8f.y, R9f.z);
PV1f.w = max(R8f.z, R9f.y);
R122f.x = (R6f.y * R9f.z + PV0f.w);
PS1f = R122f.x;
// 2
R123f.x = (R3f.z * R33f.z + PS1f);
PV0f.x = R123f.x;
R6f.y = max(R127f.x, R2f.x);
R123f.z = (R3f.z * R33f.y + PV1f.x);
PV0f.z = R123f.z;
R123f.w = (R3f.z * R33f.x + PV1f.y);
PV0f.w = R123f.w;
R4f.x = max(PV1f.w, R2f.y);
PS0f = R4f.x;
// 3
backupReg0f = R2f.y;
backupReg1f = R3f.z;
R9f.x = (R3f.z * R2f.z + PV0f.x);
R2f.y = (R3f.z * backupReg0f + PV0f.z);
R3f.z = (backupReg1f * R2f.x + PV0f.w);
R0f.w = max(R126f.z, R2f.z);
R10f.y = R0f.y + R1f.w;
PS1f = R10f.y;
// 4
backupReg0f = R127f.w;
backupReg0f = R127f.w;
R8f.x = R4f.y * intBitsToFloat(uf_remappedPS[1].y);
PV0f.x = R8f.x;
R5f.y = R0f.y + -(R1f.w);
PV0f.z = R3f.y * intBitsToFloat(uf_remappedPS[0].z);
R127f.w = R1f.x + backupReg0f;
PV0f.w = R127f.w;
R3f.x = backupReg0f * intBitsToFloat(uf_remappedPS[0].z);
PS0f = R3f.x;
// 5
R1f.x = R0f.x + PV0f.w;
R3f.y = PV0f.x * intBitsToFloat(uf_remappedPS[1].y);
PV1f.y = R3f.y;
R2f.z = R0f.x + -(PV0f.w);
PV1f.w = R1f.w + PV0f.z;
R1f.w = PV0f.z * intBitsToFloat(uf_remappedPS[0].z);
PS1f = R1f.w;
// 6
R2f.x = R0f.y + -(PV1f.w);
R1f.y = R0f.y + PV1f.w;
R8f.z = R127f.w + R3f.x;
R4f.w = PV1f.w + PS1f;
R9f.z = PV1f.y * intBitsToFloat(uf_remappedPS[1].y);
PS0f = R9f.z;
R34f.xyz = (texture(textureUnitPS0, R10f.zy).xyz);
R5f.xyz = (texture(textureUnitPS0, R5f.xy).xyz);
R35f.xyz = (texture(textureUnitPS0, R1f.xy).xyz);
R1f.xyz = (texture(textureUnitPS0, R2f.zx).xyz);
// 0
R123f.x = (R4f.y * R34f.z + R9f.x);
PV0f.x = R123f.x;
R126f.y = max(R0f.w, R5f.z);
R123f.z = (R4f.y * R34f.x + R3f.z);
PV0f.z = R123f.z;
R123f.w = (R4f.y * R34f.y + R2f.y);
PV0f.w = R123f.w;
R127f.y = R3f.x * intBitsToFloat(uf_remappedPS[0].z);
PS0f = R127f.y;
// 1
R123f.x = (R4f.y * R5f.y + PV0f.w);
PV1f.x = R123f.x;
PV1f.y = max(R4f.x, R5f.y);
PV1f.z = max(R6f.y, R5f.x);
R123f.w = (R4f.y * R5f.x + PV0f.z);
PV1f.w = R123f.w;
R122f.x = (R4f.y * R5f.z + PV0f.x);
PS1f = R122f.x;
// 2
R123f.x = (R8f.x * R35f.x + PV1f.w);
PV0f.x = R123f.x;
R5f.y = max(PV1f.z, R1f.x);
R123f.z = (R8f.x * R35f.y + PV1f.x);
PV0f.z = R123f.z;
R123f.w = (R8f.x * R35f.z + PS1f);
PV0f.w = R123f.w;
R3f.z = max(PV1f.y, R1f.y);
PS0f = R3f.z;
// 3
backupReg0f = R1f.z;
R3f.x = (R8f.x * R1f.x + PV0f.x);
R6f.y = max(R126f.y, R1f.z);
R1f.z = (R8f.x * backupReg0f + PV0f.w);
R0f.w = (R8f.x * R1f.y + PV0f.z);
R1f.x = R0f.x + R8f.z;
PS1f = R1f.x;
// 4
backupReg0f = R8f.z;
R8f.x = R0f.x + -(R8f.z);
R1f.y = R0f.y + R4f.w;
R8f.z = R0f.y + -(R4f.w);
R127f.w = R1f.w * intBitsToFloat(uf_remappedPS[0].z);
PV0f.w = R127f.w;
R126f.w = backupReg0f + R127f.y;
PS0f = R126f.w;
// 5
R4f.x = R0f.x + PS0f;
R2f.y = R9f.z * intBitsToFloat(uf_remappedPS[1].y);
PV1f.y = R2f.y;
R2f.z = R4f.w + PV0f.w;
PV1f.z = R2f.z;
R5f.w = R0f.x + -(PS0f);
R5f.z = R127f.y * intBitsToFloat(uf_remappedPS[0].z);
PS1f = R5f.z;
// 6
R5f.x = R0f.y + -(PV1f.z);
R4f.y = R0f.y + PV1f.z;
R10f.z = R127f.w * intBitsToFloat(uf_remappedPS[0].z);
R4f.w = R126f.w + PS1f;
R6f.x = PV1f.y * intBitsToFloat(uf_remappedPS[1].y);
PS0f = R6f.x;
R36f.xyz = (texture(textureUnitPS0, R1f.xy).xyz);
R8f.xyz = (texture(textureUnitPS0, R8f.xz).xyz);
R37f.xyz = (texture(textureUnitPS0, R4f.xy).xyz);
R4f.xyz = (texture(textureUnitPS0, R5f.wx).xyz);
// 0
R127f.x = max(R5f.y, R8f.x);
R123f.y = (R3f.y * R36f.x + R3f.x);
PV0f.y = R123f.y;
R123f.z = (R3f.y * R36f.y + R0f.w);
PV0f.z = R123f.z;
R123f.w = (R3f.y * R36f.z + R1f.z);
PV0f.w = R123f.w;
R127f.w = R5f.z * intBitsToFloat(uf_remappedPS[0].z);
PS0f = R127f.w;
// 1
R123f.x = (R3f.y * R8f.y + PV0f.z);
PV1f.x = R123f.x;
R123f.y = (R3f.y * R8f.x + PV0f.y);
PV1f.y = R123f.y;
R126f.z = max(R6f.y, R8f.z);
PV1f.w = max(R3f.z, R8f.y);
R122f.x = (R3f.y * R8f.z + PV0f.w);
PS1f = R122f.x;
// 2
R123f.x = (R9f.z * R37f.z + PS1f);
PV0f.x = R123f.x;
R8f.y = max(R127f.x, R4f.x);
R123f.z = (R9f.z * R37f.y + PV1f.x);
PV0f.z = R123f.z;
R123f.w = (R9f.z * R37f.x + PV1f.y);
PV0f.w = R123f.w;
R5f.x = max(PV1f.w, R4f.y);
PS0f = R5f.x;
// 3
backupReg0f = R4f.z;
R8f.x = (R9f.z * R4f.z + PV0f.x);
R6f.y = (R9f.z * R4f.y + PV0f.z);
R4f.z = (R9f.z * R4f.x + PV0f.w);
R0f.w = max(R126f.z, backupReg0f);
R4f.x = R0f.x + R4f.w;
PS1f = R4f.x;
// 4
R2f.x = R0f.x + -(R4f.w);
R5f.y = R4f.w + R127f.w;
PV0f.y = R5f.y;
R126f.z = R10f.z * intBitsToFloat(uf_remappedPS[0].z);
PV0f.z = R126f.z;
PV0f.w = R2f.z + R10f.z;
R7f.y = R6f.x * intBitsToFloat(uf_remappedPS[1].y);
PS0f = R7f.y;
// 5
R3f.x = R0f.x + PV0f.y;
R4f.y = R0f.y + PV0f.w;
R2f.z = R0f.y + -(PV0f.w);
R4f.w = PV0f.w + PV0f.z;
PV1f.w = R4f.w;
R10f.x = R0f.x + -(PV0f.y);
PS1f = R10f.x;
// 6
R1f.x = R127f.w * intBitsToFloat(uf_remappedPS[0].z);
R3f.y = R0f.y + PV1f.w;
R10f.z = R0f.y + -(PV1f.w);
R5f.w = R126f.z * intBitsToFloat(uf_remappedPS[0].z);
R3f.z = R7f.y * intBitsToFloat(uf_remappedPS[1].y);
PS0f = R3f.z;
R38f.xyz = (texture(textureUnitPS0, R4f.xy).xyz);
R9f.xyz = (texture(textureUnitPS0, R2f.xz).xyz);
R39f.xyz = (texture(textureUnitPS0, R3f.xy).xyz);
R10f.xyz = (texture(textureUnitPS0, R10f.xz).xyz);
// 0
R123f.x = (R2f.y * R38f.z + R8f.x);
PV0f.x = R123f.x;
R127f.y = max(R0f.w, R9f.z);
R123f.z = (R2f.y * R38f.x + R4f.z);
PV0f.z = R123f.z;
R123f.w = (R2f.y * R38f.y + R6f.y);
PV0f.w = R123f.w;
R127f.w = R4f.w + R5f.w;
PS0f = R127f.w;
// 1
R123f.x = (R2f.y * R9f.y + PV0f.w);
PV1f.x = R123f.x;
PV1f.y = max(R5f.x, R9f.y);
PV1f.z = max(R8f.y, R9f.x);
R123f.w = (R2f.y * R9f.x + PV0f.z);
PV1f.w = R123f.w;
R122f.x = (R2f.y * R9f.z + PV0f.x);
PS1f = R122f.x;
// 2
R123f.x = (R6f.x * R39f.x + PV1f.w);
PV0f.x = R123f.x;
R8f.y = max(PV1f.z, R10f.x);
R123f.z = (R6f.x * R39f.y + PV1f.x);
PV0f.z = R123f.z;
R123f.w = (R6f.x * R39f.z + PS1f);
PV0f.w = R123f.w;
R4f.z = max(PV1f.y, R10f.y);
PS0f = R4f.z;
// 3
backupReg0f = R6f.x;
backupReg0f = R6f.x;
backupReg0f = R6f.x;
backupReg1f = R10f.y;
R6f.x = (backupReg0f * R10f.x + PV0f.x);
R10f.y = max(R127f.y, R10f.z);
R9f.z = (backupReg0f * R10f.z + PV0f.w);
R0f.w = (backupReg0f * backupReg1f + PV0f.z);
PS1f = R5f.y + R1f.x;
// 4
backupReg0f = R1f.x;
R1f.x = R0f.x + PS1f;
R1f.y = R0f.y + R127f.w;
R10f.z = R0f.x + -(PS1f);
R10f.w = R0f.y + -(R127f.w);
R122f.x = (backupReg0f * intBitsToFloat(uf_remappedPS[0].z) + PS1f);
PS0f = R122f.x;
// 5
R5f.x = R0f.x + PS0f;
PV1f.y = max(R11f.x, R12f.x);
R2f.z = R0f.x + -(PS0f);
R123f.w = (R5f.w * intBitsToFloat(uf_remappedPS[0].z) + R127f.w);
PV1f.w = R123f.w;
PS1f = max(R11f.y, R12f.y);
// 6
backupReg0f = R11f.z;
R0f.x = max(R13f.x, PV1f.y);
R5f.y = R0f.y + PV1f.w;
R11f.z = max(backupReg0f, R12f.z);
R5f.w = max(R13f.y, PS1f);
R2f.y = R0f.y + -(PV1f.w);
PS0f = R2f.y;
R12f.xyz = (texture(textureUnitPS0, R1f.xy).xyz);
R1f.xyz = (texture(textureUnitPS0, R10f.zw).xyz);
R5f.xyz = (texture(textureUnitPS0, R5f.xy).xyz);
R2f.xyz = (texture(textureUnitPS0, R2f.zy).xyz);
// 0
backupReg0f = R0f.x;
PV0f.x = max(R14f.y, R5f.w);
PV0f.y = max(R14f.x, backupReg0f);
PV0f.z = max(R13f.z, R11f.z);
R127f.w = (R7f.y * R12f.y + R0f.w);
// 1
R127f.x = (R7f.y * R12f.x + R6f.x);
PV1f.y = max(R15f.y, PV0f.x);
PV1f.z = max(R15f.x, PV0f.y);
PV1f.w = max(R14f.z, PV0f.z);
R126f.w = (R7f.y * R12f.z + R9f.z);
PS1f = R126f.w;
// 2
PV0f.x = max(R15f.z, PV1f.w);
R126f.y = max(R8f.y, R1f.x);
PV0f.z = max(R16f.y, PV1f.y);
PV0f.w = max(R16f.x, PV1f.z);
R125f.w = max(R4f.z, R1f.y);
PS0f = R125f.w;
// 3
PV1f.x = max(R17f.x, PV0f.w);
PV1f.y = max(R16f.z, PV0f.x);
R127f.z = max(R10f.y, R1f.z);
PV1f.w = max(R17f.y, PV0f.z);
R127f.y = (R7f.y * R1f.x + R127f.x);
PS1f = R127f.y;
// 4
PV0f.x = max(R18f.y, PV1f.w);
PV0f.y = max(R18f.x, PV1f.x);
PV0f.z = max(R17f.z, PV1f.y);
R123f.w = (R7f.y * R1f.y + R127f.w);
PV0f.w = R123f.w;
R127f.w = (R7f.y * R1f.z + R126f.w);
PS0f = R127f.w;
// 5
R127f.x = (R3f.z * R5f.x + R127f.y);
PV1f.y = max(R19f.y, PV0f.x);
PV1f.z = max(R19f.x, PV0f.y);
PV1f.w = max(R18f.z, PV0f.z);
R126f.z = (R3f.z * R5f.y + PV0f.w);
PS1f = R126f.z;
// 6
PV0f.x = max(R19f.z, PV1f.w);
R127f.y = (R3f.z * R5f.z + R127f.w);
PV0f.z = max(R20f.y, PV1f.y);
PV0f.w = max(R20f.x, PV1f.z);
// 7
PV1f.x = max(R21f.x, PV0f.w);
PV1f.y = max(R20f.z, PV0f.x);
PV1f.w = max(R21f.y, PV0f.z);
// 8
PV0f.x = max(R22f.y, PV1f.w);
PV0f.y = max(R22f.x, PV1f.x);
PV0f.z = max(R21f.z, PV1f.y);
// 9
PV1f.y = max(R23f.y, PV0f.x);
PV1f.z = max(R23f.x, PV0f.y);
PV1f.w = max(R22f.z, PV0f.z);
// 10
PV0f.x = max(R23f.z, PV1f.w);
PV0f.z = max(R24f.y, PV1f.y);
PV0f.w = max(R24f.x, PV1f.z);
// 11
backupReg0f = R126f.z;
PV1f.x = max(R25f.x, PV0f.w);
PV1f.y = max(R24f.z, PV0f.x);
R126f.z = (R3f.z * R2f.x + R127f.x);
PV1f.w = max(R25f.y, PV0f.z);
R125f.z = (R3f.z * R2f.y + backupReg0f);
PS1f = R125f.z;
// 12
PV0f.x = max(R26f.y, PV1f.w);
PV0f.y = max(R26f.x, PV1f.x);
PV0f.z = max(R25f.z, PV1f.y);
R127f.w = (R3f.z * R2f.z + R127f.y);
// 13
PV1f.y = max(R27f.y, PV0f.x);
PV1f.z = max(R27f.x, PV0f.y);
PV1f.w = max(R26f.z, PV0f.z);
// 14
PV0f.x = max(R27f.z, PV1f.w);
PV0f.z = max(R28f.y, PV1f.y);
PV0f.w = max(R28f.x, PV1f.z);
// 15
PV1f.x = max(R29f.x, PV0f.w);
PV1f.y = max(R28f.z, PV0f.x);
PV1f.w = max(R29f.y, PV0f.z);
// 16
PV0f.x = max(R30f.y, PV1f.w);
PV0f.y = max(R30f.x, PV1f.x);
PV0f.z = max(R29f.z, PV1f.y);
R29f.w = 1.0;
// 17
PV1f.y = max(R31f.y, PV0f.x);
PV1f.z = max(R31f.x, PV0f.y);
PV1f.w = max(R30f.z, PV0f.z);
// 18
PV0f.x = max(R31f.z, PV1f.w);
PV0f.z = max(R32f.y, PV1f.y);
PV0f.w = max(R32f.x, PV1f.z);
// 19
PV1f.x = max(R33f.x, PV0f.w);
PV1f.y = max(R32f.z, PV0f.x);
PV1f.w = max(R33f.y, PV0f.z);
// 20
PV0f.x = max(R34f.y, PV1f.w);
PV0f.y = max(R34f.x, PV1f.x);
PV0f.z = max(R33f.z, PV1f.y);
// 21
PV1f.y = max(R35f.y, PV0f.x);
PV1f.z = max(R35f.x, PV0f.y);
PV1f.w = max(R34f.z, PV0f.z);
// 22
PV0f.x = max(R35f.z, PV1f.w);
PV0f.z = max(R36f.y, PV1f.y);
PV0f.w = max(R36f.x, PV1f.z);
// 23
PV1f.x = max(R37f.x, PV0f.w);
PV1f.y = max(R36f.z, PV0f.x);
PV1f.w = max(R37f.y, PV0f.z);
// 24
PV0f.x = max(R38f.y, PV1f.w);
PV0f.y = max(R38f.x, PV1f.x);
PV0f.z = max(R37f.z, PV1f.y);
// 25
PV1f.y = max(R39f.y, PV0f.x);
PV1f.z = max(R39f.x, PV0f.y);
PV1f.w = max(R38f.z, PV0f.z);
// 26
PV0f.x = max(R39f.z, PV1f.w);
PV0f.z = max(R12f.y, PV1f.y);
PV0f.w = max(R12f.x, PV1f.z);
// 27
PV1f.x = max(R5f.x, PV0f.w);
PV1f.y = max(R12f.z, PV0f.x);
PV1f.w = max(R5f.y, PV0f.z);
// 28
PV0f.x = max(R2f.y, PV1f.w);
PV0f.y = max(R2f.x, PV1f.x);
PV0f.z = max(R5f.z, PV1f.y);
// 29
PV1f.y = max(R125f.w, PV0f.x);
PV1f.z = max(R126f.y, PV0f.y);
PV1f.w = max(R2f.z, PV0f.z);
// 30
PV0f.x = max(R127f.z, PV1f.w);
PV0f.y = PV1f.z + -(R126f.z);
PV0f.w = PV1f.y + -(R125f.z);
// 31
R123f.x = (PV0f.w * intBitsToFloat(0x3ecccccd) + R125f.z);
PV1f.x = R123f.x;
R123f.y = (PV0f.y * intBitsToFloat(0x3ecccccd) + R126f.z);
PV1f.y = R123f.y;
PV1f.z = PV0f.x + -(R127f.w);
// 32
PV0f.y = PV1f.x * intBitsToFloat(uf_remappedPS[1].z);
PV0f.z = PV1f.y * intBitsToFloat(uf_remappedPS[1].z);
R123f.w = (PV1f.z * intBitsToFloat(0x3ecccccd) + R127f.w);
PV0f.w = R123f.w;
// 33
R2f.x = PV0f.w * intBitsToFloat(uf_remappedPS[1].z);
R29f.y = min(PV0f.y, intBitsToFloat(uf_remappedPS[1].w));
R29f.x = min(PV0f.z, intBitsToFloat(uf_remappedPS[1].w));
PS1f = R29f.x;
// 34
R29f.z = min(R2f.x, intBitsToFloat(uf_remappedPS[1].w));
// export
//passPixelColor0 = vec4(R29f.x, R29f.y, R29f.z, R29f.w);
}
