<?php
include 'Source/functions.php';
$fullWidth = $argv[1];
$fullHeight = $argv[2];
$scaleFactorX = always_decimal_format($fullWidth / 1280.0);
$scaleFactorY = always_decimal_format($fullHeight / 720.0);
?>

#version 420
#extension GL_ARB_texture_gather : enable
#define pow2(x) (x * x)

// shader d8e69e8df8c227f5 
// Bloom/blur 1st step, 1280->640->1280
// To do, go back and remove all test blurs.. 
uniform ivec4 uf_remappedPS[3];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0xf470a000 res 1280x720x1 dim 1 tm: 4 format 0816 compSel: 0 1 2 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 0
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0xf4386000 res 1280x720x1 dim 1 tm: 4 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 2 2 2 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
const float resScale = <?=$scaleFactorX?>;
const int sampleScale = <?=round($scaleFactorX)?>;
//const float resScale = 3.5; //3.5 looks nicer

highp float lineRand(vec2 co)
{
	highp float a = 12.9898;
	highp float b = 78.233;
	highp float c = 43758.5453;
	highp float dt = dot(co.xy, vec2(a, b));
	highp float sn = mod(dt, 3.14);
	return fract(sin(sn) * c);
}


// FabriceNeyret2, single pass gaussian by intermediate MIPmap level. https://www.shadertoy.com/view/ltScRG
// I hereby pledge my loyalty to  the FabriceNeyret2 fanclub, this is bloody beautiful! 

const int samples = 12 * sampleScale, //check if must scale to pascal levels
LOD = 2,         // gaussian done on MIPmap at scale LOD
sLOD = 1 << LOD; // tile size = 2^LOD
const float sigma = float(samples) * .25;

float gaussian(vec2 i) {
	return exp(-.5* dot(i /= sigma, i)) / (6.28 * sigma*sigma);
}

vec4 blur(sampler2D sp, vec2 U, vec2 scale) {
	vec4 O = vec4(0);
	int s = samples / sLOD;

	for (int i = 0; i < s*s; i++) {
		vec2 d = vec2(i%s, i / s)*float(sLOD) - float(samples) / 2.;
		O += gaussian(d) * textureLod(sp, U + scale * d, float(LOD));
	}

	return O / O.a;
}




int clampFI32(int v)
{
	if (v == 0x7FFFFFFF)
		return floatBitsToInt(1.0);
	else if (v == 0xFFFFFFFF)
		return floatBitsToInt(0.0);
	return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b) { return min(a*b, min(abs(a)*3.40282347E+38F, abs(b)*3.40282347E+38F)); }
void main()
{
	vec4 R0f = vec4(0.0);
	vec4 R1f = vec4(0.0);
	vec4 R2f = vec4(0.0);
	vec4 R3f = vec4(0.0);
	vec4 R4f = vec4(0.0);
	vec4 R5f = vec4(0.0);
	vec4 R6f = vec4(0.0);
	vec4 R7f = vec4(0.0);
	vec4 R123f = vec4(0.0);
	vec4 R127f = vec4(0.0);
	float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
	vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
	float PS0f = 0.0, PS1f = 0.0;
	vec4 tempf = vec4(0.0);
	float tempResultf;
	int tempResulti;
	ivec4 ARi = ivec4(0);
	bool predResult = true;
	vec3 cubeMapSTM;
	int cubeMapFaceId;
	R0f = passParameterSem0;
	R0f.xy = vec2((passParameterSem0.x + passParameterSem0.z), (passParameterSem0.y + passParameterSem0.w)); 

	 // 0
	R1f.x = R0f.x + intBitsToFloat(uf_remappedPS[0].x) / resScale;
	R1f.y = R0f.y + intBitsToFloat(uf_remappedPS[0].y) / resScale;
	R0f.z = R0f.x + intBitsToFloat(uf_remappedPS[0].z) / resScale;
	R0f.w = R0f.y + intBitsToFloat(uf_remappedPS[0].w) / resScale;
	// 1
	backupReg0f = R0f.x;
	backupReg1f = R0f.y;
	backupReg0f = R0f.x;
	backupReg1f = R0f.y;
	R0f.x = backupReg0f + intBitsToFloat(uf_remappedPS[1].x) / resScale;
	R0f.y = backupReg1f + intBitsToFloat(uf_remappedPS[1].y) / resScale;
	R1f.z = backupReg0f + intBitsToFloat(uf_remappedPS[1].z) / resScale;
	R1f.w = backupReg1f + intBitsToFloat(uf_remappedPS[1].w) / resScale;


	//color.a = 1.0;

	R2f.xyz = (texture(textureUnitPS1, R1f.xy).xyz);
	R3f.xyz = (texture(textureUnitPS1, R0f.zw).xyz);
	R4f.xyz = (texture(textureUnitPS1, R0f.xy).xyz);
	R5f.xyz = (texture(textureUnitPS1, R1f.zw).xyz);



	vec2 coord = passParameterSem0.xy*textureSize(textureUnitPS0, 0); // R0f.xy;// vec2(0.5, 0.5);

	vec2 ps = vec2(1.0) / textureSize(textureUnitPS0, 0);
	vec2 uv = coord * ps;

	R6f.xyzw = blur(textureUnitPS0, uv, ps);

//	R6f.xyz = blur(textureUnitPS0, uv, ps);
//	R6f.w = 1.0;
	R7f = R6f;
	R0f = R6f;
	R1f = R6f;


	tempf.x = dot(vec4(R2f.x, R2f.y, R2f.z, -0.0), vec4(intBitsToFloat(0x3e000000), intBitsToFloat(0x41ff0000), intBitsToFloat(0x45fe0100), 0.0));
	PV0f.x = tempf.x;
	PV0f.y = tempf.x;
	PV0f.z = tempf.x;
	PV0f.w = tempf.x;
	R127f.w = tempf.x;
	R127f.z = R6f.x + R7f.x;
	PS0f = R127f.z;
	// 1
	tempf.x = dot(vec4(R3f.x, R3f.y, R3f.z, -0.0), vec4(intBitsToFloat(0x3e000000), intBitsToFloat(0x41ff0000), intBitsToFloat(0x45fe0100), 0.0));
	PV1f.x = tempf.x;
	PV1f.y = tempf.x;
	PV1f.z = tempf.x;
	PV1f.w = tempf.x;
	R127f.y = R6f.y + R7f.y;
	PS1f = R127f.y;
	// 2
	tempf.x = dot(vec4(R4f.x, R4f.y, R4f.z, -0.0), vec4(intBitsToFloat(0x3e000000), intBitsToFloat(0x41ff0000), intBitsToFloat(0x45fe0100), 0.0));
	PV0f.x = tempf.x;
	PV0f.y = tempf.x;
	PV0f.z = tempf.x;
	PV0f.w = tempf.x;
	PS0f = R127f.w + PV1f.x;
	// 3
	tempf.x = dot(vec4(R5f.x, R5f.y, R5f.z, -0.0), vec4(intBitsToFloat(0x3e000000), intBitsToFloat(0x41ff0000), intBitsToFloat(0x45fe0100), 0.0));
	PV1f.x = tempf.x;
	PV1f.y = tempf.x;
	PV1f.z = tempf.x;
	PV1f.w = tempf.x;
	PS1f = PS0f + PV0f.x;
	// 4
	backupReg0f = R0f.y;
	PV0f.y = PS1f + PV1f.x;
	PV0f.z = R127f.y + backupReg0f;
	PV0f.w = R6f.z + R7f.z;
	// 5
	backupReg0f = R0f.z;
	R123f.x = (PV0f.y * 0.25 + -(intBitsToFloat(uf_remappedPS[2].x)));
	PV1f.x = R123f.x;
	PV1f.y = R127f.z + R0f.x;
	PV1f.z = PV0f.z + R1f.y;
	PV1f.w = PV0f.w + backupReg0f;
	// 6
	PV0f.x = PV1f.y + R1f.x;
	PV0f.y = PV1f.w + R1f.z;
	PV0f.z = PV1f.z * 0.25;
	PV0f.w = max(PV1f.x, -(PV1f.x));
	// 7
	PV1f.x = PV0f.x * 0.25;
	PV1f.y = PV0f.y * 0.25;
	PV1f.z = PV0f.w * intBitsToFloat(uf_remappedPS[2].y);
	PV1f.z = clamp(PV1f.z, 0.0, 1.0);
	PV1f.w = max(PV0f.z, 0.0);
	// 8
	PV0f.x = max(PV1f.y, 0.0);
	R1f.y = min(PV1f.w, 4.0);
	PV0f.z = max(PV1f.x, 0.0);
	tempResultf = log2(PV1f.z);
	if (isinf(tempResultf) == true) tempResultf = -3.40282347E+38F;
	PS0f = tempResultf;
	// 9
	PV1f.x = PS0f * intBitsToFloat(uf_remappedPS[2].w);
	R1f.z = min(PV0f.x, 4.0);
	R1f.x = min(PV0f.z, 4.0);
	PS1f = R1f.x;
	// 10
	PS0f = exp2(PV1f.x);
	// 11
	R1f.w = PS0f * intBitsToFloat(uf_remappedPS[2].z);
	// export
	passPixelColor0 = vec4(R1f.x, R1f.y, R1f.z, R1f.w);
}
