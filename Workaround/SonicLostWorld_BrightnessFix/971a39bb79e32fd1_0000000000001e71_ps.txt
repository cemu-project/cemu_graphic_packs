#version 420
#extension GL_ARB_texture_gather : enable
const float brightnessMultiplier = 1.6;
// shader 971a39bb79e32fd1
uniform ivec4 uf_remappedPS[8];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0xf4520000 res 1280x720x1 dim 1 tm: 4 format 0816 compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 0
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0xf48a8000 res 1280x720x1 dim 6 tm: 4 format 0011 compSel: 0 0 0 0 mipView: 0x0 (num 0x2) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 2 2 2 border: 0
layout(binding = 4) uniform sampler2D textureUnitPS4;// Tex4 addr 0x171f8800 res 1x1x1 dim 1 tm: 2 format 0806 compSel: 3 0 1 2 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler4 ClampX/Y/Z: 2 2 2 border: 0
layout(location = 0) in vec4 passParameterSem136;
layout(location = 1) in vec4 passParameterSem137;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem136;
R1f = passParameterSem137;
R2f.x = (texture(textureUnitPS1, R1f.xy).x);
R3f.xyz = (texture(textureUnitPS0, R1f.xy).xyz);
// 0
R1f.x = intBitsToFloat(0x3f000000);
PV0f.y = intBitsToFloat(uf_remappedPS[0].w) * 1.0;
PV0f.z = intBitsToFloat(uf_remappedPS[0].z) * 1.0;
PV0f.w = R2f.x + -(1.0);
// 1
R123f.x = (mul_nonIEEE(R2f.x,intBitsToFloat(uf_remappedPS[1].w)) + PV0f.y);
PV1f.x = R123f.x;
R1f.z = intBitsToFloat(((PV0f.w >= 0.0)?(floatBitsToInt(1.0)):(0)));
R123f.w = (mul_nonIEEE(R2f.x,intBitsToFloat(uf_remappedPS[1].z)) + PV0f.z);
PV1f.w = R123f.w;
// 2
R123f.y = (mul_nonIEEE(R0f.y,intBitsToFloat(uf_remappedPS[2].w)) + PV1f.x);
PV0f.y = R123f.y;
R123f.z = (mul_nonIEEE(R0f.y,intBitsToFloat(uf_remappedPS[2].z)) + PV1f.w);
PV0f.z = R123f.z;
// 3
R123f.x = (mul_nonIEEE(R0f.x,intBitsToFloat(uf_remappedPS[3].w)) + PV0f.y);
PV1f.x = R123f.x;
R0f.w = (mul_nonIEEE(R0f.x,intBitsToFloat(uf_remappedPS[3].z)) + PV0f.z);
// 4
R1f.w = intBitsToFloat(uf_remappedPS[4].x) + intBitsToFloat(uf_remappedPS[4].w);
R0f.z = 1.0 / PV1f.x;
PS0f = R0f.z;
R1f.x = (texture(textureUnitPS4, R1f.xx).x);
// 0
PV0f.x = -(R1f.w) + intBitsToFloat(uf_remappedPS[4].z);
PV0f.y = R0f.w * R0f.z;
R127f.z = R1f.x + intBitsToFloat(0x3a83126f);
// 1
PV1f.y = -(PV0f.y) + -(R1f.w);
PS1f = 1.0 / PV0f.x;
// 2
R127f.w = mul_nonIEEE(PS1f, PV1f.y);
R127f.w = clamp(R127f.w, 0.0, 1.0);
PV0f.w = R127f.w;
R126f.w = 1.0 / R127f.z;
PS0f = R126f.w;
// 3
R123f.x = (mul_nonIEEE(PV0f.w,intBitsToFloat(uf_remappedPS[5].y)) + intBitsToFloat(uf_remappedPS[6].y));
R123f.x = clamp(R123f.x, 0.0, 1.0);
PV1f.x = R123f.x;
// 4
R127f.y = (mul_nonIEEE(R127f.w,intBitsToFloat(uf_remappedPS[5].w)) + intBitsToFloat(uf_remappedPS[6].w));
R127f.y = clamp(R127f.y, 0.0, 1.0);
R123f.z = (mul_nonIEEE(R127f.w,intBitsToFloat(uf_remappedPS[5].z)) + intBitsToFloat(uf_remappedPS[6].z));
R123f.z = clamp(R123f.z, 0.0, 1.0);
PV0f.z = R123f.z;
PV0f.w = -(PV1f.x) + 1.0;
// 5
PV1f.x = min(PV0f.z, PV0f.w);
PV1f.z = R126f.w * intBitsToFloat(uf_remappedPS[7].x);
// 6
PV0f.y = max(PV1f.z, intBitsToFloat(0x3d800000));
PV0f.z = R127f.y + PV1f.x;
// 7
PV1f.x = min(PV0f.y, intBitsToFloat(0x41800000));
R127f.y = min(PV0f.z, intBitsToFloat(0x3f7efeff));
PV1f.y = R127f.y;
// 8
backupReg0f = R3f.x;
backupReg1f = R3f.y;
backupReg2f = R3f.z;
R3f.x = mul_nonIEEE(backupReg0f, PV1f.x);
R3f.y = mul_nonIEEE(backupReg1f, PV1f.x);
R3f.z = mul_nonIEEE(backupReg2f, PV1f.x);
PV0f.w = -(PV1f.y) + 1.0;
// 9
R3f.w = (mul_nonIEEE(PV0f.w,R1f.z) + R127f.y);
// export
passPixelColor0 = vec4(R3f.x, R3f.y, R3f.z, R3f.w)*brightnessMultiplier;
}
