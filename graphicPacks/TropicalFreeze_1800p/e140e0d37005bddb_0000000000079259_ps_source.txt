#version 400 //DC later levels
#extension GL_ARB_texture_gather : enable
const float overwriteWidth = 3200.0;  //overwidth value.0 
const float overwriteHeight = 1800.0;
// shader e140e0d37005bddb
uniform ivec4 uf_remappedPS[36];
uniform sampler2D textureUnitPS0;// Tex0 addr 0xf4a8c800 res 1280x720x1 dim 1 tm: 4 format 080e compSel: 0 0 0 0 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 0
uniform sampler2D textureUnitPS1;// Tex1 addr 0x3ab78000 res 512x512x1 dim 1 tm: 4 format 0035 compSel: 0 1 4 5 mipView: 0x0 (num 0xa) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 0 0 0 border: 0
uniform sampler2D textureUnitPS2;// Tex2 addr 0x30060000 res 512x512x1 dim 1 tm: 4 format 0035 compSel: 0 1 4 5 mipView: 0x0 (num 0xa) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 0 0 0 border: 0
uniform samplerCubeArray textureUnitPS3;// Tex3 addr 0x2b630000 res 128x128x1 dim 3 tm: 4 format 0033 compSel: 0 1 2 3 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x6) Sampler3 ClampX/Y/Z: 2 2 2 border: 0
uniform sampler2D textureUnitPS4;// Tex4 addr 0xf4708800 res 1280x720x1 dim 1 tm: 4 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler4 ClampX/Y/Z: 2 2 2 border: 0
in vec4 passParameter0;
in vec4 passParameter1;
in vec4 passParameter2;
in vec4 passParameter3;
in vec4 passParameter4;
in vec4 passParameter5;
layout(location = 0) out vec4 passPixelColor0;
void redcCUBE(vec4 src0, vec4 src1, inout vec3 stm, inout int faceId)
{
// stm -> x .. s, y .. t, z .. MajorAxis*2.0
vec3 inputCoord = normalize(vec3(src1.y, src1.x, src0.x));
float rx = inputCoord.x;
float ry = inputCoord.y;
float rz = inputCoord.z;
if( abs(rx) > abs(ry) && abs(rx) > abs(rz) )
{
stm.z = rx*2.0;
stm.xy = vec2(ry,rz);	
if( rx >= 0.0 )
{
faceId = 0;
}
else
{
faceId = 1;
}
}
else if( abs(ry) > abs(rx) && abs(ry) > abs(rz) )
{
stm.z = ry*2.0;
stm.xy = vec2(rx,rz);	
if( ry >= 0.0 )
{
faceId = 2;
}
else
{
faceId = 3;
}
}
else //if( abs(rz) > abs(ry) && abs(rz) > abs(rx) )
{
stm.z = rz*2.0;
stm.xy = vec2(rx,ry);	
if( rz >= 0.0 )
{
faceId = 4;
}
else
{
faceId = 5;
}
}
}
vec3 redcCUBEReverse(vec2 st, int faceId)
{
st.yx = st.xy;
vec3 v;
float majorAxis = 1.0;
if( faceId == 0 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = 1.0;
}
else if( faceId == 1 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = -1.0;
}
else if( faceId == 2 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = 1.0;
}
else if( faceId == 3 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = -1.0;
}
else if( faceId == 4 )
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = 1.0;
}
else
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = -1.0;
}
return v;
}
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R8f = vec4(0.0);
vec4 R9f = vec4(0.0);
vec4 R10f = vec4(0.0);
vec4 R11f = vec4(0.0);
vec4 R122f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R124f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
float cubeMapArrayIndex3 = 0.0;
R5f = gl_FragCoord.xyzw;
R0f = passParameter1;
R1f = passParameter2;
R2f = passParameter3;
R3f = passParameter4;
R4f = passParameter5;
R6f.xy = (texture(textureUnitPS1, R4f.xy).xy);
R4f.xy = (texture(textureUnitPS2, R4f.zw).xy);
// 0
vec2 scaleFactor = vec2(overwriteWidth,overwriteHeight)/vec2(1280.0,720.0);
R5f.xy = R5f.xy / scaleFactor;
R9f.x = mul_nonIEEE(R5f.x, intBitsToFloat(uf_remappedPS[0].x));
PV0f.x = R9f.x;
R9f.y = mul_nonIEEE(R5f.y, intBitsToFloat(uf_remappedPS[0].y));
PV0f.y = R9f.y;
R123f.z = (R6f.x * intBitsToFloat(0x3fff0000) + -(1.0));
PV0f.z = R123f.z;
R123f.w = (R4f.x * intBitsToFloat(0x3fff0000) + -(1.0));
PV0f.w = R123f.w;
R127f.z = (R6f.y * intBitsToFloat(0x3fff0000) + -(1.0));
PS0f = R127f.z;
// 1
R123f.x = (R4f.y * intBitsToFloat(0x3fff0000) + -(1.0));
PV1f.x = R123f.x;
PV1f.y = mul_nonIEEE(PV0f.z, PV0f.z);
PV1f.z = mul_nonIEEE(PV0f.w, PV0f.w);
R4f.w = PV0f.z + PV0f.w;
PV1f.w = R4f.w;
R127f.y = 1.0 / R1f.z;
PS1f = R127f.y;
// 2
R123f.x = (PV1f.x * PV1f.x + PV1f.z);
R123f.x = clamp(R123f.x, 0.0, 1.0);
PV0f.x = R123f.x;
R6f.y = R127f.z + PV1f.x;
PV0f.y = R6f.y;
R5f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].w), 1.0);
PV0f.z = R5f.z;
R123f.w = (R127f.z * R127f.z + PV1f.y);
R123f.w = clamp(R123f.w, 0.0, 1.0);
PV0f.w = R123f.w;
R6f.z = R1f.y * PS1f;
PS0f = R6f.z;
// 3
PV1f.x = -(PV0f.w) + 1.0;
R7f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].z), 1.0);
PV1f.y = R7f.y;
R7f.z = R1f.x * R127f.y;
PV1f.z = R7f.z;
R127f.w = -(PV0f.x) + 1.0;
PV1f.w = R127f.w;
R126f.z = max(R9f.x, -(R9f.x));
R126f.z /= 2.0;
PS1f = R126f.z;
// 4
backupReg0f = R0f.x;
backupReg0f = R0f.x;
backupReg1f = R0f.y;
backupReg1f = R0f.y;
backupReg2f = R0f.z;
backupReg2f = R0f.z;
tempf.x = backupReg0f * backupReg0f + backupReg1f * backupReg1f + backupReg2f * backupReg2f + intBitsToFloat(0x80000000) * 0.0;
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R126f.w = tempf.x;
R127f.z = sqrt(PV1f.x);
PS0f = R127f.z;
// 5
tempf.x = R2f.x * R2f.x + R2f.y * R2f.y + R2f.z * R2f.z + intBitsToFloat(0x80000000) * 0.0;
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R4f.y = tempf.x;
PS1f = sqrt(R127f.w);
// 6
R5f.x = -(R3f.x) + intBitsToFloat(uf_remappedPS[2].x);
PV0f.x = R5f.x;
R8f.y = R126f.z + -(intBitsToFloat(0x3ee66666));
PV0f.y = R8f.y;
R4f.z = R127f.z + PS1f;
PV0f.z = R4f.z;
R0f.w = max(R9f.y, -(R9f.y));
R0f.w /= 2.0;
PV0f.w = R0f.w;
tempResultf = 1.0 / sqrt(R126f.w);
R5f.y = tempResultf;
PS0f = R5f.y;
R4f.x = (texture(textureUnitPS0, R9f.xy).x);
// 0
tempf.x = R4f.w * R4f.w + R6f.y * R6f.y + R4f.z * R4f.z + intBitsToFloat(0x80000000) * 0.0;
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
tempResultf = 1.0 / sqrt(R4f.y);
R127f.z = tempResultf;
PS0f = R127f.z;
// 1
backupReg0f = R0f.x;
R0f.x = mul_nonIEEE(R0f.y, R5f.y);
PV1f.x = R0f.x;
R124f.y = mul_nonIEEE(R2f.z, PS0f);
PV1f.y = R124f.y;
R125f.z = mul_nonIEEE(backupReg0f, R5f.y);
PV1f.z = R125f.z;
R5f.w = mul_nonIEEE(R0f.z, R5f.y);
PV1f.w = R5f.w;
tempResultf = 1.0 / sqrt(PV0f.x);
R126f.z = tempResultf;
PS1f = R126f.z;
// 2
R127f.x = mul_nonIEEE(R2f.x, R127f.z);
PV0f.x = R127f.x;
R127f.y = mul_nonIEEE(R4f.z, PS1f);
PV0f.y = R127f.y;
PV0f.z = mul_nonIEEE(PV1f.x, PV1f.y);
R127f.w = mul_nonIEEE(R2f.y, R127f.z);
PV0f.w = R127f.w;
R126f.y = mul_nonIEEE(R6f.y, PS1f);
PS0f = R126f.y;
// 3
PV1f.x = mul_nonIEEE(R5f.w, PV0f.x);
R123f.y = (-(PV0f.w) * R5f.w + PV0f.z);
PV1f.y = R123f.y;
PV1f.z = mul_nonIEEE(R125f.z, PV0f.y);
PV1f.w = mul_nonIEEE(R125f.z, PV0f.w);
R126f.x = mul_nonIEEE(R4f.w, R126f.z);
PS1f = R126f.x;
// 4
backupReg0f = R0f.x;
backupReg0f = R0f.x;
backupReg1f = R127f.y;
PV0f.x = mul_nonIEEE(backupReg0f, R127f.y);
R127f.y = (-(R127f.x) * backupReg0f + PV1f.w);
PV0f.y = R127f.y;
R123f.z = (-(R124f.y) * R125f.z + PV1f.x);
PV0f.z = R123f.z;
R126f.w = (R126f.y * PV1f.y + PV1f.z);
PV0f.w = R126f.w;
R125f.y = mul_nonIEEE(R5f.w, backupReg1f);
PS0f = R125f.y;
// 5
tempf.x = R3f.x * R3f.x + R3f.y * R3f.y + R3f.z * R3f.z + intBitsToFloat(0x80000000) * 0.0;
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R122f.x = (R126f.y * PV0f.z + PV0f.x);
PS1f = R122f.x;
// 6
R125f.x = (R4f.x * intBitsToFloat(0x40000000) + -(1.0));
PV0f.x = R125f.x;
R2f.y = (R126f.x * R127f.x + R126f.w);
PV0f.y = R2f.y;
PV0f.z = R0f.w + -(intBitsToFloat(0x3ee66666));
R7f.w = (R126f.x * R127f.w + PS1f);
PV0f.w = R7f.w;
tempResultf = 1.0 / sqrt(PV1f.x);
R127f.x = tempResultf;
PS0f = R127f.x;
// 7
R123f.x = (R126f.y * R127f.y + R125f.y);
PV1f.x = R123f.x;
R123f.y = (PV0f.x * intBitsToFloat(uf_remappedPS[3].w) + R5f.z);
PV1f.y = R123f.y;
R2f.z = mul_nonIEEE(R3f.z, PS0f);
PV1f.z = R2f.z;
R6f.w = mul_nonIEEE(R3f.x, PS0f);
PV1f.w = R6f.w;
PS1f = PV0f.z * intBitsToFloat(0x41a00000);
PS1f = clamp(PS1f, 0.0, 1.0);
// 8
R6f.x = mul_nonIEEE(R3f.y, R127f.x);
PV0f.x = R6f.x;
PV0f.y = mul_nonIEEE(R2f.y, PV1f.w);
R4f.z = (R126f.x * R124f.y + PV1f.x);
PV0f.z = R4f.z;
R123f.w = (R6f.z * intBitsToFloat(uf_remappedPS[4].w) + PV1f.y);
PV0f.w = R123f.w;
R127f.x = -(PS1f) + 1.0;
PS0f = R127f.x;
// 9
R123f.x = (R7f.w * PV0f.x + PV0f.y);
PV1f.x = R123f.x;
R123f.y = (R125f.x * intBitsToFloat(uf_remappedPS[3].z) + R7f.y);
PV1f.y = R123f.y;
R123f.z = (R7f.z * intBitsToFloat(uf_remappedPS[5].w) + PV0f.w);
PV1f.z = R123f.z;
PV1f.w = R8f.y * intBitsToFloat(0x41a00000);
PV1f.w = clamp(PV1f.w, 0.0, 1.0);
R124f.y = mul_nonIEEE(R5f.x, R5f.x);
PS1f = R124f.y;
// 10
R123f.x = (R6f.z * intBitsToFloat(uf_remappedPS[4].z) + PV1f.y);
PV0f.x = R123f.x;
R127f.y = -(PV1f.w) + 1.0;
PV0f.y = R127f.y;
R6f.z = -(R3f.y) + intBitsToFloat(uf_remappedPS[2].y);
PV0f.z = R6f.z;
R123f.w = (R4f.z * R2f.z + PV1f.x)*2.0;
PV0f.w = R123f.w;
R127f.w = 1.0 / PV1f.z;
PS0f = R127f.w;
// 11
R125f.x = (-(R7f.w) * PV0f.w + R6f.x);
PV1f.x = R125f.x;
R123f.y = (R7f.z * intBitsToFloat(uf_remappedPS[5].z) + PV0f.x);
PV1f.y = R123f.y;
R123f.z = (-(R2f.y) * PV0f.w + R6f.w);
PV1f.z = R123f.z;
R126f.w = (-(R4f.z) * PV0f.w + R2f.z);
PV1f.w = R126f.w;
R7f.y = -(R3f.x) + intBitsToFloat(uf_remappedPS[6].x);
PS1f = R7f.y;
// 12
PV0f.x = mul_nonIEEE(PV1f.z, intBitsToFloat(uf_remappedPS[7].z));
PV0f.y = mul_nonIEEE(PV1f.z, intBitsToFloat(uf_remappedPS[7].y));
R126f.z = PV1f.y * R127f.w;
PV0f.z = R126f.z;
PV0f.w = mul_nonIEEE(PV1f.z, intBitsToFloat(uf_remappedPS[7].x));
R126f.x = (R6f.z * R6f.z + R124f.y);
PS0f = R126f.x;
// 13
R123f.x = (R125f.x * intBitsToFloat(uf_remappedPS[8].y) + PV0f.y);
PV1f.x = R123f.x;
R123f.y = (R125f.x * intBitsToFloat(uf_remappedPS[8].z) + PV0f.x);
PV1f.y = R123f.y;
R123f.z = (R125f.x * intBitsToFloat(uf_remappedPS[8].x) + PV0f.w);
PV1f.z = R123f.z;
R127f.w = mul_nonIEEE(R7f.y, R7f.y);
PV1f.w = R127f.w;
R124f.y = 1.0 / -(PV0f.z);
PS1f = R124f.y;
// 14
R123f.x = (R126f.w * intBitsToFloat(uf_remappedPS[9].x) + PV1f.z);
PV0f.x = R123f.x;
R123f.y = (R126f.w * intBitsToFloat(uf_remappedPS[9].y) + PV1f.x);
PV0f.y = R123f.y;
R123f.z = (R126f.w * intBitsToFloat(uf_remappedPS[9].z) + PV1f.y);
PV0f.z = R123f.z;
R3f.w = mul_nonIEEE(R125f.z, R6f.w);
PV0f.w = R3f.w;
R8f.w = -(R1f.w) + -(R126f.z);
PS0f = R8f.w;
// 15
redcCUBE(vec4(PV0f.z,PV0f.z,PV0f.x,PV0f.y),vec4(PV0f.y,PV0f.x,PV0f.z,PV0f.z),cubeMapSTM,cubeMapFaceId);
R1f.x = cubeMapSTM.x;
R1f.y = cubeMapSTM.y;
R1f.z = cubeMapSTM.z;
R1f.w = intBitsToFloat(cubeMapFaceId);
PV1f.x = R1f.x;
PV1f.y = R1f.y;
PV1f.z = R1f.z;
PV1f.w = R1f.w;
PS1f = intBitsToFloat(uf_remappedPS[0].z) * R124f.y;
// 16
R4f.x = -(R3f.z) + intBitsToFloat(uf_remappedPS[2].z);
PV0f.x = R4f.x;
R8f.y = -(R3f.y) + intBitsToFloat(uf_remappedPS[6].y);
PV0f.y = R8f.y;
PV0f.z = mul_nonIEEE(R2f.y, PS1f);
PV0f.w = mul_nonIEEE(R7f.w, PS1f);
R126f.w = 1.0 / abs(PV1f.z);
PS0f = R126f.w;
// 17
backupReg0f = R9f.x;
backupReg1f = R9f.y;
backupReg2f = R1f.x;
R9f.x = (R127f.y * PV0f.z + backupReg0f);
PV1f.x = R9f.x;
R9f.y = (R127f.x * PV0f.w + backupReg1f);
PV1f.y = R9f.y;
R7f.z = (PV0f.y * PV0f.y + R127f.w);
PV1f.z = R7f.z;
R0f.w = -(R3f.z) + intBitsToFloat(uf_remappedPS[6].z);
PV1f.w = R0f.w;
R1f.x = (backupReg2f * PS0f + intBitsToFloat(0x3fc00000));
PS1f = R1f.x;
// 18
backupReg0f = R1f.y;
R2f.x = -(R3f.y) + intBitsToFloat(uf_remappedPS[10].y);
PV0f.x = R2f.x;
R1f.y = (backupReg0f * R126f.w + intBitsToFloat(0x3fc00000));
PV0f.y = R1f.y;
R5f.z = -(R3f.x) + intBitsToFloat(uf_remappedPS[10].x);
PV0f.z = R5f.z;
R2f.w = (R4f.x * R4f.x + R126f.x);
PV0f.w = R2f.w;
R4f.w = -(R3f.x) + intBitsToFloat(uf_remappedPS[11].x);
PS0f = R4f.w;
R11f.xyzw = (texture(textureUnitPS3, vec4(redcCUBEReverse(R1f.yx,floatBitsToInt(R1f.w)),cubeMapArrayIndex3)).xyzw);
R10f.xyz = (texture(textureUnitPS4, R9f.xy).xyz);
// 0
R127f.x = (R0f.w * R0f.w + R7f.z);
PV0f.x = R127f.x;
R127f.y = -(R3f.z) + intBitsToFloat(uf_remappedPS[10].z);
PV0f.y = R127f.y;
R125f.z = -(R3f.y) + intBitsToFloat(uf_remappedPS[11].y);
PV0f.z = R125f.z;
PV0f.w = mul_nonIEEE(R5f.z, R5f.z);
tempResultf = 1.0 / sqrt(R2f.w);
R126f.z = tempResultf;
PS0f = R126f.z;
// 1
PV1f.x = mul_nonIEEE(R4f.w, R4f.w);
R124f.y = mul_nonIEEE(R5f.x, PS0f);
PV1f.y = R124f.y;
R123f.z = (R2f.x * R2f.x + PV0f.w);
PV1f.z = R123f.z;
R125f.w = -(R3f.z) + intBitsToFloat(uf_remappedPS[11].z);
PV1f.w = R125f.w;
tempResultf = 1.0 / sqrt(PV0f.x);
R126f.w = tempResultf;
PS1f = R126f.w;
// 2
backupReg0f = R7f.y;
R124f.x = mul_nonIEEE(R6f.z, R126f.z);
PV0f.x = R124f.x;
R125f.y = (R127f.y * R127f.y + PV1f.z);
PV0f.y = R125f.y;
PV0f.z = mul_nonIEEE(R2f.y, -(PV1f.y));
R123f.w = (R125f.z * R125f.z + PV1f.x);
PV0f.w = R123f.w;
R7f.y = mul_nonIEEE(backupReg0f, PS1f);
PS0f = R7f.y;
// 3
backupReg0f = R4f.x;
R4f.x = mul_nonIEEE(backupReg0f, R126f.z);
PV1f.x = R4f.x;
R123f.y = (R7f.w * -(PV0f.x) + PV0f.z);
PV1f.y = R123f.y;
R6f.z = (R125f.w * R125f.w + PV0f.w);
PV1f.z = R6f.z;
R1f.w = mul_nonIEEE(R8f.y, R126f.w);
PV1f.w = R1f.w;
tempResultf = 1.0 / sqrt(PV0f.y);
R125f.x = tempResultf;
PS1f = R125f.x;
// 4
backupReg0f = R0f.w;
PV0f.x = mul_nonIEEE(R2f.y, -(R7f.y));
R126f.y = (R4f.z * -(PV1f.x) + PV1f.y)*2.0;
PV0f.y = R126f.y;
R7f.z = mul_nonIEEE(R5f.z, PS1f);
PV0f.z = R7f.z;
R0f.w = mul_nonIEEE(backupReg0f, R126f.w);
PV0f.w = R0f.w;
tempResultf = 1.0 / sqrt(PV1f.z);
R8f.y = tempResultf;
PS0f = R8f.y;
// 5
PV1f.x = mul_nonIEEE(R2f.y, -(PV0f.z));
R9f.y = mul_nonIEEE(R2f.x, R125f.x);
PV1f.y = R9f.y;
R1f.z = mul_nonIEEE(R4f.w, PS0f);
PV1f.z = R1f.z;
R123f.w = (R7f.w * -(R1f.w) + PV0f.x);
PV1f.w = R123f.w;
R126f.x = (-(R2f.y) * PV0f.y + -(R124f.y));
PS1f = R126f.x;
// 6
backupReg0f = R125f.z;
R2f.x = mul_nonIEEE(R127f.y, R125f.x);
PV0f.x = R2f.x;
PV0f.y = mul_nonIEEE(R2f.w, R126f.z);
R125f.z = (R4f.z * -(R0f.w) + PV1f.w)*2.0;
PV0f.z = R125f.z;
R127f.w = (R7f.w * -(PV1f.y) + PV1f.x);
PV0f.w = R127f.w;
R0f.z = mul_nonIEEE(backupReg0f, R8f.y);
PS0f = R0f.z;
// 7
PV1f.x = mul_nonIEEE(-(R6f.w), R126f.x);
R127f.y = (intBitsToFloat(uf_remappedPS[12].w) * PV0f.y + intBitsToFloat(uf_remappedPS[13].w));
R127f.y = clamp(R127f.y, 0.0, 1.0);
PV1f.y = R127f.y;
PV1f.z = mul_nonIEEE(R2f.y, -(R1f.z));
R123f.w = (-(R7f.w) * R126f.y + -(R124f.x));
PV1f.w = R123f.w;
R126f.z = mul_nonIEEE(R127f.x, R126f.w);
PS1f = R126f.z;
// 8
R123f.x = (-(R2f.y) * R125f.z + -(R7f.y));
PV0f.x = R123f.x;
PV0f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[14].x), R124f.y);
R127f.z = (R7f.w * -(R0f.z) + PV1f.z);
PV0f.z = R127f.z;
R2f.w = (R4f.z * -(R2f.x) + R127f.w)*2.0;
PV0f.w = R2f.w;
R127f.x = (-(R6f.x) * PV1f.w + PV1f.x);
PS0f = R127f.x;
// 9
R126f.x = (intBitsToFloat(uf_remappedPS[15].x) * R127f.y + intBitsToFloat(uf_remappedPS[15].y));
PV1f.x = R126f.x;
R1f.y = mul_nonIEEE(R125f.w, R8f.y);
PV1f.y = R1f.y;
R5f.z = (R0f.x * R6f.x + R3f.w);
PV1f.z = R5f.z;
R127f.w = (intBitsToFloat(uf_remappedPS[14].y) * R124f.x + PV0f.y);
PV1f.w = R127f.w;
R124f.z = mul_nonIEEE(-(R6f.w), PV0f.x);
PS1f = R124f.z;
// 10
PV0f.x = mul_nonIEEE(R2f.y, R124f.y);
R124f.y = (intBitsToFloat(uf_remappedPS[16].w) * R126f.z + intBitsToFloat(uf_remappedPS[17].w));
R124f.y = clamp(R124f.y, 0.0, 1.0);
PV0f.y = R124f.y;
R123f.z = (-(R4f.z) * R126f.y + -(R4f.x));
PV0f.z = R123f.z;
R125f.w = (-(R7f.w) * R125f.z + -(R1f.w));
PV0f.w = R125f.w;
R126f.w = (-(R4f.z) * R125f.z + -(R0f.w));
PS0f = R126f.w;
// 11
backupReg0f = R125f.y;
R123f.x = (-(R2f.y) * R2f.w + -(R7f.z));
PV1f.x = R123f.x;
R125f.y = (R7f.w * R124f.x + PV0f.x);
PV1f.y = R125f.y;
R126f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[18].x), R7f.y);
PV1f.z = R126f.z;
R124f.w = mul_nonIEEE(backupReg0f, R125f.x);
PV1f.w = R124f.w;
R3f.w = (-(R2f.z) * PV0f.z + R127f.x);
R3f.w = clamp(R3f.w, 0.0, 1.0);
PS1f = R3f.w;
// 12
R0f.x = (R4f.z * -(R1f.y) + R127f.z)*2.0;
PV0f.x = R0f.x;
R123f.y = (-(R6f.x) * R125f.w + R124f.z);
PV0f.y = R123f.y;
R127f.z = (intBitsToFloat(uf_remappedPS[14].z) * R4f.x + R127f.w);
PV0f.z = R127f.z;
R127f.w = (R127f.y * R126f.x + intBitsToFloat(uf_remappedPS[15].z));
PV0f.w = R127f.w;
R125f.w = mul_nonIEEE(-(R6f.w), PV1f.x);
PS0f = R125f.w;
// 13
backupReg0f = R126f.z;
backupReg1f = R126f.w;
R127f.x = (intBitsToFloat(uf_remappedPS[19].x) * R124f.y + intBitsToFloat(uf_remappedPS[19].y));
PV1f.x = R127f.x;
R126f.y = (R5f.w * R2f.z + R5f.z);
PV1f.y = R126f.y;
R126f.z = (intBitsToFloat(uf_remappedPS[18].y) * R1f.w + backupReg0f);
PV1f.z = R126f.z;
R126f.w = mul_nonIEEE(R2f.y, R7f.y);
PV1f.w = R126f.w;
R126f.x = (-(R2f.z) * backupReg1f + PV0f.y);
R126f.x = clamp(R126f.x, 0.0, 1.0);
PS1f = R126f.x;
// 14
R124f.x = mul_nonIEEE(R6f.z, R8f.y);
PV0f.x = R124f.x;
R123f.y = (-(R7f.w) * R2f.w + -(R9f.y));
PV0f.y = R123f.y;
R123f.z = (-(R2f.y) * R0f.x + -(R1f.z));
PV0f.z = R123f.z;
R5f.w = (intBitsToFloat(uf_remappedPS[20].w) * R124f.w + intBitsToFloat(uf_remappedPS[21].w));
R5f.w = clamp(R5f.w, 0.0, 1.0);
PV0f.w = R5f.w;
R125f.z = mul_nonIEEE(R2f.y, R7f.z);
PS0f = R125f.z;
// 15
backupReg0f = R127f.y;
R125f.x = (-(R6f.x) * PV0f.y + R125f.w);
PV1f.x = R125f.x;
R127f.y = mul_nonIEEE(-(R6f.w), PV0f.z);
PV1f.y = R127f.y;
R124f.z = (backupReg0f * R127f.w + intBitsToFloat(uf_remappedPS[15].w));
PV1f.z = R124f.z;
R127f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[22].x), R7f.z);
PV1f.w = R127f.w;
R7f.z = (R4f.z * R4f.x + R125f.y);
R7f.z = clamp(R7f.z, 0.0, 1.0);
PS1f = R7f.z;
// 16
backupReg0f = R127f.z;
backupReg1f = R126f.x;
R126f.x = (R7f.w * R1f.w + R126f.w);
PV0f.x = R126f.x;
R123f.y = (-(R7f.w) * R0f.x + -(R0f.z));
PV0f.y = R123f.y;
R127f.z = (intBitsToFloat(uf_remappedPS[2].w) * backupReg0f + intBitsToFloat(uf_remappedPS[14].w));
R127f.z = clamp(R127f.z, 0.0, 1.0);
PV0f.z = R127f.z;
R126f.w = max(R126f.y, -(R126f.y));
R126f.w = clamp(R126f.w, 0.0, 1.0);
PV0f.w = R126f.w;
tempResultf = log2(backupReg1f);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
R124f.w = tempResultf;
PS0f = R124f.w;
// 17
backupReg0f = R127f.x;
R127f.x = (R124f.y * backupReg0f + intBitsToFloat(uf_remappedPS[19].z));
PV1f.x = R127f.x;
R126f.y = (intBitsToFloat(uf_remappedPS[18].z) * R0f.w + R126f.z);
PV1f.y = R126f.y;
R123f.z = (-(R4f.z) * R2f.w + -(R2f.x));
PV1f.z = R123f.z;
R125f.w = (-(R6f.x) * PV0f.y + R127f.y);
PV1f.w = R125f.w;
tempResultf = log2(R3f.w);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
R126f.z = tempResultf;
PS1f = R126f.z;
// 18
backupReg0f = R125f.x;
backupReg1f = R126f.w;
R125f.x = (intBitsToFloat(uf_remappedPS[22].y) * R9f.y + R127f.w);
PV0f.x = R125f.x;
R8f.y = mul_nonIEEE(R124f.z, R127f.z);
PV0f.y = R8f.y;
R127f.z = (intBitsToFloat(uf_remappedPS[23].x) * R5f.w + intBitsToFloat(uf_remappedPS[23].y));
PV0f.z = R127f.z;
R127f.w = (-(R2f.z) * PV1f.z + backupReg0f);
R127f.w = clamp(R127f.w, 0.0, 1.0);
PV0f.w = R127f.w;
R126f.w = -(backupReg1f) + 1.0;
PS0f = R126f.w;
// 19
R5f.x = (intBitsToFloat(uf_remappedPS[24].w) * R124f.x + intBitsToFloat(uf_remappedPS[25].w));
R5f.x = clamp(R5f.x, 0.0, 1.0);
PV1f.x = R5f.x;
R127f.y = (R7f.w * R9f.y + R125f.z);
PV1f.y = R127f.y;
PV1f.z = mul_nonIEEE(R2f.y, R1f.z);
R2f.w = (R4f.z * R0f.w + R126f.x);
R2f.w = clamp(R2f.w, 0.0, 1.0);
PV1f.w = R2f.w;
R122f.x = (-(R4f.z) * R0f.x + -(R1f.y));
PS1f = R122f.x;
// 20
backupReg0f = R124f.y;
backupReg1f = R127f.w;
R0f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[26].x), R1f.z);
PV0f.x = R0f.x;
R124f.y = (R7f.w * R0f.z + PV1f.z);
PV0f.y = R124f.y;
R1f.z = (-(R2f.z) * PS1f + R125f.w);
R1f.z = clamp(R1f.z, 0.0, 1.0);
PV0f.z = R1f.z;
R127f.w = (backupReg0f * R127f.x + intBitsToFloat(uf_remappedPS[19].w));
PV0f.w = R127f.w;
tempResultf = log2(backupReg1f);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
R127f.x = tempResultf;
PS0f = R127f.x;
// 21
backupReg0f = R7f.z;
R4f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[12].y), R7f.z);
PV1f.x = R4f.x;
R2f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[12].x), R7f.z);
PV1f.y = R2f.y;
R7f.z = (R4f.z * R2f.x + R127f.y);
R7f.z = clamp(R7f.z, 0.0, 1.0);
PV1f.z = R7f.z;
R0f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[12].z), backupReg0f);
PV1f.w = R0f.w;
tempResultf = log2(R126f.w);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
R2f.z = tempResultf;
PS1f = R2f.z;
// 22
R6f.x = (R5f.w * R127f.z + intBitsToFloat(uf_remappedPS[23].z));
PV0f.x = R6f.x;
PV0f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[27].w), R126f.z);
R127f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[27].w), R124f.w);
PV0f.z = R127f.z;
R7f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[27].w), R127f.x);
PV0f.w = R7f.w;
R6f.y = (R4f.z * R1f.y + R124f.y);
R6f.y = clamp(R6f.y, 0.0, 1.0);
PS0f = R6f.y;
// 23
R123f.w = (intBitsToFloat(uf_remappedPS[6].w) * R126f.y + intBitsToFloat(uf_remappedPS[18].w));
R123f.w = clamp(R123f.w, 0.0, 1.0);
PV1f.w = R123f.w;
R9f.x = exp2(PV0f.y);
PS1f = R9f.x;
// 24
R9f.y = (intBitsToFloat(uf_remappedPS[22].z) * R2f.x + R125f.x);
PV0f.y = R9f.y;
R4f.z = mul_nonIEEE(R127f.w, PV1f.w);
PV0f.z = R4f.z;
R3f.w = (intBitsToFloat(uf_remappedPS[28].x) * R5f.x + intBitsToFloat(uf_remappedPS[28].y));
PV0f.w = R3f.w;
R7f.y = exp2(R127f.z);
PS0f = R7f.y;
// 0
R126f.x = (R5f.w * R6f.x + intBitsToFloat(uf_remappedPS[23].w));
PV0f.x = R126f.x;
R123f.w = (intBitsToFloat(uf_remappedPS[26].y) * R0f.z + R0f.x);
PV0f.w = R123f.w;
tempResultf = log2(R1f.z);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
R125f.y = tempResultf;
PS0f = R125f.y;
// 1
R125f.x = (R8f.y * R2f.y + intBitsToFloat(uf_remappedPS[29].x));
PV1f.x = R125f.x;
R126f.y = (R8f.y * R4f.x + intBitsToFloat(uf_remappedPS[29].y));
PV1f.y = R126f.y;
R126f.z = (intBitsToFloat(uf_remappedPS[26].z) * R1f.y + PV0f.w);
PV1f.z = R126f.z;
R0f.z = exp2(R7f.w);
PS1f = R0f.z;
// 2
R127f.x = (R8f.y * R0f.w + intBitsToFloat(uf_remappedPS[29].z));
PV0f.x = R127f.x;
PV0f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[16].y), R2f.w);
PV0f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[16].x), R2f.w);
// 3
backupReg0f = R126f.y;
PV1f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[16].z), R2f.w);
R126f.y = (R4f.z * PV0f.y + backupReg0f);
PV1f.y = R126f.y;
R127f.z = (R5f.x * R3f.w + intBitsToFloat(uf_remappedPS[28].z));
PV1f.z = R127f.z;
R127f.w = (R4f.z * PV0f.z + R125f.x);
PV1f.w = R127f.w;
// 4
R123f.x = (intBitsToFloat(uf_remappedPS[10].w) * R9f.y + intBitsToFloat(uf_remappedPS[22].w));
R123f.x = clamp(R123f.x, 0.0, 1.0);
PV0f.x = R123f.x;
R124f.y = (R4f.z * PV1f.x + R127f.x);
PV0f.y = R124f.y;
// 5
PV1f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[13].x), R9f.x);
R127f.y = (R5f.x * R127f.z + intBitsToFloat(uf_remappedPS[28].w));
PV1f.y = R127f.y;
PV1f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[13].y), R9f.x);
R126f.w = mul_nonIEEE(R126f.x, PV0f.x);
PV1f.w = R126f.w;
// 6
R126f.x = (R8f.y * PV1f.x + 0.0);
PV0f.x = R126f.x;
PV0f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[13].z), R9f.x);
PV0f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[20].y), R7f.z);
PV0f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[20].x), R7f.z);
R124f.w = (R8f.y * PV1f.z + 0.0);
PS0f = R124f.w;
// 7
PV1f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[30].y), R2f.z);
PV1f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[20].z), R7f.z);
R125f.z = (R126f.w * PV0f.w + R127f.w);
PV1f.z = R125f.z;
R127f.w = (R126f.w * PV0f.z + R126f.y);
PV1f.w = R127f.w;
R127f.z = (R8f.y * PV0f.y + 0.0);
PS1f = R127f.z;
// 8
R123f.y = (intBitsToFloat(uf_remappedPS[11].w) * R126f.z + intBitsToFloat(uf_remappedPS[26].w));
R123f.y = clamp(R123f.y, 0.0, 1.0);
PV0f.y = R123f.y;
R2f.z = (R126f.w * PV1f.y + R124f.y);
PV0f.z = R2f.z;
R127f.x = exp2(PV1f.x);
PS0f = R127f.x;
// 9
R124f.x = mul_nonIEEE(R127f.y, PV0f.y);
PV1f.x = R124f.x;
PV1f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[17].x), R7f.y);
R126f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[17].z), R7f.y);
PV1f.z = R126f.z;
PV1f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[17].y), R7f.y);
// 10
backupReg0f = R126f.x;
R126f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[24].x), R6f.y);
PV0f.x = R126f.x;
R127f.y = (R4f.z * PV1f.y + backupReg0f);
PV0f.y = R127f.y;
R124f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[24].z), R6f.y);
PV0f.z = R124f.z;
PV0f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[24].y), R6f.y);
R125f.x = (R4f.z * PV1f.w + R124f.w);
PS0f = R125f.x;
// 11
backupReg0f = R127f.z;
PV1f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[27].w), R125f.y);
R123f.y = (R124f.x * PV0f.w + R127f.w);
PV1f.y = R123f.y;
R127f.z = intBitsToFloat(uf_remappedPS[30].x) + R127f.x;
R127f.z = clamp(R127f.z, 0.0, 1.0);
PV1f.z = R127f.z;
R127f.w = (R4f.z * R126f.z + backupReg0f);
PV1f.w = R127f.w;
// 12
R123f.x = (R11f.y * intBitsToFloat(uf_remappedPS[31].y) + -(R10f.y));
PV0f.x = R123f.x;
R125f.y = (R124f.x * R126f.x + R125f.z);
PV0f.y = R125f.y;
R125f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[32].y), PV1f.y);
PV0f.z = R125f.z;
R125f.w = (R124f.x * R124f.z + R2f.z);
PV0f.w = R125f.w;
R124f.w = exp2(PV1f.x);
PS0f = R124f.w;
// 13
PV1f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[21].y), R0f.z);
PV1f.y = mul_nonIEEE(intBitsToFloat(uf_remappedPS[21].x), R0f.z);
R124f.z = (PV0f.x * R127f.z + R10f.y);
PV1f.z = R124f.z;
PV1f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[21].z), R0f.z);
// 14
backupReg0f = R127f.y;
backupReg1f = R127f.w;
R123f.x = (R11f.z * intBitsToFloat(uf_remappedPS[31].z) + -(R10f.z));
PV0f.x = R123f.x;
R127f.y = (R126f.w * PV1f.y + backupReg0f);
PV0f.y = R127f.y;
R123f.z = (R11f.x * intBitsToFloat(uf_remappedPS[31].x) + -(R10f.x));
PV0f.z = R123f.z;
R127f.w = (R126f.w * PV1f.x + R125f.x);
PV0f.w = R127f.w;
R125f.x = (R126f.w * PV1f.w + backupReg1f);
PS0f = R125f.x;
// 15
backupReg0f = R124f.w;
PV1f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[25].y), R124f.w);
R124f.y = (PV0f.x * R127f.z + R10f.z);
PV1f.y = R124f.y;
PV1f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[25].x), R124f.w);
R124f.w = (PV0f.z * R127f.z + R10f.x);
PV1f.w = R124f.w;
PS1f = mul_nonIEEE(intBitsToFloat(uf_remappedPS[25].z), backupReg0f);
// 16
backupReg0f = R127f.y;
PV0f.x = mul_nonIEEE(intBitsToFloat(uf_remappedPS[32].x), R125f.y);
R127f.y = (R124f.x * PV1f.x + R127f.w);
PV0f.y = R127f.y;
PV0f.z = mul_nonIEEE(intBitsToFloat(uf_remappedPS[32].z), R125f.w);
R127f.w = (R124f.x * PV1f.z + backupReg0f);
PV0f.w = R127f.w;
R125f.y = (R124f.x * PS1f + R125f.x);
PS0f = R125f.y;
// 17
backupReg0f = R125f.z;
PV1f.x = mul_nonIEEE(PV0f.x, R124f.w);
PV1f.y = mul_nonIEEE(R3f.x, intBitsToFloat(uf_remappedPS[33].x));
R125f.z = mul_nonIEEE(PV0f.z, R124f.y);
PV1f.z = R125f.z;
PV1f.w = mul_nonIEEE(backupReg0f, R124f.z);
R127f.z = -(intBitsToFloat(uf_remappedPS[34].w)) + 0.0;
R127f.z *= 2.0;
R127f.z = clamp(R127f.z, 0.0, 1.0);
PS1f = R127f.z;
// 18
backupReg0f = R127f.y;
R123f.x = (R3f.y * intBitsToFloat(uf_remappedPS[33].y) + PV1f.y);
PV0f.x = R123f.x;
R127f.y = (intBitsToFloat(uf_remappedPS[27].x) * R127f.w + PV1f.x);
PV0f.y = R127f.y;
R124f.z = (intBitsToFloat(uf_remappedPS[27].y) * backupReg0f + PV1f.w);
PV0f.z = R124f.z;
// 19
R125f.x = (R3f.z * intBitsToFloat(uf_remappedPS[33].z) + PV0f.x);
PV1f.x = R125f.x;
R123f.w = (intBitsToFloat(uf_remappedPS[27].z) * R125f.y + R125f.z);
PV1f.w = R123f.w;
// 20
backupReg0f = R127f.y;
R124f.x = (intBitsToFloat(uf_remappedPS[27].z) * R11f.w + PV1f.w);
PV0f.x = R124f.x;
R127f.y = (intBitsToFloat(uf_remappedPS[27].y) * R11f.w + R124f.z);
PV0f.y = R127f.y;
R124f.z = (intBitsToFloat(uf_remappedPS[27].x) * R11f.w + backupReg0f);
PV0f.z = R124f.z;
// 21
backupReg0f = R125f.x;
R125f.x = -(PV0f.z) + intBitsToFloat(uf_remappedPS[35].x);
PV1f.x = R125f.x;
PV1f.z = -(intBitsToFloat(uf_remappedPS[33].w)) + backupReg0f;
R127f.w = -(PV0f.y) + intBitsToFloat(uf_remappedPS[35].y);
PV1f.w = R127f.w;
// 22
R123f.y = (PV1f.z * intBitsToFloat(uf_remappedPS[35].w) + intBitsToFloat(uf_remappedPS[32].w));
R123f.y = clamp(R123f.y, 0.0, 1.0);
PV0f.y = R123f.y;
PV0f.z = -(R124f.x) + intBitsToFloat(uf_remappedPS[35].z);
// 23
backupReg0f = R8f.w;
R123f.x = (R127f.w * PV0f.y + R127f.y);
PV1f.x = R123f.x;
R123f.y = (R125f.x * PV0f.y + R124f.z);
PV1f.y = R123f.y;
R123f.w = (PV0f.z * PV0f.y + R124f.x);
PV1f.w = R123f.w;
R8f.w = mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].w), backupReg0f);
R8f.w = clamp(R8f.w, 0.0, 1.0);
PS1f = R8f.w;
// 24
PV0f.x = -(R124f.x) + PV1f.w;
PV0f.y = -(R127f.y) + PV1f.x;
PV0f.z = -(R124f.z) + PV1f.y;
// 25
R8f.x = (PV0f.z * R127f.z + R124f.z);
PV1f.x = R8f.x;
R8f.y = (PV0f.y * R127f.z + R127f.y);
PV1f.y = R8f.y;
R8f.z = (PV0f.x * R127f.z + R124f.x);
PV1f.z = R8f.z;
// export
passPixelColor0 = vec4(R8f.x, R8f.y, R8f.z, R8f.w);
}
