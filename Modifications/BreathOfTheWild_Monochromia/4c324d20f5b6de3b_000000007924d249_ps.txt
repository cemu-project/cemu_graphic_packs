#version 420
#extension GL_ARB_texture_gather : enable
// shader 4c324d20f5b6de3b
// Monochromia
// Link's and other human character's eyes
// original shader dumped using cemu 1.11.0c, BotW 1.3.1
uniform ivec4 uf_remappedPS[9];
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0xf45c6000 res 1280x720x1 dim 1 tm: 4 format 041a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 2) uniform sampler2D textureUnitPS2;// Tex2 addr 0xf494a800 res 1280x720x1 dim 1 tm: 4 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 4) uniform sampler2D textureUnitPS4;// Tex4 addr 0xf4e91800 res 1280x720x1 dim 1 tm: 4 format 0806 compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler4 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 6) uniform sampler2D textureUnitPS6;// Tex6 addr 0xf5054000 res 640x360x1 dim 1 tm: 4 format 080e compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler6 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 8) uniform sampler2DArray textureUnitPS8;// Tex8 addr 0xf5593000 res 640x360x2 dim 5 tm: 4 format 0816 compSel: 0 1 2 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x2) Sampler8 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 9) uniform sampler2D textureUnitPS9;// Tex9 addr 0xf575f800 res 640x360x1 dim 1 tm: 4 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler9 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 11) uniform sampler2D textureUnitPS11;// Tex11 addr 0xf5977800 res 640x360x1 dim 1 tm: 4 format 0816 compSel: 0 1 2 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler11 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 12) uniform sampler2D textureUnitPS12;// Tex12 addr 0xf4240800 res 1280x720x1 dim 1 tm: 4 format 080e compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler12 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 13) uniform sampler2D textureUnitPS13;// Tex13 addr 0xf528a800 res 640x360x1 dim 1 tm: 4 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler13 ClampX/Y/Z: 2 2 2 border: 1
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem2;
layout(location = 3) in vec4 passParameterSem4;
layout(location = 4) in vec4 passParameterSem6;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R7i = ivec4(0);
ivec4 R8i = ivec4(0);
ivec4 R9i = ivec4(0);
ivec4 R10i = ivec4(0);
ivec4 R11i = ivec4(0);
ivec4 R12i = ivec4(0);
ivec4 R13i = ivec4(0);
ivec4 R122i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R124i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = floatBitsToInt(passParameterSem0);
R1i = floatBitsToInt(passParameterSem1);
R2i = floatBitsToInt(passParameterSem2);
R3i = floatBitsToInt(passParameterSem4);
R4i = floatBitsToInt(passParameterSem6);
R5i.xyzw = floatBitsToInt(texture(textureUnitPS2, intBitsToFloat(R4i.zw)).xyzw);
R6i.w = floatBitsToInt(texture(textureUnitPS12, intBitsToFloat(R0i.xy)).x);
R7i.xyzw = floatBitsToInt(textureGather(textureUnitPS6, intBitsToFloat(R0i.xy)).xyzw);
R8i.xyzw = floatBitsToInt(texture(textureUnitPS1, intBitsToFloat(R4i.zw)).xyzw);
// 0
R127i.x = floatBitsToInt((intBitsToFloat(R5i.x) * 2.0 + -(1.0)));
PV0i.x = R127i.x;
R127i.y = floatBitsToInt((intBitsToFloat(R5i.y) * 2.0 + -(1.0)));
PV0i.y = R127i.y;
R124i.z = floatBitsToInt((intBitsToFloat(R5i.z) * 2.0 + -(1.0)));
PV0i.z = R124i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R6i.w)),intBitsToFloat(uf_remappedPS[0].w)) + 1.0));
PV0i.w = R123i.w;
R127i.z = 0x358637bd;
PS0i = R127i.z;
// 1
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),-0.0),vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PV0i.w));
// 2
R124i.x = floatBitsToInt(floor(intBitsToFloat(R3i.y)));
PV0i.x = R124i.x;
R5i.y = floatBitsToInt(intBitsToFloat(R2i.x) * intBitsToFloat(0x3f4ccccd));
R5i.z = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(uf_remappedPS[0].x)), intBitsToFloat(PS1i)));
PV0i.z = R5i.z;
R125i.w = floatBitsToInt(floor(intBitsToFloat(R3i.x)));
PV0i.w = R125i.w;
R5i.w = floatBitsToInt(sqrt(intBitsToFloat(PV1i.x)));
PS0i = R5i.w;
// 3
PV1i.x = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(PV0i.z)), intBitsToFloat(uf_remappedPS[1].y)));
R125i.y = floatBitsToInt(intBitsToFloat(R3i.x) + -(intBitsToFloat(PV0i.w)));
R126i.z = floatBitsToInt(intBitsToFloat(uf_remappedPS[0].x) + intBitsToFloat(PV0i.z));
PV1i.z = R126i.z;
R124i.w = floatBitsToInt(intBitsToFloat(R3i.y) + -(intBitsToFloat(PV0i.x)));
R124i.y = floatBitsToInt(1.0 / intBitsToFloat(PS0i));
PS1i = R124i.y;
// 4
R9i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(PS1i)));
PV0i.x = R9i.x;
R6i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), intBitsToFloat(PS1i)));
PV0i.y = R6i.y;
R125i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),intBitsToFloat(uf_remappedPS[2].x)) + intBitsToFloat(R7i.y)));
R127i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),intBitsToFloat(uf_remappedPS[2].x)) + intBitsToFloat(R7i.w)));
R126i.y = floatBitsToInt(1.0 / intBitsToFloat(PV1i.x));
PS0i = R126i.y;
// 5
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(R127i.z),-0.0),vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(R127i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R5i.x = floatBitsToInt(intBitsToFloat(PS0i) * 0.25);
PS1i = R5i.x;
// 6
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.z),intBitsToFloat(uf_remappedPS[2].x)) + intBitsToFloat(R7i.x)));
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.z),intBitsToFloat(uf_remappedPS[2].x)) + intBitsToFloat(R7i.z)));
R126i.z = floatBitsToInt(max(intBitsToFloat(R125i.z), -(intBitsToFloat(R125i.z))));
PV0i.w = floatBitsToInt(min(intBitsToFloat(PS1i), 2.0));
tempResultf = 1.0 / sqrt(intBitsToFloat(PV1i.x));
PS0i = floatBitsToInt(tempResultf);
// 7
backupReg0i = R127i.w;
backupReg0i = R127i.w;
R126i.x = floatBitsToInt(intBitsToFloat(PV0i.w) * intBitsToFloat(0x40c00000));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.y), intBitsToFloat(PS0i)));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R9i.x), intBitsToFloat(PS0i)));
R127i.w = floatBitsToInt(max(intBitsToFloat(backupReg0i), -(intBitsToFloat(backupReg0i))));
R125i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.y), intBitsToFloat(uf_remappedPS[3].x)));
PS1i = R125i.x;
// 8
PV0i.x = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(uf_remappedPS[4].w)), intBitsToFloat(PV1i.y)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[4].z), intBitsToFloat(PV1i.z)));
PV0i.z = floatBitsToInt(max(intBitsToFloat(R127i.x), -(intBitsToFloat(R127i.x))));
PV0i.w = floatBitsToInt(max(intBitsToFloat(R127i.y), -(intBitsToFloat(R127i.y))));
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.z), intBitsToFloat(PS1i)));
PS0i = R126i.w;
// 9
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.w), intBitsToFloat(R125i.x)));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(R126i.x)));
R125i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), intBitsToFloat(R125i.x)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(R126i.x)));
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(R125i.x)));
PS1i = R126i.z;
// 10
R7i.x = floatBitsToInt(intBitsToFloat(R0i.x) + intBitsToFloat(PV1i.y));
PV0i.y = floatBitsToInt(-(intBitsToFloat(R126i.w)) + intBitsToFloat(PV1i.x));
PV0i.z = floatBitsToInt(intBitsToFloat(PV1i.w) * intBitsToFloat(0x3e4ccccd));
R126i.w = floatBitsToInt(intBitsToFloat(R125i.w) + -(0.5));
R127i.y = floatBitsToInt(intBitsToFloat(R124i.x) + -(0.5));
PS0i = R127i.y;
// 11
R6i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.w), intBitsToFloat(R5i.z)));
R7i.y = floatBitsToInt(intBitsToFloat(R0i.y) + intBitsToFloat(PV0i.z));
PV1i.y = R7i.y;
PV1i.z = floatBitsToInt(-(intBitsToFloat(R125i.z)) + intBitsToFloat(PV0i.y));
PV1i.w = floatBitsToInt(-(intBitsToFloat(R126i.z)) + intBitsToFloat(PV0i.y));
R4i.z = floatBitsToInt(roundEven(0.0));
PS1i = R4i.z;
// 12
backupReg0i = R1i.z;
PV0i.x = floatBitsToInt(intBitsToFloat(R125i.z) + intBitsToFloat(PV1i.w));
PV0i.y = floatBitsToInt(intBitsToFloat(R126i.z) + intBitsToFloat(PV1i.z));
R1i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.y),intBitsToFloat(PV1i.y)) + intBitsToFloat(R1i.w)));
R1i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.x),intBitsToFloat(R7i.x)) + intBitsToFloat(backupReg0i)));
R126i.z = floatBitsToInt((intBitsToFloat(R126i.y) * intBitsToFloat(0x3dcccccd) + 1.0));
PS0i = R126i.z;
// 13
R0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.z), intBitsToFloat(R5i.z)));
R9i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.z), intBitsToFloat(R124i.y)));
PV1i.z = floatBitsToInt(intBitsToFloat(PV0i.y) + intBitsToFloat(R124i.w));
PV1i.z = clampFI32(PV1i.z);
PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(R125i.y));
PV1i.w = clampFI32(PV1i.w);
R124i.w = floatBitsToInt((intBitsToFloat(R5i.w) * 4.0 + intBitsToFloat(0xc0400000)));
R124i.w = clampFI32(R124i.w);
PS1i = R124i.w;
// 14
PV0i.x = floatBitsToInt(intBitsToFloat(PV1i.z) + intBitsToFloat(R127i.y));
R0i.y = floatBitsToInt(intBitsToFloat(R5i.x) * intBitsToFloat(0x40c00000));
R0i.z = R5i.x;
R0i.z = floatBitsToInt(intBitsToFloat(R0i.z) * 4.0);
R0i.z = clampFI32(R0i.z);
PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.w) + intBitsToFloat(R126i.w));
R1i.y = floatBitsToInt(intBitsToFloat(R126i.z) * intBitsToFloat(0x42960000));
PS0i = R1i.y;
// 15
R4i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(PV0i.w)));
R4i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.w), intBitsToFloat(PV0i.x)));
R3i.z = floatBitsToInt(intBitsToFloat(R2i.y) * intBitsToFloat(0x3f4ccccd));
R0i.w = floatBitsToInt(intBitsToFloat(R124i.w) + -(0.5));
R0i.w = floatBitsToInt(intBitsToFloat(R0i.w) * 4.0);
R0i.w = clampFI32(R0i.w);
R3i.x = floatBitsToInt(intBitsToFloat(R2i.z) * intBitsToFloat(0x3f4ccccd));
PS1i = R3i.x;
R7i.y = floatBitsToInt(texture(textureUnitPS4, intBitsToFloat(R7i.xy)).x);
R11i.xyz = floatBitsToInt(texture(textureUnitPS9, intBitsToFloat(R4i.xy)).xyz);
R3i.w = floatBitsToInt(texture(textureUnitPS13, intBitsToFloat(R4i.xy)).w);
R10i.xyz = floatBitsToInt(texture(textureUnitPS8, vec3(intBitsToFloat(R4i.x),intBitsToFloat(R4i.y),intBitsToFloat(R4i.z))).xyz);
R12i.xyz = floatBitsToInt(texture(textureUnitPS11, intBitsToFloat(R4i.xy)).xyz);
// 0
backupReg0i = R0i.x;
backupReg0i = R0i.x;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(backupReg0i),intBitsToFloat(R6i.x),intBitsToFloat(R5i.z),-0.0),vec4(intBitsToFloat(backupReg0i),intBitsToFloat(R6i.x),intBitsToFloat(R5i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R122i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[3].x),intBitsToFloat(R7i.y)) + intBitsToFloat(uf_remappedPS[0].x)));
PS0i = R122i.x;
// 1
PV1i.x = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(PS0i)), intBitsToFloat(R1i.w)));
PV1i.y = floatBitsToInt(-(intBitsToFloat(PS0i)));
PV1i.z = floatBitsToInt(intBitsToFloat(R11i.x) + intBitsToFloat(0xbecccccd));
PV1i.w = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(PS0i)), intBitsToFloat(R1i.z)));
PS1i = floatBitsToInt(sqrt(intBitsToFloat(PV0i.x)));
// 2
R124i.x = floatBitsToInt(-(intBitsToFloat(R0i.x)) + intBitsToFloat(PV1i.x));
R127i.y = floatBitsToInt(-(intBitsToFloat(R6i.x)) + intBitsToFloat(PV1i.w));
R126i.z = floatBitsToInt(-(intBitsToFloat(R5i.z)) + intBitsToFloat(PV1i.y));
PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.z) * intBitsToFloat(0x41200000));
PV0i.w = clampFI32(PV0i.w);
PS0i = floatBitsToInt(1.0 / intBitsToFloat(PS1i));
// 3
backupReg0i = R6i.x;
backupReg1i = R5i.z;
R6i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.x), intBitsToFloat(PS0i)));
PV1i.x = R6i.x;
R7i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PS0i)));
PV1i.y = R7i.y;
R5i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg1i), intBitsToFloat(PS0i)));
PV1i.z = R5i.z;
R124i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R11i.y), intBitsToFloat(PV0i.w)));
PV1i.w = R124i.w;
R124i.z = floatBitsToInt(intBitsToFloat(R0i.y) * intBitsToFloat(0x3dcccccd));
R124i.z = clampFI32(R124i.z);
PS1i = R124i.z;
// 4
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R9i.x),intBitsToFloat(R6i.y),intBitsToFloat(R9i.y),-0.0),vec4(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R125i.x = floatBitsToInt(intBitsToFloat(PV1i.w) + -(1.0));
PS0i = R125i.x;
// 5
PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.x) + 1.0);
PV1i.x = clampFI32(PV1i.x);
R125i.y = floatBitsToInt(intBitsToFloat(uf_remappedPS[5].y) + -(intBitsToFloat(R3i.z)));
R125i.z = floatBitsToInt(intBitsToFloat(uf_remappedPS[5].x) + -(intBitsToFloat(R5i.y)));
R126i.w = floatBitsToInt(intBitsToFloat(R2i.w) + intBitsToFloat(R124i.w));
R126i.w = clampFI32(R126i.w);
R126i.x = floatBitsToInt(intBitsToFloat(uf_remappedPS[5].z) + -(intBitsToFloat(R3i.x)));
PS1i = R126i.x;
// 6
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R6i.x),intBitsToFloat(R7i.y),intBitsToFloat(R5i.z),-0.0),vec4(intBitsToFloat(R124i.x),intBitsToFloat(R127i.y),intBitsToFloat(R126i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R124i.w = tempi.x;
PS0i = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + 1.0);
// 7
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R6i.x)),intBitsToFloat(PV0i.x)) + intBitsToFloat(R124i.x)));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R7i.y)),intBitsToFloat(PV0i.x)) + intBitsToFloat(R127i.y)));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R5i.z)),intBitsToFloat(PV0i.x)) + intBitsToFloat(R126i.z)));
PV1i.z = R123i.z;
R1i.w = floatBitsToInt((intBitsToFloat(0x3f19999a) * intBitsToFloat(R124i.z) + intBitsToFloat(0x3ecccccd)));
tempResultf = log2(intBitsToFloat(PS0i));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1i = floatBitsToInt(tempResultf);
// 8
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.z),-0.0),vec4(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.y = floatBitsToInt(intBitsToFloat(PS1i) * intBitsToFloat(0x3e4ccccd));
PS0i = R127i.y;
// 9
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R9i.x),intBitsToFloat(R6i.y),intBitsToFloat(R9i.y),-0.0),vec4(intBitsToFloat(uf_remappedPS[6].x),intBitsToFloat(uf_remappedPS[6].y),intBitsToFloat(uf_remappedPS[6].z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.x));
PS1i = floatBitsToInt(tempResultf);
// 10
backupReg0i = R127i.y;
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.w), intBitsToFloat(PS1i)));
R127i.y = floatBitsToInt(intBitsToFloat(R0i.w) + intBitsToFloat(0x3f4ccccd));
R127i.y = clampFI32(R127i.y);
PV0i.z = floatBitsToInt(max(-(intBitsToFloat(PV1i.x)), 0.0));
R124i.w = floatBitsToInt(intBitsToFloat(R0i.y) * intBitsToFloat(0x3d4ccccd));
R124i.w = clampFI32(R124i.w);
PS0i = floatBitsToInt(exp2(intBitsToFloat(backupReg0i)));
// 11
backupReg0i = R3i.z;
R0i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.z),intBitsToFloat(R126i.w)) + intBitsToFloat(R5i.y)));
PV1i.y = floatBitsToInt(min(intBitsToFloat(PV0i.z), 1.0));
R1i.z = floatBitsToInt(intBitsToFloat(PV0i.x) * intBitsToFloat(0x3c23d70a));
R1i.z = clampFI32(R1i.z);
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.w), intBitsToFloat(PS0i)));
R3i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.y),intBitsToFloat(R126i.w)) + intBitsToFloat(backupReg0i)));
PS1i = R3i.z;
// 12
R123i.x = floatBitsToInt((intBitsToFloat(PV1i.w) * intBitsToFloat(0x3e99999a) + intBitsToFloat(PV1i.y)));
PV0i.x = R123i.x;
R5i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.x),intBitsToFloat(R126i.w)) + intBitsToFloat(R3i.x)));
PV0i.z = floatBitsToInt(intBitsToFloat(PV1i.w) + intBitsToFloat(0xbf400000));
R126i.w = floatBitsToInt(intBitsToFloat(R1i.w) * intBitsToFloat(0x3fe66666));
PV0i.w = R126i.w;
R3i.x = floatBitsToInt(intBitsToFloat(R127i.y) + -(1.0));
PS0i = R3i.x;
// 13
PV1i.x = floatBitsToInt(intBitsToFloat(R8i.w) * intBitsToFloat(0x437f0000));
R127i.y = floatBitsToInt(intBitsToFloat(PV0i.z) * intBitsToFloat(0x41800000));
R127i.y = clampFI32(R127i.y);
PV1i.y = R127i.y;
R4i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.x), intBitsToFloat(PV0i.w)));
PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(0xbecccccd));
R4i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.y), intBitsToFloat(PV0i.w)));
PS1i = R4i.x;
// 14
backupReg0i = R2i.z;
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(R1i.y)));
PV0i.x = clampFI32(PV0i.x);
PV0i.y = floatBitsToInt(intBitsToFloat(R2i.w) + -(intBitsToFloat(PV1i.y)));
PV0i.y = clampFI32(PV0i.y);
R2i.z = floatBitsToInt((intBitsToFloat(R8i.x) * intBitsToFloat(0x3f895ef0) + intBitsToFloat(0xba0a8ec8)));
R2i.z = clampFI32(R2i.z);
R2i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(R126i.w)));
R126i.x = int(intBitsToFloat(PV1i.x));
PS0i = R126i.x;
// 15
backupReg0i = R8i.y;
backupReg1i = R8i.z;
PV1i.x = PS0i & 0x000000fc;
R8i.y = floatBitsToInt((intBitsToFloat(backupReg0i) * intBitsToFloat(0x3f895ef0) + intBitsToFloat(0xba0a8ec8)));
R8i.y = clampFI32(R8i.y);
R8i.z = floatBitsToInt(intBitsToFloat(R127i.y) + intBitsToFloat(PV0i.x));
R8i.z = clampFI32(R8i.z);
R8i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.x),intBitsToFloat(PV0i.y)) + 1.0));
R7i.z = floatBitsToInt((intBitsToFloat(backupReg1i) * intBitsToFloat(0x3f895ef0) + intBitsToFloat(0xba0a8ec8)));
R7i.z = clampFI32(R7i.z);
PS1i = R7i.z;
// 16
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R10i.x),intBitsToFloat(R10i.y),intBitsToFloat(R10i.z),-0.0),vec4(intBitsToFloat(0x3e99096c),intBitsToFloat(0x3f162b6b),intBitsToFloat(0x3dea4a8c),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
PS0i = floatBitsToInt(float(PV1i.x));
// 17
R123i.x = floatBitsToInt((intBitsToFloat(0x3f19999a) * intBitsToFloat(R124i.w) + intBitsToFloat(0x3ecccccd)));
PV1i.x = R123i.x;
PV1i.y = R126i.x & int(1);
PV1i.z = floatBitsToInt(intBitsToFloat(PS0i) * intBitsToFloat(0x3b820821));
PV1i.w = ((intBitsToFloat(PV0i.x) > 0.0)?int(0xFFFFFFFF):int(0x0));
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PV0i.x));
// 18
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R11i.z), intBitsToFloat(R11i.z)));
R123i.y = ((PV1i.w == 0)?(0):(PS1i));
PV0i.y = R123i.y;
R6i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.z), intBitsToFloat(PV1i.x)));
PS0i = floatBitsToInt(float(PV1i.y));
// 19
R8i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), intBitsToFloat(PV0i.y)));
R13i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(PV0i.x)));
// 0
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].x), intBitsToFloat(uf_remappedPS[7].w)));
PV0i.x = R126i.x;
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].y), intBitsToFloat(uf_remappedPS[7].w)));
PV0i.y = R127i.y;
// 1
R125i.x = floatBitsToInt((intBitsToFloat(PV0i.x) * intBitsToFloat(0xbf4ccccd) + intBitsToFloat(R6i.x)));
R125i.y = floatBitsToInt((intBitsToFloat(PV0i.y) * intBitsToFloat(0xbf4ccccd) + intBitsToFloat(R7i.y)));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].z), intBitsToFloat(uf_remappedPS[7].w)));
// 2
R124i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.x), intBitsToFloat(uf_remappedPS[8].x)));
R124i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.y), intBitsToFloat(uf_remappedPS[8].z)));
R125i.z = floatBitsToInt((intBitsToFloat(PV1i.z) * intBitsToFloat(0xbf4ccccd) + intBitsToFloat(R5i.z)));
PV0i.z = R125i.z;
R124i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(uf_remappedPS[8].y)));
PS0i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.z), intBitsToFloat(PV1i.z)));
// 3
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R125i.x),intBitsToFloat(R125i.y),intBitsToFloat(PV0i.z),-0.0),vec4(intBitsToFloat(R125i.x),intBitsToFloat(R125i.y),intBitsToFloat(PV0i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R122i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.y),intBitsToFloat(R127i.y)) + intBitsToFloat(PS0i)));
PS1i = R122i.x;
// 4
backupReg0i = R126i.x;
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[7].w), intBitsToFloat(R124i.w)));
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[7].w), intBitsToFloat(R124i.x)));
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R6i.x),intBitsToFloat(backupReg0i)) + intBitsToFloat(PS1i)));
PV0i.z = R123i.z;
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[7].w), intBitsToFloat(R124i.y)));
tempResultf = 1.0 / sqrt(intBitsToFloat(PV1i.x));
PS0i = floatBitsToInt(tempResultf);
// 5
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.x), intBitsToFloat(PS0i)));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.y), intBitsToFloat(PS0i)));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.z), intBitsToFloat(PS0i)));
PV1i.w = floatBitsToInt(max(-(intBitsToFloat(PV0i.z)), 0.0));
R126i.y = floatBitsToInt((intBitsToFloat(R124i.x) * intBitsToFloat(0x3f4ccccd) + intBitsToFloat(0x3e4ccccd)));
PS1i = R126i.y;
// 6
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R9i.x),intBitsToFloat(R6i.y),intBitsToFloat(R9i.y),-0.0),vec4(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R125i.y = floatBitsToInt(min(intBitsToFloat(PV1i.w), 1.0));
PS0i = R125i.y;
// 7
PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.x) + 1.0);
PV1i.x = clampFI32(PV1i.x);
PV1i.y = floatBitsToInt(intBitsToFloat(PS0i) * intBitsToFloat(0x40a00000));
PV1i.y = clampFI32(PV1i.y);
R124i.z = floatBitsToInt((intBitsToFloat(R124i.w) * intBitsToFloat(0x3f4ccccd) + intBitsToFloat(0x3e4ccccd)));
R125i.w = floatBitsToInt((intBitsToFloat(R124i.y) * intBitsToFloat(0x3f4ccccd) + intBitsToFloat(0x3e4ccccd)));
// 8
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.x),intBitsToFloat(PV1i.y)) + 1.0));
PV0i.x = R123i.x;
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.z), intBitsToFloat(PV1i.x)));
// 9
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(R125i.y)) + intBitsToFloat(0xbecccccd)));
PV1i.x = R123i.x;
R125i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.x), intBitsToFloat(PV0i.x)));
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.z), intBitsToFloat(PV0i.x)));
R124i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.w), intBitsToFloat(PV0i.x)));
// 10
PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.x) * intBitsToFloat(0x42960000));
PV0i.w = clampFI32(PV0i.w);
// 11
R125i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.z), intBitsToFloat(PV0i.w)));
PV1i.z = R125i.z;
// 12
PV0i.y = floatBitsToInt(-(intBitsToFloat(PV1i.z)) + intBitsToFloat(R8i.w));
// 13
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(R8i.z)) + intBitsToFloat(R125i.z)));
PV1i.x = R123i.x;
// 14
backupReg0i = R0i.w;
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PV1i.x)));
// 15
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(R1i.w)));
// 16
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.w),intBitsToFloat(PV1i.z)) + intBitsToFloat(R124i.w)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.x),intBitsToFloat(PV1i.z)) + intBitsToFloat(R125i.y)));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.y),intBitsToFloat(PV1i.z)) + intBitsToFloat(R126i.z)));
PV0i.w = R123i.w;
// 17
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R10i.z),intBitsToFloat(R8i.x)) + intBitsToFloat(PV0i.y)));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R10i.y),intBitsToFloat(R8i.x)) + intBitsToFloat(PV0i.z)));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R10i.x),intBitsToFloat(R8i.x)) + intBitsToFloat(PV0i.w)));
PV1i.w = R123i.w;
// 18
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.z), intBitsToFloat(R8i.y)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(R2i.z)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.y), intBitsToFloat(R7i.z)));
// 19
R123i.x = floatBitsToInt((intBitsToFloat(PV0i.w) * intBitsToFloat(0x3f6e896b) + intBitsToFloat(0x3a011b1e)));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((intBitsToFloat(PV0i.x) * intBitsToFloat(0x3f6e896b) + intBitsToFloat(0x3a011b1e)));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((intBitsToFloat(PV0i.y) * intBitsToFloat(0x3f6e896b) + intBitsToFloat(0x3a011b1e)));
PV1i.z = R123i.z;
// 20
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R6i.z),intBitsToFloat(R125i.w)) + intBitsToFloat(PV1i.x)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R6i.z),intBitsToFloat(R124i.z)) + intBitsToFloat(PV1i.y)));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R6i.z),intBitsToFloat(R126i.y)) + intBitsToFloat(PV1i.z)));
PV0i.w = R123i.w;
// 21
R13i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R11i.z),intBitsToFloat(PV0i.w)) + intBitsToFloat(R12i.x)));
R13i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R11i.z),intBitsToFloat(PV0i.z)) + intBitsToFloat(R12i.y)));
R13i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R11i.z),intBitsToFloat(PV0i.y)) + intBitsToFloat(R12i.z)));
// export
passPixelColor0 = vec4(intBitsToFloat(R13i.x), intBitsToFloat(R13i.y), intBitsToFloat(R13i.z), intBitsToFloat(R13i.w));
float luma = dot(passPixelColor0.rgb, vec3(0.2126, 0.7152, 0.0722));
passPixelColor0.rgb = vec3(luma);
}
