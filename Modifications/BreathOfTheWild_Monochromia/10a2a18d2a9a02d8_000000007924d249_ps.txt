#version 420
#extension GL_ARB_texture_gather : enable
// shader 10a2a18d2a9a02d8
// Monochromia
// Link's face
// original shader dumped using cemu 1.11.0c, BotW 1.3.1
uniform ivec4 uf_remappedPS[9];
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0xf45c6000 res 1280x720x1 dim 1 tm: 4 format 041a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 2) uniform sampler2D textureUnitPS2;// Tex2 addr 0xf494a800 res 1280x720x1 dim 1 tm: 4 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 4) uniform sampler2D textureUnitPS4;// Tex4 addr 0xf4e91800 res 1280x720x1 dim 1 tm: 4 format 0806 compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler4 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 6) uniform sampler2D textureUnitPS6;// Tex6 addr 0xf5054000 res 640x360x1 dim 1 tm: 4 format 080e compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler6 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 8) uniform sampler2DArray textureUnitPS8;// Tex8 addr 0xf5593000 res 640x360x2 dim 5 tm: 4 format 0816 compSel: 0 1 2 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x2) Sampler8 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 9) uniform sampler2D textureUnitPS9;// Tex9 addr 0xf575f800 res 640x360x1 dim 1 tm: 4 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler9 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 11) uniform sampler2D textureUnitPS11;// Tex11 addr 0xf5977800 res 640x360x1 dim 1 tm: 4 format 0816 compSel: 0 1 2 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler11 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 12) uniform sampler2D textureUnitPS12;// Tex12 addr 0xf4240800 res 1280x720x1 dim 1 tm: 4 format 080e compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler12 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 13) uniform sampler2D textureUnitPS13;// Tex13 addr 0xf528a800 res 640x360x1 dim 1 tm: 4 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler13 ClampX/Y/Z: 2 2 2 border: 1
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem2;
layout(location = 3) in vec4 passParameterSem4;
layout(location = 4) in vec4 passParameterSem6;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R7i = ivec4(0);
ivec4 R8i = ivec4(0);
ivec4 R9i = ivec4(0);
ivec4 R10i = ivec4(0);
ivec4 R11i = ivec4(0);
ivec4 R12i = ivec4(0);
ivec4 R13i = ivec4(0);
ivec4 R14i = ivec4(0);
ivec4 R15i = ivec4(0);
ivec4 R16i = ivec4(0);
ivec4 R17i = ivec4(0);
ivec4 R18i = ivec4(0);
ivec4 R122i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R124i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = floatBitsToInt(passParameterSem0);
R1i = floatBitsToInt(passParameterSem1);
R2i = floatBitsToInt(passParameterSem2);
R3i = floatBitsToInt(passParameterSem4);
R4i = floatBitsToInt(passParameterSem6);
R15i.xyzw = floatBitsToInt(texture(textureUnitPS1, intBitsToFloat(R4i.zw)).xyzw);
R7i.xyzw = floatBitsToInt(texture(textureUnitPS2, intBitsToFloat(R4i.zw)).xyzw);
R4i.w = floatBitsToInt(texture(textureUnitPS12, intBitsToFloat(R0i.xy)).x);
R5i.xyzw = floatBitsToInt(textureGather(textureUnitPS6, intBitsToFloat(R0i.xy)).xyzw);
// 0
backupReg0i = R4i.w;
PV0i.x = floatBitsToInt(intBitsToFloat(R15i.w) * intBitsToFloat(0x437f0000));
R126i.y = floatBitsToInt((intBitsToFloat(R7i.x) * 2.0 + -(1.0)));
PV0i.y = R126i.y;
R127i.z = floatBitsToInt((intBitsToFloat(R7i.y) * 2.0 + -(1.0)));
PV0i.z = R127i.z;
R4i.w = floatBitsToInt((intBitsToFloat(R7i.z) * 2.0 + -(1.0)));
PV0i.w = R4i.w;
R127i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(backupReg0i)),intBitsToFloat(uf_remappedPS[0].w)) + 1.0));
PS0i = R127i.y;
// 1
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),intBitsToFloat(PV0i.w),-0.0),vec4(intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),intBitsToFloat(PV0i.w),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R16i.w = int(intBitsToFloat(PV0i.x));
PS1i = R16i.w;
// 2
R127i.x = 0x358637bd;
R6i.y = 0;
PV0i.z = PS1i >> 0x00000005;
PV0i.w = floatBitsToInt(floor(intBitsToFloat(R3i.x)));
R6i.x = floatBitsToInt(sqrt(intBitsToFloat(PV1i.x)));
PS0i = R6i.x;
// 3
backupReg0i = R127i.y;
PV1i.x = floatBitsToInt(floor(intBitsToFloat(R3i.y)));
R127i.y = PV0i.z & 0x00000007;
R125i.z = floatBitsToInt(intBitsToFloat(PV0i.w) + -(0.5));
R124i.w = floatBitsToInt(intBitsToFloat(R3i.x) + -(intBitsToFloat(PV0i.w)));
PS1i = floatBitsToInt(1.0 / intBitsToFloat(backupReg0i));
// 4
R124i.x = floatBitsToInt(intBitsToFloat(PV1i.x) + -(0.5));
R124i.y = floatBitsToInt(intBitsToFloat(R3i.y) + -(intBitsToFloat(PV1i.x)));
R9i.z = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(uf_remappedPS[0].x)), intBitsToFloat(PS1i)));
PV0i.z = R9i.z;
R11i.w = floatBitsToInt(roundEven(0.0));
R6i.w = floatBitsToInt(1.0 / intBitsToFloat(R6i.x));
PS0i = R6i.w;
// 5
R4i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.y), intBitsToFloat(PS0i)));
R8i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(PS0i)));
R127i.z = floatBitsToInt(intBitsToFloat(uf_remappedPS[0].x) + intBitsToFloat(PV0i.z));
PV1i.z = R127i.z;
PV1i.w = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(PV0i.z)), intBitsToFloat(uf_remappedPS[1].y)));
PS1i = floatBitsToInt(float(R127i.y));
// 6
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),intBitsToFloat(uf_remappedPS[2].x)) + intBitsToFloat(R5i.y)));
PV0i.y = floatBitsToInt(intBitsToFloat(PS1i) + intBitsToFloat(0xc0000000));
R126i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),intBitsToFloat(uf_remappedPS[2].x)) + intBitsToFloat(R5i.w)));
R127i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),intBitsToFloat(uf_remappedPS[2].x)) + intBitsToFloat(R5i.x)));
R4i.y = floatBitsToInt(1.0 / intBitsToFloat(PV1i.w));
PS0i = R4i.y;
// 7
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R8i.y),intBitsToFloat(R127i.x),-0.0),vec4(intBitsToFloat(R4i.x),intBitsToFloat(R8i.y),intBitsToFloat(R127i.x),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
PS1i = floatBitsToInt(exp2(intBitsToFloat(PV0i.y)));
// 8
backupReg0i = R127i.z;
R5i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.y), intBitsToFloat(PS1i)));
PV0i.x = R5i.x;
R127i.y = floatBitsToInt(max(intBitsToFloat(R126i.x), -(intBitsToFloat(R126i.x))));
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(uf_remappedPS[2].x)) + intBitsToFloat(R5i.z)));
R126i.w = floatBitsToInt(max(intBitsToFloat(R126i.z), -(intBitsToFloat(R126i.z))));
tempResultf = 1.0 / sqrt(intBitsToFloat(PV1i.x));
PS0i = floatBitsToInt(tempResultf);
// 9
backupReg0i = R127i.w;
backupReg0i = R127i.w;
PV1i.x = floatBitsToInt(min(intBitsToFloat(PV0i.x), 2.0));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R8i.y), intBitsToFloat(PS0i)));
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.x), intBitsToFloat(PS0i)));
R125i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.y), intBitsToFloat(uf_remappedPS[3].x)));
PV1i.w = R125i.w;
R127i.w = floatBitsToInt(max(intBitsToFloat(backupReg0i), -(intBitsToFloat(backupReg0i))));
PS1i = R127i.w;
// 10
backupReg0i = R127i.y;
R126i.x = floatBitsToInt(intBitsToFloat(PV1i.x) * intBitsToFloat(0x40c00000));
PV0i.x = R126i.x;
R127i.y = floatBitsToInt(max(intBitsToFloat(R127i.z), -(intBitsToFloat(R127i.z))));
R127i.z = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(uf_remappedPS[4].w)), intBitsToFloat(PV1i.y)));
PV0i.z = R127i.z;
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PV1i.w)));
PS0i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.w), intBitsToFloat(PV1i.w)));
// 11
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[4].z), intBitsToFloat(R126i.z)));
PV1i.x = R127i.x;
R125i.y = R5i.x;
R125i.y = clampFI32(R125i.y);
PV1i.y = R125i.y;
R126i.z = floatBitsToInt(-(intBitsToFloat(PV0i.w)) + intBitsToFloat(PS0i));
PV1i.z = R126i.z;
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), intBitsToFloat(PV0i.x)));
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.w), intBitsToFloat(R125i.w)));
PS1i = R126i.y;
// 12
backupReg0i = R126i.x;
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), intBitsToFloat(R125i.w)));
PV0i.x = R126i.x;
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(backupReg0i)));
PV0i.z = floatBitsToInt(intBitsToFloat(PV1i.w) * intBitsToFloat(0x3e4ccccd));
PV0i.w = PV1i.y;
PV0i.w = floatBitsToInt(intBitsToFloat(PV0i.w) * 2.0);
R125i.x = floatBitsToInt(-(intBitsToFloat(PS1i)) + intBitsToFloat(PV1i.z));
PS0i = R125i.x;
// 13
R9i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.x),intBitsToFloat(PV0i.w)) + intBitsToFloat(R0i.x)));
R9i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.z),intBitsToFloat(PV0i.w)) + intBitsToFloat(R0i.y)));
PV1i.z = floatBitsToInt(-(intBitsToFloat(PV0i.x)) + intBitsToFloat(R126i.z));
R10i.w = floatBitsToInt(intBitsToFloat(R0i.x) + intBitsToFloat(PV0i.y));
R10i.y = floatBitsToInt(intBitsToFloat(R0i.y) + intBitsToFloat(PV0i.z));
PS1i = R10i.y;
// 14
backupReg0i = R0i.w;
R8i.x = floatBitsToInt(intBitsToFloat(R125i.y) * intBitsToFloat(0x40400000));
PV0i.y = floatBitsToInt(intBitsToFloat(R126i.x) + intBitsToFloat(R125i.x));
R8i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.z), intBitsToFloat(R9i.z)));
PV0i.w = floatBitsToInt(intBitsToFloat(R126i.y) + intBitsToFloat(PV1i.z));
R13i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(R9i.z)));
PS0i = R13i.y;
// 15
PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.y) + intBitsToFloat(R124i.y));
PV1i.x = clampFI32(PV1i.x);
R5i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.w), intBitsToFloat(R6i.w)));
PV1i.z = floatBitsToInt(intBitsToFloat(PV0i.w) + intBitsToFloat(R124i.w));
PV1i.z = clampFI32(PV1i.z);
R6i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.x),intBitsToFloat(R9i.x)) + intBitsToFloat(R1i.z)));
R4i.w = 0;
PS1i = R4i.w;
// 16
PV0i.x = floatBitsToInt(intBitsToFloat(PV1i.x) + intBitsToFloat(R124i.x));
R12i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.y),intBitsToFloat(R9i.y)) + intBitsToFloat(R1i.w)));
R4i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.x),intBitsToFloat(R10i.w)) + intBitsToFloat(R1i.z)));
PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.z) + intBitsToFloat(R125i.z));
R6i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.y),intBitsToFloat(R10i.y)) + intBitsToFloat(R1i.w)));
PS0i = R6i.z;
// 17
R11i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(PV0i.w)));
R11i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.w), intBitsToFloat(PV0i.x)));
R13i.z = floatBitsToInt(intBitsToFloat(0x3df5c28f) * intBitsToFloat(uf_remappedPS[1].z));
PV1i.w = R16i.w >> int(1);
R3i.z = floatBitsToInt(intBitsToFloat(R5i.x) * intBitsToFloat(0x40c00000));
PS1i = R3i.z;
// 18
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R8i.z),intBitsToFloat(R13i.y),intBitsToFloat(R9i.z),-0.0),vec4(intBitsToFloat(R8i.z),intBitsToFloat(R13i.y),intBitsToFloat(R9i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R125i.z = PV1i.w & 0x0000000f;
PS0i = R125i.z;
// 19
R124i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R7i.w), intBitsToFloat(R7i.w)));
R7i.y = floatBitsToInt(max(intBitsToFloat(R15i.y), intBitsToFloat(R15i.z)));
R5i.z = floatBitsToInt((intBitsToFloat(R4i.y) * intBitsToFloat(0x3dcccccd) + 1.0));
R124i.w = floatBitsToInt(intBitsToFloat(R3i.z) * intBitsToFloat(0x3e4ccccd));
R124i.w = clampFI32(R124i.w);
PS1i = floatBitsToInt(sqrt(intBitsToFloat(PV0i.x)));
// 20
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R8i.y),intBitsToFloat(R5i.y),-0.0),vec4(intBitsToFloat(uf_remappedPS[5].x),intBitsToFloat(uf_remappedPS[5].y),intBitsToFloat(uf_remappedPS[5].z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R7i.z = tempi.x;
PS0i = floatBitsToInt(1.0 / intBitsToFloat(PS1i));
// 21
R10i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R8i.z), intBitsToFloat(PS0i)));
R3i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R13i.y), intBitsToFloat(PS0i)));
R10i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R9i.z), intBitsToFloat(PS0i)));
R8i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.w), intBitsToFloat(R124i.x)));
R4i.y = floatBitsToInt(float(R125i.z));
PS1i = R4i.y;
// 0
backupReg0i = R4i.y;
backupReg1i = R7i.z;
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[5].x), intBitsToFloat(uf_remappedPS[6].w)));
PV0i.x = R127i.x;
R4i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[5].y), intBitsToFloat(uf_remappedPS[6].w)));
PV0i.y = R4i.y;
R7i.z = floatBitsToInt(intBitsToFloat(backupReg0i) * intBitsToFloat(0x3d888889));
R127i.w = floatBitsToInt(max(-(intBitsToFloat(backupReg1i)), 0.0));
R13i.x = floatBitsToInt(max(intBitsToFloat(R15i.x), intBitsToFloat(R7i.y)));
PS0i = R13i.x;
// 1
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(R6i.y),-0.0),vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(R6i.y),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R124i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[5].z), intBitsToFloat(uf_remappedPS[6].w)));
PS1i = R124i.z;
// 2
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R8i.y),intBitsToFloat(R5i.y),-0.0),vec4(intBitsToFloat(R10i.x),intBitsToFloat(R3i.y),intBitsToFloat(R10i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
tempResultf = 1.0 / sqrt(intBitsToFloat(PV1i.x));
PS0i = floatBitsToInt(tempResultf);
// 3
R7i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(PS0i)));
R6i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.y), intBitsToFloat(PS0i)));
R125i.z = floatBitsToInt((intBitsToFloat(R10i.x) * intBitsToFloat(0xbe99999a) + -(intBitsToFloat(R127i.x))));
R3i.w = floatBitsToInt(intBitsToFloat(PV0i.x) + 1.0);
R3i.w = clampFI32(R3i.w);
PV1i.w = R3i.w;
R124i.y = floatBitsToInt((intBitsToFloat(R3i.y) * intBitsToFloat(0xbe99999a) + -(intBitsToFloat(R4i.y))));
PS1i = R124i.y;
// 4
R124i.x = floatBitsToInt((intBitsToFloat(R10i.z) * intBitsToFloat(0xbe99999a) + -(intBitsToFloat(R124i.z))));
PV0i.x = R124i.x;
R125i.y = floatBitsToInt(intBitsToFloat(R10i.x) + intBitsToFloat(R127i.x));
PV0i.z = floatBitsToInt(-(intBitsToFloat(PV1i.w)) + 1.0);
R125i.w = floatBitsToInt(intBitsToFloat(R3i.y) + intBitsToFloat(R4i.y));
R127i.z = floatBitsToInt(intBitsToFloat(R10i.z) + intBitsToFloat(R124i.z));
PS0i = R127i.z;
// 5
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R125i.z),intBitsToFloat(R124i.y),intBitsToFloat(PV0i.x),-0.0),vec4(intBitsToFloat(R125i.z),intBitsToFloat(R124i.y),intBitsToFloat(PV0i.x),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
tempResultf = log2(intBitsToFloat(PV0i.z));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
R126i.y = floatBitsToInt(tempResultf);
PS1i = R126i.y;
// 6
R125i.x = floatBitsToInt((intBitsToFloat(R127i.x) * intBitsToFloat(0xbf4ccccd) + intBitsToFloat(R10i.x)));
R127i.y = floatBitsToInt((intBitsToFloat(R4i.y) * intBitsToFloat(0xbf4ccccd) + intBitsToFloat(R3i.y)));
R126i.z = floatBitsToInt((intBitsToFloat(R124i.z) * intBitsToFloat(0xbf4ccccd) + intBitsToFloat(R10i.z)));
PV0i.w = floatBitsToInt(intBitsToFloat(PS1i) * intBitsToFloat(0x3e4ccccd));
tempResultf = 1.0 / sqrt(intBitsToFloat(PV1i.x));
R124i.w = floatBitsToInt(tempResultf);
PS0i = R124i.w;
// 7
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R125i.y),intBitsToFloat(R125i.w),intBitsToFloat(R127i.z),-0.0),vec4(intBitsToFloat(R125i.y),intBitsToFloat(R125i.w),intBitsToFloat(R127i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R3i.x = floatBitsToInt(exp2(intBitsToFloat(PV0i.w)));
PS1i = R3i.x;
// 8
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.z), intBitsToFloat(R124i.w)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.y), intBitsToFloat(R124i.w)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.x), intBitsToFloat(R124i.w)));
R126i.w = floatBitsToInt(intBitsToFloat(R126i.y) * intBitsToFloat(0x41000000));
tempResultf = 1.0 / sqrt(intBitsToFloat(PV1i.x));
R124i.w = floatBitsToInt(tempResultf);
PS0i = R124i.w;
// 9
R126i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R8i.y),intBitsToFloat(R5i.y),-0.0),vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),0.0)));
R126i.x = clampFI32(R126i.x);
PV1i.x = R126i.x;
PV1i.y = R126i.x;
PV1i.z = R126i.x;
PV1i.w = R126i.x;
R124i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.y), intBitsToFloat(PS0i)));
PS1i = R124i.x;
// 10
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R125i.x),intBitsToFloat(R127i.y),intBitsToFloat(R126i.z),-0.0),vec4(intBitsToFloat(R125i.x),intBitsToFloat(R127i.y),intBitsToFloat(R126i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R125i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.w), intBitsToFloat(R124i.w)));
PS0i = R125i.y;
// 11
R12i.x = R5i.x;
R12i.x = floatBitsToInt(intBitsToFloat(R12i.x) * 4.0);
R12i.x = clampFI32(R12i.x);
R7i.y = R3i.z;
R7i.y = clampFI32(R7i.y);
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(R124i.w)));
R5i.w = floatBitsToInt(min(intBitsToFloat(R127i.w), 1.0));
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.x));
R127i.w = floatBitsToInt(tempResultf);
PS1i = R127i.w;
// 12
backupReg0i = R126i.x;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R8i.y),intBitsToFloat(R5i.y),-0.0),vec4(intBitsToFloat(R124i.x),intBitsToFloat(R125i.y),intBitsToFloat(PV1i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R124i.w = tempi.x;
tempResultf = log2(intBitsToFloat(backupReg0i));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
R126i.x = floatBitsToInt(tempResultf);
PS0i = R126i.x;
// 13
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R8i.y),intBitsToFloat(R5i.y),intBitsToFloat(R5i.y)),vec4(-(intBitsToFloat(R127i.x)),-(intBitsToFloat(R4i.y)),-(intBitsToFloat(R124i.z)),-(intBitsToFloat(R4i.w)))));
tempi.x = clampFI32(tempi.x);
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R11i.z = tempi.x;
R3i.z = floatBitsToInt(exp2(intBitsToFloat(R126i.w)));
PS1i = R3i.z;
// 14
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.x), intBitsToFloat(R127i.w)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), intBitsToFloat(R127i.w)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.z), intBitsToFloat(R127i.w)));
PV0i.w = floatBitsToInt(max(-(intBitsToFloat(R124i.w)), 0.0));
R127i.w = floatBitsToInt(intBitsToFloat(R126i.x) * intBitsToFloat(0x41a00000));
PS0i = R127i.w;
// 15
R126i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R8i.y),intBitsToFloat(R5i.y),-0.0),vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),0.0)));
PV1i.x = R126i.x;
PV1i.y = R126i.x;
PV1i.z = R126i.x;
PV1i.w = R126i.x;
R127i.y = floatBitsToInt(min(intBitsToFloat(PV0i.w), 1.0));
PS1i = R127i.y;
// 16
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R10i.x),intBitsToFloat(R3i.y),intBitsToFloat(R10i.z),-0.0),vec4(intBitsToFloat(R127i.x),intBitsToFloat(R4i.y),intBitsToFloat(R124i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R12i.z = floatBitsToInt(exp2(intBitsToFloat(R127i.w)));
PS0i = R12i.z;
// 17
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.z),intBitsToFloat(R127i.y)) + -(0.5)));
PV1i.x = R123i.x;
R4i.y = floatBitsToInt((-(intBitsToFloat(PV0i.x)) * intBitsToFloat(0x40a00000) + intBitsToFloat(0x40a00000)));
R4i.y = clampFI32(R4i.y);
PV1i.z = floatBitsToInt(max(-(intBitsToFloat(PV0i.x)), 0.0));
R7i.w = floatBitsToInt(intBitsToFloat(R126i.x) + 1.0);
R7i.w = clampFI32(R7i.w);
R8i.y = floatBitsToInt(intBitsToFloat(R5i.z) * intBitsToFloat(0x42960000));
PS1i = R8i.y;
// 18
PV0i.x = floatBitsToInt(intBitsToFloat(PV1i.x) * intBitsToFloat(0x42200000));
PV0i.x = clampFI32(PV0i.x);
PV0i.y = floatBitsToInt(min(intBitsToFloat(R15i.y), intBitsToFloat(R15i.z)));
PV0i.z = floatBitsToInt(intBitsToFloat(R13i.x) + intBitsToFloat(0x2edbe6ff));
R14i.w = floatBitsToInt(min(intBitsToFloat(PV1i.z), 1.0));
PV0i.w = R14i.w;
R4i.x = floatBitsToInt(intBitsToFloat(R2i.x) * intBitsToFloat(0x3f4ccccd));
PS0i = R4i.x;
// 19
backupReg0i = R6i.x;
R6i.x = floatBitsToInt((intBitsToFloat(backupReg0i) * 4.0 + intBitsToFloat(0xc0400000)));
R6i.x = clampFI32(R6i.x);
R14i.y = floatBitsToInt(min(intBitsToFloat(R15i.x), intBitsToFloat(PV0i.y)));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(PV0i.x)));
R12i.w = floatBitsToInt(intBitsToFloat(R2i.y) * intBitsToFloat(0x3f4ccccd));
PV1i.w = R12i.w;
R14i.z = floatBitsToInt(1.0 / intBitsToFloat(PV0i.z));
PS1i = R14i.z;
// 20
backupReg0i = R5i.x;
R5i.x = floatBitsToInt(intBitsToFloat(uf_remappedPS[7].x) + -(intBitsToFloat(R4i.x)));
R5i.y = floatBitsToInt(intBitsToFloat(PV1i.z) * intBitsToFloat(0x3e19999a));
R5i.z = backupReg0i;
R5i.z = floatBitsToInt(intBitsToFloat(R5i.z) * 2.0);
R5i.z = clampFI32(R5i.z);
R9i.w = floatBitsToInt(intBitsToFloat(uf_remappedPS[7].y) + -(intBitsToFloat(PV1i.w)));
R7i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.w), intBitsToFloat(R14i.w)));
PS0i = R7i.z;
// 0
backupReg0i = R6i.x;
backupReg1i = R6i.y;
R6i.x = floatBitsToInt(intBitsToFloat(backupReg0i) + -(0.5));
R6i.x = floatBitsToInt(intBitsToFloat(R6i.x) * 4.0);
R6i.x = clampFI32(R6i.x);
R6i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R14i.y)),intBitsToFloat(R14i.z)) + 1.0));
PV0i.z = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(uf_remappedPS[4].w)), intBitsToFloat(backupReg1i)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[4].z), intBitsToFloat(R7i.x)));
tempResultf = log2(intBitsToFloat(R13i.x));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0i = floatBitsToInt(tempResultf);
// 1
backupReg0i = R0i.x;
backupReg1i = R0i.y;
R0i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(R8i.x)) + intBitsToFloat(backupReg0i)));
R0i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(R8i.x)) + intBitsToFloat(backupReg1i)));
R0i.z = floatBitsToInt(intBitsToFloat(PS0i) * intBitsToFloat(0x3f19999a));
R13i.w = floatBitsToInt(intBitsToFloat(R5i.z) * 0.25);
R5i.z = floatBitsToInt(intBitsToFloat(R2i.z) * intBitsToFloat(0x3f4ccccd));
PS1i = R5i.z;
R0i.w = floatBitsToInt(texture(textureUnitPS4, intBitsToFloat(R9i.xy)).x);
R9i.x = floatBitsToInt(texture(textureUnitPS4, intBitsToFloat(R10i.wy)).x);
R10i.w = floatBitsToInt(texture(textureUnitPS4, intBitsToFloat(R0i.xy)).x);
R4i.w = floatBitsToInt(texture(textureUnitPS13, intBitsToFloat(R11i.xy)).w);
R17i.xyz = floatBitsToInt(texture(textureUnitPS9, intBitsToFloat(R11i.xy)).xyz);
R16i.xyz = floatBitsToInt(texture(textureUnitPS8, vec3(intBitsToFloat(R11i.x),intBitsToFloat(R11i.y),intBitsToFloat(R11i.w))).xyz);
R18i.xyz = floatBitsToInt(texture(textureUnitPS11, intBitsToFloat(R11i.xy)).xyz);
// 0
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.x),intBitsToFloat(R0i.x)) + intBitsToFloat(R1i.z)));
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[3].x),intBitsToFloat(R9i.x)) + intBitsToFloat(uf_remappedPS[0].x)));
PV0i.y = R127i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[3].x),intBitsToFloat(R0i.w)) + intBitsToFloat(uf_remappedPS[0].x)));
PV0i.z = R123i.z;
R127i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.y),intBitsToFloat(R0i.y)) + intBitsToFloat(R1i.w)));
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[3].x),intBitsToFloat(R10i.w)) + intBitsToFloat(uf_remappedPS[0].x)));
PS0i = R126i.y;
// 1
PV1i.x = floatBitsToInt(-(intBitsToFloat(PV0i.z)));
R125i.y = floatBitsToInt(-(intBitsToFloat(PV0i.y)));
PV1i.z = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(PV0i.z)), intBitsToFloat(R6i.w)));
PV1i.w = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(PV0i.z)), intBitsToFloat(R12i.y)));
PS1i = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(PV0i.y)), intBitsToFloat(R4i.z)));
// 2
PV0i.x = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(R127i.y)), intBitsToFloat(R6i.z)));
R127i.y = floatBitsToInt(-(intBitsToFloat(R8i.z)) + intBitsToFloat(PV1i.z));
R126i.z = floatBitsToInt(-(intBitsToFloat(R13i.y)) + intBitsToFloat(PV1i.w));
R124i.w = floatBitsToInt(-(intBitsToFloat(R9i.z)) + intBitsToFloat(PV1i.x));
R125i.x = floatBitsToInt(-(intBitsToFloat(R8i.z)) + intBitsToFloat(PS1i));
PS0i = R125i.x;
// 3
backupReg0i = R126i.y;
backupReg0i = R126i.y;
backupReg1i = R127i.w;
R127i.x = floatBitsToInt(-(intBitsToFloat(R126i.y)));
R126i.y = floatBitsToInt(-(intBitsToFloat(R13i.y)) + intBitsToFloat(PV0i.x));
R124i.z = floatBitsToInt(-(intBitsToFloat(R9i.z)) + intBitsToFloat(R125i.y));
R127i.w = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(backupReg0i)), intBitsToFloat(R126i.x)));
R126i.x = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(backupReg0i)), intBitsToFloat(backupReg1i)));
PS1i = R126i.x;
// 4
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R10i.x),intBitsToFloat(R3i.y),intBitsToFloat(R10i.z),-0.0),vec4(intBitsToFloat(R127i.y),intBitsToFloat(R126i.z),intBitsToFloat(R124i.w),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R125i.y = tempi.x;
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.w), intBitsToFloat(R3i.x)));
PS0i = R127i.z;
// 5
backupReg0i = R127i.w;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R10i.x),intBitsToFloat(R3i.y),intBitsToFloat(R10i.z),-0.0),vec4(intBitsToFloat(R125i.x),intBitsToFloat(R126i.y),intBitsToFloat(R124i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R127i.w = tempi.x;
R124i.x = floatBitsToInt(-(intBitsToFloat(R8i.z)) + intBitsToFloat(backupReg0i));
PS1i = R124i.x;
// 6
backupReg0i = R127i.x;
backupReg1i = R124i.w;
backupReg2i = R124i.z;
R127i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R10i.x)),intBitsToFloat(R125i.y)) + intBitsToFloat(R127i.y)));
R127i.y = floatBitsToInt(-(intBitsToFloat(R13i.y)) + intBitsToFloat(R126i.x));
R125i.z = floatBitsToInt(-(intBitsToFloat(R9i.z)) + intBitsToFloat(backupReg0i));
R124i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R10i.z)),intBitsToFloat(R125i.y)) + intBitsToFloat(backupReg1i)));
R124i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R10i.z)),intBitsToFloat(PV1i.x)) + intBitsToFloat(backupReg2i)));
PS0i = R124i.z;
// 7
backupReg0i = R125i.x;
backupReg1i = R127i.z;
backupReg1i = R127i.z;
R125i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R10i.x)),intBitsToFloat(R127i.w)) + intBitsToFloat(backupReg0i)));
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R3i.y)),intBitsToFloat(R125i.y)) + intBitsToFloat(R126i.z)));
PV1i.y = R123i.y;
R127i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R3i.y)),intBitsToFloat(R127i.w)) + intBitsToFloat(R126i.y)));
PV1i.w = floatBitsToInt(intBitsToFloat(backupReg1i) + intBitsToFloat(0xbf400000));
R126i.y = floatBitsToInt((intBitsToFloat(backupReg1i) * intBitsToFloat(0x3e99999a) + intBitsToFloat(0xbecccccd)));
PS1i = R126i.y;
// 8
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(PV1i.y),intBitsToFloat(R124i.w),-0.0),vec4(intBitsToFloat(R127i.x),intBitsToFloat(PV1i.y),intBitsToFloat(R124i.w),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R4i.w = floatBitsToInt(intBitsToFloat(PV1i.w) * intBitsToFloat(0x41800000));
R4i.w = clampFI32(R4i.w);
PS0i = R4i.w;
// 9
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R125i.x),intBitsToFloat(R127i.z),intBitsToFloat(R124i.z),-0.0),vec4(intBitsToFloat(R125i.x),intBitsToFloat(R127i.z),intBitsToFloat(R124i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.x));
R127i.z = floatBitsToInt(tempResultf);
PS1i = R127i.z;
// 10
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R10i.x),intBitsToFloat(R3i.y),intBitsToFloat(R10i.z),-0.0),vec4(intBitsToFloat(R124i.x),intBitsToFloat(R127i.y),intBitsToFloat(R125i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R124i.w = tempi.x;
tempResultf = 1.0 / sqrt(intBitsToFloat(PV1i.x));
PS0i = floatBitsToInt(tempResultf);
// 11
backupReg0i = R127i.w;
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R10i.x)),intBitsToFloat(PV0i.x)) + intBitsToFloat(R124i.x)));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R3i.y)),intBitsToFloat(PV0i.x)) + intBitsToFloat(R127i.y)));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R10i.z)),intBitsToFloat(PV0i.x)) + intBitsToFloat(R125i.z)));
PV1i.z = R123i.z;
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.y), intBitsToFloat(R127i.z)));
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PS0i)));
PS1i = R127i.z;
// 12
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.z),-0.0),vec4(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.w), intBitsToFloat(R3i.z)));
R126i.w = clampFI32(R126i.w);
PS0i = R126i.w;
// 13
PV1i.x = floatBitsToInt(intBitsToFloat(R17i.x) + intBitsToFloat(0xbecccccd));
PV1i.y = floatBitsToInt(intBitsToFloat(R127i.z) * intBitsToFloat(0x3c23d70a));
PV1i.y = clampFI32(PV1i.y);
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R13i.z), intBitsToFloat(R127i.w)));
R127i.z = clampFI32(R127i.z);
PV1i.w = floatBitsToInt(intBitsToFloat(R126i.y) + intBitsToFloat(R11i.z));
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.x));
PS1i = floatBitsToInt(tempResultf);
// 14
PV0i.x = floatBitsToInt(intBitsToFloat(PV1i.w) * intBitsToFloat(0x42960000));
PV0i.x = clampFI32(PV0i.x);
PV0i.y = floatBitsToInt(intBitsToFloat(R126i.w) + intBitsToFloat(R12i.z));
PV0i.y = clampFI32(PV0i.y);
PV0i.z = floatBitsToInt(intBitsToFloat(PV1i.x) * intBitsToFloat(0x41200000));
PV0i.z = clampFI32(PV0i.z);
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.w), intBitsToFloat(PS1i)));
R125i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.y), intBitsToFloat(R7i.w)));
PS0i = R125i.z;
// 15
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.w), intBitsToFloat(R127i.z)));
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R17i.y), intBitsToFloat(PV0i.z)));
PV1i.y = R127i.y;
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.y), intBitsToFloat(PV0i.x)));
R124i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.w), intBitsToFloat(PV0i.y)));
PS1i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R13i.z), intBitsToFloat(PV0i.w)));
PS1i = clampFI32(PS1i);
// 16
PV0i.x = floatBitsToInt(intBitsToFloat(PV1i.y) + -(1.0));
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.z)) + intBitsToFloat(0xbecccccd)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.z),intBitsToFloat(R14i.w)) + intBitsToFloat(0xbecccccd)));
PV0i.z = R123i.z;
PV0i.w = floatBitsToInt(intBitsToFloat(R2i.w) + -(intBitsToFloat(R4i.w)));
PV0i.w = clampFI32(PV0i.w);
R124i.x = floatBitsToInt(intBitsToFloat(PS1i) + -(0.5));
PS0i = R124i.x;
// 17
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.w),intBitsToFloat(R8i.w)) + intBitsToFloat(0xbd4ccccd)));
PV1i.x = R123i.x;
R4i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.w)) + 1.0));
PV1i.z = floatBitsToInt(intBitsToFloat(R126i.y) + intBitsToFloat(R5i.w));
PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.y) * intBitsToFloat(0x42960000));
PV1i.w = clampFI32(PV1i.w);
PS1i = floatBitsToInt(intBitsToFloat(PV0i.z) * intBitsToFloat(0x42960000));
PS1i = clampFI32(PS1i);
// 18
backupReg0i = R12i.x;
R12i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(PS1i)) + intBitsToFloat(R5i.y)));
R12i.x = clampFI32(R12i.x);
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.z), intBitsToFloat(R8i.y)));
R126i.y = clampFI32(R126i.y);
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.w),intBitsToFloat(R8i.w)) + intBitsToFloat(0xbc23d70a)));
PV0i.z = R123i.z;
PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.x) * intBitsToFloat(0x41a00000));
PV0i.w = clampFI32(PV0i.w);
R124i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R7i.y), intBitsToFloat(PV1i.w)));
R124i.w = floatBitsToInt(intBitsToFloat(R124i.w) * 2.0);
PS0i = R124i.w;
// 19
PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.w) * intBitsToFloat(0x3df5c28f));
PV1i.y = floatBitsToInt(intBitsToFloat(PV0i.z) * intBitsToFloat(0x42480000));
PV1i.y = clampFI32(PV1i.y);
PV1i.z = floatBitsToInt(intBitsToFloat(R4i.y) + intBitsToFloat(0x3da3d70a));
PV1i.w = floatBitsToInt(intBitsToFloat(R124i.x) * intBitsToFloat(0x42200000));
PV1i.w = clampFI32(PV1i.w);
R8i.y = floatBitsToInt(intBitsToFloat(R2i.w) + intBitsToFloat(R127i.y));
R8i.y = clampFI32(R8i.y);
PS1i = R8i.y;
// 20
R10i.x = floatBitsToInt(intBitsToFloat(PV1i.w) * intBitsToFloat(0x41000000));
R5i.y = floatBitsToInt(intBitsToFloat(R126i.w) + intBitsToFloat(PV1i.z));
R5i.y = clampFI32(R5i.y);
R13i.z = floatBitsToInt(intBitsToFloat(R124i.w) * intBitsToFloat(0x3e4ccccd));
R8i.w = floatBitsToInt((intBitsToFloat(PV1i.y) * intBitsToFloat(0x3d4ccccd) + intBitsToFloat(PV1i.x)));
R8i.w = clampFI32(R8i.w);
R7i.y = floatBitsToInt(intBitsToFloat(R4i.w) + intBitsToFloat(R126i.y));
R7i.y = clampFI32(R7i.y);
PS0i = R7i.y;
// 0
PV0i.x = floatBitsToInt(-(intBitsToFloat(R12i.x)) + intBitsToFloat(R4i.y));
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.y),intBitsToFloat(R8i.w)) + intBitsToFloat(R13i.z)));
R126i.y = clampFI32(R126i.y);
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.x),intBitsToFloat(R8i.y)) + intBitsToFloat(R4i.x)));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R9i.w),intBitsToFloat(R8i.y)) + intBitsToFloat(R12i.w)));
PV0i.w = R123i.w;
R127i.y = floatBitsToInt(exp2(intBitsToFloat(R0i.z)));
PS0i = R127i.y;
// 1
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R7i.z), intBitsToFloat(R10i.x)));
PV1i.x = clampFI32(PV1i.x);
R124i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(uf_remappedPS[8].y)));
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), intBitsToFloat(uf_remappedPS[8].x)));
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(R7i.y)) + intBitsToFloat(R12i.x)));
PV1i.w = R123i.w;
R122i.x = floatBitsToInt((-(intBitsToFloat(R6i.y)) * intBitsToFloat(0x40400000) + intBitsToFloat(0x40400000)));
PS1i = R122i.x;
// 2
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.x), intBitsToFloat(PV1i.w)));
PV0i.x = R127i.x;
PV0i.y = floatBitsToInt(intBitsToFloat(R6i.y) + intBitsToFloat(0x2edbe6ff));
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),intBitsToFloat(R13i.w)) + intBitsToFloat(R126i.y)));
R127i.z = clampFI32(R127i.z);
PV0i.z = R127i.z;
R126i.w = floatBitsToInt(intBitsToFloat(R6i.x) + intBitsToFloat(0x3f4ccccd));
R126i.w = clampFI32(R126i.w);
R125i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PS1i),intBitsToFloat(R127i.y)) + intBitsToFloat(R127i.y)));
PS0i = R125i.x;
// 3
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R6i.y)),intBitsToFloat(PV0i.z)) + intBitsToFloat(R6i.y)));
R123i.x = clampFI32(R123i.x);
PV1i.x = R123i.x;
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.w),-(intBitsToFloat(PV0i.x))) + intBitsToFloat(R2i.w)));
PV1i.z = floatBitsToInt(intBitsToFloat(uf_remappedPS[7].z) + -(intBitsToFloat(R5i.z)));
R124i.w = floatBitsToInt(intBitsToFloat(R126i.z) * intBitsToFloat(0x3da3d70a));
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PV0i.y));
// 4
R124i.x = floatBitsToInt(intBitsToFloat(R124i.y) * intBitsToFloat(0x3d23d70a));
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),intBitsToFloat(R8i.y)) + intBitsToFloat(R5i.z)));
R125i.z = floatBitsToInt(intBitsToFloat(R126i.w) + -(1.0));
R126i.w = floatBitsToInt(intBitsToFloat(R14i.w) * intBitsToFloat(0x40a00000));
R126i.w = clampFI32(R126i.w);
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(PS1i)));
PS0i = R126i.x;
// 5
backupReg0i = R124i.w;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R16i.x),intBitsToFloat(R16i.y),intBitsToFloat(R16i.z),-0.0),vec4(intBitsToFloat(0x3e99096c),intBitsToFloat(0x3f162b6b),intBitsToFloat(0x3dea4a8c),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R124i.z = tempi.x;
R124i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.y),intBitsToFloat(backupReg0i)) + intBitsToFloat(R2i.x)));
PS1i = R124i.w;
// 6
backupReg0i = R127i.z;
PV0i.x = floatBitsToInt(-(intBitsToFloat(R14i.y)) + intBitsToFloat(R13i.x));
R125i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.z),intBitsToFloat(R126i.w)) + 1.0));
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.y),intBitsToFloat(R124i.x)) + intBitsToFloat(R2i.y)));
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(R125i.x)) + intBitsToFloat(R13i.x)));
R123i.w = clampFI32(R123i.w);
PV0i.w = R123i.w;
R127i.y = ((intBitsToFloat(PV1i.x) > 0.0)?int(0xFFFFFFFF):int(0x0));
PS0i = R127i.y;
// 7
backupReg0i = R126i.y;
R125i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R14i.z), intBitsToFloat(PV0i.w)));
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(uf_remappedPS[8].z)));
PV1i.z = floatBitsToInt(intBitsToFloat(R15i.x) + -(intBitsToFloat(R14i.y)));
R126i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R126i.x)),intBitsToFloat(PV0i.x)) + intBitsToFloat(R13i.x)));
PV1i.w = R126i.w;
PS1i = floatBitsToInt(1.0 / intBitsToFloat(R124i.z));
// 8
backupReg0i = R127i.x;
backupReg1i = R127i.y;
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].w), intBitsToFloat(backupReg0i)));
R127i.y = floatBitsToInt(intBitsToFloat(R15i.z) + -(intBitsToFloat(R14i.y)));
PV0i.z = floatBitsToInt(intBitsToFloat(R15i.y) + -(intBitsToFloat(R14i.y)));
R123i.w = ((backupReg1i == 0)?(0):(PS1i));
PV0i.w = R123i.w;
R124i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.x),intBitsToFloat(PV1i.z)) + intBitsToFloat(PV1i.w)));
PS0i = R124i.z;
// 9
backupReg0i = R125i.y;
backupReg0i = R125i.y;
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.w), intBitsToFloat(R125i.y)));
R125i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.w), intBitsToFloat(PV0i.w)));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.z), intBitsToFloat(backupReg0i)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(backupReg0i)));
R2i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.x),intBitsToFloat(PV0i.z)) + intBitsToFloat(R126i.w)));
PS1i = R2i.y;
// 10
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.y),intBitsToFloat(R127i.x)) + intBitsToFloat(PV1i.w)));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.z),intBitsToFloat(R127i.x)) + intBitsToFloat(PV1i.x)));
PV0i.y = R123i.y;
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.x),intBitsToFloat(R127i.y)) + intBitsToFloat(R126i.w)));
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.y),intBitsToFloat(R127i.x)) + intBitsToFloat(PV1i.z)));
PV0i.w = R123i.w;
R126i.z = floatBitsToInt(intBitsToFloat(0x3f895ef0) * intBitsToFloat(R125i.x));
PS0i = R126i.z;
// 11
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R16i.y),intBitsToFloat(R125i.y)) + intBitsToFloat(PV0i.x)));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R16i.x),intBitsToFloat(R125i.y)) + intBitsToFloat(PV0i.y)));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PS0i),intBitsToFloat(R124i.z)) + intBitsToFloat(0xba0a8ec8)));
R123i.z = clampFI32(R123i.z);
PV1i.z = R123i.z;
R126i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R16i.z),intBitsToFloat(R125i.y)) + intBitsToFloat(PV0i.w)));
R122i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PS0i),intBitsToFloat(R2i.y)) + intBitsToFloat(0xba0a8ec8)));
R122i.x = clampFI32(R122i.x);
PS1i = R122i.x;
// 12
PV0i.x = R16i.w & int(1);
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(PS1i)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.y), intBitsToFloat(PV1i.z)));
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.z),intBitsToFloat(R127i.z)) + intBitsToFloat(0xba0a8ec8)));
R123i.w = clampFI32(R123i.w);
PV0i.w = R123i.w;
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R17i.z), intBitsToFloat(R17i.z)));
PS0i = R127i.x;
// 13
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.w), intBitsToFloat(PV0i.w)));
R123i.z = floatBitsToInt((intBitsToFloat(PV0i.y) * intBitsToFloat(0x3f6e896b) + intBitsToFloat(0x3a011b1e)));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((intBitsToFloat(PV0i.z) * intBitsToFloat(0x3f6e896b) + intBitsToFloat(0x3a011b1e)));
PV1i.w = R123i.w;
PS1i = floatBitsToInt(float(PV0i.x));
// 14
R16i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R17i.z),intBitsToFloat(PV1i.w)) + intBitsToFloat(R18i.x)));
R123i.y = floatBitsToInt((intBitsToFloat(PV1i.x) * intBitsToFloat(0x3f6e896b) + intBitsToFloat(0x3a011b1e)));
PV0i.y = R123i.y;
R16i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(R127i.x)));
R16i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R17i.z),intBitsToFloat(PV1i.z)) + intBitsToFloat(R18i.y)));
PS0i = R16i.y;
// 15
R16i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R17i.z),intBitsToFloat(PV0i.y)) + intBitsToFloat(R18i.z)));
// export
passPixelColor0 = vec4(intBitsToFloat(R16i.x), intBitsToFloat(R16i.y), intBitsToFloat(R16i.z), intBitsToFloat(R16i.w));
float luma = dot(passPixelColor0.rgb, vec3(0.2126, 0.7152, 0.0722));
passPixelColor0.rgb = vec3(luma);
}
