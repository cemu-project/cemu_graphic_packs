#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 7f33027db819f935
// Monochromia
// Terrain - rainy weather
// original shader dumped using cemu 1.11.2, BotW 1.4.0
#define ENABLE_COLOR_FADE 0 // set this to 1 to enable, 0 to disable the effect

uniform ivec4 uf_remappedPS[10];
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0xf45c6000 res 1280x720x1 dim 1 tm: 4 format 041a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 2) uniform sampler2D textureUnitPS2;// Tex2 addr 0xf494a800 res 1280x720x1 dim 1 tm: 4 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 4) uniform sampler2D textureUnitPS4;// Tex4 addr 0xf4e91800 res 1280x720x1 dim 1 tm: 4 format 0806 compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler4 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 6) uniform sampler2D textureUnitPS6;// Tex6 addr 0xf5054000 res 640x360x1 dim 1 tm: 4 format 080e compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler6 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 7) uniform sampler2D textureUnitPS7;// Tex7 addr 0xf5846000 res 640x360x1 dim 1 tm: 4 format 0001 compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler7 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 8) uniform samplerCubeArray textureUnitPS8;// Tex8 addr 0x3da46800 res 64x64x1 dim 3 tm: 4 format 0816 compSel: 0 1 2 5 mipView: 0x0 (num 0x4) sliceView: 0x0 (num 0x6) Sampler8 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 10) uniform sampler2DArray textureUnitPS10;// Tex10 addr 0xf5593000 res 640x360x2 dim 5 tm: 4 format 0816 compSel: 0 1 2 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x2) Sampler10 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 11) uniform sampler2D textureUnitPS11;// Tex11 addr 0xf575f800 res 640x360x1 dim 1 tm: 4 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler11 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 13) uniform sampler2D textureUnitPS13;// Tex13 addr 0xf5977800 res 640x360x1 dim 1 tm: 4 format 0816 compSel: 0 1 2 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler13 ClampX/Y/Z: 2 2 2 border: 1
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem3;
layout(location = 3) in vec4 passParameterSem4;
layout(location = 4) in vec4 passParameterSem6;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
void redcCUBE(vec4 src0, vec4 src1, out vec3 stm, out int faceId)
{
// stm -> x .. s, y .. t, z .. MajorAxis*2.0
vec3 inputCoord = normalize(vec3(src1.y, src1.x, src0.x));
float rx = inputCoord.x;
float ry = inputCoord.y;
float rz = inputCoord.z;
if( abs(rx) > abs(ry) && abs(rx) > abs(rz) )
{
stm.z = rx*2.0;
stm.xy = vec2(ry,rz);	
if( rx >= 0.0 )
{
faceId = 0;
}
else
{
faceId = 1;
}
}
else if( abs(ry) > abs(rx) && abs(ry) > abs(rz) )
{
stm.z = ry*2.0;
stm.xy = vec2(rx,rz);	
if( ry >= 0.0 )
{
faceId = 2;
}
else
{
faceId = 3;
}
}
else //if( abs(rz) > abs(ry) && abs(rz) > abs(rx) )
{
stm.z = rz*2.0;
stm.xy = vec2(rx,ry);	
if( rz >= 0.0 )
{
faceId = 4;
}
else
{
faceId = 5;
}
}
}
vec3 redcCUBEReverse(vec2 st, int faceId)
{
st.yx = st.xy;
vec3 v;
float majorAxis = 1.0;
if( faceId == 0 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = 1.0;
}
else if( faceId == 1 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = -1.0;
}
else if( faceId == 2 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = 1.0;
}
else if( faceId == 3 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = -1.0;
}
else if( faceId == 4 )
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = 1.0;
}
else
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = -1.0;
}
return v;
}
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R7i = ivec4(0);
ivec4 R8i = ivec4(0);
ivec4 R9i = ivec4(0);
ivec4 R10i = ivec4(0);
ivec4 R11i = ivec4(0);
ivec4 R12i = ivec4(0);
ivec4 R13i = ivec4(0);
ivec4 R14i = ivec4(0);
ivec4 R15i = ivec4(0);
ivec4 R16i = ivec4(0);
ivec4 R122i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R124i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
float cubeMapArrayIndex8 = 0.0;
R0i = floatBitsToInt(passParameterSem0);
R1i = floatBitsToInt(passParameterSem1);
R2i = floatBitsToInt(passParameterSem3);
R3i = floatBitsToInt(passParameterSem4);
R4i = floatBitsToInt(passParameterSem6);
R2i.w = floatBitsToInt(texture(textureUnitPS4, intBitsToFloat(R0i.xy)).x);
R7i.xyzw = floatBitsToInt(texture(textureUnitPS2, intBitsToFloat(R4i.zw)).xyzw);
R5i.xyzw = floatBitsToInt(textureGather(textureUnitPS6, intBitsToFloat(R0i.xy)).xyzw);
R6i.xyzw = floatBitsToInt(textureGather(textureUnitPS7, intBitsToFloat(R0i.xy)).xyzw);
R13i.xyzw = floatBitsToInt(texture(textureUnitPS1, intBitsToFloat(R4i.zw)).xyzw);
// 0
PV0i.x = floatBitsToInt(-(intBitsToFloat(R2i.w)) + intBitsToFloat(R5i.y));
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.w),intBitsToFloat(uf_remappedPS[0].x)) + intBitsToFloat(uf_remappedPS[1].x)));
PV0i.y = R126i.y;
PV0i.z = floatBitsToInt(-(intBitsToFloat(R2i.w)) + intBitsToFloat(R5i.x));
PV0i.w = floatBitsToInt(-(intBitsToFloat(R2i.w)) + intBitsToFloat(R5i.z));
PS0i = floatBitsToInt(-(intBitsToFloat(R2i.w)) + intBitsToFloat(R5i.w));
// 1
R127i.x = floatBitsToInt(max(intBitsToFloat(PV0i.z), -(intBitsToFloat(PV0i.z))));
R127i.y = floatBitsToInt(max(intBitsToFloat(PV0i.x), -(intBitsToFloat(PV0i.x))));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(uf_remappedPS[2].y)));
R127i.w = floatBitsToInt(max(intBitsToFloat(PV0i.w), -(intBitsToFloat(PV0i.w))));
R125i.w = floatBitsToInt(max(intBitsToFloat(PS0i), -(intBitsToFloat(PS0i))));
PS1i = R125i.w;
// 2
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R7i.x),intBitsToFloat(R7i.y),intBitsToFloat(R7i.z),-0.0),vec4(intBitsToFloat(0x3eaaaaab),intBitsToFloat(0x3eaaaaab),intBitsToFloat(0x3eaaaaab),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
PS0i = floatBitsToInt(1.0 / intBitsToFloat(PV1i.z));
PS0i = floatBitsToInt(intBitsToFloat(PS0i) * 2.0);
// 3
PV1i.x = floatBitsToInt(-(intBitsToFloat(PV0i.x)) + intBitsToFloat(R6i.z));
PV1i.y = floatBitsToInt(-(intBitsToFloat(PV0i.x)) + intBitsToFloat(R6i.y));
PV1i.z = floatBitsToInt(-(intBitsToFloat(PV0i.x)) + intBitsToFloat(R6i.x));
PV1i.w = floatBitsToInt(-(intBitsToFloat(PV0i.x)) + intBitsToFloat(R6i.w));
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].x), intBitsToFloat(PS0i)));
PS1i = R126i.w;
// 4
PV0i.x = floatBitsToInt(max(intBitsToFloat(PV1i.x), -(intBitsToFloat(PV1i.x))));
PV0i.x = floatBitsToInt(intBitsToFloat(PV0i.x) * 4.0);
PV0i.y = floatBitsToInt(max(intBitsToFloat(PV1i.y), -(intBitsToFloat(PV1i.y))));
PV0i.y = floatBitsToInt(intBitsToFloat(PV0i.y) * 4.0);
PV0i.z = floatBitsToInt(max(intBitsToFloat(PV1i.z), -(intBitsToFloat(PV1i.z))));
PV0i.z = floatBitsToInt(intBitsToFloat(PV0i.z) * 4.0);
PV0i.w = floatBitsToInt(max(intBitsToFloat(PV1i.w), -(intBitsToFloat(PV1i.w))));
PV0i.w = floatBitsToInt(intBitsToFloat(PV0i.w) * 4.0);
R127i.z = floatBitsToInt(fract(intBitsToFloat(R3i.x)));
PS0i = R127i.z;
// 5
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.w),intBitsToFloat(R127i.w)) + intBitsToFloat(PV0i.x)));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.w),intBitsToFloat(R127i.y)) + intBitsToFloat(PV0i.y)));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.w),intBitsToFloat(R127i.x)) + intBitsToFloat(PV0i.z)));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.w),intBitsToFloat(R125i.w)) + intBitsToFloat(PV0i.w)));
PV1i.w = R123i.w;
R127i.y = floatBitsToInt(fract(intBitsToFloat(R3i.y)));
PS1i = R127i.y;
// 6
R127i.x = floatBitsToInt(intBitsToFloat(R7i.w) * intBitsToFloat(0x437f0000));
PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.z) + -(intBitsToFloat(PV1i.x)));
PV0i.z = floatBitsToInt(-(intBitsToFloat(PV1i.y)) + intBitsToFloat(PV1i.w));
R6i.w = floatBitsToInt((intBitsToFloat(R7i.x) * 2.0 + -(1.0)));
R6i.y = floatBitsToInt((intBitsToFloat(R7i.y) * 2.0 + -(1.0)));
PS0i = R6i.y;
// 7
PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.z) + intBitsToFloat(PV0i.y));
R9i.y = floatBitsToInt(-(intBitsToFloat(R126i.y)));
R6i.z = floatBitsToInt((intBitsToFloat(R7i.z) * 2.0 + -(1.0)));
PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.z) + -(intBitsToFloat(PV0i.y)));
R6i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.z), -(intBitsToFloat(R126i.y))));
PS1i = R6i.x;
// 8
PV0i.x = floatBitsToInt(intBitsToFloat(PV1i.x) + intBitsToFloat(R127i.z));
PV0i.x = clampFI32(PV0i.x);
R5i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.w), -(intBitsToFloat(R126i.y))));
R5i.z = floatBitsToInt(-(intBitsToFloat(R7i.w)) + intBitsToFloat(0x3f400000));
PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.w) + intBitsToFloat(R127i.y));
PV0i.w = clampFI32(PV0i.w);
PS0i = int(intBitsToFloat(R127i.x));
// 9
PV1i.x = floatBitsToInt(-(intBitsToFloat(R127i.y)) + intBitsToFloat(PV0i.w));
PV1i.y = floatBitsToInt(intBitsToFloat(R13i.w) * intBitsToFloat(0x437f0000));
PV1i.z = PS0i & int(1);
PV1i.w = floatBitsToInt(-(intBitsToFloat(R127i.z)) + intBitsToFloat(PV0i.x));
R8i.z = floatBitsToInt(roundEven(0.0));
PS1i = R8i.z;
// 10
R8i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.z),intBitsToFloat(PV1i.w)) + intBitsToFloat(R0i.x)));
R8i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.w),intBitsToFloat(PV1i.x)) + intBitsToFloat(R0i.y)));
R3i.z = ((PV1i.z == 0)?(0):(0x3f800000));
R3i.w = 0;
R14i.y = int(intBitsToFloat(PV1i.y));
PS0i = R14i.y;
R15i.xyzw = floatBitsToInt(texture(textureUnitPS11, intBitsToFloat(R8i.xy)).xyzw);
R12i.xyz = floatBitsToInt(texture(textureUnitPS10, vec3(intBitsToFloat(R8i.x),intBitsToFloat(R8i.y),intBitsToFloat(R8i.z))).xyz);
R16i.xyz = floatBitsToInt(texture(textureUnitPS13, intBitsToFloat(R8i.xy)).xyz);
// 0
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R6i.w),intBitsToFloat(R6i.y),intBitsToFloat(R6i.z),-0.0),vec4(intBitsToFloat(R6i.w),intBitsToFloat(R6i.y),intBitsToFloat(R6i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.z = floatBitsToInt((intBitsToFloat(R15i.y) * 2.0 + -(1.0)));
R127i.z = clampFI32(R127i.z);
PS0i = R127i.z;
// 1
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R6i.x),intBitsToFloat(R5i.y),intBitsToFloat(R9i.y),-0.0),vec4(intBitsToFloat(R6i.x),intBitsToFloat(R5i.y),intBitsToFloat(R9i.y),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.x));
R126i.z = floatBitsToInt(tempResultf);
PS1i = R126i.z;
// 2
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.w), intBitsToFloat(PS1i)));
PV0i.x = R126i.x;
R125i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.y), intBitsToFloat(PS1i)));
PV0i.y = R125i.y;
R123i.z = floatBitsToInt((intBitsToFloat(0x3ecccccd) * intBitsToFloat(R3i.z) + intBitsToFloat(0x3dcccccd)));
PV0i.z = R123i.z;
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[3].x), intBitsToFloat(R127i.z)));
PS0i = floatBitsToInt(sqrt(intBitsToFloat(PV1i.x)));
// 3
backupReg0i = R2i.y;
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(PV0i.z)));
R2i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(PV0i.y)) + intBitsToFloat(R0i.y)));
R2i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.x),intBitsToFloat(PV0i.x)) + intBitsToFloat(R0i.x)));
R125i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.z), intBitsToFloat(R126i.z)));
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PS0i));
// 4
R3i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.x), intBitsToFloat(PS1i)));
PV0i.x = R3i.x;
R3i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.y), intBitsToFloat(PS1i)));
PV0i.y = R3i.y;
R0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R9i.y), intBitsToFloat(PS1i)));
PV0i.z = R0i.z;
PV0i.w = R15i.y;
PV0i.w = floatBitsToInt(intBitsToFloat(PV0i.w) * 2.0);
R8i.z = floatBitsToInt(roundEven(1.0));
PS0i = R8i.z;
// 5
backupReg0i = R127i.x;
backupReg0i = R127i.x;
backupReg0i = R127i.x;
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(backupReg0i)) + intBitsToFloat(R126i.x)));
PV1i.x = R127i.x;
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(backupReg0i)) + intBitsToFloat(R125i.y)));
PV1i.y = R127i.y;
R126i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(backupReg0i)) + intBitsToFloat(R125i.w)));
PV1i.z = R126i.z;
PV1i.w = PV0i.w;
PV1i.w = clampFI32(PV1i.w);
R6i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.x),intBitsToFloat(R2i.z)) + intBitsToFloat(R1i.z)));
PS1i = R6i.y;
// 6
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.z),-0.0),vec4(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R125i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.z),intBitsToFloat(PV1i.w)) + intBitsToFloat(R7i.w)));
PS0i = R125i.x;
// 7
R0i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.y),intBitsToFloat(R2i.y)) + intBitsToFloat(R1i.w)));
R126i.y = floatBitsToInt(intBitsToFloat(R3i.x) + intBitsToFloat(uf_remappedPS[4].x));
R127i.z = floatBitsToInt(intBitsToFloat(R3i.y) + intBitsToFloat(uf_remappedPS[4].y));
R4i.w = floatBitsToInt((-(intBitsToFloat(PS0i)) * intBitsToFloat(0x40400000) + intBitsToFloat(0x40400000)));
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.x));
PS1i = floatBitsToInt(tempResultf);
// 8
R9i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(PS1i)));
PV0i.x = R9i.x;
R10i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), intBitsToFloat(PS1i)));
PV0i.y = R10i.y;
R9i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.z), intBitsToFloat(PS1i)));
PV0i.z = R9i.z;
R126i.w = floatBitsToInt(intBitsToFloat(R0i.z) + intBitsToFloat(uf_remappedPS[4].z));
R127i.y = floatBitsToInt(-(intBitsToFloat(R125i.x)) + 1.0);
PS0i = R127i.y;
// 9
backupReg0i = R0i.z;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(backupReg0i),-0.0),vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R127i.w = tempi.x;
PS1i = PV0i.x;
PS1i = floatBitsToInt(intBitsToFloat(PS1i) * 2.0);
// 10
PV0i.x = R9i.z;
PV0i.x = floatBitsToInt(intBitsToFloat(PV0i.x) * 2.0);
R1i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.x)),intBitsToFloat(PS1i)) + intBitsToFloat(R3i.x)));
PV0i.z = floatBitsToInt(max(-(intBitsToFloat(PV1i.x)), 0.0));
PV0i.w = R10i.y;
PV0i.w = floatBitsToInt(intBitsToFloat(PV0i.w) * 2.0);
R5i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[4].x), intBitsToFloat(uf_remappedPS[3].w)));
PS0i = R5i.x;
// 11
R10i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[4].y), intBitsToFloat(uf_remappedPS[3].w)));
R7i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R127i.w)),intBitsToFloat(PV0i.w)) + intBitsToFloat(R3i.y)));
R1i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R127i.w)),intBitsToFloat(PV0i.x)) + intBitsToFloat(R0i.z)));
R124i.w = floatBitsToInt(min(intBitsToFloat(PV0i.z), 1.0));
R127i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R125i.x)),intBitsToFloat(R127i.y)) + intBitsToFloat(R127i.y)));
PS1i = R127i.x;
// 12
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R126i.y),intBitsToFloat(R127i.z),intBitsToFloat(R126i.w),-0.0),vec4(intBitsToFloat(R126i.y),intBitsToFloat(R127i.z),intBitsToFloat(R126i.w),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R6i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[4].z), intBitsToFloat(uf_remappedPS[3].w)));
PS0i = R6i.z;
// 13
PV1i.x = R14i.y & 0x000000fc;
PV1i.y = floatBitsToInt(intBitsToFloat(R127i.x) + intBitsToFloat(0x3c23d70a));
PV1i.y = clampFI32(PV1i.y);
R126i.z = floatBitsToInt((intBitsToFloat(R127i.y) * 0.5 + 0.5));
R127i.w = floatBitsToInt(-(intBitsToFloat(R124i.w)) + 1.0);
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.x));
PS1i = floatBitsToInt(tempResultf);
// 14
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.y), intBitsToFloat(PS1i)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.w), intBitsToFloat(PS1i)));
R7i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.y), intBitsToFloat(PV1i.y)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(PS1i)));
PS0i = floatBitsToInt(float(PV1i.x));
// 15
R127i.x = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(PV0i.x)), intBitsToFloat(uf_remappedPS[3].w)));
PV1i.x = R127i.x;
R126i.y = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(PV0i.w)), intBitsToFloat(uf_remappedPS[3].w)));
PV1i.y = R126i.y;
R127i.z = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(PV0i.y)), intBitsToFloat(uf_remappedPS[3].w)));
PV1i.z = R127i.z;
R126i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R124i.w)),intBitsToFloat(R127i.w)) + intBitsToFloat(R127i.w)));
R8i.w = floatBitsToInt(intBitsToFloat(PS0i) * intBitsToFloat(0x3b820821));
PS1i = R8i.w;
// 16
tempi.x = floatBitsToInt(dot(vec4(-(intBitsToFloat(R5i.x)),-(intBitsToFloat(R10i.x)),-(intBitsToFloat(R6i.z)),-0.0),vec4(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.z),0.0)));
tempi.x = clampFI32(tempi.x);
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R1i.w = tempi.x;
R11i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.z), intBitsToFloat(R126i.z)));
R11i.x = floatBitsToInt(intBitsToFloat(R11i.x) / 2.0);
PS0i = R11i.x;
// 17
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(R126i.y),intBitsToFloat(R127i.z),-0.0),vec4(intBitsToFloat(R9i.x),intBitsToFloat(R10i.y),intBitsToFloat(R9i.z),0.0)));
tempi.x = clampFI32(tempi.x);
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R127i.w = floatBitsToInt(-(intBitsToFloat(PV0i.x)) + 1.0);
PS1i = R127i.w;
// 18
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R126i.x),intBitsToFloat(R125i.y),intBitsToFloat(R125i.w),intBitsToFloat(R125i.w)),vec4(-(intBitsToFloat(R5i.x)),-(intBitsToFloat(R10i.x)),-(intBitsToFloat(R6i.z)),-(intBitsToFloat(R3i.w)))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R7i.w = tempi.x;
PS0i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(PV1i.x)));
// 19
R7i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R1i.w)),intBitsToFloat(R127i.w)) + intBitsToFloat(R127i.w)));
R11i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R15i.x), intBitsToFloat(uf_remappedPS[5].x)));
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.z),intBitsToFloat(PS0i)) + -(intBitsToFloat(PS0i))));
PV1i.z = R127i.z;
R3i.w = floatBitsToInt((-(intBitsToFloat(R125i.x)) * intBitsToFloat(0x40400000) + 4.0));
PS1i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[3].w), intBitsToFloat(uf_remappedPS[3].w)));
// 20
PV0i.x = floatBitsToInt(intBitsToFloat(PV1i.z) + 1.0);
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R124i.w)),intBitsToFloat(R126i.w)) + intBitsToFloat(R126i.w)));
PV0i.y = R123i.y;
R10i.z = floatBitsToInt((intBitsToFloat(R13i.x) * intBitsToFloat(0x3f895ef0) + intBitsToFloat(0xba0a8ec8)));
R10i.z = clampFI32(R10i.z);
R5i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(PS1i)));
R6i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.w),-(intBitsToFloat(R11i.x))) + intBitsToFloat(R124i.w)));
PS0i = R6i.w;
// 21
R1i.x = R7i.w;
R1i.x = floatBitsToInt(intBitsToFloat(R1i.x) * 2.0);
R0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.w), intBitsToFloat(PV0i.y)));
R5i.z = R7i.w;
R5i.z = clampFI32(R5i.z);
R0i.w = floatBitsToInt((intBitsToFloat(R15i.w) * 0.5 + 0.5));
R2i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.z),intBitsToFloat(PV0i.x)) + intBitsToFloat(PV0i.x)));
PS1i = R2i.x;
// 0
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(uf_remappedPS[6].x),intBitsToFloat(uf_remappedPS[6].y),intBitsToFloat(uf_remappedPS[6].z),-0.0),vec4(intBitsToFloat(R1i.y),intBitsToFloat(R7i.y),intBitsToFloat(R1i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R2i.w = floatBitsToInt((-(intBitsToFloat(R8i.w)) * intBitsToFloat(0x3d23d70a) + intBitsToFloat(0x3d23d70a)));
PS0i = R2i.w;
// 1
R127i.x = floatBitsToInt(dot(vec4(intBitsToFloat(uf_remappedPS[7].x),intBitsToFloat(uf_remappedPS[7].y),intBitsToFloat(uf_remappedPS[7].z),-0.0),vec4(intBitsToFloat(R1i.y),intBitsToFloat(R7i.y),intBitsToFloat(R1i.z),0.0)));
PV1i.x = R127i.x;
PV1i.y = R127i.x;
PV1i.z = R127i.x;
PV1i.w = R127i.x;
R127i.z = floatBitsToInt(-(intBitsToFloat(PV0i.x)));
PS1i = R127i.z;
// 2
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(uf_remappedPS[8].x),intBitsToFloat(uf_remappedPS[8].y),intBitsToFloat(uf_remappedPS[8].z),-0.0),vec4(intBitsToFloat(R1i.y),intBitsToFloat(R7i.y),intBitsToFloat(R1i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.y = tempi.x;
R125i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R1i.w)),intBitsToFloat(R7i.x)) + intBitsToFloat(R7i.x)));
PS0i = R125i.y;
// 3
backupReg0i = R127i.x;
backupReg0i = R127i.x;
backupReg1i = R127i.z;
backupReg1i = R127i.z;
redcCUBE(vec4(intBitsToFloat(R127i.z),intBitsToFloat(R127i.z),intBitsToFloat(backupReg0i),intBitsToFloat(PV0i.x)),vec4(intBitsToFloat(PV0i.x),intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),intBitsToFloat(backupReg1i)),cubeMapSTM,cubeMapFaceId);
R127i.x = floatBitsToInt(cubeMapSTM.x);
R127i.y = floatBitsToInt(cubeMapSTM.y);
R127i.z = floatBitsToInt(cubeMapSTM.z);
R127i.w = cubeMapFaceId;
PV1i.x = R127i.x;
PV1i.y = R127i.y;
PV1i.z = R127i.z;
PV1i.w = R127i.w;
PS1i = floatBitsToInt(1.0 / intBitsToFloat(R3i.w));
// 4
backupReg0i = R1i.x;
R1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R7i.x), intBitsToFloat(R125i.y)));
R1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.y), intBitsToFloat(PS1i)));
R4i.z = PV1i.w;
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R7i.w), intBitsToFloat(backupReg0i)));
PS0i = floatBitsToInt(1.0 / abs(intBitsToFloat(PV1i.z)));
// 5
R7i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(PV0i.w)));
R0i.y = floatBitsToInt((intBitsToFloat(R8i.w) * 0.25 + 0.25));
PV1i.y = R0i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.x),intBitsToFloat(PS0i)) + 1.5));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.y),intBitsToFloat(PS0i)) + 1.5));
PV1i.w = R123i.w;
R3i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R15i.x), intBitsToFloat(R5i.z)));
PS1i = R3i.z;
// 6
backupReg0i = R5i.z;
backupReg1i = R6i.w;
R4i.x = PV1i.w;
R4i.y = PV1i.z;
R5i.z = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(R0i.w));
R5i.z = clampFI32(R5i.z);
R6i.w = floatBitsToInt(intBitsToFloat(R11i.x) + intBitsToFloat(backupReg1i));
R1i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R15i.w),-(intBitsToFloat(PV1i.y))) + intBitsToFloat(R15i.w)));
PS0i = R1i.z;
R0i.w = floatBitsToInt(texture(textureUnitPS4, intBitsToFloat(R2i.zy)).x);
R4i.xyz = floatBitsToInt(textureLod(textureUnitPS8, vec4(redcCUBEReverse(intBitsToFloat(R4i.xy),R4i.z),cubeMapArrayIndex8),intBitsToFloat(R4i.w)).xyz);
R8i.xyz = floatBitsToInt(texture(textureUnitPS10, vec3(intBitsToFloat(R8i.x),intBitsToFloat(R8i.y),intBitsToFloat(R8i.z))).xyz);
// 0
R125i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R13i.x),intBitsToFloat(R8i.w)) + intBitsToFloat(R2i.w)));
PV0i.x = R125i.x;
R125i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R13i.y),intBitsToFloat(R8i.w)) + intBitsToFloat(R2i.w)));
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].x),intBitsToFloat(R0i.w)) + intBitsToFloat(uf_remappedPS[1].x)));
PV0i.z = R123i.z;
R124i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R13i.z),intBitsToFloat(R8i.w)) + intBitsToFloat(R2i.w)));
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(R5i.z)));
PS0i = R126i.x;
// 1
backupReg0i = R0i.x;
PV1i.x = floatBitsToInt(-(intBitsToFloat(PV0i.z)));
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),-(intBitsToFloat(R1i.x))) + intBitsToFloat(PV0i.x)));
PV1i.z = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(PV0i.z)), intBitsToFloat(backupReg0i)));
PV1i.w = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(PV0i.z)), intBitsToFloat(R6i.y)));
R127i.w = floatBitsToInt(1.0 / intBitsToFloat(R2i.x));
PS1i = R127i.w;
// 2
R127i.x = floatBitsToInt(-(intBitsToFloat(R6i.x)) + intBitsToFloat(PV1i.w));
PV0i.x = R127i.x;
R127i.y = floatBitsToInt(-(intBitsToFloat(R5i.y)) + intBitsToFloat(PV1i.z));
PV0i.y = R127i.y;
PV0i.z = floatBitsToInt(-(intBitsToFloat(R9i.y)) + intBitsToFloat(PV1i.x));
R126i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.w),-(intBitsToFloat(R1i.x))) + intBitsToFloat(R124i.w)));
R5i.y = floatBitsToInt(1.0 / intBitsToFloat(R6i.w));
PS0i = R5i.y;
// 3
backupReg0i = R0i.z;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(backupReg0i),-0.0),vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R124i.y = tempi.x;
R122i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.y),-(intBitsToFloat(R1i.x))) + intBitsToFloat(R125i.y)));
PS1i = R122i.x;
// 4
backupReg0i = R127i.y;
backupReg1i = R126i.w;
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R3i.x)),intBitsToFloat(PV1i.x)) + intBitsToFloat(R127i.x)));
PV0i.x = R123i.x;
R127i.y = floatBitsToInt(intBitsToFloat(R1i.x) + intBitsToFloat(PS1i));
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R7i.z), intBitsToFloat(R127i.w)));
R127i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R3i.y)),intBitsToFloat(PV1i.x)) + intBitsToFloat(backupReg0i)));
R126i.w = floatBitsToInt(intBitsToFloat(R1i.x) + intBitsToFloat(backupReg1i));
PS0i = R126i.w;
// 5
backupReg0i = R124i.w;
backupReg0i = R124i.w;
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.x),-(intBitsToFloat(R1i.y))) + intBitsToFloat(R125i.x)));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.y),-(intBitsToFloat(R1i.y))) + intBitsToFloat(R125i.y)));
PV1i.y = R123i.y;
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(PV0i.x)));
R124i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),-(intBitsToFloat(R1i.y))) + intBitsToFloat(backupReg0i)));
R7i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[9].z),intBitsToFloat(R126i.x)) + intBitsToFloat(R12i.z)));
PS1i = R7i.z;
// 6
R125i.x = floatBitsToInt(intBitsToFloat(R1i.x) + intBitsToFloat(R126i.y));
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.w),intBitsToFloat(R127i.w)) + intBitsToFloat(PV1i.z)));
PV0i.y = R123i.y;
R125i.z = floatBitsToInt(intBitsToFloat(R0i.y) + intBitsToFloat(R1i.z));
R127i.w = floatBitsToInt(intBitsToFloat(R1i.y) + intBitsToFloat(PV1i.x));
R126i.z = floatBitsToInt(intBitsToFloat(R1i.y) + intBitsToFloat(PV1i.y));
PS0i = R126i.z;
// 7
tempi.x = floatBitsToInt(dot(vec4(-(intBitsToFloat(R5i.x)),-(intBitsToFloat(R10i.x)),-(intBitsToFloat(R6i.z)),-0.0),vec4(intBitsToFloat(R9i.x),intBitsToFloat(R10i.y),intBitsToFloat(R9i.z),0.0)));
tempi.x = clampFI32(tempi.x);
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.y));
PS1i = floatBitsToInt(tempResultf);
// 8
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),-(intBitsToFloat(R11i.x))) + intBitsToFloat(PV1i.x)));
PV0i.x = R123i.x;
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R11i.y), intBitsToFloat(PV1i.x)));
R124i.z = floatBitsToInt(intBitsToFloat(R1i.y) + intBitsToFloat(R124i.w));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.y), intBitsToFloat(PS1i)));
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[9].x),intBitsToFloat(R126i.x)) + intBitsToFloat(R12i.x)));
PS0i = R127i.x;
// 9
PV1i.x = floatBitsToInt(0.25 * intBitsToFloat(R5i.y));
R124i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[9].y),intBitsToFloat(R126i.x)) + intBitsToFloat(R12i.y)));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].z), intBitsToFloat(PV0i.w)));
PV1i.w = floatBitsToInt(intBitsToFloat(R11i.x) + intBitsToFloat(PV0i.x));
R12i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(R5i.w)));
PS1i = R12i.z;
// 10
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.w), intBitsToFloat(PV1i.x)));
PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.z) * intBitsToFloat(0x3ced9168));
PV0i.y = clampFI32(PV0i.y);
R6i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), intBitsToFloat(PV1i.x)));
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.x), intBitsToFloat(PV1i.x)));
PS0i = floatBitsToInt(1.0 / intBitsToFloat(PV1i.w));
// 11
R125i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(R127i.z)));
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(R7i.x)) + 1.0));
PV1i.y = R123i.y;
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.z), intBitsToFloat(R127i.w)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.z), intBitsToFloat(R126i.z)));
R127i.w = floatBitsToInt((intBitsToFloat(R13i.y) * intBitsToFloat(0x3f895ef0) + intBitsToFloat(0xba0a8ec8)));
R127i.w = clampFI32(R127i.w);
PS1i = R127i.w;
// 12
backupReg0i = R125i.z;
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R8i.w)),intBitsToFloat(PV1i.y)) + intBitsToFloat(PV1i.y)));
PV0i.x = R123i.x;
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.x),intBitsToFloat(PV1i.z)) + intBitsToFloat(R8i.x)));
R125i.z = floatBitsToInt((intBitsToFloat(R13i.z) * intBitsToFloat(0x3f895ef0) + intBitsToFloat(0xba0a8ec8)));
R125i.z = clampFI32(R125i.z);
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(R124i.z)));
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.y),intBitsToFloat(PV1i.w)) + intBitsToFloat(R8i.y)));
PS0i = R126i.y;
// 13
R124i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.z),intBitsToFloat(PV0i.w)) + intBitsToFloat(R8i.z)));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R7i.z), intBitsToFloat(PV0i.x)));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.y), intBitsToFloat(PV0i.x)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(PV0i.x)));
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[9].x), intBitsToFloat(R126i.w)));
PS1i = R127i.x;
// 14
backupReg0i = R125i.z;
backupReg1i = R126i.x;
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R12i.z), intBitsToFloat(R125i.x)));
PV0i.x = R126i.x;
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(R10i.z)));
R125i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.z), intBitsToFloat(R127i.w)));
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.y), intBitsToFloat(backupReg0i)));
PS0i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[9].z), intBitsToFloat(backupReg1i)));
// 15
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.x),intBitsToFloat(PV0i.x)) + intBitsToFloat(R127i.y)));
PV1i.x = R123i.x;
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PS0i),intBitsToFloat(PV0i.x)) + intBitsToFloat(R124i.x)));
PV1i.z = R14i.y & int(1);
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[9].y), intBitsToFloat(R6i.z)));
R122i.x = floatBitsToInt((intBitsToFloat(PV0i.y) * intBitsToFloat(0x3f6e896b) + intBitsToFloat(0x3a011b1e)));
PS1i = R122i.x;
// 16
R123i.x = floatBitsToInt((intBitsToFloat(R127i.w) * intBitsToFloat(0x3f6e896b) + intBitsToFloat(0x3a011b1e)));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((intBitsToFloat(R125i.z) * intBitsToFloat(0x3f6e896b) + intBitsToFloat(0x3a011b1e)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.w),intBitsToFloat(R126i.x)) + intBitsToFloat(R126i.y)));
PV0i.z = R123i.z;
PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.x) + intBitsToFloat(PS1i));
R126i.y = floatBitsToInt(float(PV1i.z));
PS0i = R126i.y;
// 17
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R15i.z), intBitsToFloat(R15i.z)));
PV1i.y = floatBitsToInt(intBitsToFloat(R127i.y) + intBitsToFloat(PV0i.x));
PV1i.z = floatBitsToInt(intBitsToFloat(PV0i.z) + intBitsToFloat(PV0i.y));
R6i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R15i.z),intBitsToFloat(PV0i.w)) + intBitsToFloat(R16i.x)));
PS1i = R6i.x;
// 18
R6i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R15i.z),intBitsToFloat(PV1i.z)) + intBitsToFloat(R16i.y)));
R6i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R15i.z),intBitsToFloat(PV1i.y)) + intBitsToFloat(R16i.z)));
R6i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.y), intBitsToFloat(PV1i.x)));
// export
passPixelColor0 = vec4(intBitsToFloat(R6i.x), intBitsToFloat(R6i.y), intBitsToFloat(R6i.z), intBitsToFloat(R6i.w));
float luma = dot(passPixelColor0.rgb, vec3(0.2126, 0.7152, 0.0722));
#if (ENABLE_COLOR_FADE == 1)
float depth = texture(textureUnitPS4, passParameterSem0.xy).x;
float factor = smoothstep(0.0005, 0.00075, depth);
passPixelColor0.rgb = mix(passPixelColor0.rgb, vec3(luma), factor);
#else
passPixelColor0.rgb = vec3(luma);
#endif
}
