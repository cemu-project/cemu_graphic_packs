#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader ad50629df039e45f
layout(binding = 33, std140) uniform uniformBlockPS1
{
vec4 uf_blockPS1[1024];
};

layout(binding = 38, std140) uniform uniformBlockPS6
{
vec4 uf_blockPS6[1024];
};

layout(binding = 40, std140) uniform uniformBlockPS8
{
vec4 uf_blockPS8[1024];
};

layout(binding = 42, std140) uniform uniformBlockPS10
{
vec4 uf_blockPS10[1024];
};

layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x236b9000 res 1024x1024x1 dim 1 tm: 4 format 0034 compSel: 0 0 0 5 mipView: 0x0 (num 0xb) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 0 0 0 border: 1
layout(binding = 1) uniform sampler2DArrayShadow textureUnitPS1;// Tex1 addr 0xf58a8000 res 360x360x3 dim 5 tm: 4 format 0005 compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x3) Sampler1 ClampX/Y/Z: 6 6 2 border: 2
layout(binding = 2) uniform sampler2D textureUnitPS2;// Tex2 addr 0x3cfaa000 res 256x256x1 dim 1 tm: 4 format 0820 compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 4) uniform sampler2D textureUnitPS4;// Tex4 addr 0xf528a800 res 640x360x1 dim 1 tm: 4 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler4 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 5) uniform sampler2D textureUnitPS5;// Tex5 addr 0xf5589800 res 160x90x1 dim 1 tm: 4 format 0007 compSel: 0 1 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler5 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 6) uniform sampler2D textureUnitPS6;// Tex6 addr 0xac20b000 res 2000x1600x1 dim 1 tm: 4 format 0031 compSel: 0 1 2 3 mipView: 0x0 (num 0x2) sliceView: 0x0 (num 0x1) Sampler6 ClampX/Y/Z: 1 1 1 border: 1
layout(binding = 7) uniform sampler3D textureUnitPS7;// Tex7 addr 0x3d464000 res 32x32x32 dim 2 tm: 7 format 0034 compSel: 0 4 4 5 mipView: 0x0 (num 0x6) sliceView: 0x0 (num 0x20) Sampler7 ClampX/Y/Z: 0 0 0 border: 1
layout(binding = 8) uniform sampler2DArray textureUnitPS8;// Tex8 addr 0xac455000 res 1024x1024x83 dim 5 tm: 4 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0xb) sliceView: 0x0 (num 0x53) Sampler8 ClampX/Y/Z: 0 0 0 border: 1
layout(binding = 9) uniform sampler2D textureUnitPS9;// Tex9 addr 0xaff7a000 res 8x8x1 dim 1 tm: 2 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0x4) sliceView: 0x0 (num 0x1) Sampler9 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 10) uniform sampler2D textureUnitPS10;// Tex10 addr 0xaff7a000 res 8x8x1 dim 1 tm: 2 format 0034 compSel: 0 0 0 0 mipView: 0x0 (num 0x4) sliceView: 0x0 (num 0x1) Sampler10 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 11) uniform sampler2D textureUnitPS11;// Tex11 addr 0xaff7a000 res 8x8x1 dim 1 tm: 2 format 0031 compSel: 0 1 2 3 mipView: 0x0 (num 0x4) sliceView: 0x0 (num 0x1) Sampler11 ClampX/Y/Z: 0 0 2 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem2;
layout(location = 2) in vec4 passParameterSem4;
layout(location = 3) in vec4 passParameterSem5;
layout(location = 4) in vec4 passParameterSem7;
layout(location = 5) in vec4 passParameterSem8;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){return mix(0.0, a*b, (a != 0.0) && (b != 0.0));}
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R7i = ivec4(0);
ivec4 R8i = ivec4(0);
ivec4 R9i = ivec4(0);
ivec4 R10i = ivec4(0);
ivec4 R11i = ivec4(0);
ivec4 R12i = ivec4(0);
ivec4 R13i = ivec4(0);
ivec4 R14i = ivec4(0);
ivec4 R15i = ivec4(0);
ivec4 R16i = ivec4(0);
ivec4 R122i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R124i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
bool activeMaskStack[2];
bool activeMaskStackC[3];
activeMaskStack[0] = false;
activeMaskStackC[0] = false;
activeMaskStackC[1] = false;
activeMaskStack[0] = true;
activeMaskStackC[0] = true;
activeMaskStackC[1] = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = floatBitsToInt(passParameterSem0);
R1i = floatBitsToInt(passParameterSem2);
R2i = floatBitsToInt(passParameterSem4);
R3i = floatBitsToInt(passParameterSem5);
R4i = floatBitsToInt(passParameterSem7);
R5i = floatBitsToInt(passParameterSem8);
if( activeMaskStackC[1] == true ) {
R6i.xy = floatBitsToInt(texture(textureUnitPS11, intBitsToFloat(R0i.xy)).xy);
R9i.xyz = floatBitsToInt(texture(textureUnitPS9, intBitsToFloat(R0i.xy)).xyz);
R6i.w = floatBitsToInt(texture(textureUnitPS10, intBitsToFloat(R0i.xy)).x);
}
if( activeMaskStackC[1] == true ) {
// 0
R125i.x = floatBitsToInt((intBitsToFloat(R6i.x) * intBitsToFloat(0x40008102) + intBitsToFloat(0xbf810204)));
PV0i.x = R125i.x;
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.y), intBitsToFloat(R3i.z)));
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.z), intBitsToFloat(R3i.x)));
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.x), intBitsToFloat(R3i.y)));
PS0i = floatBitsToInt(1.0 / intBitsToFloat(R5i.w));
// 1
backupReg0i = R5i.x;
backupReg1i = R5i.y;
R5i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PS0i)));
R5i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg1i), intBitsToFloat(PS0i)));
R123i.z = floatBitsToInt((intBitsToFloat(R6i.y) * intBitsToFloat(0x40008102) + intBitsToFloat(0xbf810204)));
PV1i.z = R123i.z;
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(PV0i.x)));
R126i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R3i.y)),intBitsToFloat(R2i.z)) + intBitsToFloat(PV0i.y)));
PS1i = R126i.z;
// 2
R127i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R3i.x)),intBitsToFloat(R2i.y)) + intBitsToFloat(R127i.w)));
R127i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R3i.z)),intBitsToFloat(R2i.x)) + intBitsToFloat(R127i.z)));
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),intBitsToFloat(PV1i.z)) + intBitsToFloat(PV1i.w)));
R123i.z = clampFI32(R123i.z);
PV0i.z = R123i.z;
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.w), intBitsToFloat(PV1i.z)));
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.x), uf_blockPS6[44].x));
PS0i = R126i.x;
// 3
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R4i.y),intBitsToFloat(R4i.z),-0.0),vec4(intBitsToFloat(R4i.x),intBitsToFloat(R4i.y),intBitsToFloat(R4i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R5i.w = tempi.x;
R6i.x = floatBitsToInt(-(intBitsToFloat(PV0i.z)) + 1.0);
PS1i = R6i.x;
// 4
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), intBitsToFloat(R127i.w)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.z), intBitsToFloat(R127i.w)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(R127i.w)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.x), uf_blockPS6[43].x));
R2i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.y),uf_blockPS6[44].y) + intBitsToFloat(R126i.x)));
PS0i = R2i.w;
// 5
backupReg0i = R3i.y;
backupReg1i = R3i.x;
R3i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.z),intBitsToFloat(R125i.x)) + intBitsToFloat(PV0i.z)));
R3i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(R125i.x)) + intBitsToFloat(PV0i.x)));
R3i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.x), uf_blockPS6[45].x));
R3i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg1i),intBitsToFloat(R125i.x)) + intBitsToFloat(PV0i.y)));
R6i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.y),uf_blockPS6[43].y) + intBitsToFloat(PV0i.w)));
PS1i = R6i.y;
}
if( activeMaskStackC[1] == true ) {
R10i.xy = floatBitsToInt(texture(textureUnitPS5, intBitsToFloat(R5i.xy)).xy);
}
if( activeMaskStackC[1] == true ) {
// 0
R8i.x = floatBitsToInt(mul_nonIEEE(uf_blockPS6[4].x, uf_blockPS10[2].w));
PV0i.x = R8i.x;
R5i.y = floatBitsToInt(mul_nonIEEE(uf_blockPS6[4].y, uf_blockPS10[2].w));
PV0i.y = R5i.y;
R5i.z = floatBitsToInt(-(intBitsToFloat(R4i.z)) * intBitsToFloat(0x3d4ccccd));
R7i.w = 0x3f800000;
R9i.w = 0;
PS0i = R9i.w;
// 1
R5i.x = PV0i.x;
R11i.y = R10i.x;
R11i.y = clampFI32(R11i.y);
R0i.z = floatBitsToInt(mul_nonIEEE(uf_blockPS6[4].z, uf_blockPS10[2].w));
PV1i.z = R0i.z;
R127i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.y)),intBitsToFloat(PV0i.y)) + 1.0));
R0i.w = 0;
PS1i = R0i.w;
// 2
R7i.y = PV1i.z;
R6i.z = 0;
PS0i = floatBitsToInt(sqrt(intBitsToFloat(R5i.w)));
// 3
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PS0i));
// 4
R10i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.x), intBitsToFloat(PS1i)));
R12i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.y), intBitsToFloat(PS1i)));
PV0i.y = R12i.y;
R11i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.z), intBitsToFloat(PS1i)));
PS0i = floatBitsToInt(sqrt(intBitsToFloat(R6i.x)));
// 5
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.x),intBitsToFloat(PS0i)) + intBitsToFloat(R3i.w)));
PV1i.x = R127i.x;
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.y),intBitsToFloat(PS0i)) + intBitsToFloat(R3i.y)));
PV1i.y = R127i.y;
R126i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.z),intBitsToFloat(PS0i)) + intBitsToFloat(R3i.x)));
PV1i.z = R126i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.y)),intBitsToFloat(PV0i.y)) + 1.0));
PV1i.w = R123i.w;
tempResultf = 1.0 / sqrt(intBitsToFloat(R127i.w));
R125i.x = floatBitsToInt(tempResultf);
PS1i = R125i.x;
// 6
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.z),-0.0),vec4(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.w = tempi.x;
tempResultf = 1.0 / sqrt(intBitsToFloat(PV1i.w));
PS0i = floatBitsToInt(tempResultf);
// 7
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R10i.x),intBitsToFloat(R11i.z),intBitsToFloat(R11i.z),-0.0),vec4(intBitsToFloat(R5i.x),intBitsToFloat(R7i.y),intBitsToFloat(R6i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
PS1i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.x), intBitsToFloat(PS0i)));
// 8
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R11i.z), intBitsToFloat(R0i.z)));
R10i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(PV1i.x)));
tempResultf = 1.0 / sqrt(intBitsToFloat(R127i.w));
PS0i = floatBitsToInt(tempResultf);
// 9
R11i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(PS0i)));
PV1i.x = R11i.x;
R13i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), intBitsToFloat(PS0i)));
PV1i.y = R13i.y;
R12i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.z), intBitsToFloat(PS0i)));
PV1i.z = R12i.z;
R122i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R12i.y),intBitsToFloat(R5i.y)) + intBitsToFloat(PV0i.x)));
PS1i = R122i.x;
// 10
backupReg0i = R0i.z;
tempi.x = floatBitsToInt(dot(vec4(-(intBitsToFloat(R8i.x)),-(intBitsToFloat(R5i.y)),-(intBitsToFloat(backupReg0i)),-(intBitsToFloat(R0i.w))),vec4(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.z),intBitsToFloat(PV1i.z))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R8i.w = tempi.x;
R6i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R10i.x),intBitsToFloat(R8i.x)) + intBitsToFloat(PS1i)));
PS0i = R6i.z;
// 11
R2i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R10i.x),intBitsToFloat(R12i.y),intBitsToFloat(R11i.z),-0.0),vec4(intBitsToFloat(R11i.x),intBitsToFloat(R13i.y),intBitsToFloat(R12i.z),0.0)));
PV1i.x = R2i.x;
PV1i.y = R2i.x;
PV1i.z = R2i.x;
PV1i.w = R2i.x;
}
if( activeMaskStackC[1] == true ) {
// 0
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.z),uf_blockPS6[44].z) + intBitsToFloat(R2i.w)));
PV0i.z = R123i.z;
R127i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.y),uf_blockPS6[45].y) + intBitsToFloat(R3i.z)));
// 1
R14i.y = floatBitsToInt(uf_blockPS6[44].w + intBitsToFloat(PV0i.z));
R126i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.z),uf_blockPS6[43].z) + intBitsToFloat(R6i.y)));
// 2
backupReg0i = R127i.w;
PV0i.x = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(R4i.z)), uf_blockPS1[17].y));
R127i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.z),uf_blockPS6[45].z) + intBitsToFloat(backupReg0i)));
// 3
R12i.x = floatBitsToInt(uf_blockPS1[0].y);
R15i.y = floatBitsToInt(uf_blockPS1[1].y);
R8i.z = floatBitsToInt(1.0 / intBitsToFloat(PV0i.x));
PS1i = R8i.z;
// 4
R6i.x = floatBitsToInt(uf_blockPS6[43].w + intBitsToFloat(R126i.z));
R8i.y = R14i.y;
R13i.z = floatBitsToInt(uf_blockPS1[2].y);
// 5
R10i.z = floatBitsToInt(uf_blockPS6[45].w + intBitsToFloat(R127i.w));
R0i.w = floatBitsToInt((-(uf_blockPS6[53].w) * intBitsToFloat(0x3d4ccccd) + intBitsToFloat(R5i.z)));
R0i.w = clampFI32(R0i.w);
R14i.z = floatBitsToInt((-(uf_blockPS6[53].z) * intBitsToFloat(0x3d4ccccd) + intBitsToFloat(R5i.z)));
R14i.z = clampFI32(R14i.z);
PS1i = R14i.z;
}
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
R2i.y = floatBitsToInt(fract(uf_blockPS8[36].w));
// 1
predResult = (intBitsToFloat(R2i.y) > 0.0);
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
R0i.z = floatBitsToInt(floor(uf_blockPS8[36].w));
PV0i.z = R0i.z;
// 1
R0i.z = floatBitsToInt(roundEven(intBitsToFloat(PV0i.z)));
}
if( activeMaskStackC[2] == true ) {
R0i.xyz = floatBitsToInt(texture(textureUnitPS8, vec3(intBitsToFloat(R0i.x),intBitsToFloat(R0i.y),intBitsToFloat(R0i.z))).xyz);
}
if( activeMaskStackC[2] == true ) {
// 0
backupReg0i = R0i.x;
PV0i.x = floatBitsToInt(-(intBitsToFloat(R9i.y)) + intBitsToFloat(R0i.y));
PV0i.y = floatBitsToInt(-(intBitsToFloat(R9i.x)) + intBitsToFloat(backupReg0i));
PV0i.w = floatBitsToInt(-(intBitsToFloat(R9i.z)) + intBitsToFloat(R0i.z));
// 1
backupReg0i = R9i.x;
backupReg1i = R9i.y;
backupReg2i = R9i.z;
R9i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(R2i.y)) + intBitsToFloat(backupReg0i)));
R9i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(R2i.y)) + intBitsToFloat(backupReg1i)));
R9i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(R2i.y)) + intBitsToFloat(backupReg2i)));
// 2
R2i.w = R9i.w;
}
activeMaskStack[1] = activeMaskStack[1] == false;
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
// 0
R2i.w = R7i.w;
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
predResult = (uf_blockPS8[33].w > 0.0);
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
R0i.z = 0;
}
if( activeMaskStackC[2] == true ) {
R0i.z = floatBitsToInt(texture(textureUnitPS7, vec3(intBitsToFloat(R0i.z),intBitsToFloat(R0i.z),intBitsToFloat(R0i.z))).x);
}
if( activeMaskStackC[2] == true ) {
// 0
R127i.x = floatBitsToInt(intBitsToFloat(R2i.x) + 1.0);
R127i.x = clampFI32(R127i.x);
PV0i.y = floatBitsToInt(-(intBitsToFloat(R0i.z)) + 1.0);
R9i.w = 0x3e99999a;
PS0i = floatBitsToInt(intBitsToFloat(R9i.z) * intBitsToFloat(0x3dea4a8c));
// 1
R126i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R9i.x),intBitsToFloat(R9i.y),intBitsToFloat(PS0i),-0.0),vec4(intBitsToFloat(0x3e99096c),intBitsToFloat(0x3f162b6b),1.0,0.0)));
PV1i.x = R126i.x;
PV1i.y = R126i.x;
PV1i.z = R126i.x;
PV1i.w = R126i.x;
tempResultf = log2(intBitsToFloat(PV0i.y));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1i = floatBitsToInt(tempResultf);
// 2
backupReg0i = R127i.x;
R127i.x = floatBitsToInt((0.5 * intBitsToFloat(PV1i.x) + intBitsToFloat(0x3dcccccd)));
PV0i.x = R127i.x;
R127i.z = floatBitsToInt((intBitsToFloat(0x3f19999a) * intBitsToFloat(PV1i.x) + intBitsToFloat(0x3e4ccccd)));
PV0i.w = floatBitsToInt(intBitsToFloat(PS1i) * intBitsToFloat(0x3fa66666));
tempResultf = log2(intBitsToFloat(backupReg0i));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0i = floatBitsToInt(tempResultf);
// 3
backupReg0i = R126i.x;
R126i.x = floatBitsToInt(-(intBitsToFloat(PV0i.x)) + intBitsToFloat(0x3e23d70a));
R127i.y = floatBitsToInt((intBitsToFloat(0x3f266666) * intBitsToFloat(backupReg0i) + intBitsToFloat(0x3eb33333)));
PV1i.y = R127i.y;
PV1i.w = floatBitsToInt(intBitsToFloat(PS0i) * intBitsToFloat(0x40200000));
PS1i = floatBitsToInt(exp2(intBitsToFloat(PV0i.w)));
// 4
PV0i.y = floatBitsToInt(intBitsToFloat(PS1i) * intBitsToFloat(0x3e4ccccd));
PV0i.z = floatBitsToInt(-(intBitsToFloat(PV1i.y)) + 0.25);
PV0i.w = floatBitsToInt(-(intBitsToFloat(R127i.z)) + intBitsToFloat(0x3e851eb8));
PS0i = floatBitsToInt(exp2(intBitsToFloat(PV1i.w)));
PS0i = floatBitsToInt(intBitsToFloat(PS0i) / 2.0);
// 5
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(PV0i.y)) + intBitsToFloat(R127i.z)));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.x),intBitsToFloat(PV0i.y)) + intBitsToFloat(R127i.x)));
PV1i.y = R123i.y;
PV1i.z = floatBitsToInt(intBitsToFloat(PS0i) + intBitsToFloat(PV0i.y));
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(PV0i.y)) + intBitsToFloat(R127i.y)));
PV1i.w = R123i.w;
// 6
PV0i.x = floatBitsToInt(intBitsToFloat(PV1i.x) + intBitsToFloat(PV1i.z));
PV0i.x = clampFI32(PV0i.x);
PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.y) + intBitsToFloat(PV1i.z));
PV0i.y = clampFI32(PV0i.y);
PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.w) + intBitsToFloat(PV1i.z));
PV0i.w = clampFI32(PV0i.w);
// 7
PV1i.x = floatBitsToInt(-(intBitsToFloat(R9i.z)) + intBitsToFloat(PV0i.w));
PV1i.y = floatBitsToInt(-(intBitsToFloat(R9i.y)) + intBitsToFloat(PV0i.x));
PV1i.z = floatBitsToInt(-(intBitsToFloat(R9i.x)) + intBitsToFloat(PV0i.y));
// 8
backupReg0i = R9i.x;
backupReg1i = R9i.y;
backupReg2i = R9i.z;
R9i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),uf_blockPS8[33].w) + intBitsToFloat(backupReg0i)));
R9i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.y),uf_blockPS8[33].w) + intBitsToFloat(backupReg1i)));
R9i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),uf_blockPS8[33].w) + intBitsToFloat(backupReg2i)));
// 9
R2i.w = R7i.w;
// 10
R6i.w = R7i.w;
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
PV0i.x = floatBitsToInt(uf_blockPS10[2].z + 1.0);
// 1
R16i.y = floatBitsToInt(-(intBitsToFloat(R0i.w)) + intBitsToFloat(PV0i.x));
R16i.y = clampFI32(R16i.y);
// 2
predResult = (1.0 > intBitsToFloat(R14i.z));
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
R127i.x = ((-(intBitsToFloat(R4i.z)) > uf_blockPS1[58].y)?int(0xFFFFFFFF):int(0x0));
R6i.y = floatBitsToInt((intBitsToFloat(R2i.w) * intBitsToFloat(0x3d4ccccd) + intBitsToFloat(0x3ac49ba6)));
PV0i.w = ((-(intBitsToFloat(R4i.z)) > uf_blockPS1[58].x)?int(0xFFFFFFFF):int(0x0));
// 1
PV1i.y = PV0i.w & int(1);
// 2
PV0i.z = PV1i.y - R127i.x;
// 3
PV1i.w = PV0i.z << 0x00000002;
PS1i = floatBitsToInt(float(PV0i.z));
// 4
R0i.x = PV1i.w + 0x0000002c;
R0i.y = PV1i.w + 0x0000002a;
R0i.z = PV1i.w + 0x0000002b;
R0i.w = PV1i.w + 0x0000002d;
R7i.z = floatBitsToInt(roundEven(intBitsToFloat(PS1i)));
PS0i = R7i.z;
}
if( activeMaskStackC[2] == true ) {
R2i.xyzw = floatBitsToInt(uf_blockPS1[R0i.w].xyzw);
R3i.xyzw = floatBitsToInt(uf_blockPS1[R0i.x].xyzw);
R5i.xyzw = floatBitsToInt(uf_blockPS1[R0i.y].xyzw);
R0i.xyzw = floatBitsToInt(uf_blockPS1[R0i.z].xyzw);
}
if( activeMaskStackC[2] == true ) {
// 0
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.x), intBitsToFloat(R3i.x)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.x), intBitsToFloat(R2i.x)));
// 1
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.y),intBitsToFloat(R3i.y)) + intBitsToFloat(PV0i.x)));
PV1i.x = R123i.x;
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.x), intBitsToFloat(R5i.x)));
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.y),intBitsToFloat(R2i.y)) + intBitsToFloat(PV0i.y)));
PV1i.z = R123i.z;
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.x), intBitsToFloat(R0i.x)));
// 2
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.z),intBitsToFloat(R2i.z)) + intBitsToFloat(PV1i.z)));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.z),intBitsToFloat(R3i.z)) + intBitsToFloat(PV1i.x)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.y),intBitsToFloat(R5i.y)) + intBitsToFloat(PV1i.y)));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.y),intBitsToFloat(R0i.y)) + intBitsToFloat(PV1i.w)));
PV0i.w = R123i.w;
// 3
R127i.x = floatBitsToInt(intBitsToFloat(R3i.w) + intBitsToFloat(PV0i.y));
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.z),intBitsToFloat(R5i.z)) + intBitsToFloat(PV0i.z)));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.z),intBitsToFloat(R0i.z)) + intBitsToFloat(PV0i.w)));
PV1i.z = R123i.z;
PV1i.w = floatBitsToInt(intBitsToFloat(R2i.w) + intBitsToFloat(PV0i.x));
// 4
PV0i.x = floatBitsToInt(intBitsToFloat(R0i.w) + intBitsToFloat(PV1i.z));
PV0i.w = floatBitsToInt(intBitsToFloat(R5i.w) + intBitsToFloat(PV1i.y));
PS0i = floatBitsToInt(1.0 / intBitsToFloat(PV1i.w));
// 5
R7i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(PS0i)));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(PS0i)));
R7i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(PS0i)));
PS1i = R7i.y;
// 6
R127i.w = floatBitsToInt(-(intBitsToFloat(R6i.y)) + intBitsToFloat(PV1i.y));
PV0i.w = R127i.w;
// 7
PV1i.x = ((intBitsToFloat(0x3727c5ac) > intBitsToFloat(PV0i.w))?int(0xFFFFFFFF):int(0x0));
// 8
R123i.y = ((PV1i.x == 0)?(R127i.w):(0x3727c5ac));
PV0i.y = R123i.y;
// 9
R7i.w = PV0i.y;
R7i.w = clampFI32(R7i.w);
}
if( activeMaskStackC[2] == true ) {
R7i.y = floatBitsToInt(texture(textureUnitPS1, vec4(intBitsToFloat(R7i.x),intBitsToFloat(R7i.y),intBitsToFloat(R7i.z),intBitsToFloat(R7i.w))));
}
if( activeMaskStackC[2] == true ) {
// 0
PV0i.x = floatBitsToInt(-(intBitsToFloat(R7i.y)) + 1.0);
// 1
R7i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(R14i.z)) + intBitsToFloat(R7i.y)));
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
// 0
R0i.x = floatBitsToInt((intBitsToFloat(R6i.x) * intBitsToFloat(0x38d1b717) + 0.5));
R0i.y = floatBitsToInt((intBitsToFloat(R10i.z) * intBitsToFloat(0x3903126f) + 0.5));
R125i.z = floatBitsToInt(-(intBitsToFloat(R4i.z)) * intBitsToFloat(0x3ba3d70a));
PV0i.z = R125i.z;
R0i.w = 0x3f800000;
PV0i.w = R0i.w;
R126i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R4i.z)),uf_blockPS6[26].x) + -(uf_blockPS6[26].y)));
R126i.z = clampFI32(R126i.z);
PS0i = R126i.z;
// 1
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R6i.x),intBitsToFloat(R8i.y),intBitsToFloat(R10i.z),intBitsToFloat(PV0i.w)),vec4(uf_blockPS1[37].x,uf_blockPS1[37].y,uf_blockPS1[37].z,uf_blockPS1[37].w)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R2i.w = PV0i.z;
PS1i = R2i.w;
// 2
backupReg0i = R0i.w;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R6i.x),intBitsToFloat(R8i.y),intBitsToFloat(R10i.z),intBitsToFloat(backupReg0i)),vec4(uf_blockPS1[35].x,uf_blockPS1[35].y,uf_blockPS1[35].z,uf_blockPS1[35].w)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.z = floatBitsToInt(1.0 / intBitsToFloat(PV1i.x));
PS0i = R127i.z;
// 3
backupReg0i = R0i.w;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R6i.x),intBitsToFloat(R8i.y),intBitsToFloat(R10i.z),intBitsToFloat(backupReg0i)),vec4(uf_blockPS1[36].x,uf_blockPS1[36].y,uf_blockPS1[36].z,uf_blockPS1[36].w)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R2i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(PS0i)));
PS1i = R2i.x;
// 4
R127i.x = floatBitsToInt(-(intBitsToFloat(R126i.z)) + 1.0);
PV0i.x = R127i.x;
R2i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(R127i.z)));
R0i.z = floatBitsToInt(intBitsToFloat(R6i.x) * intBitsToFloat(0x3a83126f));
R0i.w = floatBitsToInt(intBitsToFloat(R10i.z) * intBitsToFloat(0x3a83126f));
R127i.y = floatBitsToInt(-(uf_blockPS6[27].w) + 1.0);
PS0i = R127i.y;
// 5
R7i.x = floatBitsToInt(-(intBitsToFloat(R8i.x)) * 1.5);
R5i.y = 0x3f19999a;
PV1i.z = floatBitsToInt(intBitsToFloat(R6i.z) + -(intBitsToFloat(R10i.w)));
R4i.w = floatBitsToInt(1.0);
tempResultf = log2(intBitsToFloat(PV0i.x));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1i = floatBitsToInt(tempResultf);
// 6
R6i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.w), intBitsToFloat(R6i.w)));
PV0i.x = R6i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),intBitsToFloat(R127i.x)) + intBitsToFloat(R10i.w)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R4i.z)),uf_blockPS6[28].x) + -(uf_blockPS6[28].y)));
R123i.z = clampFI32(R123i.z);
PV0i.z = R123i.z;
PV0i.w = floatBitsToInt(mul_nonIEEE(uf_blockPS6[27].y, intBitsToFloat(PS1i)));
R126i.y = floatBitsToInt(mul_nonIEEE(uf_blockPS6[27].x, intBitsToFloat(PS1i)));
PS0i = R126i.y;
// 7
PV1i.x = floatBitsToInt(max(-(intBitsToFloat(PV0i.y)), intBitsToFloat(0xbf7d70a4)));
PV1i.x = floatBitsToInt(intBitsToFloat(PV1i.x) / 2.0);
PV1i.y = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(0x40400000));
R127i.z = floatBitsToInt(intBitsToFloat(R1i.w) + intBitsToFloat(0xbe99999a));
PV1i.w = floatBitsToInt(-(intBitsToFloat(PV0i.z)) + 1.0);
PS1i = floatBitsToInt(exp2(intBitsToFloat(PV0i.w)));
// 8
PV0i.x = floatBitsToInt(intBitsToFloat(PV1i.y) * intBitsToFloat(0x3fb8aa3b));
R8i.y = R1i.w;
R8i.y = clampFI32(R8i.y);
R126i.z = floatBitsToInt(intBitsToFloat(PV1i.x) + 0.5);
PV0i.z = R126i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.y),intBitsToFloat(PS1i)) + uf_blockPS6[27].w)/2.0);
PV0i.w = R123i.w;
tempResultf = log2(intBitsToFloat(PV1i.w));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0i = floatBitsToInt(tempResultf);
// 9
PV1i.x = floatBitsToInt(-(intBitsToFloat(PV0i.z)) + 1.0);
R3i.y = floatBitsToInt(intBitsToFloat(PV0i.w) + 0.5);
R123i.z = floatBitsToInt((intBitsToFloat(PV0i.z) * intBitsToFloat(0xbc996e30) + intBitsToFloat(0x3d981626)));
PV1i.z = R123i.z;
R127i.w = floatBitsToInt(mul_nonIEEE(uf_blockPS6[29].x, intBitsToFloat(PS0i)));
R5i.w = floatBitsToInt(exp2(intBitsToFloat(PV0i.x)));
PS1i = R5i.w;
// 10
R5i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R4i.z)),uf_blockPS6[18].x) + uf_blockPS6[17].w));
R5i.x = clampFI32(R5i.x);
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.z),intBitsToFloat(PV1i.z)) + intBitsToFloat(0xbe593484)));
PV0i.y = R123i.y;
R5i.z = floatBitsToInt((intBitsToFloat(0xbf59999a) * intBitsToFloat(R10i.y) + 1.0));
R6i.w = floatBitsToInt(intBitsToFloat(R127i.z) * intBitsToFloat(0x40200001));
R6i.w = clampFI32(R6i.w);
PV0i.w = R6i.w;
PS0i = floatBitsToInt(sqrt(intBitsToFloat(PV1i.x)));
// 11
PV1i.x = floatBitsToInt(intBitsToFloat(PS0i) * intBitsToFloat(0x3f22f983));
R6i.y = floatBitsToInt(intBitsToFloat(PV0i.w) * intBitsToFloat(0x3dcccccd));
R123i.z = floatBitsToInt((intBitsToFloat(R8i.z) * intBitsToFloat(0x3dcccccd) + 1.0));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.z),intBitsToFloat(PV0i.y)) + intBitsToFloat(0x3fc90da4)));
PV1i.w = R123i.w;
PS1i = floatBitsToInt(exp2(intBitsToFloat(R126i.y)));
// 12
R3i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),-(intBitsToFloat(PV1i.w))) + 1.0));
R7i.y = floatBitsToInt(intBitsToFloat(R125i.z) + intBitsToFloat(0xbfe66666));
R2i.z = floatBitsToInt(intBitsToFloat(PV1i.z) * intBitsToFloat(0x42960000));
R3i.w = floatBitsToInt((mul_nonIEEE(uf_blockPS6[27].z,-(intBitsToFloat(PS1i))) + uf_blockPS6[27].z));
R8i.x = floatBitsToInt(exp2(intBitsToFloat(R127i.w)));
PS0i = R8i.x;
}
if( activeMaskStackC[1] == true ) {
R4i.xyz = floatBitsToInt(textureLod(textureUnitPS6, intBitsToFloat(R0i.xy),0.0).xyz);
R2i.x = floatBitsToInt(textureLod(textureUnitPS0, intBitsToFloat(R2i.xy),intBitsToFloat(R2i.w)).x);
R0i.w = floatBitsToInt(textureLod(textureUnitPS4, intBitsToFloat(R0i.zw),0.0).x);
R3i.xyz = floatBitsToInt(texture(textureUnitPS2, intBitsToFloat(R3i.xy)).xyz);
}
if( activeMaskStackC[1] == true ) {
// 0
backupReg0i = R0i.w;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R4i.y),intBitsToFloat(R4i.z),-0.0),vec4(uf_blockPS6[42].x,uf_blockPS6[42].y,uf_blockPS6[42].z,0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R122i.x = floatBitsToInt((intBitsToFloat(backupReg0i) * 2.0 + -(1.0)));
PS0i = R122i.x;
// 1
R127i.x = floatBitsToInt(intBitsToFloat(R2i.x) + uf_blockPS10[1].z);
R127i.x = clampFI32(R127i.x);
R126i.y = floatBitsToInt((intBitsToFloat(PS0i) * intBitsToFloat(0x41c80000) + intBitsToFloat(R14i.y)));
R6i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.w), intBitsToFloat(R5i.z)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(PV0i.x)));
tempResultf = log2(intBitsToFloat(R5i.x));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
R3i.w = floatBitsToInt(tempResultf);
PS1i = R3i.w;
// 2
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R7i.x),intBitsToFloat(R5i.y),intBitsToFloat(R4i.w),-0.0),vec4(intBitsToFloat(R7i.x),intBitsToFloat(R5i.y),intBitsToFloat(R4i.w),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R125i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(PV1i.w)));
PS0i = R125i.z;
// 3
PV1i.x = floatBitsToInt(intBitsToFloat(R7i.w) + -(intBitsToFloat(PS0i)));
R4i.y = floatBitsToInt(-(intBitsToFloat(R126i.y)) + uf_blockPS6[52].x);
R126i.z = floatBitsToInt(intBitsToFloat(R6i.x) * intBitsToFloat(0x41000000));
R127i.w = floatBitsToInt(mul_nonIEEE(uf_blockPS10[3].z, intBitsToFloat(R127i.x)));
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.x));
PS1i = floatBitsToInt(tempResultf);
// 4
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R7i.x), intBitsToFloat(PS1i)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.y), intBitsToFloat(PS1i)));
PV0i.z = PS1i;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),intBitsToFloat(R16i.y)) + intBitsToFloat(R125i.z)));
PV0i.w = R123i.w;
R126i.w = floatBitsToInt(intBitsToFloat(R8i.w) + intBitsToFloat(0x3f666666));
R126i.w = clampFI32(R126i.w);
PS0i = R126i.w;
// 5
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R11i.x),intBitsToFloat(R13i.y),intBitsToFloat(R12i.z),-0.0),vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),0.0)));
tempi.x = clampFI32(tempi.x);
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R127i.x = floatBitsToInt(intBitsToFloat(PV0i.w) + uf_blockPS10[1].y);
R127i.x = clampFI32(R127i.x);
PS1i = R127i.x;
// 6
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R12i.x),intBitsToFloat(R15i.y),intBitsToFloat(R13i.z),-0.0),vec4(intBitsToFloat(R10i.x),intBitsToFloat(R12i.y),intBitsToFloat(R11i.z),0.0)));
tempi.x = clampFI32(tempi.x);
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
tempResultf = log2(intBitsToFloat(PV1i.x));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0i = floatBitsToInt(tempResultf);
// 7
PV1i.x = floatBitsToInt(intBitsToFloat(R127i.x) + intBitsToFloat(0xbecccccd));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.w), intBitsToFloat(PS0i)));
R125i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R6i.y)),intBitsToFloat(R7i.y)) + intBitsToFloat(R7i.y)));
R125i.z = clampFI32(R125i.z);
R5i.w = floatBitsToInt(-(intBitsToFloat(R6i.z)) + 1.0);
tempResultf = log2(intBitsToFloat(PV0i.x));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
R4i.z = floatBitsToInt(tempResultf);
PS1i = R4i.z;
// 8
R7i.x = floatBitsToInt(intBitsToFloat(R1i.y) * intBitsToFloat(0x3f4ccccd));
R6i.y = floatBitsToInt(intBitsToFloat(R1i.x) * intBitsToFloat(0x3f4ccccd));
R0i.z = floatBitsToInt(intBitsToFloat(R1i.z) * intBitsToFloat(0x3f4ccccd));
PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.x) * intBitsToFloat(0x41200000));
PV0i.w = clampFI32(PV0i.w);
PS0i = floatBitsToInt(exp2(intBitsToFloat(PV1i.y)));
// 9
R127i.x = floatBitsToInt((intBitsToFloat(R6i.w) * intBitsToFloat(0x3dcccccd) + intBitsToFloat(R125i.z)));
PV1i.x = R127i.x;
PV1i.y = floatBitsToInt(intBitsToFloat(PS0i) + intBitsToFloat(0xbba3d70a));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.w), intBitsToFloat(PV0i.w)));
PV1i.w = floatBitsToInt(intBitsToFloat(PS0i) + intBitsToFloat(0xbe0f5c29));
// 10
R126i.x = floatBitsToInt(intBitsToFloat(PV1i.y) * intBitsToFloat(0x42c80000));
R126i.x = clampFI32(R126i.x);
R7i.y = floatBitsToInt(intBitsToFloat(R1i.w) + intBitsToFloat(PV1i.z));
R7i.y = clampFI32(R7i.y);
PV0i.z = floatBitsToInt(intBitsToFloat(PV1i.w) * intBitsToFloat(0x428c0000));
PV0i.z = clampFI32(PV0i.z);
PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.z) + -(1.0));
PS0i = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + 1.0);
// 11
R2i.x = floatBitsToInt((intBitsToFloat(R9i.x) * intBitsToFloat(0x3f895ef0) + intBitsToFloat(0xba0a8ec8)));
R2i.x = clampFI32(R2i.x);
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PS0i),intBitsToFloat(R11i.y)) + intBitsToFloat(R127i.x)));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(R8i.y)) + 1.0));
PV1i.z = R123i.z;
PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.z) * intBitsToFloat(0x3e99999a));
R4i.w = floatBitsToInt((intBitsToFloat(R9i.y) * intBitsToFloat(0x3f895ef0) + intBitsToFloat(0xba0a8ec8)));
R4i.w = clampFI32(R4i.w);
PS1i = R4i.w;
// 12
backupReg0i = R3i.x;
backupReg1i = R3i.y;
backupReg2i = R3i.z;
R3i.x = floatBitsToInt((0.5 * intBitsToFloat(PV1i.z) + 0.5));
PV0i.x = R3i.x;
R3i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PV1i.y)));
R123i.z = floatBitsToInt((intBitsToFloat(R126i.x) * intBitsToFloat(0x3e4ccccd) + intBitsToFloat(PV1i.w)));
R123i.z = clampFI32(R123i.z);
PV0i.z = R123i.z;
R6i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg1i), intBitsToFloat(PV1i.y)));
R3i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg2i), intBitsToFloat(PV1i.y)));
PS0i = R3i.z;
// 13
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), intBitsToFloat(R126i.z)));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(R126i.w)));
R7i.z = floatBitsToInt((intBitsToFloat(R9i.z) * intBitsToFloat(0x3f895ef0) + intBitsToFloat(0xba0a8ec8)));
R7i.z = clampFI32(R7i.z);
// 14
R6i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.y), intBitsToFloat(PV1i.x)));
R6i.x = clampFI32(R6i.x);
}
if( activeMaskStackC[1] == true ) {
// 0
R126i.z = floatBitsToInt(mul_nonIEEE(uf_blockPS6[18].y, intBitsToFloat(R3i.w)));
PV0i.w = floatBitsToInt(mul_nonIEEE(uf_blockPS6[29].z, intBitsToFloat(R4i.z)));
// 1
tempi.x = floatBitsToInt(dot(vec4(uf_blockPS6[4].x,uf_blockPS6[4].y,uf_blockPS6[4].z,-0.0),vec4(intBitsToFloat(R11i.x),intBitsToFloat(R13i.y),intBitsToFloat(R12i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
PS1i = floatBitsToInt(exp2(intBitsToFloat(PV0i.w)));
// 2
PV0i.x = floatBitsToInt(uf_blockPS6[5].x + -(intBitsToFloat(R6i.y)));
PV0i.y = floatBitsToInt(max(-(intBitsToFloat(PV1i.x)), 0.0));
PV0i.z = floatBitsToInt(uf_blockPS6[5].y + -(intBitsToFloat(R7i.x)));
R123i.w = floatBitsToInt((mul_nonIEEE(-(uf_blockPS6[29].w),intBitsToFloat(PS1i)) + 1.0));
PV0i.w = R123i.w;
R126i.y = floatBitsToInt(exp2(intBitsToFloat(R126i.z)));
PS0i = R126i.y;
// 3
PV1i.x = floatBitsToInt(min(intBitsToFloat(PV0i.y), 1.0));
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.y),uf_blockPS6[15].x) + uf_blockPS6[14].w));
R123i.y = clampFI32(R123i.y);
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R8i.x)),intBitsToFloat(PV0i.w)) + intBitsToFloat(PV0i.w)));
PV1i.z = R123i.z;
R126i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(R7i.y)) + intBitsToFloat(R6i.y)));
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(R7i.y)) + intBitsToFloat(R7i.x)));
PS1i = R127i.y;
// 4
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.y), uf_blockPS6[13].w));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.z), uf_blockPS6[30].w));
PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.x) + intBitsToFloat(0xbecccccd));
// 5
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.y), uf_blockPS6[16].w));
R125i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(R5i.z)));
PV1i.y = R125i.y;
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(R5i.z)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(R2i.z)));
PV1i.w = clampFI32(PV1i.w);
PS1i = floatBitsToInt(uf_blockPS6[5].z + -(intBitsToFloat(R0i.z)));
// 6
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PS1i),intBitsToFloat(R7i.y)) + intBitsToFloat(R0i.z)));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.y)),intBitsToFloat(R5i.w)) + intBitsToFloat(R5i.w)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.x),intBitsToFloat(PV1i.w)) + intBitsToFloat(R9i.w)));
R123i.z = clampFI32(R123i.z);
PV0i.z = R123i.z;
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R10i.y), intBitsToFloat(PV1i.x)));
R125i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), uf_blockPS10[0].y));
PS0i = R125i.z;
// 7
backupReg0i = R126i.w;
R126i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R126i.z)),intBitsToFloat(PV0i.y)) + intBitsToFloat(PV0i.y)));
PV1i.x = R126i.x;
R127i.y = floatBitsToInt((intBitsToFloat(R6i.x) * intBitsToFloat(0x40400000) + intBitsToFloat(PV0i.z)));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.z), intBitsToFloat(PV0i.y)));
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), uf_blockPS10[0].x));
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), uf_blockPS10[0].z));
PS1i = R126i.y;
// 8
PV0i.x = floatBitsToInt(mul_nonIEEE(uf_blockPS6[13].y, intBitsToFloat(PV1i.z)));
PV0i.y = floatBitsToInt(mul_nonIEEE(uf_blockPS6[13].x, intBitsToFloat(PV1i.z)));
R126i.z = floatBitsToInt(mul_nonIEEE(uf_blockPS6[13].z, intBitsToFloat(PV1i.z)));
R125i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.w), intBitsToFloat(PV1i.x)));
PV0i.w = R125i.w;
R124i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R6i.z),-(intBitsToFloat(R125i.y))) + intBitsToFloat(R6i.z)));
PS0i = R124i.w;
// 9
backupReg0i = R127i.w;
PV1i.x = floatBitsToInt(mul_nonIEEE(uf_blockPS10[2].w, intBitsToFloat(R127i.y)));
R127i.y = floatBitsToInt((mul_nonIEEE(uf_blockPS6[16].y,intBitsToFloat(PV0i.w)) + intBitsToFloat(PV0i.x)));
R123i.z = floatBitsToInt((mul_nonIEEE(uf_blockPS6[16].x,intBitsToFloat(PV0i.w)) + intBitsToFloat(PV0i.y)));
PV1i.z = R123i.z;
R127i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(backupReg0i)),intBitsToFloat(R126i.x)) + intBitsToFloat(R126i.x)));
// 10
R123i.x = floatBitsToInt((mul_nonIEEE(uf_blockPS6[16].z,intBitsToFloat(R125i.w)) + intBitsToFloat(R126i.z)));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.y),intBitsToFloat(PV1i.x)) + intBitsToFloat(R1i.z)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.z),intBitsToFloat(PV1i.x)) + intBitsToFloat(R1i.y)));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.w),intBitsToFloat(PV1i.x)) + intBitsToFloat(R1i.x)));
PV0i.w = R123i.w;
R126i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.y),intBitsToFloat(R124i.w)) + intBitsToFloat(PV1i.z)));
PS0i = R126i.z;
// 11
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.z),intBitsToFloat(R124i.w)) + intBitsToFloat(PV0i.x)));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R6i.w),intBitsToFloat(R124i.w)) + intBitsToFloat(R127i.y)));
PV1i.y = R123i.y;
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(R2i.x)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), intBitsToFloat(R4i.w)));
R124i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(R7i.z)));
PS1i = R124i.w;
// 12
backupReg0i = R125i.y;
backupReg0i = R125i.y;
backupReg0i = R125i.y;
R123i.x = floatBitsToInt((intBitsToFloat(PV1i.z) * intBitsToFloat(0x3f6e896b) + intBitsToFloat(0x3a011b1e)));
PV0i.x = R123i.x;
R125i.y = floatBitsToInt((mul_nonIEEE(uf_blockPS6[30].z,intBitsToFloat(backupReg0i)) + intBitsToFloat(PV1i.x)));
R123i.z = floatBitsToInt((mul_nonIEEE(uf_blockPS6[30].y,intBitsToFloat(backupReg0i)) + intBitsToFloat(PV1i.y)));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(uf_blockPS6[30].x,intBitsToFloat(backupReg0i)) + intBitsToFloat(R126i.z)));
PV0i.w = R123i.w;
R122i.x = floatBitsToInt((intBitsToFloat(PV1i.w) * intBitsToFloat(0x3f6e896b) + intBitsToFloat(0x3a011b1e)));
PS0i = R122i.x;
// 13
R123i.x = floatBitsToInt((intBitsToFloat(R124i.w) * intBitsToFloat(0x3f6e896b) + intBitsToFloat(0x3a011b1e)));
PV1i.x = R123i.x;
R1i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.w),intBitsToFloat(PS0i)) + intBitsToFloat(PV0i.z)));
PV1i.y = R1i.y;
R3i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.w),intBitsToFloat(PV0i.x)) + intBitsToFloat(PV0i.w)));
PV1i.z = R3i.z;
// 14
R2i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.w),intBitsToFloat(PV1i.x)) + intBitsToFloat(R125i.y)));
PV0i.x = R2i.x;
PV0i.z = floatBitsToInt(-(intBitsToFloat(PV1i.y)) * 0.25);
PV0i.w = floatBitsToInt(-(intBitsToFloat(PV1i.z)) * 0.25);
// 15
PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.w) * intBitsToFloat(0x3fb8aa3b));
PV1i.y = floatBitsToInt(-(intBitsToFloat(PV0i.x)) * 0.25);
R126i.z = floatBitsToInt(intBitsToFloat(PV0i.z) * intBitsToFloat(0x3fb8aa3b));
// 16
R126i.x = floatBitsToInt(intBitsToFloat(PV1i.y) * intBitsToFloat(0x3fb8aa3b));
PS0i = floatBitsToInt(exp2(intBitsToFloat(PV1i.x)));
// 17
R7i.z = floatBitsToInt(-(intBitsToFloat(PS0i)) + 1.0);
R7i.z = floatBitsToInt(intBitsToFloat(R7i.z) * 4.0);
PS1i = floatBitsToInt(exp2(intBitsToFloat(R126i.z)));
// 18
R3i.y = floatBitsToInt(-(intBitsToFloat(PS1i)) + 1.0);
R3i.y = floatBitsToInt(intBitsToFloat(R3i.y) * 4.0);
PS0i = floatBitsToInt(exp2(intBitsToFloat(R126i.x)));
// 19
R1i.x = floatBitsToInt(-(intBitsToFloat(PS0i)) + 1.0);
R1i.x = floatBitsToInt(intBitsToFloat(R1i.x) * 4.0);
}
if( activeMaskStackC[1] == true ) {
// 0
PV0i.w = ((1.0 > uf_blockPS8[37].x)?int(0xFFFFFFFF):int(0x0));
R4i.w = floatBitsToInt(uf_blockPS8[37].x);
PS0i = R4i.w;
// 1
R4i.x = ((PV0i.w == 0)?(R3i.z):(R7i.z));
R4i.y = ((PV0i.w == 0)?(R1i.y):(R3i.y));
R4i.z = ((PV0i.w == 0)?(R2i.x):(R1i.x));
}
// export
passPixelColor0 = vec4(intBitsToFloat(R4i.x), intBitsToFloat(R4i.y), intBitsToFloat(R4i.z), intBitsToFloat(R4i.w));
float luma = dot(passPixelColor0.rgb, vec3(0.2126, 0.7152, 0.0722));
passPixelColor0.rgb = vec3(luma);
}
