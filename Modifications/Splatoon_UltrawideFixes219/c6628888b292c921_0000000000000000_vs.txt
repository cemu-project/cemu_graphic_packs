#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_packing : enable
// shader c6628888b292c921
// Used for: Ink splash damage UW fix
float scaleAspect = 1.3333333333333;

uniform ivec4 uf_remappedVS[38];
uniform vec2 uf_windowSpaceToClipSpaceTransform;
uniform float uf_alphaTestRef;
layout(location = 0) in uvec4 attrDataSem0;
layout(location = 1) in uvec4 attrDataSem1;
layout(location = 2) in uvec4 attrDataSem2;
layout(location = 3) in uvec4 attrDataSem3;
layout(location = 4) in uvec4 attrDataSem4;
layout(location = 5) in uvec4 attrDataSem5;
layout(location = 6) in uvec4 attrDataSem6;
layout(location = 7) in uvec4 attrDataSem7;
layout(location = 8) in uvec4 attrDataSem8;
out gl_PerVertex
{
	vec4 gl_Position;
	float gl_PointSize;
};
layout(location = 0) out vec4 passParameterSem0;
layout(location = 1) out vec4 passParameterSem1;
layout(location = 2) out vec4 passParameterSem3;
layout(location = 3) out vec4 passParameterSem4;
layout(location = 4) out vec4 passParameterSem5;
layout(location = 5) out vec4 passParameterSem6;
layout(location = 6) out vec4 passParameterSem7;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){return mix(0.0, a*b, (a != 0.0) && (b != 0.0));}
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R7i = ivec4(0);
ivec4 R8i = ivec4(0);
ivec4 R9i = ivec4(0);
ivec4 R10i = ivec4(0);
ivec4 R11i = ivec4(0);
ivec4 R12i = ivec4(0);
ivec4 R13i = ivec4(0);
ivec4 R14i = ivec4(0);
ivec4 R15i = ivec4(0);
ivec4 R16i = ivec4(0);
ivec4 R17i = ivec4(0);
ivec4 R18i = ivec4(0);
ivec4 R19i = ivec4(0);
ivec4 R20i = ivec4(0);
ivec4 R122i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R124i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
uvec4 attrDecoder;
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
bool activeMaskStack[4];
bool activeMaskStackC[5];
activeMaskStack[0] = false;
activeMaskStack[1] = false;
activeMaskStack[2] = false;
activeMaskStackC[0] = false;
activeMaskStackC[1] = false;
activeMaskStackC[2] = false;
activeMaskStackC[3] = false;
activeMaskStack[0] = true;
activeMaskStackC[0] = true;
activeMaskStackC[1] = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = ivec4(gl_VertexID, 0, 0, gl_InstanceID);
attrDecoder = attrDataSem3;
attrDecoder = (attrDecoder>>24)|((attrDecoder>>8)&0xFF00)|((attrDecoder<<8)&0xFF0000)|((attrDecoder<<24));
R4i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), int(attrDecoder.w));
attrDecoder.xyz = attrDataSem2.xyz;
attrDecoder.xyz = (attrDecoder.xyz>>24)|((attrDecoder.xyz>>8)&0xFF00)|((attrDecoder.xyz<<8)&0xFF0000)|((attrDecoder.xyz<<24));
attrDecoder.w = 0;
R3i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), floatBitsToInt(1.0));
attrDecoder = attrDataSem8;
attrDecoder = (attrDecoder>>24)|((attrDecoder>>8)&0xFF00)|((attrDecoder<<8)&0xFF0000)|((attrDecoder<<24));
R8i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), int(attrDecoder.w));
attrDecoder.xy = attrDataSem7.xy;
attrDecoder.xy = (attrDecoder.xy>>24)|((attrDecoder.xy>>8)&0xFF00)|((attrDecoder.xy<<8)&0xFF0000)|((attrDecoder.xy<<24));
attrDecoder.z = 0;
attrDecoder.w = 0;
R7i = ivec4(int(attrDecoder.x), int(attrDecoder.y), floatBitsToInt(0.0), floatBitsToInt(1.0));
attrDecoder = attrDataSem0;
attrDecoder = (attrDecoder>>24)|((attrDecoder>>8)&0xFF00)|((attrDecoder<<8)&0xFF0000)|((attrDecoder<<24));
R1i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), int(attrDecoder.w));
attrDecoder = attrDataSem1;
attrDecoder = (attrDecoder>>24)|((attrDecoder>>8)&0xFF00)|((attrDecoder<<8)&0xFF0000)|((attrDecoder<<24));
R2i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), int(attrDecoder.w));
attrDecoder = attrDataSem5;
attrDecoder = (attrDecoder>>24)|((attrDecoder>>8)&0xFF00)|((attrDecoder<<8)&0xFF0000)|((attrDecoder<<24));
R6i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), int(attrDecoder.w));
attrDecoder = attrDataSem4;
attrDecoder = (attrDecoder>>24)|((attrDecoder>>8)&0xFF00)|((attrDecoder<<8)&0xFF0000)|((attrDecoder<<24));
R5i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), int(attrDecoder.w));
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
R13i.x = floatBitsToInt(-(intBitsToFloat(R2i.w)) + intBitsToFloat(uf_remappedVS[0].x));
R0i.z = 0;
R13i.w = floatBitsToInt(-(intBitsToFloat(R7i.y)) + 1.0);
R7i.z = floatBitsToInt(1.0);
PS0i = R7i.z;
// 1
predResult = (0.0 > intBitsToFloat(R13i.x));
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
R17i.x = 0;
R17i.y = 0;
R17i.z = floatBitsToInt(intBitsToFloat(uf_remappedVS[1].y) * intBitsToFloat(0x40a00000));
R18i.x = 0;
PS0i = R18i.x;
// 1
R13i.z = R7i.z;
}
activeMaskStack[1] = activeMaskStack[1] == false;
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
// 0
R13i.z = R0i.z;
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
predResult = (R13i.z == 0);
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
activeMaskStack[2] = activeMaskStack[1];
activeMaskStackC[3] = activeMaskStackC[2];
// 0
predResult = (intBitsToFloat(R13i.x) >= intBitsToFloat(R1i.w));
activeMaskStack[2] = predResult;
activeMaskStackC[3] = predResult == true && activeMaskStackC[2] == true;
}
else {
activeMaskStack[2] = false;
activeMaskStackC[3] = false;
}
if( activeMaskStackC[3] == true ) {
// 0
R17i.x = 0;
R17i.y = 0;
R17i.z = floatBitsToInt(intBitsToFloat(uf_remappedVS[1].y) * intBitsToFloat(0x40a00000));
R18i.x = 0;
PS0i = R18i.x;
// 1
R0i.z = R7i.z;
}
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
activeMaskStack[2] = activeMaskStack[1];
activeMaskStackC[3] = activeMaskStackC[2];
// 0
predResult = (R0i.z == 0);
activeMaskStack[2] = predResult;
activeMaskStackC[3] = predResult == true && activeMaskStackC[2] == true;
}
else {
activeMaskStack[2] = false;
activeMaskStackC[3] = false;
}
if( activeMaskStackC[3] == true ) {
// 0
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.z), intBitsToFloat(uf_remappedVS[2].z)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.y), intBitsToFloat(uf_remappedVS[2].y)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.x), intBitsToFloat(uf_remappedVS[2].x)));
// 1
R0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), intBitsToFloat(uf_remappedVS[3].y)*(1+(scaleAspect-1)/2)));
R0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(uf_remappedVS[3].z)));
R0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(uf_remappedVS[3].w)));
}
if( activeMaskStackC[3] == true ) {
activeMaskStack[3] = activeMaskStack[2];
activeMaskStackC[4] = activeMaskStackC[3];
// 0
R0i.w = floatBitsToInt(-(intBitsToFloat(uf_remappedVS[4].x)) + 1.0);
R2i.w = ((intBitsToFloat(uf_remappedVS[4].x) == 1.0)?int(0xFFFFFFFF):int(0x0));
PS0i = R2i.w;
// 1
predResult = (R2i.w != 0);
activeMaskStack[3] = predResult;
activeMaskStackC[4] = predResult == true && activeMaskStackC[3] == true;
}
else {
activeMaskStack[3] = false;
activeMaskStackC[4] = false;
}
if( activeMaskStackC[4] == true ) {
// 0
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R13i.x), intBitsToFloat(R13i.x)));
PV0i.x = floatBitsToInt(intBitsToFloat(PV0i.x) / 2.0);
// 1
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedVS[5].w), intBitsToFloat(PV0i.x)));
// 2
R6i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedVS[5].x), intBitsToFloat(PV1i.w)));
R6i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedVS[5].y), intBitsToFloat(PV1i.w)));
R6i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedVS[5].z), intBitsToFloat(PV1i.w)));
}
activeMaskStack[3] = activeMaskStack[3] == false;
activeMaskStackC[4] = activeMaskStack[3] == true && activeMaskStackC[3] == true;
if( activeMaskStackC[4] == true ) {
// 0
tempResultf = log2(abs(intBitsToFloat(uf_remappedVS[4].x)));
PS0i = floatBitsToInt(tempResultf);
// 1
PV1i.z = floatBitsToInt(intBitsToFloat(PS0i) * intBitsToFloat(0x3f317218));
tempResultf = log2(intBitsToFloat(uf_remappedVS[4].x));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1i = floatBitsToInt(tempResultf);
// 2
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R13i.x), intBitsToFloat(PS1i)));
R127i.y = ((intBitsToFloat(uf_remappedVS[4].x) == 0.0)?(0xff7fffff):(PV1i.z));
R127i.z = floatBitsToInt(1.0 / intBitsToFloat(R0i.w));
PS0i = R127i.z;
// 3
PS1i = floatBitsToInt(exp2(intBitsToFloat(PV0i.x)));
// 4
PV0i.y = floatBitsToInt(intBitsToFloat(PS1i) + -(1.0));
PS0i = floatBitsToInt(1.0 / intBitsToFloat(R127i.y));
// 5
PV1i.z = floatBitsToInt(intBitsToFloat(PV0i.y) * intBitsToFloat(PS0i));
// 6
PV0i.y = floatBitsToInt(intBitsToFloat(R13i.x) + -(intBitsToFloat(PV1i.z)));
// 7
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(PV0i.y)));
// 8
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedVS[5].w), intBitsToFloat(PV1i.x)));
// 9
R6i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedVS[5].x), intBitsToFloat(PV0i.w)));
R6i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedVS[5].y), intBitsToFloat(PV0i.w)));
R6i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedVS[5].z), intBitsToFloat(PV0i.w)));
}
activeMaskStackC[3] = activeMaskStack[2] == true && activeMaskStackC[2] == true;
if( activeMaskStackC[3] == true ) {
// 0
backupReg0i = R0i.z;
PV0i.x = uf_remappedVS[6].y;
PV0i.x = floatBitsToInt(intBitsToFloat(PV0i.x) / 2.0);
PV0i.y = uf_remappedVS[6].x;
PV0i.y = floatBitsToInt(intBitsToFloat(PV0i.y) / 2.0);
R0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.z), intBitsToFloat(backupReg0i)));
R7i.w = 0x3f800000;
tempResultf = log2(intBitsToFloat(uf_remappedVS[4].x));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0i = floatBitsToInt(tempResultf);
// 1
backupReg0i = R0i.w;
PV1i.x = floatBitsToInt(intBitsToFloat(R4i.x) + intBitsToFloat(PV0i.y));
R9i.y = 0x3f800000;
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R13i.x), intBitsToFloat(PS0i)));
PV1i.w = floatBitsToInt(intBitsToFloat(R4i.y) + intBitsToFloat(PV0i.x));
R127i.x = floatBitsToInt(1.0 / intBitsToFloat(backupReg0i));
PS1i = R127i.x;
// 2
backupReg0i = R0i.x;
backupReg1i = R0i.y;
R0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PV1i.x)));
R0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg1i), intBitsToFloat(PV1i.w)));
PV0i.z = uf_remappedVS[7].y & int(1);
R9i.w = 0x3f800000;
PS0i = floatBitsToInt(exp2(intBitsToFloat(PV1i.z)));
// 3
R123i.x = ((PV0i.z == 0)?(int(1)):(0));
PV1i.x = R123i.x;
PV1i.y = floatBitsToInt(-(intBitsToFloat(PS0i)) + 1.0);
R127i.z = ((PV0i.z == 0)?(0x00000002):(0));
PV1i.z = R127i.z;
R4i.w = floatBitsToInt(-(intBitsToFloat(R7i.x)) + 1.0);
R126i.x = int(intBitsToFloat(uf_remappedVS[8].z));
PS1i = R126i.x;
// 4
R124i.x = (PV1i.z == 0x00000002)?int(0xFFFFFFFF):int(0x0);
R4i.y = (PV1i.x == int(1))?int(0xFFFFFFFF):int(0x0);
PV0i.z = floatBitsToInt(intBitsToFloat(PV1i.y) * intBitsToFloat(R127i.x));
PV0i.w = (PV1i.x == 0x00000002)?int(0xFFFFFFFF):int(0x0);
R127i.x = int(intBitsToFloat(uf_remappedVS[9].z));
PS0i = R127i.x;
// 5
R9i.x = (R127i.z == int(1))?int(0xFFFFFFFF):int(0x0);
R127i.y = ((PV0i.w == 0)?(R5i.y):(R5i.x));
R123i.z = ((PV0i.w == 0)?(R5i.x):(R5i.z));
PV1i.z = R123i.z;
R123i.w = ((R2i.w == 0)?(PV0i.z):(R13i.x));
PV1i.w = R123i.w;
R125i.x = int(intBitsToFloat(uf_remappedVS[10].z));
PS1i = R125i.x;
// 6
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.y), intBitsToFloat(PV1i.w)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.x), intBitsToFloat(PV1i.w)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.z), intBitsToFloat(PV1i.w)));
R3i.w = ((R4i.y == 0)?(PV1i.z):(R5i.y));
R2i.w = floatBitsToInt(float(R126i.x));
PS0i = R2i.w;
// 7
PV1i.x = floatBitsToInt(intBitsToFloat(R6i.z) + intBitsToFloat(PV0i.z));
PV1i.y = floatBitsToInt(intBitsToFloat(R6i.y) + intBitsToFloat(PV0i.x));
R127i.z = floatBitsToInt(-(abs(intBitsToFloat(PS0i))) + 0.0);
PV1i.w = floatBitsToInt(intBitsToFloat(R6i.x) + intBitsToFloat(PV0i.y));
R0i.w = floatBitsToInt(float(R127i.x));
PS1i = R0i.w;
// 8
backupReg0i = R125i.x;
R125i.x = floatBitsToInt((0.0 >= abs(intBitsToFloat(R2i.w)))?1.0:0.0);
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.w), intBitsToFloat(PV1i.x)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.w), intBitsToFloat(PV1i.w)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.w), intBitsToFloat(PV1i.y)));
R6i.w = floatBitsToInt(float(backupReg0i));
PS0i = R6i.w;
// 9
backupReg0i = R0i.w;
backupReg0i = R0i.w;
R4i.x = floatBitsToInt(intBitsToFloat(R1i.x) + intBitsToFloat(PV0i.z));
R2i.y = floatBitsToInt(intBitsToFloat(R1i.y) + intBitsToFloat(PV0i.w));
R6i.z = floatBitsToInt(intBitsToFloat(R1i.z) + intBitsToFloat(PV0i.y));
PV1i.w = floatBitsToInt(-(abs(intBitsToFloat(backupReg0i))) + 0.0);
PS1i = floatBitsToInt((0.0 >= abs(intBitsToFloat(backupReg0i)))?1.0:0.0);
// 10
backupReg0i = R125i.x;
R125i.x = ((intBitsToFloat(backupReg0i) == 0.0)?(0):(R127i.z));
PV0i.x = R125i.x;
PV0i.y = floatBitsToInt((0.0 >= abs(intBitsToFloat(R6i.w)))?1.0:0.0);
PV0i.z = floatBitsToInt(-(abs(intBitsToFloat(R6i.w))) + 0.0);
R127i.w = ((intBitsToFloat(PS1i) == 0.0)?(0):(PV1i.w));
PV0i.w = R127i.w;
R125i.w = floatBitsToInt(1.0 / intBitsToFloat(R2i.w));
PS0i = R125i.w;
// 11
R127i.x = ((intBitsToFloat(PV0i.y) == 0.0)?(0):(PV0i.z));
PV1i.x = R127i.x;
PV1i.y = floatBitsToInt(abs(intBitsToFloat(R0i.w)) + intBitsToFloat(PV0i.w));
R127i.z = ((R124i.x == 0)?(R5i.x):(R5i.z));
R126i.w = floatBitsToInt(abs(intBitsToFloat(R2i.w)) + intBitsToFloat(PV0i.x));
R124i.w = floatBitsToInt(1.0 / intBitsToFloat(R0i.w));
PS1i = R124i.w;
// 12
backupReg0i = R124i.x;
R124i.x = ((R4i.y == 0)?(R127i.y):(R5i.z));
R127i.y = ((backupReg0i == 0)?(R5i.y):(R5i.x));
R126i.z = ((-(intBitsToFloat(R127i.w)) > 0.0)?(PV1i.y):(R127i.w));
PV0i.w = floatBitsToInt(abs(intBitsToFloat(R6i.w)) + intBitsToFloat(PV1i.x));
PS0i = floatBitsToInt(1.0 / intBitsToFloat(R6i.w));
// 13
backupReg0i = R127i.x;
backupReg0i = R127i.x;
R127i.x = floatBitsToInt(intBitsToFloat(R125i.w) * 0.0);
R126i.y = floatBitsToInt(intBitsToFloat(R124i.w) * 0.0);
R123i.z = ((-(intBitsToFloat(R125i.x)) > 0.0)?(R126i.w):(R125i.x));
PV1i.z = R123i.z;
R126i.w = floatBitsToInt(intBitsToFloat(PS0i) * 0.0);
R122i.x = ((-(intBitsToFloat(backupReg0i)) > 0.0)?(PV0i.w):(backupReg0i));
PS1i = R122i.x;
// 14
R126i.x = ((R9i.x == 0)?(R127i.z):(R5i.y));
R125i.y = ((intBitsToFloat(R2i.w) == 0.0)?(0):(PV1i.z));
R2i.z = ((intBitsToFloat(R0i.w) == 0.0)?(0):(R126i.z));
R125i.w = ((R9i.x == 0)?(R127i.y):(R5i.z));
R11i.y = ((intBitsToFloat(R6i.w) == 0.0)?(0):(PS1i));
PS0i = R11i.y;
// 15
R125i.x = ((intBitsToFloat(R5i.x) > 0.5)?int(0xFFFFFFFF):int(0x0));
R127i.y = ((intBitsToFloat(R5i.y) > 0.5)?int(0xFFFFFFFF):int(0x0));
R127i.z = ((intBitsToFloat(R5i.z) > 0.5)?int(0xFFFFFFFF):int(0x0));
R124i.w = ((intBitsToFloat(R5i.w) > 0.5)?int(0xFFFFFFFF):int(0x0));
R6i.x = ((intBitsToFloat(R5i.y) > 0.5)?int(0xFFFFFFFF):int(0x0));
PS1i = R6i.x;
// 16
R2i.x = ((intBitsToFloat(R5i.z) > 0.5)?int(0xFFFFFFFF):int(0x0));
R6i.y = floatBitsToInt(trunc(intBitsToFloat(R127i.x)));
PV0i.z = floatBitsToInt(intBitsToFloat(uf_remappedVS[11].z) + intBitsToFloat(uf_remappedVS[12].x));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.x), intBitsToFloat(uf_remappedVS[12].x)));
PV0i.w = floatBitsToInt(intBitsToFloat(PV0i.w) * 2.0);
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.y), intBitsToFloat(uf_remappedVS[12].y)));
R127i.x = floatBitsToInt(intBitsToFloat(R127i.x) * 2.0);
PS0i = R127i.x;
// 17
R10i.x = floatBitsToInt(trunc(intBitsToFloat(R126i.w)));
R10i.y = floatBitsToInt(trunc(intBitsToFloat(R126i.y)));
R11i.z = floatBitsToInt(-(intBitsToFloat(PV0i.w)) + intBitsToFloat(PV0i.z));
PV1i.w = floatBitsToInt(intBitsToFloat(uf_remappedVS[11].w) + intBitsToFloat(uf_remappedVS[12].y));
R0i.w = ((R125i.x == 0)?(R7i.x):(R4i.w));
PS1i = R0i.w;
// 18
backupReg0i = R127i.x;
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedVS[13].y), intBitsToFloat(R124i.x)));
R127i.x = floatBitsToInt(intBitsToFloat(R127i.x) * 2.0);
R126i.y = floatBitsToInt(intBitsToFloat(uf_remappedVS[14].w) + intBitsToFloat(uf_remappedVS[13].y));
PV0i.z = floatBitsToInt(intBitsToFloat(uf_remappedVS[14].z) + intBitsToFloat(uf_remappedVS[13].x));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedVS[13].x), intBitsToFloat(R3i.w)));
PV0i.w = floatBitsToInt(intBitsToFloat(PV0i.w) * 2.0);
R12i.z = floatBitsToInt(-(intBitsToFloat(backupReg0i)) + intBitsToFloat(PV1i.w));
PS0i = R12i.z;
// 19
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedVS[15].y), intBitsToFloat(R125i.w)));
PV1i.x = floatBitsToInt(intBitsToFloat(PV1i.x) * 2.0);
PV1i.y = floatBitsToInt(intBitsToFloat(uf_remappedVS[16].w) + intBitsToFloat(uf_remappedVS[15].y));
PV1i.z = floatBitsToInt(intBitsToFloat(uf_remappedVS[16].z) + intBitsToFloat(uf_remappedVS[15].x));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedVS[15].x), intBitsToFloat(R126i.x)));
PV1i.w = floatBitsToInt(intBitsToFloat(PV1i.w) * 2.0);
R15i.y = floatBitsToInt(-(intBitsToFloat(PV0i.w)) + intBitsToFloat(PV0i.z));
PS1i = R15i.y;
// 20
R12i.x = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + intBitsToFloat(PV1i.y));
R16i.y = floatBitsToInt(-(intBitsToFloat(PV1i.w)) + intBitsToFloat(PV1i.z));
R10i.z = floatBitsToInt(-(intBitsToFloat(R127i.x)) + intBitsToFloat(R126i.y));
R3i.w = uf_remappedVS[7].x & 0x00080000;
R12i.y = uf_remappedVS[7].x & 0x00100000;
PS0i = R12i.y;
// 21
R11i.x = ((R127i.z == 0)?(R7i.x):(R4i.w));
R13i.y = uf_remappedVS[7].x & 0x00200000;
R4i.z = uf_remappedVS[7].x & 0x00400000;
R2i.w = ((R127i.y == 0)?(R7i.y):(R13i.w));
R6i.w = ((R124i.w == 0)?(R7i.y):(R13i.w));
PS1i = R6i.w;
// 22
backupReg0i = R2i.x;
backupReg1i = R4i.w;
R2i.x = uf_remappedVS[7].x & 0x01000000;
R14i.y = uf_remappedVS[7].x & 0x00800000;
R7i.z = ((backupReg0i == 0)?(R7i.y):(R13i.w));
R4i.w = ((R6i.x == 0)?(R7i.x):(backupReg1i));
R6i.x = int(intBitsToFloat(R125i.y));
PS0i = R6i.x;
}
if( activeMaskStackC[3] == true ) {
// 0
R127i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R2i.y),intBitsToFloat(R6i.z),intBitsToFloat(R7i.w)),vec4(intBitsToFloat(uf_remappedVS[17].x),intBitsToFloat(uf_remappedVS[17].y),intBitsToFloat(uf_remappedVS[17].z),intBitsToFloat(uf_remappedVS[17].w))));
PV0i.x = R127i.x;
PV0i.y = R127i.x;
PV0i.z = R127i.x;
PV0i.w = R127i.x;
R126i.x = int(intBitsToFloat(R6i.y));
PS0i = R126i.x;
// 1
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R2i.y),intBitsToFloat(R6i.z),intBitsToFloat(R7i.w)),vec4(intBitsToFloat(uf_remappedVS[18].x),intBitsToFloat(uf_remappedVS[18].y),intBitsToFloat(uf_remappedVS[18].z),intBitsToFloat(uf_remappedVS[18].w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R127i.z = tempi.x;
R9i.z = ((R4i.y == 0)?(R5i.x):(R5i.y));
PS1i = R9i.z;
// 2
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R2i.y),intBitsToFloat(R6i.z),intBitsToFloat(R7i.w)),vec4(intBitsToFloat(uf_remappedVS[19].x),intBitsToFloat(uf_remappedVS[19].y),intBitsToFloat(uf_remappedVS[19].z),intBitsToFloat(uf_remappedVS[19].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R124i.w = tempi.x;
R2i.y = ((R4i.y == 0)?(R5i.y):(R5i.z));
PS0i = R2i.y;
// 3
backupReg0i = R0i.x;
backupReg1i = R0i.y;
backupReg2i = R0i.z;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),intBitsToFloat(backupReg2i),intBitsToFloat(R9i.y)),vec4(intBitsToFloat(uf_remappedVS[20].x),intBitsToFloat(uf_remappedVS[20].y),intBitsToFloat(uf_remappedVS[20].z),intBitsToFloat(uf_remappedVS[20].w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R124i.x = int(intBitsToFloat(R2i.z));
PS1i = R124i.x;
// 4
backupReg0i = R0i.x;
backupReg1i = R0i.y;
backupReg2i = R0i.z;
backupReg3i = R127i.x;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),intBitsToFloat(backupReg2i),intBitsToFloat(R9i.y)),vec4(intBitsToFloat(uf_remappedVS[21].x),intBitsToFloat(uf_remappedVS[21].y),intBitsToFloat(uf_remappedVS[21].z),intBitsToFloat(uf_remappedVS[21].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.x = floatBitsToInt(intBitsToFloat(backupReg3i) + intBitsToFloat(PV1i.x));
PS0i = R127i.x;
// 5
backupReg0i = R0i.x;
backupReg1i = R0i.y;
backupReg2i = R0i.z;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),intBitsToFloat(backupReg2i),intBitsToFloat(R9i.y)),vec4(intBitsToFloat(uf_remappedVS[22].x),intBitsToFloat(uf_remappedVS[22].y),intBitsToFloat(uf_remappedVS[22].z),intBitsToFloat(uf_remappedVS[22].w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R125i.y = floatBitsToInt(intBitsToFloat(R127i.z) + intBitsToFloat(PV0i.x));
PS1i = R125i.y;
// 6
backupReg0i = R0i.w;
backupReg1i = R10i.y;
R4i.x = ((R9i.x == 0)?(R5i.x):(R5i.y));
R10i.y = ((R9i.x == 0)?(R5i.y):(R5i.z));
R127i.z = floatBitsToInt(intBitsToFloat(R124i.w) + intBitsToFloat(PV1i.x));
PV0i.z = R127i.z;
R0i.w = ((R3i.w == 0)?(R7i.x):(backupReg0i));
R125i.x = int(intBitsToFloat(backupReg1i));
PS0i = R125i.x;
// 7
R17i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(R125i.y),intBitsToFloat(PV0i.z),intBitsToFloat(R9i.w)),vec4(intBitsToFloat(uf_remappedVS[23].x),intBitsToFloat(uf_remappedVS[23].y),intBitsToFloat(uf_remappedVS[23].z),intBitsToFloat(uf_remappedVS[23].w))));
PV1i.x = R17i.x;
PV1i.y = R17i.x;
PV1i.z = R17i.x;
PV1i.w = R17i.x;
R9i.x = int(intBitsToFloat(R11i.y));
PS1i = R9i.x;
// 8
backupReg0i = R10i.x;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(R125i.y),intBitsToFloat(R127i.z),intBitsToFloat(R9i.w)),vec4(intBitsToFloat(uf_remappedVS[24].x),intBitsToFloat(uf_remappedVS[24].y),intBitsToFloat(uf_remappedVS[24].z),intBitsToFloat(uf_remappedVS[24].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R17i.y = tempi.x;
R10i.x = int(intBitsToFloat(backupReg0i));
PS0i = R10i.x;
// 9
R0i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(R125i.y),intBitsToFloat(R127i.z),intBitsToFloat(R9i.w)),vec4(intBitsToFloat(uf_remappedVS[25].x),intBitsToFloat(uf_remappedVS[25].y),intBitsToFloat(uf_remappedVS[25].z),intBitsToFloat(uf_remappedVS[25].w))));
PV1i.x = R0i.x;
PV1i.y = R0i.x;
PV1i.z = R0i.x;
PV1i.w = R0i.x;
R0i.z = ((R12i.y == 0)?(R7i.y):(R2i.w));
PS1i = R0i.z;
// 10
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(R125i.y),intBitsToFloat(R127i.z),intBitsToFloat(R9i.w)),vec4(intBitsToFloat(uf_remappedVS[26].x),intBitsToFloat(uf_remappedVS[26].y),intBitsToFloat(uf_remappedVS[26].z),intBitsToFloat(uf_remappedVS[26].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R17i.w = tempi.x;
R2i.z = ((R13i.y == 0)?(R7i.x):(R11i.x));
PS0i = R2i.z;
// 11
backupReg0i = R2i.x;
R2i.x = ((R14i.y == 0)?(R7i.x):(R4i.w));
R14i.y = ((backupReg0i == 0)?(R7i.y):(R7i.z));
R6i.z = ((R4i.z == 0)?(R7i.y):(R6i.w));
PV1i.w = uf_remappedVS[20].z;
R4i.z = floatBitsToInt(1.0 / intBitsToFloat(PV0i.x));
PS1i = R4i.z;
// 12
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(PV1i.w)));
PV0i.y = uf_remappedVS[22].z;
PV0i.z = uf_remappedVS[21].z;
R4i.w = R17i.w;
R4i.w = floatBitsToInt(intBitsToFloat(R4i.w) / 2.0);
R13i.y = floatBitsToInt(float(R6i.x));
PS0i = R13i.y;
// 13
backupReg0i = R126i.x;
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(PV0i.y)));
PV1i.y = uf_remappedVS[21].y;
PV1i.z = uf_remappedVS[20].y;
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(PV0i.z)));
R13i.z = floatBitsToInt(float(backupReg0i));
PS1i = R13i.z;
// 14
PV0i.x = uf_remappedVS[22].y;
R125i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.y),intBitsToFloat(PV1i.z)) + intBitsToFloat(R127i.x)));
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.y),intBitsToFloat(PV1i.y)) + intBitsToFloat(PV1i.w)));
R124i.w = uf_remappedVS[20].x;
R7i.y = floatBitsToInt(float(R124i.x));
PS0i = R7i.y;
// 15
PV1i.x = uf_remappedVS[21].x;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.y),intBitsToFloat(PV0i.x)) + intBitsToFloat(R126i.x)));
PV1i.z = R123i.z;
PV1i.w = uf_remappedVS[22].x;
R7i.z = floatBitsToInt(float(R125i.x));
PS1i = R7i.z;
// 16
R19i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.x),intBitsToFloat(R124i.w)) + intBitsToFloat(R125i.y)));
R19i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.x),intBitsToFloat(PV1i.x)) + intBitsToFloat(R127i.z)));
R19i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.x),intBitsToFloat(PV1i.w)) + intBitsToFloat(PV1i.z)));
R3i.y = floatBitsToInt(float(R9i.x));
PS0i = R3i.y;
// 17
R18i.x = floatBitsToInt(intBitsToFloat(uf_remappedVS[3].x) * 1.0);
R3i.z = floatBitsToInt(float(R10i.x));
PS1i = R3i.z;
// 18
PS0i = floatBitsToInt(1.0 / intBitsToFloat(R1i.w));
// 19
R18i.y = floatBitsToInt(intBitsToFloat(R13i.x) * intBitsToFloat(PS0i));
R18i.z = 0x3f800000;
}
if( activeMaskStackC[3] == true ) {
// 0
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedVS[6].z), intBitsToFloat(R0i.x)));
R124i.w = floatBitsToInt(1.0 / intBitsToFloat(uf_remappedVS[8].z));
PS0i = R124i.w;
// 1
R10i.x = uf_remappedVS[27].x;
PV1i.y = floatBitsToInt(intBitsToFloat(PV0i.w) * intBitsToFloat(R4i.z));
R4i.z = uf_remappedVS[27].y;
R125i.y = floatBitsToInt(1.0 / intBitsToFloat(uf_remappedVS[8].w));
PS1i = R125i.y;
// 2
PV0i.x = floatBitsToInt(intBitsToFloat(uf_remappedVS[6].z) + -(intBitsToFloat(PV1i.y)));
R125i.w = floatBitsToInt(1.0 / intBitsToFloat(uf_remappedVS[9].z));
PS0i = R125i.w;
// 3
R17i.z = floatBitsToInt(intBitsToFloat(R0i.x) + -(intBitsToFloat(PV0i.x)));
PV1i.z = R17i.z;
R1i.w = uf_remappedVS[27].z;
R127i.y = floatBitsToInt(1.0 / intBitsToFloat(uf_remappedVS[9].w));
PS1i = R127i.y;
// 4
PV0i.y = floatBitsToInt(intBitsToFloat(uf_remappedVS[28].x) + intBitsToFloat(uf_remappedVS[28].z));
R20i.z = floatBitsToInt((intBitsToFloat(PV1i.z) * 0.5 + intBitsToFloat(R4i.w)));
PV0i.w = floatBitsToInt(intBitsToFloat(uf_remappedVS[28].y) + intBitsToFloat(uf_remappedVS[28].w));
R20i.w = floatBitsToInt(intBitsToFloat(R17i.w) * 1.0);
PS0i = R20i.w;
// 5
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedVS[28].z),intBitsToFloat(R9i.z)) + intBitsToFloat(PV0i.y)));
R20i.y = floatBitsToInt((intBitsToFloat(R17i.y) * -(0.5) + intBitsToFloat(R4i.w)));
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedVS[28].w),intBitsToFloat(R2i.y)) + intBitsToFloat(PV0i.w)));
R126i.w = floatBitsToInt(1.0 / intBitsToFloat(uf_remappedVS[10].z));
PS1i = R126i.w;
// 6
R0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedVS[8].y), intBitsToFloat(R125i.y)));
PV0i.x = R0i.x;
R9i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedVS[8].x), intBitsToFloat(R124i.w)));
PV0i.z = R9i.z;
R125i.y = floatBitsToInt(1.0 / intBitsToFloat(uf_remappedVS[10].w));
PS0i = R125i.y;
// 7
backupReg0i = R0i.z;
R1i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.w),intBitsToFloat(PV0i.z)) + -(0.5)));
PV1i.y = floatBitsToInt(intBitsToFloat(uf_remappedVS[29].x) + intBitsToFloat(uf_remappedVS[29].z));
R0i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(PV0i.x)) + -(0.5)));
PV1i.w = floatBitsToInt(intBitsToFloat(uf_remappedVS[29].y) + intBitsToFloat(uf_remappedVS[29].w));
R20i.x = floatBitsToInt((intBitsToFloat(R17i.x) * 0.5 + intBitsToFloat(R4i.w)));
PS1i = R20i.x;
// 8
backupReg0i = R127i.y;
R125i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedVS[29].z),intBitsToFloat(R4i.x)) + intBitsToFloat(PV1i.y)));
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedVS[9].x), intBitsToFloat(R125i.w)));
PV0i.y = R127i.y;
R126i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedVS[29].w),intBitsToFloat(R10i.y)) + intBitsToFloat(PV1i.w)));
R125i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedVS[9].y), intBitsToFloat(backupReg0i)));
// 9
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R13i.x)),intBitsToFloat(uf_remappedVS[14].x)) + -(intBitsToFloat(R15i.y))));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R13i.x),intBitsToFloat(uf_remappedVS[14].y)) + intBitsToFloat(R10i.z)));
PV1i.y = R123i.y;
R125i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedVS[10].x), intBitsToFloat(R126i.w)));
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedVS[10].y), intBitsToFloat(R125i.y)));
R125i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.z),intBitsToFloat(PV0i.y)) + -(0.5)));
PS1i = R125i.y;
// 10
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R13i.x)),intBitsToFloat(uf_remappedVS[16].x)) + -(intBitsToFloat(R16i.y))));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R13i.x),intBitsToFloat(uf_remappedVS[16].y)) + intBitsToFloat(R12i.x)));
PV0i.y = R123i.y;
R124i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R125i.w)),intBitsToFloat(R7i.z)) + intBitsToFloat(PV1i.y)));
R124i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.y),intBitsToFloat(R7i.y)) + intBitsToFloat(PV1i.x)));
R7i.y = uf_remappedVS[30].x;
PS0i = R7i.y;
// 11
backupReg0i = R3i.y;
backupReg1i = R6i.z;
backupReg2i = R125i.w;
R124i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R126i.w)),intBitsToFloat(R3i.z)) + intBitsToFloat(PV0i.y)));
R3i.y = uf_remappedVS[30].y;
R6i.z = uf_remappedVS[30].z;
R125i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.z),intBitsToFloat(backupReg0i)) + intBitsToFloat(PV0i.x)));
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg1i),intBitsToFloat(backupReg2i)) + -(0.5)));
PS1i = R127i.x;
// 12
backupReg0i = R126i.x;
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R13i.x),intBitsToFloat(uf_remappedVS[15].z)) + intBitsToFloat(R125i.x)));
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R13i.x),intBitsToFloat(uf_remappedVS[15].w)) + intBitsToFloat(R126i.z)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R13i.x),intBitsToFloat(uf_remappedVS[13].w)) + intBitsToFloat(R127i.z)));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R13i.x),intBitsToFloat(uf_remappedVS[13].z)) + intBitsToFloat(backupReg0i)));
PV0i.w = R123i.w;
R122i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R14i.y),intBitsToFloat(R126i.w)) + -(0.5)));
PS0i = R122i.x;
// 13
backupReg0i = R127i.x;
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(PS0i)) + -(intBitsToFloat(R124i.x))));
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.x),intBitsToFloat(R125i.z)) + -(0.5)));
PV1i.y = R123i.y;
R3i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(backupReg0i)) + -(intBitsToFloat(R124i.z))));
R0i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(R125i.y)) + intBitsToFloat(R124i.w)));
R4i.w = uf_remappedVS[31].x;
PS1i = R4i.w;
// 14
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.x),intBitsToFloat(PV1i.y)) + intBitsToFloat(R125i.w)));
PV0i.w = R123i.w;
// 15
R14i.x = floatBitsToInt(intBitsToFloat(PV0i.w) + 0.5);
R14i.y = floatBitsToInt(intBitsToFloat(R127i.x) + 0.5);
}
if( activeMaskStackC[3] == true ) {
// 0
PV0i.y = floatBitsToInt(intBitsToFloat(uf_remappedVS[32].x) + intBitsToFloat(uf_remappedVS[32].z));
PV0i.w = floatBitsToInt(intBitsToFloat(uf_remappedVS[32].y) + intBitsToFloat(uf_remappedVS[32].w));
// 1
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.x),intBitsToFloat(uf_remappedVS[32].z)) + intBitsToFloat(PV0i.y)));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R13i.x)),intBitsToFloat(uf_remappedVS[11].x)) + -(intBitsToFloat(R11i.z))));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.y),intBitsToFloat(uf_remappedVS[32].w)) + intBitsToFloat(PV0i.w)));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R13i.x),intBitsToFloat(uf_remappedVS[11].y)) + intBitsToFloat(R12i.z)));
PV1i.w = R123i.w;
// 2
backupReg0i = R9i.z;
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R0i.x)),intBitsToFloat(R13i.z)) + intBitsToFloat(PV1i.w)));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R13i.x),intBitsToFloat(uf_remappedVS[12].z)) + intBitsToFloat(PV1i.x)));
PV0i.y = R123i.y;
R9i.z = uf_remappedVS[33].x;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(R13i.y)) + intBitsToFloat(PV1i.y)));
PV0i.w = R123i.w;
R122i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R13i.x),intBitsToFloat(uf_remappedVS[12].w)) + intBitsToFloat(PV1i.z)));
PS0i = R122i.x;
// 3
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PS0i),intBitsToFloat(R0i.z)) + -(intBitsToFloat(PV0i.x))));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(R1i.x)) + intBitsToFloat(PV0i.w)));
PV1i.w = R123i.w;
// 4
R11i.xyz = floatBitsToInt(vec3(intBitsToFloat(PV1i.w),intBitsToFloat(PV1i.z),intBitsToFloat(R0i.w)) + vec3(0.5,0.5,0.5));
R11i.w = floatBitsToInt(intBitsToFloat(R3i.z) + 0.5);
R1i.x = uf_remappedVS[34].x;
PS0i = R1i.x;
}
if( activeMaskStackC[3] == true ) {
// 0
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.z), intBitsToFloat(uf_remappedVS[35].y)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R10i.x), intBitsToFloat(uf_remappedVS[35].x)));
R125i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R9i.z), intBitsToFloat(uf_remappedVS[35].w)));
R125i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.w), intBitsToFloat(uf_remappedVS[35].z)));
// 1
R0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R7i.y), intBitsToFloat(uf_remappedVS[36].x)));
PV1i.x = R0i.x;
R0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.y), intBitsToFloat(uf_remappedVS[36].y)));
PV1i.y = R0i.y;
R0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.z), intBitsToFloat(uf_remappedVS[36].z)));
PV1i.z = R0i.z;
R124i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(PV0i.y)));
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(PV0i.x)));
PS1i = R127i.x;
// 2
R10i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(R1i.x)));
R10i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.y), intBitsToFloat(R1i.x)));
R10i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.z), intBitsToFloat(R1i.x)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(R125i.w)));
R10i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.w), intBitsToFloat(uf_remappedVS[36].w)));
PS0i = R10i.w;
// 3
R9i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.w), intBitsToFloat(uf_remappedVS[37].x)));
R9i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(uf_remappedVS[37].y)));
R9i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(uf_remappedVS[37].z)));
R9i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.z), intBitsToFloat(uf_remappedVS[37].w)));
// 4
R12i.xyz = ivec3(R8i.x,R8i.y,R8i.z);
R12i.w = R8i.w;
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
// export
gl_Position = vec4(intBitsToFloat(R17i.x), intBitsToFloat(R17i.y), intBitsToFloat(R17i.z), intBitsToFloat(R17i.w));
// export
passParameterSem0 = vec4(intBitsToFloat(R10i.x), intBitsToFloat(R10i.y), intBitsToFloat(R10i.z), intBitsToFloat(R10i.w));
// export
passParameterSem1 = vec4(intBitsToFloat(R9i.x), intBitsToFloat(R9i.y), intBitsToFloat(R9i.z), intBitsToFloat(R9i.w));
// export
passParameterSem3 = vec4(intBitsToFloat(R20i.x), intBitsToFloat(R20i.y), intBitsToFloat(R20i.z), intBitsToFloat(R20i.w));
// export
passParameterSem4 = vec4(intBitsToFloat(R18i.x), intBitsToFloat(R18i.y), intBitsToFloat(R18i.z), intBitsToFloat(R18i.w));
// export
passParameterSem5 = vec4(intBitsToFloat(R12i.x), intBitsToFloat(R12i.y), intBitsToFloat(R12i.z), intBitsToFloat(R12i.w));
// export
passParameterSem6 = vec4(intBitsToFloat(R11i.x), intBitsToFloat(R11i.y), intBitsToFloat(R11i.z), intBitsToFloat(R11i.w));
// export
// skipped export to semanticId 255
// export
passParameterSem7 = vec4(intBitsToFloat(R14i.x), intBitsToFloat(R14i.y), intBitsToFloat(R14i.z), intBitsToFloat(R14i.z));
}
