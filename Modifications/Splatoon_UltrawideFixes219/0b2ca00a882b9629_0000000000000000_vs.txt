#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_packing : enable
// shader 0b2ca00a882b9629
// backgrounds UW scaling shader
float scaleAspect = 1.3333333333333;

uniform ivec4 uf_uniformRegisterVS[256];
uniform vec2 uf_windowSpaceToClipSpaceTransform;
layout(location = 0) in uvec4 attrDataSem0;
out gl_PerVertex
{
	vec4 gl_Position;
	float gl_PointSize;
};
layout(location = 0) out vec4 passParameterSem0;
layout(location = 2) out vec4 passParameterSem1;
layout(location = 1) out vec4 passParameterSem2;
layout(location = 3) out vec4 passParameterSem3;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R7i = ivec4(0);
ivec4 R8i = ivec4(0);
ivec4 R9i = ivec4(0);
ivec4 R122i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R124i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
uvec4 attrDecoder;
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
bool activeMaskStack[14];
bool activeMaskStackC[15];
activeMaskStack[0] = false;
activeMaskStack[1] = false;
activeMaskStack[2] = false;
activeMaskStack[3] = false;
activeMaskStack[4] = false;
activeMaskStack[5] = false;
activeMaskStack[6] = false;
activeMaskStack[7] = false;
activeMaskStack[8] = false;
activeMaskStack[9] = false;
activeMaskStack[10] = false;
activeMaskStack[11] = false;
activeMaskStack[12] = false;
activeMaskStackC[0] = false;
activeMaskStackC[1] = false;
activeMaskStackC[2] = false;
activeMaskStackC[3] = false;
activeMaskStackC[4] = false;
activeMaskStackC[5] = false;
activeMaskStackC[6] = false;
activeMaskStackC[7] = false;
activeMaskStackC[8] = false;
activeMaskStackC[9] = false;
activeMaskStackC[10] = false;
activeMaskStackC[11] = false;
activeMaskStackC[12] = false;
activeMaskStackC[13] = false;
activeMaskStack[0] = true;
activeMaskStackC[0] = true;
activeMaskStackC[1] = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = ivec4(gl_VertexID, 0, 0, gl_InstanceID);
attrDecoder.xy = attrDataSem0.xy;
attrDecoder.xy = (attrDecoder.xy>>24)|((attrDecoder.xy>>8)&0xFF00)|((attrDecoder.xy<<8)&0xFF0000)|((attrDecoder.xy<<24));
attrDecoder.z = 0;
attrDecoder.w = 0;
R1i = ivec4(int(attrDecoder.x), int(attrDecoder.y), floatBitsToInt(0.0), floatBitsToInt(1.0));
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(uf_uniformRegisterVS[19].x)));
R0i.y = floatBitsToInt(-(intBitsToFloat(R1i.y)));
PV0i.y = R0i.y;
R1i.z = 0;
R1i.w = 0x3f800000;
R127i.w = floatBitsToInt(1.0);
PS0i = R127i.w;
// 1
R0i.x = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(uf_uniformRegisterVS[19].z));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(uf_uniformRegisterVS[19].y)));
// 2
R0i.y = floatBitsToInt(intBitsToFloat(PV1i.z) + intBitsToFloat(uf_uniformRegisterVS[19].w));
PV0i.y = R0i.y;
R0i.w = uf_uniformRegisterVS[2].x & 0x40000000;
// 3
R127i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(R1i.z),intBitsToFloat(R1i.w)),vec4(intBitsToFloat(uf_uniformRegisterVS[4].x)*scaleAspect,intBitsToFloat(uf_uniformRegisterVS[4].y),intBitsToFloat(uf_uniformRegisterVS[4].z),intBitsToFloat(uf_uniformRegisterVS[4].w))));
PV1i.x = R127i.x;
PV1i.y = R127i.x;
PV1i.z = R127i.x;
PV1i.w = R127i.x;
// 4
backupReg0i = R0i.x;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(backupReg0i),intBitsToFloat(R0i.y),intBitsToFloat(R1i.z),intBitsToFloat(R1i.w)),vec4(intBitsToFloat(uf_uniformRegisterVS[5].x),intBitsToFloat(uf_uniformRegisterVS[5].y),intBitsToFloat(uf_uniformRegisterVS[5].z),intBitsToFloat(uf_uniformRegisterVS[5].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.y = tempi.x;
// 5
backupReg0i = R0i.x;
backupReg1i = R0i.y;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),intBitsToFloat(R1i.z),intBitsToFloat(R1i.w)),vec4(intBitsToFloat(uf_uniformRegisterVS[6].x),intBitsToFloat(uf_uniformRegisterVS[6].y),intBitsToFloat(uf_uniformRegisterVS[6].z),intBitsToFloat(uf_uniformRegisterVS[6].w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R127i.z = tempi.x;
// 6
R4i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(R127i.y),intBitsToFloat(PV1i.x),intBitsToFloat(R127i.w)),vec4(intBitsToFloat(uf_uniformRegisterVS[8].x),intBitsToFloat(uf_uniformRegisterVS[8].y),intBitsToFloat(uf_uniformRegisterVS[8].z),intBitsToFloat(uf_uniformRegisterVS[8].w))));
PV0i.x = R4i.x;
PV0i.y = R4i.x;
PV0i.z = R4i.x;
PV0i.w = R4i.x;
// 7
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(R127i.y),intBitsToFloat(R127i.z),intBitsToFloat(R127i.w)),vec4(intBitsToFloat(uf_uniformRegisterVS[9].x),intBitsToFloat(uf_uniformRegisterVS[9].y),intBitsToFloat(uf_uniformRegisterVS[9].z),intBitsToFloat(uf_uniformRegisterVS[9].w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R4i.y = tempi.x;
// 8
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(R127i.y),intBitsToFloat(R127i.z),intBitsToFloat(R127i.w)),vec4(intBitsToFloat(uf_uniformRegisterVS[10].x),intBitsToFloat(uf_uniformRegisterVS[10].y),intBitsToFloat(uf_uniformRegisterVS[10].z),intBitsToFloat(uf_uniformRegisterVS[10].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R4i.z = tempi.x;
// 9
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(R127i.y),intBitsToFloat(R127i.z),intBitsToFloat(R127i.w)),vec4(intBitsToFloat(uf_uniformRegisterVS[11].x),intBitsToFloat(uf_uniformRegisterVS[11].y),intBitsToFloat(uf_uniformRegisterVS[11].z),intBitsToFloat(uf_uniformRegisterVS[11].w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R4i.w = tempi.x;
// 10
R2i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_uniformRegisterVS[19].x), intBitsToFloat(uf_uniformRegisterVS[12].x)));
R2i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_uniformRegisterVS[19].y), intBitsToFloat(uf_uniformRegisterVS[12].y)));
R3i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_uniformRegisterVS[19].x), intBitsToFloat(uf_uniformRegisterVS[12].y)));
PS0i = R3i.x;
// 11
R3i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_uniformRegisterVS[19].y), intBitsToFloat(uf_uniformRegisterVS[12].x)));
// 12
predResult = (0 != R0i.w);
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
activeMaskStack[2] = activeMaskStack[1];
activeMaskStackC[3] = activeMaskStackC[2];
// 0
R0i.z = uf_uniformRegisterVS[2].x & 0x00000002;
// 1
predResult = (0 != R0i.z);
activeMaskStack[2] = predResult;
activeMaskStackC[3] = predResult == true && activeMaskStackC[2] == true;
}
else {
activeMaskStack[2] = false;
activeMaskStackC[3] = false;
}
if( activeMaskStackC[3] == true ) {
// 0
backupReg0i = R1i.y;
R1i.y = backupReg0i;
PV0i.y = R1i.y;
R0i.z = 0;
PV0i.z = R0i.z;
R0i.w = 0x3f800000;
PV0i.w = R0i.w;
// 1
R6i.xyz = ivec3(R1i.x,PV0i.y,PV0i.z);
PV1i.x = R6i.x;
PV1i.y = R6i.y;
PV1i.z = R6i.z;
R6i.w = PV0i.w;
PV1i.w = R6i.w;
// 2
R7i.xyz = ivec3(PV1i.x,PV1i.y,PV1i.z);
PV0i.x = R7i.x;
PV0i.y = R7i.y;
PV0i.z = R7i.z;
R7i.w = PV1i.w;
PV0i.w = R7i.w;
// 3
R5i.xyz = ivec3(PV0i.x,PV0i.y,PV0i.z);
R5i.w = PV0i.w;
}
activeMaskStack[2] = activeMaskStack[2] == false;
activeMaskStackC[3] = activeMaskStack[2] == true && activeMaskStackC[2] == true;
if( activeMaskStackC[3] == true ) {
// 0
PS0i = int(intBitsToFloat(R1i.y));
// 1
PV1i.x = PS0i << int(1);
PS1i = int(intBitsToFloat(R1i.x));
// 2
R124i.z = PV1i.x + PS1i;
PV0i.z = R124i.z;
// 3
R127i.x = (PV0i.z == 0x00000002)?int(0xFFFFFFFF):int(0x0);
PV1i.x = R127i.x;
R127i.y = (PV0i.z == 0x00000002)?int(0xFFFFFFFF):int(0x0);
R127i.z = (PV0i.z == 0x00000002)?int(0xFFFFFFFF):int(0x0);
R126i.w = (PV0i.z == int(1))?int(0xFFFFFFFF):int(0x0);
R124i.w = (PV0i.z == int(1))?int(0xFFFFFFFF):int(0x0);
PS1i = R124i.w;
// 4
R124i.y = (R124i.z == int(1))?int(0xFFFFFFFF):int(0x0);
R126i.z = ((PV1i.x == 0)?(uf_uniformRegisterVS[27].y):(uf_uniformRegisterVS[26].y));
R127i.w = ((PV1i.x == 0)?(uf_uniformRegisterVS[27].x):(uf_uniformRegisterVS[26].x));
// 5
backupReg0i = R127i.x;
backupReg0i = R127i.x;
R127i.x = ((backupReg0i == 0)?(uf_uniformRegisterVS[27].w):(uf_uniformRegisterVS[26].w));
R126i.y = ((backupReg0i == 0)?(uf_uniformRegisterVS[27].z):(uf_uniformRegisterVS[26].z));
// 6
R126i.x = ((R127i.z == 0)?(uf_uniformRegisterVS[31].y):(uf_uniformRegisterVS[30].y));
R125i.y = ((R127i.z == 0)?(uf_uniformRegisterVS[31].x):(uf_uniformRegisterVS[30].x));
// 7
backupReg0i = R127i.z;
backupReg0i = R127i.z;
R127i.z = ((backupReg0i == 0)?(uf_uniformRegisterVS[31].w):(uf_uniformRegisterVS[30].w));
R125i.w = ((backupReg0i == 0)?(uf_uniformRegisterVS[31].z):(uf_uniformRegisterVS[30].z));
// 8
R125i.z = ((R127i.y == 0)?(uf_uniformRegisterVS[35].y):(uf_uniformRegisterVS[34].y));
R0i.w = ((R127i.y == 0)?(uf_uniformRegisterVS[35].x):(uf_uniformRegisterVS[34].x));
// 9
backupReg0i = R127i.y;
R125i.x = ((R127i.y == 0)?(uf_uniformRegisterVS[35].w):(uf_uniformRegisterVS[34].w));
R127i.y = ((backupReg0i == 0)?(uf_uniformRegisterVS[35].z):(uf_uniformRegisterVS[34].z));
// 10
backupReg0i = R127i.x;
backupReg1i = R126i.y;
backupReg2i = R126i.z;
backupReg3i = R127i.w;
R127i.x = ((R126i.w == 0)?(backupReg0i):(uf_uniformRegisterVS[25].w));
R126i.y = ((R126i.w == 0)?(backupReg1i):(uf_uniformRegisterVS[25].z));
R126i.z = ((R126i.w == 0)?(backupReg2i):(uf_uniformRegisterVS[25].y));
R127i.w = ((R126i.w == 0)?(backupReg3i):(uf_uniformRegisterVS[25].x));
// 11
backupReg0i = R126i.x;
backupReg1i = R125i.y;
backupReg2i = R127i.z;
backupReg3i = R125i.w;
R126i.x = ((R124i.w == 0)?(backupReg0i):(uf_uniformRegisterVS[29].y));
R125i.y = ((R124i.w == 0)?(backupReg1i):(uf_uniformRegisterVS[29].x));
R127i.z = ((R124i.w == 0)?(backupReg2i):(uf_uniformRegisterVS[29].w));
R125i.w = ((R124i.w == 0)?(backupReg3i):(uf_uniformRegisterVS[29].z));
// 12
backupReg0i = R125i.x;
backupReg1i = R127i.y;
backupReg2i = R125i.z;
R125i.x = ((R124i.y == 0)?(backupReg0i):(uf_uniformRegisterVS[33].w));
R127i.y = ((R124i.y == 0)?(backupReg1i):(uf_uniformRegisterVS[33].z));
R125i.z = ((R124i.y == 0)?(backupReg2i):(uf_uniformRegisterVS[33].y));
R124i.w = ((R124i.y == 0)?(R0i.w):(uf_uniformRegisterVS[33].x));
// 13
R6i.x = ((R124i.z == 0)?(uf_uniformRegisterVS[24].x):(R127i.w));
R6i.y = ((R124i.z == 0)?(uf_uniformRegisterVS[24].y):(R126i.z));
R6i.z = ((R124i.z == 0)?(uf_uniformRegisterVS[24].z):(R126i.y));
R6i.w = ((R124i.z == 0)?(uf_uniformRegisterVS[24].w):(R127i.x));
// 14
R7i.x = ((R124i.z == 0)?(uf_uniformRegisterVS[28].x):(R125i.y));
R7i.y = ((R124i.z == 0)?(uf_uniformRegisterVS[28].y):(R126i.x));
R7i.z = ((R124i.z == 0)?(uf_uniformRegisterVS[28].z):(R125i.w));
R7i.w = ((R124i.z == 0)?(uf_uniformRegisterVS[28].w):(R127i.z));
// 15
R5i.x = ((R124i.z == 0)?(uf_uniformRegisterVS[32].x):(R124i.w));
R5i.y = ((R124i.z == 0)?(uf_uniformRegisterVS[32].y):(R125i.z));
R5i.z = ((R124i.z == 0)?(uf_uniformRegisterVS[32].z):(R127i.y));
R5i.w = ((R124i.z == 0)?(uf_uniformRegisterVS[32].w):(R125i.x));
}
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
// 0
R8i.xyz = ivec3(0x437f0000,0x437f0000,0x437f0000);
R8i.w = 0x437f0000;
}
activeMaskStack[1] = activeMaskStack[1] == false;
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
activeMaskStack[2] = activeMaskStack[1];
activeMaskStackC[3] = activeMaskStackC[2];
// 0
PV0i.x = uf_uniformRegisterVS[2].x >> 0x00000008;
R5i.y = uf_uniformRegisterVS[2].x & 0x00000002;
// 1
R0i.z = PV0i.x & 0x0000000f;
// 2
predResult = (0 != R5i.y);
activeMaskStack[2] = predResult;
activeMaskStackC[3] = predResult == true && activeMaskStackC[2] == true;
}
else {
activeMaskStack[2] = false;
activeMaskStackC[3] = false;
}
if( activeMaskStackC[3] == true ) {
activeMaskStack[3] = activeMaskStack[2];
activeMaskStackC[4] = activeMaskStackC[3];
// 0
R6i.y = R1i.y;
R3i.z = 0;
R0i.w = 0x3f800000;
PS0i = floatBitsToInt(1.0 / intBitsToFloat(uf_uniformRegisterVS[7].x));
// 1
R5i.x = floatBitsToInt(intBitsToFloat(PS0i) * intBitsToFloat(uf_uniformRegisterVS[1].x));
PV1i.x = R5i.x;
R5i.y = floatBitsToInt(intBitsToFloat(PS0i) * intBitsToFloat(uf_uniformRegisterVS[1].y));
PS1i = floatBitsToInt(1.0 / intBitsToFloat(uf_uniformRegisterVS[7].y));
// 2
R6i.x = floatBitsToInt(intBitsToFloat(uf_uniformRegisterVS[1].z) * intBitsToFloat(PS1i));
PV0i.x = R6i.x;
R7i.y = floatBitsToInt(intBitsToFloat(uf_uniformRegisterVS[1].w) * intBitsToFloat(PS1i));
R7i.x = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + 1.0);
PS0i = R7i.x;
// 3
R8i.x = floatBitsToInt(-(intBitsToFloat(R5i.y)) + intBitsToFloat(PS0i));
R2i.z = floatBitsToInt(-(intBitsToFloat(PV0i.x)) + 1.0);
PV1i.z = R2i.z;
R9i.x = floatBitsToInt(-(intBitsToFloat(R5i.y)) + 1.0);
PS1i = R9i.x;
// 4
R5i.z = floatBitsToInt(-(intBitsToFloat(R7i.y)) + 1.0);
R2i.w = floatBitsToInt(-(intBitsToFloat(R7i.y)) + intBitsToFloat(PV1i.z));
// 5
predResult = (R0i.z == 0);
activeMaskStack[3] = predResult;
activeMaskStackC[4] = predResult == true && activeMaskStackC[3] == true;
}
else {
activeMaskStack[3] = false;
activeMaskStackC[4] = false;
}
if( activeMaskStackC[4] == true ) {
// 0
backupReg0i = R5i.x;
R5i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(backupReg0i)));
R5i.y = R6i.x;
PV0i.y = R5i.y;
// 1
R5i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.y), intBitsToFloat(PV0i.y)));
}
activeMaskStack[3] = activeMaskStack[3] == false;
activeMaskStackC[4] = activeMaskStack[3] == true && activeMaskStackC[3] == true;
if( activeMaskStackC[4] == true ) {
activeMaskStack[4] = activeMaskStack[3];
activeMaskStackC[5] = activeMaskStackC[4];
// 0
predResult = (R0i.z == int(1));
activeMaskStack[4] = predResult;
activeMaskStackC[5] = predResult == true && activeMaskStackC[4] == true;
}
else {
activeMaskStack[4] = false;
activeMaskStackC[5] = false;
}
if( activeMaskStackC[5] == true ) {
// 0
backupReg0i = R5i.y;
R5i.y = 0;
PV0i.y = R5i.y;
PV0i.z = R6i.x;
PV0i.w = backupReg0i;
// 1
R5i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.x),intBitsToFloat(PV0i.w)) + intBitsToFloat(R9i.x)));
R5i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.y),intBitsToFloat(PV0i.z)) + intBitsToFloat(PV0i.y)));
}
activeMaskStack[4] = activeMaskStack[4] == false;
activeMaskStackC[5] = activeMaskStack[4] == true && activeMaskStackC[4] == true;
if( activeMaskStackC[5] == true ) {
activeMaskStack[5] = activeMaskStack[4];
activeMaskStackC[6] = activeMaskStackC[5];
// 0
predResult = (R0i.z == 0x00000002);
activeMaskStack[5] = predResult;
activeMaskStackC[6] = predResult == true && activeMaskStackC[5] == true;
}
else {
activeMaskStack[5] = false;
activeMaskStackC[6] = false;
}
if( activeMaskStackC[6] == true ) {
// 0
backupReg0i = R7i.y;
R7i.y = backupReg0i;
PV0i.y = R7i.y;
PV0i.z = R5i.z;
PV0i.w = 0;
// 1
backupReg0i = R5i.x;
R5i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.x),intBitsToFloat(backupReg0i)) + intBitsToFloat(PV0i.w)));
R5i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.y),intBitsToFloat(PV0i.y)) + intBitsToFloat(PV0i.z)));
}
activeMaskStack[5] = activeMaskStack[5] == false;
activeMaskStackC[6] = activeMaskStack[5] == true && activeMaskStackC[5] == true;
if( activeMaskStackC[6] == true ) {
activeMaskStack[6] = activeMaskStack[5];
activeMaskStackC[7] = activeMaskStackC[6];
// 0
predResult = (R0i.z == 0x00000003);
activeMaskStack[6] = predResult;
activeMaskStackC[7] = predResult == true && activeMaskStackC[6] == true;
}
else {
activeMaskStack[6] = false;
activeMaskStackC[7] = false;
}
if( activeMaskStackC[7] == true ) {
// 0
backupReg0i = R5i.y;
R5i.y = R5i.z;
PV0i.y = R5i.y;
PV0i.z = R7i.y;
PV0i.w = backupReg0i;
// 1
R5i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.x),intBitsToFloat(PV0i.w)) + intBitsToFloat(R9i.x)));
R5i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.y),intBitsToFloat(PV0i.z)) + intBitsToFloat(PV0i.y)));
}
activeMaskStack[6] = activeMaskStack[6] == false;
activeMaskStackC[7] = activeMaskStack[6] == true && activeMaskStackC[6] == true;
if( activeMaskStackC[7] == true ) {
activeMaskStack[7] = activeMaskStack[6];
activeMaskStackC[8] = activeMaskStackC[7];
// 0
predResult = (R0i.z == 0x00000004);
activeMaskStack[7] = predResult;
activeMaskStackC[8] = predResult == true && activeMaskStackC[7] == true;
}
else {
activeMaskStack[7] = false;
activeMaskStackC[8] = false;
}
if( activeMaskStackC[8] == true ) {
// 0
R5i.y = R2i.w;
PV0i.y = R5i.y;
PV0i.z = R6i.x;
PV0i.w = 0;
// 1
backupReg0i = R5i.x;
R5i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.x),intBitsToFloat(backupReg0i)) + intBitsToFloat(PV0i.w)));
R5i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.y),intBitsToFloat(PV0i.y)) + intBitsToFloat(PV0i.z)));
}
activeMaskStack[7] = activeMaskStack[7] == false;
activeMaskStackC[8] = activeMaskStack[7] == true && activeMaskStackC[7] == true;
if( activeMaskStackC[8] == true ) {
activeMaskStack[8] = activeMaskStack[7];
activeMaskStackC[9] = activeMaskStackC[8];
// 0
predResult = (R0i.z == 0x00000005);
activeMaskStack[8] = predResult;
activeMaskStackC[9] = predResult == true && activeMaskStackC[8] == true;
}
else {
activeMaskStack[8] = false;
activeMaskStackC[9] = false;
}
if( activeMaskStackC[9] == true ) {
// 0
backupReg0i = R5i.y;
R5i.y = R6i.x;
PV0i.y = R5i.y;
PV0i.z = R2i.w;
PV0i.w = backupReg0i;
// 1
R5i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.x),intBitsToFloat(PV0i.w)) + intBitsToFloat(R9i.x)));
R5i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.y),intBitsToFloat(PV0i.z)) + intBitsToFloat(PV0i.y)));
}
activeMaskStack[8] = activeMaskStack[8] == false;
activeMaskStackC[9] = activeMaskStack[8] == true && activeMaskStackC[8] == true;
if( activeMaskStackC[9] == true ) {
activeMaskStack[9] = activeMaskStack[8];
activeMaskStackC[10] = activeMaskStackC[9];
// 0
predResult = (R0i.z == 0x00000006);
activeMaskStack[9] = predResult;
activeMaskStackC[10] = predResult == true && activeMaskStackC[9] == true;
}
else {
activeMaskStack[9] = false;
activeMaskStackC[10] = false;
}
if( activeMaskStackC[10] == true ) {
// 0
R5i.y = R6i.x;
PV0i.y = R5i.y;
R7i.y = 0;
PS0i = R7i.y;
// 1
backupReg0i = R5i.x;
R5i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.x),intBitsToFloat(R8i.x)) + intBitsToFloat(backupReg0i)));
R5i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.y),intBitsToFloat(PV0i.y)) + intBitsToFloat(PS0i)));
}
activeMaskStack[9] = activeMaskStack[9] == false;
activeMaskStackC[10] = activeMaskStack[9] == true && activeMaskStackC[9] == true;
if( activeMaskStackC[10] == true ) {
activeMaskStack[10] = activeMaskStack[9];
activeMaskStackC[11] = activeMaskStackC[10];
// 0
predResult = (R0i.z == 0x00000007);
activeMaskStack[10] = predResult;
activeMaskStackC[11] = predResult == true && activeMaskStackC[10] == true;
}
else {
activeMaskStack[10] = false;
activeMaskStackC[11] = false;
}
if( activeMaskStackC[11] == true ) {
// 0
backupReg0i = R5i.x;
R5i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.x),intBitsToFloat(R8i.x)) + intBitsToFloat(backupReg0i)));
R5i.y = R7i.y;
PV0i.y = R5i.y;
R7i.y = R5i.z;
PS0i = R7i.y;
// 1
R5i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.y),intBitsToFloat(PV0i.y)) + intBitsToFloat(PS0i)));
}
activeMaskStack[10] = activeMaskStack[10] == false;
activeMaskStackC[11] = activeMaskStack[10] == true && activeMaskStackC[10] == true;
if( activeMaskStackC[11] == true ) {
activeMaskStack[11] = activeMaskStack[10];
activeMaskStackC[12] = activeMaskStackC[11];
// 0
predResult = (R0i.z == 0x00000008);
activeMaskStack[11] = predResult;
activeMaskStackC[12] = predResult == true && activeMaskStackC[11] == true;
}
else {
activeMaskStack[11] = false;
activeMaskStackC[12] = false;
}
if( activeMaskStackC[12] == true ) {
// 0
R5i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(R9i.x)));
R5i.y = R6i.x;
PV0i.y = R5i.y;
// 1
R5i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.y), intBitsToFloat(PV0i.y)));
}
activeMaskStack[11] = activeMaskStack[11] == false;
activeMaskStackC[12] = activeMaskStack[11] == true && activeMaskStackC[11] == true;
if( activeMaskStackC[12] == true ) {
activeMaskStack[12] = activeMaskStack[11];
activeMaskStackC[13] = activeMaskStackC[12];
// 0
predResult = (R0i.z == 0x00000009);
activeMaskStack[12] = predResult;
activeMaskStackC[13] = predResult == true && activeMaskStackC[12] == true;
}
else {
activeMaskStack[12] = false;
activeMaskStackC[13] = false;
}
if( activeMaskStackC[13] == true ) {
// 0
backupReg0i = R5i.y;
R5i.y = 0;
PV0i.y = R5i.y;
PV0i.z = R5i.z;
PV0i.w = backupReg0i;
// 1
R5i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.x),intBitsToFloat(PV0i.w)) + intBitsToFloat(R9i.x)));
R5i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.y),intBitsToFloat(PV0i.z)) + intBitsToFloat(PV0i.y)));
}
activeMaskStack[12] = activeMaskStack[12] == false;
activeMaskStackC[13] = activeMaskStack[12] == true && activeMaskStackC[12] == true;
if( activeMaskStackC[13] == true ) {
activeMaskStack[13] = activeMaskStack[12];
activeMaskStackC[14] = activeMaskStackC[13];
// 0
predResult = (R0i.z == 0x0000000a);
activeMaskStack[13] = predResult;
activeMaskStackC[14] = predResult == true && activeMaskStackC[13] == true;
}
else {
activeMaskStack[13] = false;
activeMaskStackC[14] = false;
}
if( activeMaskStackC[14] == true ) {
// 0
R5i.y = R2i.z;
PV0i.y = R5i.y;
PV0i.z = R6i.x;
PV0i.w = 0;
// 1
backupReg0i = R5i.x;
R5i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.x),intBitsToFloat(backupReg0i)) + intBitsToFloat(PV0i.w)));
R5i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.y),intBitsToFloat(PV0i.y)) + intBitsToFloat(PV0i.z)));
}
activeMaskStack[13] = activeMaskStack[13] == false;
activeMaskStackC[14] = activeMaskStack[13] == true && activeMaskStackC[13] == true;
if( activeMaskStackC[14] == true ) {
// 0
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(R9i.x)));
R5i.y = R2i.w;
PV0i.y = R5i.y;
R127i.z = (R0i.z == 0x0000000c)?int(0xFFFFFFFF):int(0x0);
PV0i.z = R127i.z;
R127i.w = (R0i.z == 0x0000000b)?int(0xFFFFFFFF):int(0x0);
// 1
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.y), intBitsToFloat(PV0i.y)));
R5i.y = R5i.z;
PV1i.y = R5i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.x),intBitsToFloat(R7i.x)) + intBitsToFloat(R5i.x)));
PV1i.z = R123i.z;
R123i.w = ((PV0i.z == 0)?(0):(PV0i.x));
PV1i.w = R123i.w;
// 2
R5i.x = ((R127i.w == 0)?(PV1i.w):(PV1i.z));
R123i.z = ((R127i.z == 0)?(0):(PV1i.x));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.y),intBitsToFloat(R7i.y)) + intBitsToFloat(PV1i.y)));
PV0i.w = R123i.w;
// 3
R5i.y = ((R127i.w == 0)?(PV0i.z):(PV0i.w));
}
activeMaskStackC[13] = activeMaskStack[12] == true && activeMaskStackC[12] == true;
activeMaskStackC[11] = activeMaskStack[10] == true && activeMaskStackC[10] == true;
activeMaskStackC[9] = activeMaskStack[8] == true && activeMaskStackC[8] == true;
activeMaskStackC[7] = activeMaskStack[6] == true && activeMaskStackC[6] == true;
activeMaskStackC[5] = activeMaskStack[4] == true && activeMaskStackC[4] == true;
activeMaskStackC[3] = activeMaskStack[2] == true && activeMaskStackC[2] == true;
if( activeMaskStackC[3] == true ) {
// 0
R127i.x = floatBitsToInt(-(intBitsToFloat(R5i.y)) + 1.0);
PV0i.x = R127i.x;
R126i.y = floatBitsToInt(-(intBitsToFloat(R5i.x)) + 1.0);
// 1
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(uf_uniformRegisterVS[20].w)));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(uf_uniformRegisterVS[20].z)));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(uf_uniformRegisterVS[20].y)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(uf_uniformRegisterVS[20].x)));
// 2
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.y),intBitsToFloat(uf_uniformRegisterVS[22].w)) + intBitsToFloat(PV1i.x)));
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.y),intBitsToFloat(uf_uniformRegisterVS[22].z)) + intBitsToFloat(PV1i.y)));
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.y),intBitsToFloat(uf_uniformRegisterVS[22].y)) + intBitsToFloat(PV1i.z)));
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.y),intBitsToFloat(uf_uniformRegisterVS[22].x)) + intBitsToFloat(PV1i.w)));
PV0i.w = R123i.w;
// 3
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(uf_uniformRegisterVS[21].w)));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(uf_uniformRegisterVS[21].z)));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(uf_uniformRegisterVS[21].y)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(uf_uniformRegisterVS[21].x)));
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.y), intBitsToFloat(PV0i.w)));
PS1i = R127i.w;
// 4
backupReg0i = R127i.z;
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.y),intBitsToFloat(uf_uniformRegisterVS[23].w)) + intBitsToFloat(PV1i.x)));
R125i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.y),intBitsToFloat(uf_uniformRegisterVS[23].z)) + intBitsToFloat(PV1i.y)));
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.y),intBitsToFloat(uf_uniformRegisterVS[23].y)) + intBitsToFloat(PV1i.z)));
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.y),intBitsToFloat(uf_uniformRegisterVS[23].x)) + intBitsToFloat(PV1i.w)));
PV0i.w = R123i.w;
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.y), intBitsToFloat(backupReg0i)));
PS0i = R126i.z;
// 5
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.y), intBitsToFloat(R126i.x)));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.y), intBitsToFloat(R127i.y)));
R8i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.x),intBitsToFloat(PV0i.w)) + intBitsToFloat(R127i.w)));
PS1i = R8i.x;
// 6
R8i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.x),intBitsToFloat(R127i.z)) + intBitsToFloat(R126i.z)));
R8i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.x),intBitsToFloat(R125i.y)) + intBitsToFloat(PV1i.y)));
R8i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.x),intBitsToFloat(R127i.x)) + intBitsToFloat(PV1i.x)));
// 7
backupReg0i = R6i.y;
R6i.xyz = ivec3(R1i.x,backupReg0i,R3i.z);
PV1i.x = R6i.x;
PV1i.y = R6i.y;
PV1i.z = R6i.z;
R6i.w = R0i.w;
PV1i.w = R6i.w;
// 8
R7i.xyz = ivec3(PV1i.x,PV1i.y,PV1i.z);
PV0i.x = R7i.x;
PV0i.y = R7i.y;
PV0i.z = R7i.z;
R7i.w = PV1i.w;
PV0i.w = R7i.w;
// 9
R5i.xyz = ivec3(PV0i.x,PV0i.y,PV0i.z);
R5i.w = PV0i.w;
}
activeMaskStack[2] = activeMaskStack[2] == false;
activeMaskStackC[3] = activeMaskStack[2] == true && activeMaskStackC[2] == true;
if( activeMaskStackC[3] == true ) {
activeMaskStack[3] = activeMaskStack[2];
activeMaskStackC[4] = activeMaskStackC[3];
// 0
PS0i = int(intBitsToFloat(R1i.y));
// 1
PV1i.z = PS0i << int(1);
PS1i = int(intBitsToFloat(R1i.x));
// 2
R2i.z = PV1i.z + PS1i;
PV0i.z = R2i.z;
// 3
R127i.x = (PV0i.z == 0x00000002)?int(0xFFFFFFFF):int(0x0);
PV1i.x = R127i.x;
R127i.y = (PV0i.z == 0x00000002)?int(0xFFFFFFFF):int(0x0);
R127i.z = (PV0i.z == 0x00000002)?int(0xFFFFFFFF):int(0x0);
R126i.w = (PV0i.z == int(1))?int(0xFFFFFFFF):int(0x0);
R124i.w = (PV0i.z == int(1))?int(0xFFFFFFFF):int(0x0);
PS1i = R124i.w;
// 4
R124i.y = (R2i.z == int(1))?int(0xFFFFFFFF):int(0x0);
R126i.z = ((PV1i.x == 0)?(uf_uniformRegisterVS[27].y):(uf_uniformRegisterVS[26].y));
R127i.w = ((PV1i.x == 0)?(uf_uniformRegisterVS[27].x):(uf_uniformRegisterVS[26].x));
// 5
backupReg0i = R127i.x;
backupReg0i = R127i.x;
R127i.x = ((backupReg0i == 0)?(uf_uniformRegisterVS[27].w):(uf_uniformRegisterVS[26].w));
R126i.y = ((backupReg0i == 0)?(uf_uniformRegisterVS[27].z):(uf_uniformRegisterVS[26].z));
// 6
R126i.x = ((R127i.z == 0)?(uf_uniformRegisterVS[31].y):(uf_uniformRegisterVS[30].y));
R125i.y = ((R127i.z == 0)?(uf_uniformRegisterVS[31].x):(uf_uniformRegisterVS[30].x));
// 7
backupReg0i = R127i.z;
backupReg0i = R127i.z;
R127i.z = ((backupReg0i == 0)?(uf_uniformRegisterVS[31].w):(uf_uniformRegisterVS[30].w));
R125i.w = ((backupReg0i == 0)?(uf_uniformRegisterVS[31].z):(uf_uniformRegisterVS[30].z));
// 8
R125i.z = ((R127i.y == 0)?(uf_uniformRegisterVS[35].y):(uf_uniformRegisterVS[34].y));
R0i.w = ((R127i.y == 0)?(uf_uniformRegisterVS[35].x):(uf_uniformRegisterVS[34].x));
// 9
backupReg0i = R127i.y;
R125i.x = ((R127i.y == 0)?(uf_uniformRegisterVS[35].w):(uf_uniformRegisterVS[34].w));
R127i.y = ((backupReg0i == 0)?(uf_uniformRegisterVS[35].z):(uf_uniformRegisterVS[34].z));
// 10
backupReg0i = R127i.x;
backupReg1i = R126i.y;
backupReg2i = R126i.z;
backupReg3i = R127i.w;
R127i.x = ((R126i.w == 0)?(backupReg0i):(uf_uniformRegisterVS[25].w));
R126i.y = ((R126i.w == 0)?(backupReg1i):(uf_uniformRegisterVS[25].z));
R126i.z = ((R126i.w == 0)?(backupReg2i):(uf_uniformRegisterVS[25].y));
R127i.w = ((R126i.w == 0)?(backupReg3i):(uf_uniformRegisterVS[25].x));
// 11
backupReg0i = R126i.x;
backupReg1i = R125i.y;
backupReg2i = R127i.z;
backupReg3i = R125i.w;
R126i.x = ((R124i.w == 0)?(backupReg0i):(uf_uniformRegisterVS[29].y));
R125i.y = ((R124i.w == 0)?(backupReg1i):(uf_uniformRegisterVS[29].x));
R127i.z = ((R124i.w == 0)?(backupReg2i):(uf_uniformRegisterVS[29].w));
R125i.w = ((R124i.w == 0)?(backupReg3i):(uf_uniformRegisterVS[29].z));
// 12
backupReg0i = R125i.x;
backupReg1i = R127i.y;
backupReg2i = R125i.z;
R125i.x = ((R124i.y == 0)?(backupReg0i):(uf_uniformRegisterVS[33].w));
R127i.y = ((R124i.y == 0)?(backupReg1i):(uf_uniformRegisterVS[33].z));
R125i.z = ((R124i.y == 0)?(backupReg2i):(uf_uniformRegisterVS[33].y));
R124i.w = ((R124i.y == 0)?(R0i.w):(uf_uniformRegisterVS[33].x));
// 13
R6i.x = ((R2i.z == 0)?(uf_uniformRegisterVS[24].x):(R127i.w));
R6i.y = ((R2i.z == 0)?(uf_uniformRegisterVS[24].y):(R126i.z));
R6i.z = ((R2i.z == 0)?(uf_uniformRegisterVS[24].z):(R126i.y));
R6i.w = ((R2i.z == 0)?(uf_uniformRegisterVS[24].w):(R127i.x));
// 14
R7i.x = ((R2i.z == 0)?(uf_uniformRegisterVS[28].x):(R125i.y));
R7i.y = ((R2i.z == 0)?(uf_uniformRegisterVS[28].y):(R126i.x));
R7i.z = ((R2i.z == 0)?(uf_uniformRegisterVS[28].z):(R125i.w));
R7i.w = ((R2i.z == 0)?(uf_uniformRegisterVS[28].w):(R127i.z));
// 15
R5i.x = ((R2i.z == 0)?(uf_uniformRegisterVS[32].x):(R124i.w));
R5i.y = ((R2i.z == 0)?(uf_uniformRegisterVS[32].y):(R125i.z));
R5i.z = ((R2i.z == 0)?(uf_uniformRegisterVS[32].z):(R127i.y));
R5i.w = ((R2i.z == 0)?(uf_uniformRegisterVS[32].w):(R125i.x));
// 16
predResult = (R0i.z == 0x0000000d);
activeMaskStack[3] = predResult;
activeMaskStackC[4] = predResult == true && activeMaskStackC[3] == true;
}
else {
activeMaskStack[3] = false;
activeMaskStackC[4] = false;
}
if( activeMaskStackC[4] == true ) {
// 0
PS0i = floatBitsToInt(1.0 / intBitsToFloat(uf_uniformRegisterVS[7].y));
// 1
PV1i.z = floatBitsToInt(intBitsToFloat(uf_uniformRegisterVS[1].w) * intBitsToFloat(PS0i));
PV1i.w = floatBitsToInt(intBitsToFloat(uf_uniformRegisterVS[1].z) * intBitsToFloat(PS0i));
PS1i = floatBitsToInt(1.0 / intBitsToFloat(uf_uniformRegisterVS[7].x));
// 2
R127i.x = PV1i.z;
R127i.y = PV1i.w;
PV0i.y = R127i.y;
R127i.z = floatBitsToInt(intBitsToFloat(PS1i) * intBitsToFloat(uf_uniformRegisterVS[1].x));
PV0i.z = R127i.z;
R127i.w = floatBitsToInt(intBitsToFloat(PS1i) * intBitsToFloat(uf_uniformRegisterVS[1].y));
// 3
PV1i.z = floatBitsToInt(-(intBitsToFloat(PV0i.y)) + 1.0);
PV1i.w = floatBitsToInt(-(intBitsToFloat(PV0i.z)) + 1.0);
// 4
PV0i.x = floatBitsToInt(-(intBitsToFloat(R127i.x)) + intBitsToFloat(PV1i.z));
PV0i.y = floatBitsToInt(-(intBitsToFloat(R127i.w)) + intBitsToFloat(PV1i.w));
// 5
backupReg0i = R127i.z;
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.y),intBitsToFloat(PV0i.x)) + intBitsToFloat(R127i.y)));
PV1i.z = R127i.z;
R126i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.x),intBitsToFloat(PV0i.y)) + intBitsToFloat(backupReg0i)));
PV1i.w = R126i.w;
// 6
R127i.x = floatBitsToInt(-(intBitsToFloat(PV1i.z)) + 1.0);
PV0i.x = R127i.x;
R126i.y = floatBitsToInt(-(intBitsToFloat(PV1i.w)) + 1.0);
// 7
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(uf_uniformRegisterVS[20].w)));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(uf_uniformRegisterVS[20].z)));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(uf_uniformRegisterVS[20].y)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(uf_uniformRegisterVS[20].x)));
// 8
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.z),intBitsToFloat(uf_uniformRegisterVS[22].w)) + intBitsToFloat(PV1i.x)));
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.z),intBitsToFloat(uf_uniformRegisterVS[22].z)) + intBitsToFloat(PV1i.y)));
R126i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.z),intBitsToFloat(uf_uniformRegisterVS[22].y)) + intBitsToFloat(PV1i.z)));
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.z),intBitsToFloat(uf_uniformRegisterVS[22].x)) + intBitsToFloat(PV1i.w)));
PV0i.w = R123i.w;
// 9
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(uf_uniformRegisterVS[21].w)));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(uf_uniformRegisterVS[21].z)));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(uf_uniformRegisterVS[21].y)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(uf_uniformRegisterVS[21].x)));
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.y), intBitsToFloat(PV0i.w)));
PS1i = R127i.w;
// 10
backupReg0i = R127i.z;
backupReg0i = R127i.z;
backupReg1i = R126i.z;
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.z),intBitsToFloat(uf_uniformRegisterVS[23].w)) + intBitsToFloat(PV1i.x)));
R125i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.z),intBitsToFloat(uf_uniformRegisterVS[23].z)) + intBitsToFloat(PV1i.y)));
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(uf_uniformRegisterVS[23].y)) + intBitsToFloat(PV1i.z)));
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(uf_uniformRegisterVS[23].x)) + intBitsToFloat(PV1i.w)));
PV0i.w = R123i.w;
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.y), intBitsToFloat(backupReg1i)));
PS0i = R126i.z;
// 11
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.y), intBitsToFloat(R126i.x)));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.y), intBitsToFloat(R127i.y)));
R8i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.w),intBitsToFloat(PV0i.w)) + intBitsToFloat(R127i.w)));
PS1i = R8i.x;
// 12
R8i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.w),intBitsToFloat(R127i.z)) + intBitsToFloat(R126i.z)));
R8i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.w),intBitsToFloat(R125i.y)) + intBitsToFloat(PV1i.y)));
R8i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.w),intBitsToFloat(R127i.x)) + intBitsToFloat(PV1i.x)));
}
activeMaskStack[3] = activeMaskStack[3] == false;
activeMaskStackC[4] = activeMaskStack[3] == true && activeMaskStackC[3] == true;
if( activeMaskStackC[4] == true ) {
// 0
R127i.x = floatBitsToInt(float(R2i.z));
PS0i = R127i.x;
// 1
tempResultf = intBitsToFloat(PS0i);
tempResultf = floor(tempResultf);
tempResultf = clamp(tempResultf, -256.0, 255.0);
ARi.x = int(tempResultf);
PV1i.x = floatBitsToInt(tempResultf);
// 2
R8i.xyz = ivec3(uf_uniformRegisterVS[ARi.x+20].x,uf_uniformRegisterVS[ARi.x+20].y,uf_uniformRegisterVS[ARi.x+20].z);
R8i.w = uf_uniformRegisterVS[ARi.x+20].w;
}
activeMaskStackC[3] = activeMaskStack[2] == true && activeMaskStackC[2] == true;
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
predResult = (0 != uf_uniformRegisterVS[3].x);
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
backupReg0i = R0i.y;
R6i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R0i.x),intBitsToFloat(backupReg0i),intBitsToFloat(R1i.z),intBitsToFloat(R1i.w)),vec4(intBitsToFloat(uf_uniformRegisterVS[24].x)*scaleAspect,intBitsToFloat(uf_uniformRegisterVS[24].y),intBitsToFloat(uf_uniformRegisterVS[24].z),intBitsToFloat(uf_uniformRegisterVS[24].w))));
PV0i.x = R6i.x;
PV0i.y = R6i.x;
PV0i.z = R6i.x;
PV0i.w = R6i.x;
// 1
backupReg0i = R0i.x;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(backupReg0i),intBitsToFloat(R0i.y),intBitsToFloat(R1i.z),intBitsToFloat(R1i.w)),vec4(intBitsToFloat(uf_uniformRegisterVS[25].x),intBitsToFloat(uf_uniformRegisterVS[25].y),intBitsToFloat(uf_uniformRegisterVS[25].z),intBitsToFloat(uf_uniformRegisterVS[25].w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R6i.y = tempi.x;
// 2
backupReg0i = R0i.x;
backupReg1i = R0i.y;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),intBitsToFloat(R1i.z),intBitsToFloat(R1i.w)),vec4(intBitsToFloat(uf_uniformRegisterVS[26].x),intBitsToFloat(uf_uniformRegisterVS[26].y),intBitsToFloat(uf_uniformRegisterVS[26].z),intBitsToFloat(uf_uniformRegisterVS[26].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R6i.z = tempi.x;
// 3
backupReg0i = R0i.x;
backupReg1i = R0i.y;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),intBitsToFloat(R1i.z),intBitsToFloat(R1i.w)),vec4(intBitsToFloat(uf_uniformRegisterVS[27].x),intBitsToFloat(uf_uniformRegisterVS[27].y),intBitsToFloat(uf_uniformRegisterVS[27].z),intBitsToFloat(uf_uniformRegisterVS[27].w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R6i.w = tempi.x;
}
activeMaskStack[1] = activeMaskStack[1] == false;
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
activeMaskStack[2] = activeMaskStack[1];
activeMaskStackC[3] = activeMaskStackC[2];
// 0
R0i.z = uf_uniformRegisterVS[2].x & int(1);
// 1
predResult = (0 != R0i.z);
activeMaskStack[2] = predResult;
activeMaskStackC[3] = predResult == true && activeMaskStackC[2] == true;
}
else {
activeMaskStack[2] = false;
activeMaskStackC[3] = false;
}
if( activeMaskStackC[3] == true ) {
activeMaskStack[3] = activeMaskStack[2];
activeMaskStackC[4] = activeMaskStackC[3];
// 0
R1i.y = uf_uniformRegisterVS[2].x & 0x00000002;
// 1
predResult = (0 != R1i.y);
activeMaskStack[3] = predResult;
activeMaskStackC[4] = predResult == true && activeMaskStackC[3] == true;
}
else {
activeMaskStack[3] = false;
activeMaskStackC[4] = false;
}
if( activeMaskStackC[4] == true ) {
// 0
PV0i.x = uf_uniformRegisterVS[2].x & 0x00010000;
R127i.y = uf_uniformRegisterVS[2].x & 0x00000010;
PV0i.y = R127i.y;
R125i.z = uf_uniformRegisterVS[2].x & 0x00000004;
R127i.w = uf_uniformRegisterVS[2].x & 0x00000020;
// 1
R123i.x = ((PV0i.y == 0)?(R6i.w):(R6i.w));
PV1i.x = R123i.x;
R123i.y = ((PV0i.y == 0)?(R6i.z):(R6i.z));
PV1i.y = R123i.y;
R126i.z = ((PV0i.x == 0)?(R2i.y):(R3i.y));
PV1i.z = R126i.z;
R123i.w = ((PV0i.x == 0)?(R2i.x):(R3i.x));
PV1i.w = R123i.w;
R127i.z = ((PV0i.y == 0)?(R6i.y):(R6i.y));
PS1i = R127i.z;
// 2
R1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.x), intBitsToFloat(PV1i.w)));
PV0i.x = R1i.x;
R126i.y = floatBitsToInt(-(intBitsToFloat(PV1i.w)) + 1.0);
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(PV1i.z)));
R123i.w = ((R127i.w == 0)?(PV1i.y):(PV1i.y));
PV0i.w = R123i.w;
R122i.x = ((R127i.w == 0)?(PV1i.x):(PV1i.x));
PS0i = R122i.x;
// 3
backupReg0i = R127i.y;
R123i.x = ((R127i.w == 0)?(R127i.z):(PV0i.z));
PV1i.x = R123i.x;
R127i.y = floatBitsToInt(-(intBitsToFloat(R126i.z)) + 1.0);
R127i.z = ((R125i.z == 0)?(PV0i.w):(PV0i.w));
R123i.w = ((backupReg0i == 0)?(R6i.x):(PV0i.x));
PV1i.w = R123i.w;
R124i.z = ((R125i.z == 0)?(PS0i):(PS0i));
PS1i = R124i.z;
// 4
R127i.x = ((R125i.z == 0)?(PV1i.x):(PV1i.x));
PV0i.x = R127i.x;
R125i.y = ((R127i.w == 0)?(PV1i.w):(PV1i.w));
PV0i.y = R125i.y;
R126i.z = uf_uniformRegisterVS[2].x & 0x00000008;
// 5
R126i.x = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(R127i.y));
PV1i.z = floatBitsToInt(intBitsToFloat(PV0i.y) + intBitsToFloat(R126i.y));
// 6
R123i.y = ((R125i.z == 0)?(R125i.y):(PV1i.z));
PV0i.y = R123i.y;
// 7
R6i.x = ((R126i.z == 0)?(PV0i.y):(PV0i.y));
R6i.y = ((R126i.z == 0)?(R127i.x):(R126i.x));
R6i.z = ((R126i.z == 0)?(R127i.z):(R127i.z));
// 8
R6i.w = ((R126i.z == 0)?(R124i.z):(R124i.z));
}
activeMaskStackC[3] = activeMaskStack[2] == true && activeMaskStackC[2] == true;
if( activeMaskStackC[3] == true ) {
// 0
R1i.x = floatBitsToInt(-(intBitsToFloat(R6i.x)) + 1.0);
PV0i.x = R1i.x;
R126i.y = uf_uniformRegisterVS[2].x & 0x00010000;
R127i.z = uf_uniformRegisterVS[2].x & 0x00040000;
PV0i.w = uf_uniformRegisterVS[2].x & 0x00020000;
// 1
R123i.x = ((PV0i.w == 0)?(R6i.z):(R6i.z));
PV1i.x = R123i.x;
R127i.y = ((PV0i.w == 0)?(R6i.y):(R6i.y));
PV1i.y = R127i.y;
R123i.z = ((PV0i.w == 0)?(R6i.x):(PV0i.x));
PV1i.z = R123i.z;
R123i.w = ((PV0i.w == 0)?(R6i.w):(R6i.w));
PV1i.w = R123i.w;
// 2
R127i.x = ((R127i.z == 0)?(PV1i.z):(PV1i.z));
PV0i.y = floatBitsToInt(-(intBitsToFloat(PV1i.y)) + 1.0);
R126i.z = ((R127i.z == 0)?(PV1i.x):(PV1i.x));
R127i.w = ((R127i.z == 0)?(PV1i.w):(PV1i.w));
// 3
R123i.w = ((R127i.z == 0)?(R127i.y):(PV0i.y));
PV1i.w = R123i.w;
// 4
R6i.x = ((R126i.y == 0)?(R127i.x):(PV1i.w));
R6i.y = ((R126i.y == 0)?(PV1i.w):(R127i.x));
R6i.z = ((R126i.y == 0)?(R126i.z):(R126i.z));
R6i.w = ((R126i.y == 0)?(R127i.w):(R127i.w));
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
R127i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R6i.x),intBitsToFloat(R6i.y),intBitsToFloat(R6i.z),intBitsToFloat(R6i.w)),vec4(intBitsToFloat(uf_uniformRegisterVS[14].x),intBitsToFloat(uf_uniformRegisterVS[14].y),intBitsToFloat(uf_uniformRegisterVS[14].z),intBitsToFloat(uf_uniformRegisterVS[14].w))));
PV0i.x = R127i.x;
PV0i.y = R127i.x;
PV0i.z = R127i.x;
PV0i.w = R127i.x;
// 1
backupReg0i = R6i.x;
R6i.x = floatBitsToInt(dot(vec4(intBitsToFloat(backupReg0i),intBitsToFloat(R6i.y),intBitsToFloat(R6i.z),intBitsToFloat(R6i.w)),vec4(intBitsToFloat(uf_uniformRegisterVS[13].x),intBitsToFloat(uf_uniformRegisterVS[13].y),intBitsToFloat(uf_uniformRegisterVS[13].z),intBitsToFloat(uf_uniformRegisterVS[13].w))));
PV1i.x = R6i.x;
PV1i.y = R6i.x;
PV1i.z = R6i.x;
PV1i.w = R6i.x;
R1i.y = PV0i.x;
PS1i = R1i.y;
// 2
R6i.y = floatBitsToInt(-(intBitsToFloat(PS1i)) + 1.0);
R6i.w = R127i.x;
// 3
predResult = (0 != uf_uniformRegisterVS[3].y);
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
backupReg0i = R0i.y;
R7i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R0i.x),intBitsToFloat(backupReg0i),intBitsToFloat(R1i.z),intBitsToFloat(R1i.w)),vec4(intBitsToFloat(uf_uniformRegisterVS[28].x),intBitsToFloat(uf_uniformRegisterVS[28].y),intBitsToFloat(uf_uniformRegisterVS[28].z),intBitsToFloat(uf_uniformRegisterVS[28].w))));
PV0i.x = R7i.x;
PV0i.y = R7i.x;
PV0i.z = R7i.x;
PV0i.w = R7i.x;
// 1
backupReg0i = R0i.x;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(backupReg0i),intBitsToFloat(R0i.y),intBitsToFloat(R1i.z),intBitsToFloat(R1i.w)),vec4(intBitsToFloat(uf_uniformRegisterVS[29].x),intBitsToFloat(uf_uniformRegisterVS[29].y),intBitsToFloat(uf_uniformRegisterVS[29].z),intBitsToFloat(uf_uniformRegisterVS[29].w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R7i.y = tempi.x;
// 2
backupReg0i = R0i.x;
backupReg1i = R0i.y;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),intBitsToFloat(R1i.z),intBitsToFloat(R1i.w)),vec4(intBitsToFloat(uf_uniformRegisterVS[30].x),intBitsToFloat(uf_uniformRegisterVS[30].y),intBitsToFloat(uf_uniformRegisterVS[30].z),intBitsToFloat(uf_uniformRegisterVS[30].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R7i.z = tempi.x;
// 3
backupReg0i = R0i.x;
backupReg1i = R0i.y;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),intBitsToFloat(R1i.z),intBitsToFloat(R1i.w)),vec4(intBitsToFloat(uf_uniformRegisterVS[31].x),intBitsToFloat(uf_uniformRegisterVS[31].y),intBitsToFloat(uf_uniformRegisterVS[31].z),intBitsToFloat(uf_uniformRegisterVS[31].w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R7i.w = tempi.x;
}
activeMaskStack[1] = activeMaskStack[1] == false;
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
activeMaskStack[2] = activeMaskStack[1];
activeMaskStackC[3] = activeMaskStackC[2];
// 0
R0i.w = uf_uniformRegisterVS[2].x & int(1);
// 1
predResult = (0 != R0i.w);
activeMaskStack[2] = predResult;
activeMaskStackC[3] = predResult == true && activeMaskStackC[2] == true;
}
else {
activeMaskStack[2] = false;
activeMaskStackC[3] = false;
}
if( activeMaskStackC[3] == true ) {
activeMaskStack[3] = activeMaskStack[2];
activeMaskStackC[4] = activeMaskStackC[3];
// 0
R0i.z = uf_uniformRegisterVS[2].x & 0x00000002;
// 1
predResult = (0 != R0i.z);
activeMaskStack[3] = predResult;
activeMaskStackC[4] = predResult == true && activeMaskStackC[3] == true;
}
else {
activeMaskStack[3] = false;
activeMaskStackC[4] = false;
}
if( activeMaskStackC[4] == true ) {
// 0
R127i.x = uf_uniformRegisterVS[2].x & 0x00000020;
R127i.y = uf_uniformRegisterVS[2].x & 0x00000010;
PV0i.y = R127i.y;
R125i.z = uf_uniformRegisterVS[2].x & 0x00000004;
PV0i.w = uf_uniformRegisterVS[2].x & 0x00010000;
// 1
R123i.x = ((PV0i.w == 0)?(R2i.y):(R3i.y));
PV1i.x = R123i.x;
R123i.z = ((PV0i.w == 0)?(R2i.x):(R3i.x));
PV1i.z = R123i.z;
R125i.w = uf_uniformRegisterVS[2].x & 0x00000008;
R127i.z = ((PV0i.y == 0)?(R7i.y):(R7i.y));
PS1i = R127i.z;
// 2
R1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R7i.x), intBitsToFloat(PV1i.z)));
PV0i.x = R1i.x;
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(PV1i.x)));
R126i.z = floatBitsToInt(-(intBitsToFloat(PV1i.z)) + 1.0);
R127i.w = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + 1.0);
// 3
R123i.z = ((R127i.x == 0)?(R127i.z):(PV0i.y));
PV1i.z = R123i.z;
R123i.w = ((R127i.y == 0)?(R7i.x):(PV0i.x));
PV1i.w = R123i.w;
// 4
backupReg0i = R127i.x;
R127i.x = ((R125i.z == 0)?(PV1i.z):(PV1i.z));
PV0i.x = R127i.x;
R126i.w = ((backupReg0i == 0)?(PV1i.w):(PV1i.w));
PV0i.w = R126i.w;
// 5
R126i.x = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(R127i.w));
PV1i.z = floatBitsToInt(intBitsToFloat(PV0i.w) + intBitsToFloat(R126i.z));
// 6
R123i.y = ((R125i.z == 0)?(R126i.w):(PV1i.z));
PV0i.y = R123i.y;
// 7
R7i.x = ((R125i.w == 0)?(PV0i.y):(PV0i.y));
R7i.y = ((R125i.w == 0)?(R127i.x):(R126i.x));
}
activeMaskStackC[3] = activeMaskStack[2] == true && activeMaskStackC[2] == true;
if( activeMaskStackC[3] == true ) {
// 0
R1i.x = floatBitsToInt(-(intBitsToFloat(R7i.x)) + 1.0);
PV0i.x = R1i.x;
PV0i.y = uf_uniformRegisterVS[2].x & 0x00020000;
R127i.z = uf_uniformRegisterVS[2].x & 0x00040000;
R126i.w = uf_uniformRegisterVS[2].x & 0x00010000;
// 1
R123i.x = ((PV0i.y == 0)?(R7i.x):(PV0i.x));
PV1i.x = R123i.x;
R127i.w = ((PV0i.y == 0)?(R7i.y):(R7i.y));
PV1i.w = R127i.w;
// 2
R127i.x = ((R127i.z == 0)?(PV1i.x):(PV1i.x));
PV0i.y = floatBitsToInt(-(intBitsToFloat(PV1i.w)) + 1.0);
// 3
R123i.w = ((R127i.z == 0)?(R127i.w):(PV0i.y));
PV1i.w = R123i.w;
// 4
R7i.x = ((R126i.w == 0)?(R127i.x):(PV1i.w));
R7i.y = ((R126i.w == 0)?(PV1i.w):(R127i.x));
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
R127i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R7i.x),intBitsToFloat(R7i.y),intBitsToFloat(R7i.z),intBitsToFloat(R7i.w)),vec4(intBitsToFloat(uf_uniformRegisterVS[16].x),intBitsToFloat(uf_uniformRegisterVS[16].y),intBitsToFloat(uf_uniformRegisterVS[16].z),intBitsToFloat(uf_uniformRegisterVS[16].w))));
PV0i.x = R127i.x;
PV0i.y = R127i.x;
PV0i.z = R127i.x;
PV0i.w = R127i.x;
// 1
backupReg0i = R7i.x;
R7i.x = floatBitsToInt(dot(vec4(intBitsToFloat(backupReg0i),intBitsToFloat(R7i.y),intBitsToFloat(R7i.z),intBitsToFloat(R7i.w)),vec4(intBitsToFloat(uf_uniformRegisterVS[15].x),intBitsToFloat(uf_uniformRegisterVS[15].y),intBitsToFloat(uf_uniformRegisterVS[15].z),intBitsToFloat(uf_uniformRegisterVS[15].w))));
PV1i.x = R7i.x;
PV1i.y = R7i.x;
PV1i.z = R7i.x;
PV1i.w = R7i.x;
R1i.y = PV0i.x;
PS1i = R1i.y;
// 2
R7i.y = floatBitsToInt(-(intBitsToFloat(PS1i)) + 1.0);
R7i.w = R127i.x;
// 3
predResult = (0 != uf_uniformRegisterVS[3].z);
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
backupReg0i = R0i.y;
R5i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R0i.x),intBitsToFloat(backupReg0i),intBitsToFloat(R1i.z),intBitsToFloat(R1i.w)),vec4(intBitsToFloat(uf_uniformRegisterVS[32].x),intBitsToFloat(uf_uniformRegisterVS[32].y),intBitsToFloat(uf_uniformRegisterVS[32].z),intBitsToFloat(uf_uniformRegisterVS[32].w))));
PV0i.x = R5i.x;
PV0i.y = R5i.x;
PV0i.z = R5i.x;
PV0i.w = R5i.x;
// 1
backupReg0i = R0i.x;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(backupReg0i),intBitsToFloat(R0i.y),intBitsToFloat(R1i.z),intBitsToFloat(R1i.w)),vec4(intBitsToFloat(uf_uniformRegisterVS[33].x),intBitsToFloat(uf_uniformRegisterVS[33].y),intBitsToFloat(uf_uniformRegisterVS[33].z),intBitsToFloat(uf_uniformRegisterVS[33].w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R5i.y = tempi.x;
// 2
backupReg0i = R0i.x;
backupReg1i = R0i.y;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),intBitsToFloat(R1i.z),intBitsToFloat(R1i.w)),vec4(intBitsToFloat(uf_uniformRegisterVS[34].x),intBitsToFloat(uf_uniformRegisterVS[34].y),intBitsToFloat(uf_uniformRegisterVS[34].z),intBitsToFloat(uf_uniformRegisterVS[34].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R5i.z = tempi.x;
// 3
backupReg0i = R0i.x;
backupReg1i = R0i.y;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),intBitsToFloat(R1i.z),intBitsToFloat(R1i.w)),vec4(intBitsToFloat(uf_uniformRegisterVS[35].x),intBitsToFloat(uf_uniformRegisterVS[35].y),intBitsToFloat(uf_uniformRegisterVS[35].z),intBitsToFloat(uf_uniformRegisterVS[35].w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R5i.w = tempi.x;
}
activeMaskStack[1] = activeMaskStack[1] == false;
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
activeMaskStack[2] = activeMaskStack[1];
activeMaskStackC[3] = activeMaskStackC[2];
// 0
R0i.x = uf_uniformRegisterVS[2].x & int(1);
// 1
backupReg0i = R0i.x;
predResult = (0 != backupReg0i);
activeMaskStack[2] = predResult;
activeMaskStackC[3] = predResult == true && activeMaskStackC[2] == true;
}
else {
activeMaskStack[2] = false;
activeMaskStackC[3] = false;
}
if( activeMaskStackC[3] == true ) {
activeMaskStack[3] = activeMaskStack[2];
activeMaskStackC[4] = activeMaskStackC[3];
// 0
R0i.w = uf_uniformRegisterVS[2].x & 0x00000002;
// 1
predResult = (0 != R0i.w);
activeMaskStack[3] = predResult;
activeMaskStackC[4] = predResult == true && activeMaskStackC[3] == true;
}
else {
activeMaskStack[3] = false;
activeMaskStackC[4] = false;
}
if( activeMaskStackC[4] == true ) {
// 0
R127i.x = uf_uniformRegisterVS[2].x & 0x00000020;
R127i.y = uf_uniformRegisterVS[2].x & 0x00000010;
PV0i.y = R127i.y;
R125i.z = uf_uniformRegisterVS[2].x & 0x00000004;
PV0i.w = uf_uniformRegisterVS[2].x & 0x00010000;
// 1
R123i.x = ((PV0i.w == 0)?(R2i.y):(R3i.y));
PV1i.x = R123i.x;
R123i.z = ((PV0i.w == 0)?(R2i.x):(R3i.x));
PV1i.z = R123i.z;
R125i.w = uf_uniformRegisterVS[2].x & 0x00000008;
R127i.z = ((PV0i.y == 0)?(R5i.y):(R5i.y));
PS1i = R127i.z;
// 2
R0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.x), intBitsToFloat(PV1i.z)));
PV0i.x = R0i.x;
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(PV1i.x)));
R126i.z = floatBitsToInt(-(intBitsToFloat(PV1i.z)) + 1.0);
R127i.w = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + 1.0);
// 3
R123i.z = ((R127i.x == 0)?(R127i.z):(PV0i.y));
PV1i.z = R123i.z;
R123i.w = ((R127i.y == 0)?(R5i.x):(PV0i.x));
PV1i.w = R123i.w;
// 4
backupReg0i = R127i.x;
R127i.x = ((R125i.z == 0)?(PV1i.z):(PV1i.z));
PV0i.x = R127i.x;
R126i.w = ((backupReg0i == 0)?(PV1i.w):(PV1i.w));
PV0i.w = R126i.w;
// 5
R126i.x = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(R127i.w));
PV1i.z = floatBitsToInt(intBitsToFloat(PV0i.w) + intBitsToFloat(R126i.z));
// 6
R123i.y = ((R125i.z == 0)?(R126i.w):(PV1i.z));
PV0i.y = R123i.y;
// 7
R5i.x = ((R125i.w == 0)?(PV0i.y):(PV0i.y));
R5i.y = ((R125i.w == 0)?(R127i.x):(R126i.x));
}
activeMaskStackC[3] = activeMaskStack[2] == true && activeMaskStackC[2] == true;
if( activeMaskStackC[3] == true ) {
// 0
R0i.x = floatBitsToInt(-(intBitsToFloat(R5i.x)) + 1.0);
PV0i.x = R0i.x;
PV0i.y = uf_uniformRegisterVS[2].x & 0x00020000;
R127i.z = uf_uniformRegisterVS[2].x & 0x00040000;
R126i.w = uf_uniformRegisterVS[2].x & 0x00010000;
// 1
R123i.x = ((PV0i.y == 0)?(R5i.x):(PV0i.x));
PV1i.x = R123i.x;
R127i.w = ((PV0i.y == 0)?(R5i.y):(R5i.y));
PV1i.w = R127i.w;
// 2
R127i.x = ((R127i.z == 0)?(PV1i.x):(PV1i.x));
PV0i.y = floatBitsToInt(-(intBitsToFloat(PV1i.w)) + 1.0);
// 3
R123i.w = ((R127i.z == 0)?(R127i.w):(PV0i.y));
PV1i.w = R123i.w;
// 4
R5i.x = ((R126i.w == 0)?(R127i.x):(PV1i.w));
R5i.y = ((R126i.w == 0)?(PV1i.w):(R127i.x));
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
// 0
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R5i.x),intBitsToFloat(R5i.y),intBitsToFloat(R5i.z),intBitsToFloat(R5i.w)),vec4(intBitsToFloat(uf_uniformRegisterVS[18].x),intBitsToFloat(uf_uniformRegisterVS[18].y),intBitsToFloat(uf_uniformRegisterVS[18].z),intBitsToFloat(uf_uniformRegisterVS[18].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
// 1
PV1i.x = PV0i.x;
R0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R8i.y), intBitsToFloat(uf_uniformRegisterVS[0].y)));
R0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R8i.z), intBitsToFloat(uf_uniformRegisterVS[0].z)));
R1i.w = PV0i.x;
R0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R8i.x), intBitsToFloat(uf_uniformRegisterVS[0].x)));
PS1i = R0i.x;
// 2
R1i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R5i.x),intBitsToFloat(R5i.y),intBitsToFloat(R5i.z),intBitsToFloat(R5i.w)),vec4(intBitsToFloat(uf_uniformRegisterVS[17].x),intBitsToFloat(uf_uniformRegisterVS[17].y),intBitsToFloat(uf_uniformRegisterVS[17].z),intBitsToFloat(uf_uniformRegisterVS[17].w))));
PV0i.x = R1i.x;
PV0i.y = R1i.x;
PV0i.z = R1i.x;
PV0i.w = R1i.x;
R1i.y = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + 1.0);
PS0i = R1i.y;
// 3
R0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R8i.w), intBitsToFloat(uf_uniformRegisterVS[0].w)));
}
// export
gl_Position = vec4(intBitsToFloat(R4i.x), intBitsToFloat(R4i.y), intBitsToFloat(R4i.z), intBitsToFloat(R4i.w));
// export
passParameterSem0 = vec4(intBitsToFloat(R0i.x), intBitsToFloat(R0i.y), intBitsToFloat(R0i.z), intBitsToFloat(R0i.w));
// export
passParameterSem1 = vec4(intBitsToFloat(R6i.x), intBitsToFloat(R6i.y), intBitsToFloat(R6i.x), intBitsToFloat(R6i.w));
// export
passParameterSem2 = vec4(intBitsToFloat(R7i.x), intBitsToFloat(R7i.y), intBitsToFloat(R7i.x), intBitsToFloat(R7i.w));
// export
passParameterSem3 = vec4(intBitsToFloat(R1i.x), intBitsToFloat(R1i.y), intBitsToFloat(R1i.x), intBitsToFloat(R1i.w));
}
