#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
#ifdef VULKAN
#define ATTR_LAYOUT(__vkSet, __location) layout(set = __vkSet, location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation)
#define SET_POSITION(_v) gl_Position = _v; gl_Position.z = (gl_Position.z + gl_Position.w) / 2.0
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale.xy,gl_FragCoord.zw)
#define gl_VertexID gl_VertexIndex
#define gl_InstanceID gl_InstanceIndex
#else
#define ATTR_LAYOUT(__vkSet, __location) layout(location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation, std140) 
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation)
#define SET_POSITION(_v) gl_Position = _v
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw)
#endif
// This shader was automatically converted to be cross-compatible with Vulkan and OpenGL.

// shader a2b3125cf46e9f74
// Used for: Fixing the grid by inserting some values that are 0 on recompiler mode.

#ifdef VULKAN
layout(set = 0, binding = 0) uniform ufBlock
{
uniform ivec4 uf_remappedVS[17];
// uniform vec2 uf_windowSpaceToClipSpaceTransform; // Cemu optimized this uf_variable away in Cemu 1.15.7
};
#else
uniform ivec4 uf_remappedVS[17];
// uniform vec2 uf_windowSpaceToClipSpaceTransform; // Cemu optimized this uf_variable away in Cemu 1.15.7
#endif
// uf_windowSpaceToClipSpaceTransform was moved to the ufBlock
ATTR_LAYOUT(0, 0) in uvec4 attrDataSem0;
ATTR_LAYOUT(0, 1) in uvec4 attrDataSem1;
ATTR_LAYOUT(0, 2) in uvec4 attrDataSem8;
out gl_PerVertex
{
	vec4 gl_Position;
	float gl_PointSize;
};
layout(location = 2) out vec4 passParameterSem3;
layout(location = 0) out vec4 passParameterSem0;
layout(location = 3) out vec4 passParameterSem5;
layout(location = 1) out vec4 passParameterSem1;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){return mix(0.0, a*b, (a != 0.0) && (b != 0.0));}
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
uvec4 attrDecoder;
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = floatBitsToInt(ivec4(gl_VertexID, 0, 0, gl_InstanceID));
attrDecoder.xyzw = attrDataSem0.xyzw;
attrDecoder = ((attrDecoder>>8)&0xFF)|((attrDecoder<<8)&0xFF00);
attrDecoder.xyzw = floatBitsToInt(vec4(unpackHalf2x16(attrDecoder.x|(attrDecoder.y<<16)),unpackHalf2x16(attrDecoder.z|(attrDecoder.w<<16))));
R3f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(int(attrDecoder.z)), intBitsToFloat(int(attrDecoder.w)));
attrDecoder.x = attrDataSem1.x;
attrDecoder.x = (attrDecoder.x>>24)|((attrDecoder.x>>8)&0xFF00)|((attrDecoder.x<<8)&0xFF0000)|((attrDecoder.x<<24));
attrDecoder.y = 0;
attrDecoder.z = 0;
attrDecoder.w = 0;
attrDecoder.xyzw = uvec4((attrDecoder.x>>0)&0x3FF,(attrDecoder.x>>10)&0x3FF,(attrDecoder.x>>20)&0x3FF,(attrDecoder.x>>30)&0x3);
if( (attrDecoder.x&0x200) != 0 ) attrDecoder.x |= 0xFFFFFC00;
if( (attrDecoder.y&0x200) != 0 ) attrDecoder.y |= 0xFFFFFC00;
if( (attrDecoder.z&0x200) != 0 ) attrDecoder.z |= 0xFFFFFC00;
attrDecoder.x = floatBitsToUint(max(float(int(attrDecoder.x))/511.0,-1.0));
attrDecoder.y = floatBitsToUint(max(float(int(attrDecoder.y))/511.0,-1.0));
attrDecoder.z = floatBitsToUint(max(float(int(attrDecoder.z))/511.0,-1.0));
attrDecoder.w = floatBitsToUint(float(attrDecoder.w));
R2f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(int(attrDecoder.z)), intBitsToFloat(int(attrDecoder.w)));
attrDecoder.xy = attrDataSem8.xy;
attrDecoder.xy = ((attrDecoder.xy>>8)&0xFF)|((attrDecoder.xy<<8)&0xFF00);
attrDecoder.z = 0;
attrDecoder.w = 0;
attrDecoder.xy = floatBitsToUint(unpackHalf2x16(attrDecoder.x|(attrDecoder.y<<16)));
attrDecoder.zw = uvec2(0);
R5f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(floatBitsToInt(0.0)), intBitsToFloat(floatBitsToInt(1.0)));
// 0
PV0f.x = R3f.x * intBitsToFloat(uf_remappedVS[0].x);
PV0f.y = R3f.y * intBitsToFloat(uf_remappedVS[0].y);
PV0f.z = R3f.x * intBitsToFloat(uf_remappedVS[1].x);
PV0f.w = R3f.y * intBitsToFloat(uf_remappedVS[1].y);
R0f.w = 1.0;
PS0f = R0f.w;
// 1
PV1f.x = R3f.y * intBitsToFloat(uf_remappedVS[2].y);
PV1f.y = PV0f.w + PV0f.z;
PV1f.z = R3f.x * intBitsToFloat(uf_remappedVS[2].x);
R127f.w = PV0f.y + PV0f.x;
PS1f = R3f.z * intBitsToFloat(uf_remappedVS[1].z);
// 2
R127f.x = PS1f + PV1f.y;
PV0f.y = R3f.z * intBitsToFloat(uf_remappedVS[2].z);
PV0f.z = R3f.z * intBitsToFloat(uf_remappedVS[0].z);
PV0f.w = PV1f.x + PV1f.z;
R126f.x = intBitsToFloat(uf_remappedVS[0].w) * 1.0;
PS0f = R126f.x;
// 3
PV1f.x = intBitsToFloat(uf_remappedVS[1].w) * 1.0;
PV1f.y = PV0f.y + PV0f.w;
PV1f.z = PV0f.z + R127f.w;
PV1f.w = intBitsToFloat(uf_remappedVS[2].w) * 1.0;
R127f.w = 1.0;
PS1f = R127f.w;
// 4
R0f.xyz = vec3(PV1f.x,R126f.x,PV1f.w) + vec3(R127f.x,PV1f.z,PV1f.y);
PV0f.x = R0f.x;
PV0f.y = R0f.y;
PV0f.z = R0f.z;
R126f.w = R4f.x * intBitsToFloat(uf_remappedVS[1].x);
R126f.z = R4f.x * intBitsToFloat(uf_remappedVS[0].x);
PS0f = R126f.z;
// 5
backupReg0f = R0f.w;
R127f.x = dot(vec4(PV0f.x,PV0f.y,PV0f.z,backupReg0f),vec4(intBitsToFloat(uf_remappedVS[3].x),intBitsToFloat(uf_remappedVS[3].y),intBitsToFloat(uf_remappedVS[3].z),intBitsToFloat(uf_remappedVS[3].w)));
PV1f.x = R127f.x;
PV1f.y = R127f.x;
PV1f.z = R127f.x;
PV1f.w = R127f.x;
R3f.x = R1f.x;
PS1f = R3f.x;
// 6
backupReg0f = R0f.x;
backupReg1f = R0f.z;
backupReg2f = R0f.w;
tempf.x = dot(vec4(backupReg0f,R0f.y,backupReg1f,backupReg2f),vec4(intBitsToFloat(uf_remappedVS[4].x),intBitsToFloat(uf_remappedVS[4].y),intBitsToFloat(uf_remappedVS[4].z),intBitsToFloat(uf_remappedVS[4].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R127f.y = tempf.x;
R3f.y = R1f.y;
PS0f = R3f.y;
// 7
backupReg0f = R0f.x;
backupReg1f = R0f.y;
backupReg2f = R0f.w;
tempf.x = dot(vec4(backupReg0f,backupReg1f,R0f.z,backupReg2f),vec4(intBitsToFloat(uf_remappedVS[5].x),intBitsToFloat(uf_remappedVS[5].y),intBitsToFloat(uf_remappedVS[5].z),intBitsToFloat(uf_remappedVS[5].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R127f.z = tempf.x;
R3f.z = R1f.z;
PS1f = R3f.z;
// 8
R1f.x = dot(vec4(R127f.x,R127f.y,PV1f.x,R127f.w),vec4(intBitsToFloat(uf_remappedVS[6].x),intBitsToFloat(uf_remappedVS[6].y),intBitsToFloat(uf_remappedVS[6].z),intBitsToFloat(uf_remappedVS[6].w)));
PV0f.x = R1f.x;
PV0f.y = R1f.x;
PV0f.z = R1f.x;
PV0f.w = R1f.x;
R5f.w = R1f.w;
PS0f = R5f.w;
// 9
tempf.x = dot(vec4(R127f.x,R127f.y,R127f.z,R127f.w),vec4(intBitsToFloat(uf_remappedVS[7].x),intBitsToFloat(uf_remappedVS[7].y),intBitsToFloat(uf_remappedVS[7].z),intBitsToFloat(uf_remappedVS[7].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R1f.y = tempf.x;
// 10
tempf.x = dot(vec4(R127f.x,R127f.y,R127f.z,R127f.w),vec4(intBitsToFloat(uf_remappedVS[8].x),intBitsToFloat(uf_remappedVS[8].y),intBitsToFloat(uf_remappedVS[8].z),intBitsToFloat(uf_remappedVS[8].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R1f.z = tempf.x;
// 11
tempf.x = dot(vec4(R127f.x,R127f.y,R127f.z,R127f.w),vec4(intBitsToFloat(uf_remappedVS[9].x),intBitsToFloat(uf_remappedVS[9].y),intBitsToFloat(uf_remappedVS[9].z),intBitsToFloat(uf_remappedVS[9].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R1f.w = tempf.x;
// 12
backupReg0f = R126f.w;
PV0f.x = R4f.x * intBitsToFloat(uf_remappedVS[2].x);
PV0f.y = R2f.x * intBitsToFloat(uf_remappedVS[2].x);
R127f.z = R2f.x * intBitsToFloat(uf_remappedVS[1].x);
R126f.w = (mul_nonIEEE(R4f.y,intBitsToFloat(uf_remappedVS[1].y)) + backupReg0f);
// 13
R127f.x = (mul_nonIEEE(R4f.y,intBitsToFloat(uf_remappedVS[2].y)) + PV0f.x);
R127f.y = (mul_nonIEEE(R4f.y,intBitsToFloat(uf_remappedVS[0].y)) + R126f.z);
R126f.z = (mul_nonIEEE(R2f.y,intBitsToFloat(uf_remappedVS[2].y)) + PV0f.y);
PV1f.w = R2f.x * intBitsToFloat(uf_remappedVS[0].x);
// 14
R123f.x = (mul_nonIEEE(R2f.y,intBitsToFloat(uf_remappedVS[0].y)) + PV1f.w);
PV0f.x = R123f.x;
R123f.y = (mul_nonIEEE(R2f.y,intBitsToFloat(uf_remappedVS[1].y)) + R127f.z);
PV0f.y = R123f.y;
// 15
backupReg0f = R127f.y;
R126f.x = (mul_nonIEEE(R4f.z,intBitsToFloat(uf_remappedVS[1].z)) + R126f.w);
R127f.y = (mul_nonIEEE(R4f.z,intBitsToFloat(uf_remappedVS[0].z)) + backupReg0f);
R127f.z = (mul_nonIEEE(R2f.z,intBitsToFloat(uf_remappedVS[1].z)) + PV0f.y);
R126f.w = (mul_nonIEEE(R2f.z,intBitsToFloat(uf_remappedVS[0].z)) + PV0f.x);
// 16
backupReg0f = R127f.x;
R127f.x = (mul_nonIEEE(R2f.z,intBitsToFloat(uf_remappedVS[2].z)) + R126f.z);
PV0f.x = R127f.x;
R126f.z = (mul_nonIEEE(R4f.z,intBitsToFloat(uf_remappedVS[2].z)) + backupReg0f);
PV0f.z = R126f.z;
// 17
tempf.x = dot(vec4(R127f.z,R126f.w,PV0f.x,-0.0),vec4(R127f.z,R126f.w,PV0f.x,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
PS1f = PV0f.z * PV0f.z;
// 18
tempf.x = dot(vec4(R126f.x,R127f.y,PS1f,-0.0),vec4(R126f.x,R127f.y,1.0,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
tempResultf = 1.0 / sqrt(PV1f.x);
PS0f = tempResultf;
// 19
R2f.x = R127f.z * PS0f;
R2f.y = R126f.w * PS0f;
R2f.z = R127f.x * PS0f;
tempResultf = 1.0 / sqrt(PV0f.x);
PS1f = tempResultf;
// 20
R4f.x = R126f.x * PS1f;
R4f.y = R127f.y * PS1f;
R4f.z = R126f.z * PS1f;
// export
SET_POSITION(vec4(R1f.x, R1f.y, R1f.z, R1f.w));
// export
// skipped export to semanticId 255
// export
// skipped export to semanticId 255
// 0
backupReg0f = R0f.x;
backupReg1f = R0f.z;
backupReg2f = R0f.w;
tempf.x = dot(vec4(backupReg0f,R0f.y,backupReg1f,backupReg2f),vec4(intBitsToFloat(992651951/*uf_remappedVS[10].x WORKAROUND*/),intBitsToFloat(uf_remappedVS[10].y),intBitsToFloat(uf_remappedVS[10].z),intBitsToFloat(uf_remappedVS[10].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R127f.y = tempf.x;
// 1
backupReg0f = R0f.y;
backupReg1f = R0f.z;
backupReg2f = R0f.w;
R127f.x = dot(vec4(R0f.x,backupReg0f,backupReg1f,backupReg2f),vec4(intBitsToFloat(uf_remappedVS[11].x),intBitsToFloat(-1147685851/*uf_remappedVS[11].y WORKAROUND*/),intBitsToFloat(uf_remappedVS[11].z),intBitsToFloat(uf_remappedVS[11].w)));
PV1f.x = R127f.x;
PV1f.y = R127f.x;
PV1f.z = R127f.x;
PV1f.w = R127f.x;
// 2
backupReg0f = R127f.y;
backupReg0f = R127f.y;
backupReg0f = R127f.y;
R126f.x = R127f.y * intBitsToFloat(uf_remappedVS[12].x);
R127f.y = backupReg0f * intBitsToFloat(uf_remappedVS[13].y);
R126f.z = backupReg0f * intBitsToFloat(uf_remappedVS[13].x);
R126f.w = backupReg0f * intBitsToFloat(uf_remappedVS[12].y);
// 3
backupReg0f = R0f.x;
backupReg1f = R0f.y;
backupReg2f = R0f.z;
tempf.x = dot(vec4(backupReg0f,backupReg1f,backupReg2f,R0f.w),vec4(intBitsToFloat(uf_remappedVS[14].x),intBitsToFloat(uf_remappedVS[14].y),intBitsToFloat(uf_remappedVS[14].z),intBitsToFloat(uf_remappedVS[14].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R127f.w = tempf.x;
// 4
R123f.x = (mul_nonIEEE(R127f.x,intBitsToFloat(uf_remappedVS[13].z)) + R126f.z);
PV0f.x = R123f.x;
R123f.y = (mul_nonIEEE(R127f.x,intBitsToFloat(uf_remappedVS[12].z)) + R126f.x);
PV0f.y = R123f.y;
R123f.z = (mul_nonIEEE(R127f.x,intBitsToFloat(uf_remappedVS[12].w)) + R126f.w);
PV0f.z = R123f.z;
R123f.w = (mul_nonIEEE(R127f.x,intBitsToFloat(uf_remappedVS[13].w)) + R127f.y);
PV0f.w = R123f.w;
R2f.w = PV1f.x;
PS0f = R2f.w;
// 5
R5f.x = PV0f.x + intBitsToFloat(uf_remappedVS[15].x);
R5f.y = PV0f.w + intBitsToFloat(uf_remappedVS[15].y);
R0f.z = R127f.w;
R0f.w = PV0f.y + intBitsToFloat(uf_remappedVS[16].x);
R0f.y = PV0f.z + intBitsToFloat(uf_remappedVS[16].y);
PS1f = R0f.y;
// export
passParameterSem3 = vec4(R2f.x, R2f.y, R2f.z, R2f.w);
// export
passParameterSem0 = vec4(R5f.x, R5f.y, R5f.z, R5f.w);
// export
passParameterSem5 = vec4(R0f.w, R0f.y, R0f.z, R0f.z);
// export
passParameterSem1 = vec4(R0f.x, R0f.x, R0f.x, R0f.z);
}
