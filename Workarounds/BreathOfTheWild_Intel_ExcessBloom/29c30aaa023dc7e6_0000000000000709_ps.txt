#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 29c30aaa023dc7e6
// fog ganon swirl full
uniform ivec4 uf_remappedPS[2];
uniform float uf_alphaTestRef;
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x20fc1000 res 128x128x1 dim 1 tm: 4 format 0034 compSel: 0 0 0 0 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 0 0 0 border: 0
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x2103b000 res 256x256x1 dim 1 tm: 4 format 0034 compSel: 0 0 0 0 mipView: 0x0 (num 0x9) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 0 0 0 border: 0
layout(binding = 2) uniform sampler2D textureUnitPS2;// Tex2 addr 0x1b4c0000 res 256x256x1 dim 1 tm: 4 format 0035 compSel: 0 0 0 1 mipView: 0x0 (num 0x9) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 0 0 0 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem4;
layout(location = 3) in vec4 passParameterSem5;
layout(location = 4) in vec4 passParameterSem7;
layout(location = 5) in vec4 passParameterSem8;
layout(location = 6) in vec4 passParameterSem9;
layout(location = 7) in vec4 passParameterSem14;
layout(location = 8) in vec4 passParameterSem15;
layout(location = 9) in vec4 passParameterSem16;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R8f = vec4(0.0);
vec4 R9f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = passParameterSem1;
R2f = passParameterSem4;
R3f = passParameterSem5;
R4f = passParameterSem7;
R5f = passParameterSem8;
R6f = passParameterSem9;
R7f = passParameterSem14;
R8f = passParameterSem15;
R9f = passParameterSem16;
R3f.xw = (texture(textureUnitPS0, R5f.xy).xw);
// 0
R123f.z = (R3f.w * 2.0 + -(1.0));
PV0f.z = R123f.z;
R123f.w = (R3f.x * 2.0 + -(1.0));
PV0f.w = R123f.w;
// 1
PV1f.y = mul_nonIEEE(R2f.y, PV0f.w);
PV1f.w = mul_nonIEEE(R3f.y, PV0f.z);
// 2
backupReg0f = R3f.z;
backupReg0f = R3f.z;
R3f.x = R5f.z + PV1f.y;
R3f.y = R5f.w + PV1f.w;
R3f.z = (mul_nonIEEE(backupReg0f,PV1f.y) + R6f.x);
R3f.w = (mul_nonIEEE(backupReg0f,PV1f.w) + R6f.y);
R3f.x = (texture(textureUnitPS1, R3f.xy).w);
R5f.xw = (texture(textureUnitPS2, R3f.zw).xw);
// 0
R127f.x = mul_nonIEEE(R5f.x, R5f.x);
R123f.z = (mul_nonIEEE(R4f.w,R3f.x) + -(R0f.w));
PV0f.z = R123f.z;
R127f.w = mul_nonIEEE(R5f.w, R5f.w);
// 1
PV1f.y = mul_nonIEEE(R1f.w, PV0f.z);
PV1f.y = clamp(PV1f.y, 0.0, 1.0);
// 2
backupReg0f = R127f.x;
R127f.x = mul_nonIEEE(backupReg0f, PV1f.y);
PV0f.y = PV1f.y;
PV0f.y = clamp(PV0f.y, 0.0, 1.0);
PV0f.w = mul_nonIEEE(R127f.w, PV1f.y);
// 3
R123f.x = (mul_nonIEEE(R0f.z,PV0f.w) + intBitsToFloat(0x3d23d70a));
PV1f.x = R123f.x;
R123f.y = (mul_nonIEEE(R0f.y,PV0f.w) + intBitsToFloat(0x3c75c28f));
PV1f.y = R123f.y;
R123f.z = (mul_nonIEEE(R0f.x,PV0f.w) + intBitsToFloat(0x3c75c28f));
PV1f.z = R123f.z;
PV1f.w = mul_nonIEEE(R2f.x, PV0f.y);
// 4
R127f.y = (mul_nonIEEE(R1f.z,R127f.x*.35) + PV1f.x);
PV0f.y = R127f.y;
R127f.z = (mul_nonIEEE(R1f.y,R127f.x*.35) + PV1f.y);
PV0f.z = R127f.z;
R127f.w = (mul_nonIEEE(R1f.x,R127f.x*.35) + PV1f.z);
PV0f.w = R127f.w;
R1f.w = mul_nonIEEE(R7f.w, PV1f.w);
PS0f = R1f.w;
// 5
PV1f.x = -(PV0f.y) + intBitsToFloat(uf_remappedPS[0].z);
PV1f.y = -(PV0f.z) + intBitsToFloat(uf_remappedPS[0].y);
PV1f.z = -(PV0f.w) + intBitsToFloat(uf_remappedPS[0].x);
// 6
backupReg0f = R127f.y;
backupReg1f = R127f.z;
backupReg2f = R127f.w;
R127f.y = (mul_nonIEEE(PV1f.x,R9f.y*.35) + backupReg0f);
PV0f.y = R127f.y;
R127f.z = (mul_nonIEEE(PV1f.y,R9f.y*.35) + backupReg1f);
PV0f.z = R127f.z;
R127f.w = (mul_nonIEEE(PV1f.z,R9f.y*.35) + backupReg2f);
PV0f.w = R127f.w;
// 7
PV1f.x = R8f.x + -(PV0f.w);
PV1f.z = R8f.z + -(PV0f.y);
PV1f.w = R8f.y + -(PV0f.z);
// 8
backupReg0f = R127f.y;
R127f.x = (mul_nonIEEE(PV1f.w,R8f.w*.35) + R127f.z);
PV0f.x = R127f.x;
R127f.y = (mul_nonIEEE(PV1f.x,R8f.w*.35) + R127f.w);
PV0f.y = R127f.y;
R127f.w = (mul_nonIEEE(PV1f.z,R8f.w*.35) + backupReg0f);
PV0f.w = R127f.w;
// 9
PV1f.x = -(PV0f.w) + intBitsToFloat(uf_remappedPS[1].z);
PV1f.y = -(PV0f.x) + intBitsToFloat(uf_remappedPS[1].y);
PV1f.z = -(PV0f.y) + intBitsToFloat(uf_remappedPS[1].x);
// 10
R1f.x = (mul_nonIEEE(PV1f.z,R9f.x) + R127f.y);
R1f.y = (mul_nonIEEE(PV1f.y,R9f.x) + R127f.x);
R1f.z = (mul_nonIEEE(PV1f.x,R9f.x) + R127f.w);
// export
if( ((vec4(R1f.x, R1f.y, R1f.z, R1f.w)).a > uf_alphaTestRef) == false) discard;
passPixelColor0 = vec4(R1f.x, R1f.y, R1f.z, R1f.w);
}
