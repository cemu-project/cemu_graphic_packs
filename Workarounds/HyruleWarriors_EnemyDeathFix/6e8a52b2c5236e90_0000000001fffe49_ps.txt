#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 6e8a52b2c5236e90
uniform ivec4 uf_remappedPS[16];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x21304000 res 512x512x1 dim 1 tm: 4 format 0033 compSel: 0 1 2 3 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 0 0 0 border: 0
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x212d7000 res 512x512x1 dim 1 tm: 4 format 0031 compSel: 0 1 2 3 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 0 0 0 border: 0
layout(binding = 2) uniform sampler2D textureUnitPS2;// Tex2 addr 0x21280000 res 512x512x1 dim 1 tm: 4 format 0433 compSel: 0 1 2 3 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 0 0 0 border: 0
layout(location = 0) in vec4 passParameterSem64;
layout(location = 1) in vec4 passParameterSem65;
layout(location = 2) in vec4 passParameterSem66;
layout(location = 3) in vec4 passParameterSem67;
layout(location = 0) out vec4 passPixelColor0;
layout(location = 1) out vec4 passPixelColor1;
layout(location = 2) out vec4 passPixelColor2;
layout(location = 3) out vec4 passPixelColor3;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R7i = ivec4(0);
ivec4 R8i = ivec4(0);
ivec4 R9i = ivec4(0);
ivec4 R122i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R124i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
bool activeMaskStack[2];
bool activeMaskStackC[3];
activeMaskStack[0] = false;
activeMaskStackC[0] = false;
activeMaskStackC[1] = false;
activeMaskStack[0] = true;
activeMaskStackC[0] = true;
activeMaskStackC[1] = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = floatBitsToInt(passParameterSem64);
R1i = floatBitsToInt(passParameterSem65);
R2i = floatBitsToInt(passParameterSem66);
R3i = floatBitsToInt(passParameterSem67);
if( activeMaskStackC[1] == true ) {
R5i.xyzw = floatBitsToInt(texture(textureUnitPS2, intBitsToFloat(R0i.xy)).xyzw);
}
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
R1i.w = floatBitsToInt(intBitsToFloat(R5i.w) + -(intBitsToFloat(0x3ec8c8cd)));
// 1
predResult = (0.0 >= intBitsToFloat(R1i.w));
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
if(  (0 == 0)) discard;
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
R4i.xyz = floatBitsToInt(texture(textureUnitPS1, intBitsToFloat(R0i.wz)).xyz);
R0i.xyz = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R0i.xy)).xyz);
}
if( activeMaskStackC[1] == true ) {
// 0
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R2i.x),intBitsToFloat(R2i.y),intBitsToFloat(R2i.z),-0.0),vec4(intBitsToFloat(R2i.x),intBitsToFloat(R2i.y),intBitsToFloat(R2i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.z = floatBitsToInt((intBitsToFloat(R4i.x) * intBitsToFloat(0x40008102) + -(intBitsToFloat(0x3f810204))));
PS0i = R127i.z;
// 1
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),-0.0),vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.x));
PS1i = floatBitsToInt(tempResultf);
// 2
R125i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.z), intBitsToFloat(PS1i)));
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.y), intBitsToFloat(PS1i)));
R125i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.x), intBitsToFloat(PS1i)));
R126i.w = floatBitsToInt((intBitsToFloat(R4i.y) * intBitsToFloat(0x40008102) + -(intBitsToFloat(0x3f810204))));
tempResultf = 1.0 / sqrt(intBitsToFloat(PV1i.x));
PS0i = floatBitsToInt(tempResultf);
// 3
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.y), intBitsToFloat(PS0i)));
PV1i.x = R127i.x;
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.x), intBitsToFloat(PS0i)));
PV1i.y = R127i.y;
R124i.z = floatBitsToInt((intBitsToFloat(R4i.z) * intBitsToFloat(0x40008102) + -(intBitsToFloat(0x3f810204))));
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(PS0i)));
PV1i.w = R127i.w;
R4i.x = floatBitsToInt(intBitsToFloat(R5i.y) * 1.0);
PS1i = R4i.x;
// 4
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.y), intBitsToFloat(PV1i.y)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.z), intBitsToFloat(PV1i.w)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.x), intBitsToFloat(PV1i.x)));
R124i.w = floatBitsToInt(intBitsToFloat(R5i.z) * 1.0);
R122i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.w),intBitsToFloat(uf_remappedPS[0].w)) + intBitsToFloat(uf_remappedPS[0].x)));
R122i.x = clampFI32(R122i.x);
PS0i = R122i.x;
// 5
R2i.x = floatBitsToInt(intBitsToFloat(R5i.x) * 1.0);
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R125i.z)),intBitsToFloat(R127i.x)) + intBitsToFloat(PV0i.x)));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R125i.x)),intBitsToFloat(R127i.y)) + intBitsToFloat(PV0i.y)));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R126i.y)),intBitsToFloat(R127i.w)) + intBitsToFloat(PV0i.z)));
PV1i.w = R123i.w;
R125i.w = floatBitsToInt(intBitsToFloat(PS0i) * 1.0);
PS1i = R125i.w;
// 6
backupReg0i = R0i.y;
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.w), intBitsToFloat(PV1i.w)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.w), intBitsToFloat(PV1i.y)));
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PS1i)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.w), intBitsToFloat(PV1i.z)));
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.z), intBitsToFloat(PS1i)));
PS0i = R126i.x;
// 7
R124i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.x), intBitsToFloat(uf_remappedPS[1].y)));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(R127i.z)));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(R127i.z)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(R127i.z)));
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.w), intBitsToFloat(uf_remappedPS[1].z)));
PS1i = R127i.z;
// 8
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.y),intBitsToFloat(R126i.w)) + intBitsToFloat(PV1i.w)));
PV0i.x = R123i.x;
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.z), intBitsToFloat(uf_remappedPS[2].y)));
PV0i.y = R127i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.w),intBitsToFloat(R126i.w)) + intBitsToFloat(PV1i.y)));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.x),intBitsToFloat(R126i.w)) + intBitsToFloat(PV1i.z)));
PV0i.w = R123i.w;
R124i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.x), intBitsToFloat(uf_remappedPS[2].z)));
PS0i = R124i.y;
// 9
R9i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.z),intBitsToFloat(R124i.z)) + intBitsToFloat(PV0i.x)));
PV1i.x = R9i.x;
R7i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.y),intBitsToFloat(R124i.z)) + intBitsToFloat(PV0i.w)));
PV1i.y = R7i.y;
R6i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.x),intBitsToFloat(R124i.z)) + intBitsToFloat(PV0i.z)));
PV1i.z = R6i.z;
R127i.w = floatBitsToInt(intBitsToFloat(R124i.x) + -(intBitsToFloat(R127i.z)));
R126i.w = floatBitsToInt(intBitsToFloat(PV0i.y) + -(intBitsToFloat(PS0i)));
PS1i = R126i.w;
// 10
backupReg0i = R0i.x;
backupReg1i = R125i.w;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(uf_remappedPS[3].x),intBitsToFloat(uf_remappedPS[3].y),intBitsToFloat(uf_remappedPS[3].z),-0.0),vec4(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R125i.w = tempi.x;
R124i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(backupReg1i)));
PS0i = R124i.z;
// 11
R125i.x = floatBitsToInt(intBitsToFloat(R124i.x) + -(intBitsToFloat(R127i.z)));
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(uf_remappedPS[4].y)) + intBitsToFloat(uf_remappedPS[5].y)));
R125i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(uf_remappedPS[4].x)) + intBitsToFloat(uf_remappedPS[5].x)));
R5i.w = ((intBitsToFloat(R127i.w) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV1i.w = R5i.w;
PS1i = floatBitsToInt(intBitsToFloat(R127i.z) + -(intBitsToFloat(R124i.x)));
// 12
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.w),intBitsToFloat(uf_remappedPS[4].z)) + intBitsToFloat(uf_remappedPS[5].z)));
PV0i.x = R123i.x;
R125i.y = floatBitsToInt(intBitsToFloat(R127i.y) + -(intBitsToFloat(R124i.y)));
R5i.z = ((intBitsToFloat(R126i.w) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV0i.z = R5i.z;
PV0i.w = floatBitsToInt(intBitsToFloat(R124i.y) + -(intBitsToFloat(R127i.y)));
R0i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PS1i),intBitsToFloat(PV1i.w)) + intBitsToFloat(R124i.x)));
PS0i = R0i.y;
// 13
backupReg0i = R125i.x;
backupReg1i = R127i.z;
R125i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(PV0i.z)) + intBitsToFloat(R127i.y)));
PV1i.y = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(uf_remappedPS[6].z));
PV1i.z = floatBitsToInt(intBitsToFloat(R126i.y) + intBitsToFloat(uf_remappedPS[6].y));
PV1i.w = floatBitsToInt(intBitsToFloat(R125i.z) + intBitsToFloat(uf_remappedPS[6].x));
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(R5i.w)) + intBitsToFloat(backupReg1i)));
PS1i = R127i.z;
// 14
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.w),intBitsToFloat(uf_remappedPS[7].x)) + 0.0));
PV0i.x = R123i.x;
R2i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.y),intBitsToFloat(R5i.z)) + intBitsToFloat(R124i.y)));
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.y),intBitsToFloat(uf_remappedPS[7].z)) + 0.0));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),intBitsToFloat(uf_remappedPS[7].y)) + 0.0));
PV0i.w = R123i.w;
R1i.w = R0i.y;
PS0i = R1i.w;
// 15
backupReg0i = R0i.y;
PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.w) + intBitsToFloat(uf_remappedPS[8].y));
PV1i.y = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(uf_remappedPS[8].x));
R126i.z = backupReg0i;
PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.z) + intBitsToFloat(uf_remappedPS[8].z));
R3i.z = R127i.z;
PS1i = R3i.z;
// 16
PV0i.x = floatBitsToInt(intBitsToFloat(PV1i.w) + 0.0);
PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.x) + 0.0);
PV0i.z = floatBitsToInt(intBitsToFloat(PV1i.y) + 0.0);
R2i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.x), intBitsToFloat(uf_remappedPS[1].x)));
PV0i.w = R2i.w;
R7i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.z), intBitsToFloat(uf_remappedPS[2].x)));
PS0i = R7i.x;
// 17
R5i.x = PV0i.w;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.w),intBitsToFloat(PV0i.x)) + 0.0));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.x),intBitsToFloat(PV0i.y)) + 0.0));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.x),intBitsToFloat(PV0i.z)) + 0.0));
PV1i.w = R123i.w;
R125i.y = floatBitsToInt(intBitsToFloat(PV0i.w) + -(intBitsToFloat(R127i.z)));
PS1i = R125i.y;
// 18
R2i.x = floatBitsToInt(intBitsToFloat(PV1i.w) + 0.0);
PV0i.x = R2i.x;
R6i.y = R125i.x;
R124i.z = floatBitsToInt(intBitsToFloat(PV1i.y) + 0.0);
PV0i.z = R124i.z;
R126i.w = floatBitsToInt(intBitsToFloat(PV1i.z) + 0.0);
PV0i.w = R126i.w;
R6i.x = R7i.x;
PS0i = R6i.x;
// 19
R0i.x = PV0i.x;
PV1i.y = floatBitsToInt(intBitsToFloat(PV0i.w) + -(intBitsToFloat(PV0i.z)));
R125i.z = floatBitsToInt(intBitsToFloat(PV0i.z) + -(intBitsToFloat(PV0i.w)));
R124i.w = floatBitsToInt(intBitsToFloat(PV0i.w) + -(intBitsToFloat(PV0i.z)));
R0i.w = R125i.x;
PS1i = R0i.w;
// 20
R123i.x = ((intBitsToFloat(PV1i.y) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV0i.x = R123i.x;
R5i.y = R2i.y;
R4i.z = floatBitsToInt(intBitsToFloat(R7i.x) + -(intBitsToFloat(R2i.y)));
R4i.w = R127i.z;
R8i.x = ((intBitsToFloat(R125i.y) >= 0.0)?(floatBitsToInt(1.0)):(0));
PS0i = R8i.x;
// 21
R3i.x = floatBitsToInt(-(intBitsToFloat(PV0i.x)) + intBitsToFloat(0x3f2aaaab));
R3i.y = floatBitsToInt(intBitsToFloat(PV0i.x) + -(1.0));
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.z),intBitsToFloat(PV0i.x)) + intBitsToFloat(R126i.w)));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.w),intBitsToFloat(PV0i.x)) + intBitsToFloat(R124i.z)));
PV1i.w = R123i.w;
R2i.z = floatBitsToInt(intBitsToFloat(R126i.z) + -(intBitsToFloat(R1i.w)));
PS1i = R2i.z;
// 22
R4i.x = PV1i.z;
R0i.y = PV1i.z;
R0i.z = floatBitsToInt(intBitsToFloat(R2i.x) + -(intBitsToFloat(PV1i.w)));
R3i.w = PV1i.w;
R4i.y = PV1i.w;
PS0i = R4i.y;
}
if( activeMaskStackC[1] == true ) {
// 0
backupReg0i = R0i.x;
PV0i.x = floatBitsToInt(intBitsToFloat(R3i.w) + -(intBitsToFloat(backupReg0i)));
R124i.y = ((intBitsToFloat(R0i.z) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV0i.y = R124i.y;
PV0i.z = floatBitsToInt(intBitsToFloat(R2i.x) + -(intBitsToFloat(R4i.y)));
PV0i.w = floatBitsToInt(intBitsToFloat(R0i.y) + -(intBitsToFloat(R4i.x)));
R125i.x = R3i.y;
PS0i = R125i.x;
// 1
backupReg0i = R0i.x;
R0i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(PV0i.y)) + intBitsToFloat(R4i.y)));
R125i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y)) + intBitsToFloat(backupReg0i)));
PV1i.y = R125i.y;
R126i.z = R3i.x;
R126i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(PV0i.y)) + intBitsToFloat(R4i.x)));
PV1i.w = R126i.w;
R125i.w = R2i.y;
PS1i = R125i.w;
// 2
PV0i.x = floatBitsToInt(min(intBitsToFloat(PV1i.w), intBitsToFloat(PV1i.y)));
PV0i.y = floatBitsToInt(intBitsToFloat(R3i.z) + -(intBitsToFloat(R5i.x)));
PV0i.z = floatBitsToInt(intBitsToFloat(R0i.w) + -(intBitsToFloat(R6i.y)));
R127i.w = ((intBitsToFloat(R4i.z) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV0i.w = R127i.w;
R124i.w = floatBitsToInt(intBitsToFloat(R5i.y) + -(intBitsToFloat(R6i.x)));
PS0i = R124i.w;
// 3
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(R8i.x)) + intBitsToFloat(R5i.x)));
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(PV0i.w)) + intBitsToFloat(R6i.y)));
R124i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.z),intBitsToFloat(R8i.x)) + intBitsToFloat(R1i.w)));
R1i.w = floatBitsToInt(intBitsToFloat(R0i.x) + -(intBitsToFloat(PV0i.x)));
PV1i.w = R1i.w;
R125i.z = floatBitsToInt(-(intBitsToFloat(R126i.w)) + intBitsToFloat(R125i.y));
PS1i = R125i.z;
// 4
backupReg0i = R125i.x;
R125i.x = floatBitsToInt(intBitsToFloat(R7i.x) + -(intBitsToFloat(R125i.w)));
R123i.y = floatBitsToInt((intBitsToFloat(PV1i.w) * intBitsToFloat(0x40c00000) + 0.0));
PV0i.y = R123i.y;
PV0i.z = floatBitsToInt(intBitsToFloat(backupReg0i) + -(intBitsToFloat(R126i.z)));
R126i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.w),intBitsToFloat(R127i.w)) + intBitsToFloat(R6i.x)));
R125i.y = floatBitsToInt(-(intBitsToFloat(R1i.y)) + intBitsToFloat(uf_remappedPS[9].y));
PS0i = R125i.y;
// 5
backupReg0i = R126i.z;
R124i.x = floatBitsToInt(-(intBitsToFloat(R1i.x)) + intBitsToFloat(uf_remappedPS[9].x));
R127i.y = floatBitsToInt(-(intBitsToFloat(R1i.z)) + intBitsToFloat(uf_remappedPS[9].z));
R126i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(R124i.y)) + intBitsToFloat(backupReg0i)));
PV1i.w = floatBitsToInt(intBitsToFloat(R2i.w) + -(intBitsToFloat(R4i.w)));
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PV0i.y));
// 6
R6i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.w),intBitsToFloat(R8i.x)) + intBitsToFloat(R4i.w)));
PV0i.x = R6i.x;
PV0i.y = floatBitsToInt(min(intBitsToFloat(R124i.z), intBitsToFloat(R127i.x)));
R0i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.x),intBitsToFloat(R127i.w)) + intBitsToFloat(R125i.w)));
PV0i.w = floatBitsToInt(intBitsToFloat(R125i.z) * intBitsToFloat(PS1i));
R124i.w = floatBitsToInt(intBitsToFloat(R5i.z) + -(1.0));
PS0i = R124i.w;
// 7
R125i.x = floatBitsToInt(intBitsToFloat(R126i.z) + intBitsToFloat(PV0i.w));
R124i.y = floatBitsToInt(intBitsToFloat(R5i.w) + -(1.0));
R126i.z = floatBitsToInt(min(intBitsToFloat(R126i.y), intBitsToFloat(R126i.w)));
R125i.w = floatBitsToInt(-(intBitsToFloat(R5i.w)) + intBitsToFloat(0x3f2aaaab));
R4i.z = floatBitsToInt(intBitsToFloat(PV0i.x) + -(intBitsToFloat(PV0i.y)));
PS1i = R4i.z;
// 8
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R124i.x),intBitsToFloat(R125i.y),intBitsToFloat(R127i.y),-0.0),vec4(intBitsToFloat(R124i.x),intBitsToFloat(R125i.y),intBitsToFloat(R127i.y),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R125i.z = floatBitsToInt(-(intBitsToFloat(R5i.z)) + intBitsToFloat(0x3f2aaaab));
PS0i = R125i.z;
// 9
backupReg0i = R125i.x;
backupReg0i = R125i.x;
R125i.x = R124i.y;
R5i.y = floatBitsToInt(intBitsToFloat(R0i.z) + -(intBitsToFloat(R126i.z)));
PV1i.y = R5i.y;
R126i.z = R125i.w;
R125i.w = floatBitsToInt(max(intBitsToFloat(backupReg0i), -(intBitsToFloat(backupReg0i))));
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.x));
R124i.y = floatBitsToInt(tempResultf);
PS1i = R124i.y;
// 10
backupReg0i = R124i.x;
R124i.x = floatBitsToInt((intBitsToFloat(R4i.z) * intBitsToFloat(0x40c00000) + 0.0));
R1i.y = R125i.z;
R125i.z = R124i.w;
R124i.w = floatBitsToInt((intBitsToFloat(PV1i.y) * intBitsToFloat(0x40c00000) + 0.0));
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PS1i)));
PS0i = R126i.x;
// 11
backupReg0i = R125i.y;
backupReg1i = R124i.z;
backupReg2i = R127i.x;
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.w),intBitsToFloat(uf_remappedPS[10].x)) + intBitsToFloat(uf_remappedPS[11].x)));
PV1i.x = R127i.x;
R125i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(R124i.y)));
R124i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), intBitsToFloat(R124i.y)));
PV1i.w = floatBitsToInt(intBitsToFloat(R125i.x) + -(intBitsToFloat(R126i.z)));
R127i.y = floatBitsToInt(-(intBitsToFloat(backupReg1i)) + intBitsToFloat(backupReg2i));
PS1i = R127i.y;
// 12
backupReg0i = R126i.y;
backupReg1i = R126i.z;
PV0i.x = floatBitsToInt(intBitsToFloat(R125i.z) + -(intBitsToFloat(R1i.y)));
R126i.y = floatBitsToInt(-(intBitsToFloat(backupReg0i)) + intBitsToFloat(R126i.w));
R126i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.w),intBitsToFloat(R8i.x)) + intBitsToFloat(backupReg1i)));
R126i.w = floatBitsToInt(intBitsToFloat(PV1i.x) + 1.0);
PS0i = floatBitsToInt(1.0 / intBitsToFloat(R124i.x));
// 13
backupReg0i = R127i.x;
backupReg0i = R127i.x;
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(R127i.w)) + intBitsToFloat(R1i.y)));
PV1i.y = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(0x3f2aaaab));
PV1i.z = floatBitsToInt(intBitsToFloat(R127i.y) * intBitsToFloat(PS0i));
PV1i.w = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(0x3eaaaaab));
PS1i = floatBitsToInt(1.0 / intBitsToFloat(R124i.w));
// 14
R125i.x = floatBitsToInt(intBitsToFloat(R126i.z) + intBitsToFloat(PV1i.z));
PV0i.y = floatBitsToInt(intBitsToFloat(R126i.y) * intBitsToFloat(PS1i));
R126i.z = floatBitsToInt(fract(intBitsToFloat(R126i.w)));
R126i.w = floatBitsToInt(fract(intBitsToFloat(PV1i.y)));
R124i.x = floatBitsToInt(fract(intBitsToFloat(PV1i.w)));
PS0i = R124i.x;
// 15
backupReg0i = R127i.x;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R126i.x),intBitsToFloat(R125i.y),intBitsToFloat(R124i.z),-0.0),vec4(intBitsToFloat(R126i.x),intBitsToFloat(R125i.y),intBitsToFloat(R124i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R127i.x = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(PV0i.y));
PS1i = R127i.x;
// 16
backupReg0i = R124i.x;
backupReg1i = R126i.z;
R124i.x = floatBitsToInt((intBitsToFloat(backupReg0i) * intBitsToFloat(0x40c00000) + -(intBitsToFloat(0x40400000))));
R126i.y = floatBitsToInt(intBitsToFloat(R0i.x) + 0.0);
R126i.z = floatBitsToInt((intBitsToFloat(R126i.w) * intBitsToFloat(0x40c00000) + -(intBitsToFloat(0x40400000))));
R126i.w = floatBitsToInt((intBitsToFloat(backupReg1i) * intBitsToFloat(0x40c00000) + -(intBitsToFloat(0x40400000))));
tempResultf = 1.0 / sqrt(intBitsToFloat(PV1i.x));
PS0i = floatBitsToInt(tempResultf);
// 17
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.x), intBitsToFloat(PS0i)));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.y), intBitsToFloat(PS0i)));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.z), intBitsToFloat(PS0i)));
R127i.w = floatBitsToInt(max(intBitsToFloat(R125i.x), -(intBitsToFloat(R125i.x))));
R125i.y = floatBitsToInt(max(intBitsToFloat(R127i.x), -(intBitsToFloat(R127i.x))));
PS1i = R125i.y;
// 18
R126i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R9i.x),intBitsToFloat(R7i.y),intBitsToFloat(R6i.z),-0.0),vec4(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.z),0.0)));
R126i.x = clampFI32(R126i.x);
PV0i.x = R126i.x;
PV0i.y = R126i.x;
PV0i.z = R126i.x;
PV0i.w = R126i.x;
R127i.x = floatBitsToInt(1.0 / intBitsToFloat(R126i.y));
PS0i = R127i.x;
// 19
backupReg0i = R125i.y;
PV1i.x = floatBitsToInt(max(intBitsToFloat(R126i.w), -(intBitsToFloat(R126i.w))));
R125i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.w),intBitsToFloat(uf_remappedPS[10].x)) + intBitsToFloat(uf_remappedPS[11].x)));
PV1i.z = floatBitsToInt(max(intBitsToFloat(R124i.x), -(intBitsToFloat(R124i.x))));
PV1i.w = floatBitsToInt(max(intBitsToFloat(R126i.z), -(intBitsToFloat(R126i.z))));
R126i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(uf_remappedPS[10].x)) + intBitsToFloat(uf_remappedPS[11].x)));
PS1i = R126i.z;
// 20
R8i.x = floatBitsToInt(intBitsToFloat(PV1i.w) + -(1.0));
R8i.x = clampFI32(R8i.x);
R126i.y = floatBitsToInt(intBitsToFloat(PV1i.x) + -(1.0));
R126i.y = clampFI32(R126i.y);
R124i.z = floatBitsToInt(intBitsToFloat(R1i.w) * intBitsToFloat(R127i.x));
R127i.w = floatBitsToInt(-(intBitsToFloat(R126i.x)) + 1.0);
R1i.w = floatBitsToInt(intBitsToFloat(PV1i.z) + -(1.0));
R1i.w = clampFI32(R1i.w);
PS0i = R1i.w;
// 21
R1i.x = floatBitsToInt(intBitsToFloat(R125i.y) + 1.0);
R1i.y = floatBitsToInt(intBitsToFloat(R126i.z) + 1.0);
R5i.z = floatBitsToInt(intBitsToFloat(R125i.y) + intBitsToFloat(0x3eaaaaab));
R5i.w = floatBitsToInt(intBitsToFloat(R125i.y) + intBitsToFloat(0x3f2aaaab));
R1i.z = floatBitsToInt(intBitsToFloat(R126i.z) + intBitsToFloat(0x3f2aaaab));
PS1i = R1i.z;
// 22
R6i.y = floatBitsToInt(intBitsToFloat(R126i.z) + intBitsToFloat(0x3eaaaaab));
R3i.z = floatBitsToInt(intBitsToFloat(R126i.y) + -(1.0));
R4i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.z),intBitsToFloat(uf_remappedPS[10].y)) + intBitsToFloat(uf_remappedPS[11].y)));
tempResultf = log2(intBitsToFloat(R127i.w));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
R2i.z = floatBitsToInt(tempResultf);
PS0i = R2i.z;
}
if( activeMaskStackC[1] == true ) {
// 0
R127i.x = floatBitsToInt(intBitsToFloat(R1i.w) + -(1.0));
R126i.y = floatBitsToInt(intBitsToFloat(R8i.x) + -(1.0));
R126i.z = floatBitsToInt(fract(intBitsToFloat(R1i.x)));
R127i.w = floatBitsToInt(fract(intBitsToFloat(R5i.w)));
R126i.w = floatBitsToInt(fract(intBitsToFloat(R5i.z)));
PS0i = R126i.w;
// 1
R126i.x = floatBitsToInt(fract(intBitsToFloat(R1i.y)));
R125i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.z), intBitsToFloat(uf_remappedPS[12].w)));
R124i.z = floatBitsToInt(fract(intBitsToFloat(R6i.y)));
R124i.w = floatBitsToInt(fract(intBitsToFloat(R1i.z)));
R1i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.z),intBitsToFloat(R4i.w)) + 1.0));
PS1i = R1i.w;
// 2
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(uf_remappedPS[13].x),intBitsToFloat(uf_remappedPS[13].y),intBitsToFloat(uf_remappedPS[13].z),-0.0),vec4(intBitsToFloat(R9i.x),intBitsToFloat(R7i.y),intBitsToFloat(R6i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R125i.w = tempi.x;
R125i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.y),intBitsToFloat(R4i.w)) + 1.0));
PS0i = R125i.z;
// 3
backupReg0i = R127i.x;
backupReg1i = R126i.z;
backupReg2i = R127i.w;
R127i.x = floatBitsToInt(intBitsToFloat(R6i.x) + 0.0);
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(R4i.w)) + 1.0));
R126i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.x),intBitsToFloat(uf_remappedPS[10].z)) + intBitsToFloat(uf_remappedPS[11].z)));
R127i.w = floatBitsToInt((intBitsToFloat(backupReg1i) * intBitsToFloat(0x40c00000) + -(intBitsToFloat(0x40400000))));
R127i.y = floatBitsToInt((intBitsToFloat(backupReg2i) * intBitsToFloat(0x40c00000) + -(intBitsToFloat(0x40400000))));
PS1i = R127i.y;
// 4
backupReg0i = R126i.x;
backupReg1i = R124i.z;
R126i.x = floatBitsToInt((intBitsToFloat(R126i.w) * intBitsToFloat(0x40c00000) + -(intBitsToFloat(0x40400000))));
R124i.y = floatBitsToInt((intBitsToFloat(backupReg0i) * intBitsToFloat(0x40c00000) + -(intBitsToFloat(0x40400000))));
R124i.z = floatBitsToInt((intBitsToFloat(R124i.w) * intBitsToFloat(0x40c00000) + -(intBitsToFloat(0x40400000))));
R126i.w = floatBitsToInt(intBitsToFloat(R0i.z) + 0.0);
R124i.w = floatBitsToInt((intBitsToFloat(backupReg1i) * intBitsToFloat(0x40c00000) + -(intBitsToFloat(0x40400000))));
PS0i = R124i.w;
// 5
R125i.x = floatBitsToInt(dot(vec4(intBitsToFloat(uf_remappedPS[14].x),intBitsToFloat(uf_remappedPS[14].y),intBitsToFloat(uf_remappedPS[14].z),-0.0),vec4(intBitsToFloat(R9i.x),intBitsToFloat(R7i.y),intBitsToFloat(R6i.z),0.0)));
PV1i.x = R125i.x;
PV1i.y = R125i.x;
PV1i.z = R125i.x;
PV1i.w = R125i.x;
R124i.x = floatBitsToInt(exp2(intBitsToFloat(R125i.y)));
PS1i = R124i.x;
// 6
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(uf_remappedPS[15].x),intBitsToFloat(uf_remappedPS[15].y),intBitsToFloat(uf_remappedPS[15].z),-0.0),vec4(intBitsToFloat(R9i.x),intBitsToFloat(R7i.y),intBitsToFloat(R6i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R125i.y = tempi.x;
R127i.z = floatBitsToInt(max(intBitsToFloat(R125i.w), 0.0));
PS0i = R127i.z;
// 7
backupReg0i = R126i.z;
backupReg1i = R126i.y;
backupReg0i = R126i.z;
backupReg2i = R127i.x;
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.z), intBitsToFloat(R1i.w)));
R126i.y = floatBitsToInt(max(intBitsToFloat(R127i.w), -(intBitsToFloat(R127i.w))));
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(backupReg1i)));
R125i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(R125i.z)));
R127i.w = floatBitsToInt(1.0 / intBitsToFloat(backupReg2i));
PS1i = R127i.w;
// 8
backupReg0i = R126i.x;
backupReg0i = R126i.x;
backupReg1i = R127i.y;
backupReg1i = R127i.y;
backupReg2i = R124i.z;
backupReg2i = R124i.z;
backupReg3i = R126i.w;
R126i.x = floatBitsToInt(max(intBitsToFloat(R124i.y), -(intBitsToFloat(R124i.y))));
R127i.y = floatBitsToInt(max(intBitsToFloat(backupReg0i), -(intBitsToFloat(backupReg0i))));
R124i.z = floatBitsToInt(max(intBitsToFloat(backupReg1i), -(intBitsToFloat(backupReg1i))));
R126i.w = floatBitsToInt(max(intBitsToFloat(backupReg2i), -(intBitsToFloat(backupReg2i))));
PS0i = floatBitsToInt(1.0 / intBitsToFloat(backupReg3i));
// 9
backupReg0i = R127i.x;
R127i.x = floatBitsToInt(max(intBitsToFloat(R124i.w), -(intBitsToFloat(R124i.w))));
R124i.y = floatBitsToInt(intBitsToFloat(R4i.z) * intBitsToFloat(R127i.w));
R125i.z = floatBitsToInt(intBitsToFloat(R5i.y) * intBitsToFloat(PS0i));
R124i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.x),intBitsToFloat(uf_remappedPS[12].x)) + intBitsToFloat(backupReg0i)));
R9i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.x),intBitsToFloat(uf_remappedPS[12].y)) + intBitsToFloat(R125i.w)));
PS1i = R9i.x;
// 10
backupReg0i = R127i.z;
backupReg0i = R127i.z;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R125i.x),intBitsToFloat(R125i.y),intBitsToFloat(backupReg0i),-0.0),vec4(intBitsToFloat(R125i.x),intBitsToFloat(R125i.y),intBitsToFloat(backupReg0i),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.z = tempi.x;
R4i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.x),intBitsToFloat(uf_remappedPS[12].z)) + intBitsToFloat(R126i.z)));
PS0i = R4i.w;
// 11
backupReg0i = R126i.x;
backupReg1i = R127i.y;
backupReg2i = R124i.z;
backupReg3i = R126i.w;
R126i.x = floatBitsToInt(intBitsToFloat(R126i.y) + -(1.0));
R126i.x = clampFI32(R126i.x);
R127i.y = floatBitsToInt(intBitsToFloat(backupReg0i) + -(1.0));
R127i.y = clampFI32(R127i.y);
R124i.z = floatBitsToInt(intBitsToFloat(backupReg1i) + -(1.0));
R124i.z = clampFI32(R124i.z);
R126i.w = floatBitsToInt(intBitsToFloat(backupReg2i) + -(1.0));
R126i.w = clampFI32(R126i.w);
R126i.z = floatBitsToInt(intBitsToFloat(backupReg3i) + -(1.0));
R126i.z = clampFI32(R126i.z);
PS1i = R126i.z;
// 12
R124i.x = floatBitsToInt(intBitsToFloat(R9i.x) + 1.0);
R126i.y = floatBitsToInt(intBitsToFloat(R127i.x) + -(1.0));
R126i.y = clampFI32(R126i.y);
R4i.z = floatBitsToInt(intBitsToFloat(R124i.w) + 1.0);
R1i.w = floatBitsToInt(intBitsToFloat(R4i.w) + 1.0);
tempResultf = 1.0 / sqrt(intBitsToFloat(R127i.z));
R5i.y = floatBitsToInt(tempResultf);
PS0i = R5i.y;
// 13
backupReg0i = R126i.x;
backupReg1i = R124i.y;
backupReg2i = R126i.w;
backupReg3i = R124i.z;
R126i.x = R6i.x;
R124i.y = floatBitsToInt(intBitsToFloat(backupReg0i) + -(1.0));
R124i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg1i),intBitsToFloat(uf_remappedPS[10].y)) + intBitsToFloat(uf_remappedPS[11].y)));
R126i.w = floatBitsToInt(intBitsToFloat(backupReg2i) + -(1.0));
R127i.w = floatBitsToInt(intBitsToFloat(backupReg3i) + -(1.0));
PS1i = R127i.w;
// 14
backupReg0i = R126i.z;
R127i.x = floatBitsToInt(intBitsToFloat(R127i.y) + -(1.0));
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.z),intBitsToFloat(uf_remappedPS[10].y)) + intBitsToFloat(uf_remappedPS[11].y)));
R126i.z = floatBitsToInt(intBitsToFloat(backupReg0i) + -(1.0));
R125i.w = R0i.z;
R125i.z = floatBitsToInt(intBitsToFloat(R126i.y) + -(1.0));
PS0i = R125i.z;
// 15
backupReg0i = R126i.x;
backupReg1i = R124i.y;
backupReg2i = R126i.w;
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.x), intBitsToFloat(R5i.y)));
R124i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(uf_remappedPS[10].z)) + intBitsToFloat(uf_remappedPS[11].z)));
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg1i),intBitsToFloat(R124i.z)) + 1.0));
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.y), intBitsToFloat(R5i.y)));
R125i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg2i),intBitsToFloat(R124i.z)) + 1.0));
PS1i = R125i.y;
// 16
backupReg0i = R127i.x;
backupReg1i = R127i.y;
backupReg2i = R126i.z;
backupReg1i = R127i.y;
backupReg1i = R127i.y;
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.w),intBitsToFloat(R124i.z)) + 1.0));
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.w),intBitsToFloat(uf_remappedPS[10].z)) + intBitsToFloat(uf_remappedPS[11].z)));
R126i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i)) + 1.0));
R127i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg2i),intBitsToFloat(backupReg1i)) + 1.0));
R125i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.z),intBitsToFloat(backupReg1i)) + 1.0));
PS0i = R125i.w;
// 17
R5i.x = floatBitsToInt((intBitsToFloat(R126i.x) * intBitsToFloat(0x3efefeff) + intBitsToFloat(0x3efefeff)));
R5i.y = floatBitsToInt((intBitsToFloat(R126i.w) * intBitsToFloat(0x3efefeff) + intBitsToFloat(0x3efefeff)));
R0i.w = 0;
R5i.w = 0x3f800000;
PS1i = R5i.w;
// 18
R1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.y), intBitsToFloat(R127i.z)));
R1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.y), intBitsToFloat(R125i.y)));
R1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.y), intBitsToFloat(R127i.x)));
R2i.w = 0;
R3i.w = 0x3f800000;
PS0i = R3i.w;
// 19
R2i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), intBitsToFloat(R126i.z)));
R2i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), intBitsToFloat(R127i.w)));
R2i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), intBitsToFloat(R125i.w)));
PS1i = floatBitsToInt(1.0 / intBitsToFloat(R4i.z));
// 20
R0i.x = floatBitsToInt(intBitsToFloat(R124i.w) * intBitsToFloat(PS1i));
PS0i = floatBitsToInt(1.0 / intBitsToFloat(R124i.x));
// 21
R0i.y = floatBitsToInt(intBitsToFloat(R9i.x) * intBitsToFloat(PS0i));
PS1i = floatBitsToInt(1.0 / intBitsToFloat(R1i.w));
// 22
R0i.z = floatBitsToInt(intBitsToFloat(R4i.w) * intBitsToFloat(PS1i));
tempResultf = log2(intBitsToFloat(uf_remappedPS[2].w));
PS0i = floatBitsToInt(tempResultf);
// 23
R5i.z = floatBitsToInt(intBitsToFloat(PS0i) * intBitsToFloat(0x3dcccccd));
// 24
R4i.xyz = ivec3(R2i.x,R2i.y,R2i.z);
R4i.w = R3i.w;
// 25
R3i.xyz = ivec3(R1i.x,R1i.y,R1i.z);
R3i.w = R2i.w;
// 26
R2i.xyz = ivec3(R5i.x,R5i.y,R5i.z);
R2i.w = R5i.w;
}
if( activeMaskStackC[1] == true ) {
// 0
R1i.xyz = ivec3(R0i.x,R0i.y,R0i.z);
R1i.w = R0i.w;
}
// export

// enemy death weird highlights fix - just changed the passPixelColor0 line below
// original was:
// passPixelColor0 = vec4(intBitsToFloat(R1i.x), intBitsToFloat(R1i.y), intBitsToFloat(R1i.z), intBitsToFloat(R1i.w));
passPixelColor0 = vec4(0.0f, 0.0f, 0.0f, 0.0f);
passPixelColor1 = vec4(intBitsToFloat(R2i.x), intBitsToFloat(R2i.y), intBitsToFloat(R2i.z), intBitsToFloat(R2i.w));
passPixelColor2 = vec4(intBitsToFloat(R3i.x), intBitsToFloat(R3i.y), intBitsToFloat(R3i.z), intBitsToFloat(R3i.w));
passPixelColor3 = vec4(intBitsToFloat(R4i.x), intBitsToFloat(R4i.y), intBitsToFloat(R4i.z), intBitsToFloat(R4i.w));
}
