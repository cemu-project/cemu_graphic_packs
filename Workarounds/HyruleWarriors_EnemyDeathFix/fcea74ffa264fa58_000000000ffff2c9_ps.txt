#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader fcea74ffa264fa58
uniform ivec4 uf_remappedPS[18];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x2178c000 res 512x512x1 dim 1 tm: 4 format 0033 compSel: 0 1 2 3 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 0 0 0 border: 0
layout(binding = 1) uniform samplerCubeArray textureUnitPS1;// Tex1 addr 0x1bb2c000 res 256x256x1 dim 3 tm: 4 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x6) Sampler1 ClampX/Y/Z: 2 2 2 border: 0
layout(binding = 2) uniform sampler2D textureUnitPS2;// Tex2 addr 0x2175f000 res 512x512x1 dim 1 tm: 4 format 0031 compSel: 0 1 2 3 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 0 0 0 border: 0
layout(binding = 3) uniform sampler2D textureUnitPS3;// Tex3 addr 0x21708000 res 512x512x1 dim 1 tm: 4 format 0433 compSel: 0 1 2 3 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x1) Sampler3 ClampX/Y/Z: 0 0 0 border: 0
layout(location = 0) in vec4 passParameterSem64;
layout(location = 1) in vec4 passParameterSem65;
layout(location = 2) in vec4 passParameterSem66;
layout(location = 3) in vec4 passParameterSem67;
layout(location = 0) out vec4 passPixelColor0;
layout(location = 1) out vec4 passPixelColor1;
layout(location = 2) out vec4 passPixelColor2;
layout(location = 3) out vec4 passPixelColor3;
uniform vec2 uf_fragCoordScale;
void redcCUBE(vec4 src0, vec4 src1, out vec3 stm, out int faceId)
{
// stm -> x .. s, y .. t, z .. MajorAxis*2.0
vec3 inputCoord = normalize(vec3(src1.y, src1.x, src0.x));
float rx = inputCoord.x;
float ry = inputCoord.y;
float rz = inputCoord.z;
if( abs(rx) > abs(ry) && abs(rx) > abs(rz) )
{
stm.z = rx*2.0;
stm.xy = vec2(ry,rz);	
if( rx >= 0.0 )
{
faceId = 0;
}
else
{
faceId = 1;
}
}
else if( abs(ry) > abs(rx) && abs(ry) > abs(rz) )
{
stm.z = ry*2.0;
stm.xy = vec2(rx,rz);	
if( ry >= 0.0 )
{
faceId = 2;
}
else
{
faceId = 3;
}
}
else //if( abs(rz) > abs(ry) && abs(rz) > abs(rx) )
{
stm.z = rz*2.0;
stm.xy = vec2(rx,ry);	
if( rz >= 0.0 )
{
faceId = 4;
}
else
{
faceId = 5;
}
}
}
vec3 redcCUBEReverse(vec2 st, int faceId)
{
st.yx = st.xy;
vec3 v;
float majorAxis = 1.0;
if( faceId == 0 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = 1.0;
}
else if( faceId == 1 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = -1.0;
}
else if( faceId == 2 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = 1.0;
}
else if( faceId == 3 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = -1.0;
}
else if( faceId == 4 )
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = 1.0;
}
else
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = -1.0;
}
return v;
}
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R122i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R124i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
bool activeMaskStack[2];
bool activeMaskStackC[3];
activeMaskStack[0] = false;
activeMaskStackC[0] = false;
activeMaskStackC[1] = false;
activeMaskStack[0] = true;
activeMaskStackC[0] = true;
activeMaskStackC[1] = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
float cubeMapArrayIndex1 = 0.0;
R0i = floatBitsToInt(passParameterSem64);
R1i = floatBitsToInt(passParameterSem65);
R2i = floatBitsToInt(passParameterSem66);
R3i = floatBitsToInt(passParameterSem67);
if( activeMaskStackC[1] == true ) {
R5i.xyzw = floatBitsToInt(texture(textureUnitPS3, intBitsToFloat(R0i.xy)).xyzw);
}
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
R1i.w = floatBitsToInt(intBitsToFloat(R5i.w) + -(intBitsToFloat(0x3ec8c8cd)));
// 1
predResult = (0.0 >= intBitsToFloat(R1i.w));
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
if(  (0 == 0)) discard;
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
R4i.xyz = floatBitsToInt(texture(textureUnitPS2, intBitsToFloat(R0i.wz)).xyz);
R0i.xyz = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R0i.xy)).xyz);
}
if( activeMaskStackC[1] == true ) {
// 0
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R2i.x),intBitsToFloat(R2i.y),intBitsToFloat(R2i.z),-0.0),vec4(intBitsToFloat(R2i.x),intBitsToFloat(R2i.y),intBitsToFloat(R2i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R126i.x = floatBitsToInt(-(intBitsToFloat(R1i.x)) + intBitsToFloat(uf_remappedPS[0].x));
PS0i = R126i.x;
// 1
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),-0.0),vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.x));
PS1i = floatBitsToInt(tempResultf);
// 2
R124i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.z), intBitsToFloat(PS1i)));
R125i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.y), intBitsToFloat(PS1i)));
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.x), intBitsToFloat(PS1i)));
R127i.w = floatBitsToInt(-(intBitsToFloat(R1i.y)) + intBitsToFloat(uf_remappedPS[0].y));
tempResultf = 1.0 / sqrt(intBitsToFloat(PV1i.x));
PS0i = floatBitsToInt(tempResultf);
// 3
R125i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.y), intBitsToFloat(PS0i)));
PV1i.x = R125i.x;
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.x), intBitsToFloat(PS0i)));
PV1i.y = R126i.y;
R127i.z = floatBitsToInt(-(intBitsToFloat(R1i.z)) + intBitsToFloat(uf_remappedPS[0].z));
R125i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(PS0i)));
PV1i.w = R125i.w;
R126i.w = floatBitsToInt((intBitsToFloat(R4i.x) * intBitsToFloat(0x40008102) + -(intBitsToFloat(0x3f810204))));
PS1i = R126i.w;
// 4
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.y), intBitsToFloat(PV1i.y)));
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.z), intBitsToFloat(PV1i.w)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.x), intBitsToFloat(PV1i.x)));
R124i.w = floatBitsToInt((intBitsToFloat(R4i.y) * intBitsToFloat(0x40008102) + -(intBitsToFloat(0x3f810204))));
R4i.x = floatBitsToInt((intBitsToFloat(R4i.z) * intBitsToFloat(0x40008102) + -(intBitsToFloat(0x3f810204))));
PS0i = R4i.x;
// 5
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R126i.x),intBitsToFloat(R127i.w),intBitsToFloat(R127i.z),-0.0),vec4(intBitsToFloat(R126i.x),intBitsToFloat(R127i.w),intBitsToFloat(R127i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R122i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R125i.y)),intBitsToFloat(R125i.w)) + intBitsToFloat(PV0i.z)));
PS1i = R122i.x;
// 6
backupReg0i = R127i.x;
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.w), intBitsToFloat(PS1i)));
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R126i.z)),intBitsToFloat(R125i.x)) + intBitsToFloat(backupReg0i)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R124i.x)),intBitsToFloat(R126i.y)) + intBitsToFloat(R127i.y)));
PV0i.z = R123i.z;
R1i.w = floatBitsToInt(-(intBitsToFloat(uf_remappedPS[1].y)) + 1.0);
tempResultf = 1.0 / sqrt(intBitsToFloat(PV1i.x));
PS0i = floatBitsToInt(tempResultf);
// 7
R3i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.x), intBitsToFloat(PS0i)));
R3i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.w), intBitsToFloat(PS0i)));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.w), intBitsToFloat(PV0i.y)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.w), intBitsToFloat(PV0i.z)));
R3i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(PS0i)));
PS1i = R3i.z;
// 8
R1i.x = floatBitsToInt(-(intBitsToFloat(uf_remappedPS[1].z)) + 1.0);
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.z), intBitsToFloat(R126i.w)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(R126i.w)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(R126i.w)));
R4i.z = floatBitsToInt(-(intBitsToFloat(uf_remappedPS[1].x)) + 1.0);
PS0i = R4i.z;
// 9
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.y),intBitsToFloat(R124i.w)) + intBitsToFloat(PV0i.z)));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.w),intBitsToFloat(uf_remappedPS[2].w)) + intBitsToFloat(uf_remappedPS[2].x)));
R123i.y = clampFI32(R123i.y);
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.x),intBitsToFloat(R124i.w)) + intBitsToFloat(PV0i.w)));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.w),intBitsToFloat(R124i.w)) + intBitsToFloat(PV0i.y)));
PV1i.w = R123i.w;
R2i.w = floatBitsToInt(intBitsToFloat(R5i.y) * 1.0);
PS1i = R2i.w;
// 10
backupReg0i = R5i.z;
R6i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.z),intBitsToFloat(R4i.x)) + intBitsToFloat(PV1i.x)));
PV0i.x = R6i.x;
R5i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.y),intBitsToFloat(R4i.x)) + intBitsToFloat(PV1i.z)));
PV0i.y = R5i.y;
R5i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.x),intBitsToFloat(R4i.x)) + intBitsToFloat(PV1i.w)));
PV0i.z = R5i.z;
R4i.w = floatBitsToInt(intBitsToFloat(backupReg0i) * 1.0);
R125i.w = floatBitsToInt(intBitsToFloat(PV1i.y) * 1.0);
PS0i = R125i.w;
// 11
backupReg0i = R0i.y;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),-0.0),vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),0.0)));
tempi.x = floatBitsToInt(intBitsToFloat(tempi.x) * 2.0);
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R4i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PS0i)));
PS1i = R4i.y;
// 12
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R6i.x),intBitsToFloat(PV1i.x)) + -(intBitsToFloat(R3i.x))));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.y),intBitsToFloat(PV1i.x)) + -(intBitsToFloat(R3i.y))));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.z),intBitsToFloat(PV1i.x)) + -(intBitsToFloat(R3i.z))));
PV0i.z = R123i.z;
R5i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.z), intBitsToFloat(R125i.w)));
R2i.x = floatBitsToInt(intBitsToFloat(R5i.x) * 1.0);
PS0i = R2i.x;
// 13
backupReg0i = R0i.x;
redcCUBE(vec4(intBitsToFloat(PV0i.z),intBitsToFloat(PV0i.z),intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y)),vec4(intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.z),intBitsToFloat(PV0i.z)),cubeMapSTM,cubeMapFaceId);
R0i.x = floatBitsToInt(cubeMapSTM.x);
R0i.y = floatBitsToInt(cubeMapSTM.y);
R0i.z = floatBitsToInt(cubeMapSTM.z);
R0i.w = cubeMapFaceId;
PV1i.x = R0i.x;
PV1i.y = R0i.y;
PV1i.z = R0i.z;
PV1i.w = R0i.w;
R2i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(R125i.w)));
PS1i = R2i.z;
// 14
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),-0.0),vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
PS0i = floatBitsToInt(1.0 / abs(intBitsToFloat(PV1i.z)));
// 15
backupReg0i = R0i.x;
backupReg1i = R0i.y;
R0i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(PS0i)) + 1.5));
R0i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg1i),intBitsToFloat(PS0i)) + 1.5));
R1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.w), intBitsToFloat(uf_remappedPS[3].y)));
R3i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.w), intBitsToFloat(uf_remappedPS[3].z)));
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.x));
R4i.x = floatBitsToInt(tempResultf);
PS1i = R4i.x;
}
if( activeMaskStackC[1] == true ) {
R0i.xyzw = floatBitsToInt(texture(textureUnitPS1, vec4(redcCUBEReverse(intBitsToFloat(R0i.yx),R0i.w),cubeMapArrayIndex1)).xyzw);
}
if( activeMaskStackC[1] == true ) {
// 0
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.x), intBitsToFloat(R4i.x)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.y), intBitsToFloat(R4i.x)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(R4i.x)));
R125i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.w), intBitsToFloat(uf_remappedPS[4].w)));
PV0i.w = R125i.w;
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.y), intBitsToFloat(uf_remappedPS[5].y)));
PS0i = R127i.z;
// 1
backupReg0i = R0i.y;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R6i.x),intBitsToFloat(R5i.y),intBitsToFloat(R5i.z),-0.0),vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R6i.w = tempi.x;
R3i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PV0i.w)));
PS1i = R3i.z;
// 2
R125i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.w), intBitsToFloat(uf_remappedPS[5].z)));
R124i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.z), intBitsToFloat(R125i.w)));
PV0i.z = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + 1.0);
PV0i.z = clampFI32(PV0i.z);
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.x), intBitsToFloat(R125i.w)));
R3i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.x), intBitsToFloat(uf_remappedPS[3].x)));
PS0i = R3i.y;
// 3
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(uf_remappedPS[6].x),intBitsToFloat(uf_remappedPS[6].y),intBitsToFloat(uf_remappedPS[6].z),-0.0),vec4(intBitsToFloat(R6i.x),intBitsToFloat(R5i.y),intBitsToFloat(R5i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R125i.y = tempi.x;
tempResultf = log2(intBitsToFloat(PV0i.z));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1i = floatBitsToInt(tempResultf);
// 4
PV0i.x = floatBitsToInt(intBitsToFloat(PS1i) * intBitsToFloat(0x40a00000));
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),intBitsToFloat(uf_remappedPS[7].x)) + intBitsToFloat(uf_remappedPS[8].x)));
R126i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),intBitsToFloat(uf_remappedPS[7].y)) + intBitsToFloat(uf_remappedPS[8].y)));
PV0i.w = floatBitsToInt(intBitsToFloat(R1i.z) + -(intBitsToFloat(R3i.w)));
R125i.w = floatBitsToInt(intBitsToFloat(R127i.z) + -(intBitsToFloat(R125i.x)));
PS0i = R125i.w;
// 5
backupReg0i = R125i.y;
R3i.x = ((intBitsToFloat(PV0i.w) >= 0.0)?(floatBitsToInt(1.0)):(0));
R125i.y = floatBitsToInt(intBitsToFloat(R3i.w) + -(intBitsToFloat(R1i.z)));
R125i.z = floatBitsToInt(intBitsToFloat(R1i.z) + -(intBitsToFloat(R3i.w)));
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(uf_remappedPS[7].z)) + intBitsToFloat(uf_remappedPS[8].z)));
PV1i.w = R123i.w;
R124i.w = floatBitsToInt(exp2(intBitsToFloat(PV0i.x)));
PS1i = R124i.w;
// 6
backupReg0i = R126i.y;
R124i.x = floatBitsToInt(intBitsToFloat(R126i.z) + intBitsToFloat(uf_remappedPS[9].y));
R126i.y = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(uf_remappedPS[9].x));
R126i.z = floatBitsToInt(intBitsToFloat(PV1i.w) + intBitsToFloat(uf_remappedPS[9].z));
R0i.w = ((intBitsToFloat(R125i.w) >= 0.0)?(floatBitsToInt(1.0)):(0));
R127i.y = floatBitsToInt(intBitsToFloat(R127i.z) + -(intBitsToFloat(R125i.x)));
PS0i = R127i.y;
// 7
backupReg0i = R124i.w;
backupReg1i = R125i.y;
PV1i.x = floatBitsToInt(intBitsToFloat(R125i.x) + -(intBitsToFloat(R127i.z)));
R125i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.x),intBitsToFloat(R124i.w)) + intBitsToFloat(uf_remappedPS[1].z)));
R124i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.w),intBitsToFloat(R124i.w)) + intBitsToFloat(uf_remappedPS[1].y)));
R124i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.z),intBitsToFloat(backupReg0i)) + intBitsToFloat(uf_remappedPS[1].x)));
R0i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg1i),intBitsToFloat(R3i.x)) + intBitsToFloat(R1i.z)));
PS1i = R0i.y;
// 8
backupReg0i = R124i.x;
backupReg1i = R126i.y;
R124i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.z),intBitsToFloat(uf_remappedPS[10].z)) + 0.0));
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(uf_remappedPS[10].y)) + 0.0));
R126i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),intBitsToFloat(R0i.w)) + intBitsToFloat(R127i.z)));
R125i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg1i),intBitsToFloat(uf_remappedPS[10].x)) + 0.0));
R1i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.z),intBitsToFloat(R3i.x)) + intBitsToFloat(R3i.w)));
PS0i = R1i.z;
// 9
backupReg0i = R125i.x;
backupReg1i = R125i.y;
R125i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.w), intBitsToFloat(uf_remappedPS[4].x)));
R125i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.y),intBitsToFloat(R0i.w)) + intBitsToFloat(backupReg0i)));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg1i), intBitsToFloat(uf_remappedPS[4].z)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.z), intBitsToFloat(uf_remappedPS[4].y)));
R124i.w = R0i.y;
PS1i = R124i.w;
// 10
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.w),intBitsToFloat(R3i.z)) + 0.0));
PV0i.x = R123i.x;
PV0i.y = floatBitsToInt(intBitsToFloat(R124i.x) + intBitsToFloat(uf_remappedPS[11].z));
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),intBitsToFloat(R124i.y)) + 0.0));
PV0i.z = R123i.z;
PV0i.w = floatBitsToInt(intBitsToFloat(R126i.y) + intBitsToFloat(uf_remappedPS[11].y));
R124i.z = floatBitsToInt(intBitsToFloat(R125i.w) + intBitsToFloat(uf_remappedPS[11].x));
PS0i = R124i.z;
// 11
PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.w) + 0.0);
R126i.y = floatBitsToInt(intBitsToFloat(PV0i.x) + 0.0);
R127i.z = floatBitsToInt(intBitsToFloat(PV0i.z) + 0.0);
PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.y) + 0.0);
R122i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.x),intBitsToFloat(R126i.w)) + 0.0));
PS1i = R122i.x;
// 12
PV0i.x = floatBitsToInt(intBitsToFloat(R124i.z) + 0.0);
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.w),intBitsToFloat(PV1i.w)) + 0.0));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.w),intBitsToFloat(PV1i.x)) + 0.0));
PV0i.z = R123i.z;
R126i.w = floatBitsToInt(intBitsToFloat(PS1i) + 0.0);
R1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.z), intBitsToFloat(uf_remappedPS[5].x)));
PS0i = R1i.x;
// 13
backupReg0i = R127i.z;
backupReg1i = R4i.y;
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.x),intBitsToFloat(PV0i.x)) + 0.0));
PV1i.x = R123i.x;
R4i.y = R3i.y;
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(R5i.w)) + intBitsToFloat(PV0i.y)));
PV1i.z = R127i.z;
R125i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.y),intBitsToFloat(backupReg1i)) + intBitsToFloat(PV0i.z)));
PV1i.w = R125i.w;
R3i.z = R1i.z;
PS1i = R3i.z;
// 14
backupReg0i = R0i.y;
R125i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.w),intBitsToFloat(R2i.z)) + intBitsToFloat(PV1i.x)));
PV0i.x = R125i.x;
PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.w) + -(intBitsToFloat(PV1i.z)));
R124i.z = floatBitsToInt(intBitsToFloat(PV1i.z) + -(intBitsToFloat(PV1i.w)));
R126i.w = floatBitsToInt(intBitsToFloat(PV1i.w) + -(intBitsToFloat(PV1i.z)));
R126i.x = backupReg0i;
PS0i = R126i.x;
// 15
R123i.x = ((intBitsToFloat(PV0i.y) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV1i.x = R123i.x;
R127i.y = floatBitsToInt(intBitsToFloat(R3i.y) + -(intBitsToFloat(R1i.z)));
R125i.z = PV0i.x;
R127i.w = R126i.z;
R2i.x = R1i.x;
PS1i = R2i.x;
// 16
R127i.x = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + intBitsToFloat(0x3f2aaaab));
R124i.y = floatBitsToInt(intBitsToFloat(PV1i.x) + -(1.0));
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.z),intBitsToFloat(PV1i.x)) + intBitsToFloat(R125i.w)));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.w),intBitsToFloat(PV1i.x)) + intBitsToFloat(R127i.z)));
PV0i.w = R123i.w;
R126i.w = R126i.z;
PS0i = R126i.w;
// 17
R124i.x = PV0i.z;
PV1i.x = R124i.x;
PV1i.y = PV0i.z;
PV1i.z = floatBitsToInt(intBitsToFloat(R125i.x) + -(intBitsToFloat(PV0i.w)));
PV1i.w = PV0i.w;
R126i.y = PV0i.w;
PS1i = R126i.y;
// 18
PV0i.x = floatBitsToInt(intBitsToFloat(PV1i.w) + -(intBitsToFloat(R125i.z)));
R1i.y = ((intBitsToFloat(PV1i.z) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV0i.y = R1i.y;
PV0i.z = floatBitsToInt(intBitsToFloat(R125i.x) + -(intBitsToFloat(PS1i)));
PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.y) + -(intBitsToFloat(PV1i.x)));
R0i.y = R125i.y;
PS0i = R0i.y;
// 19
R5i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(PV0i.y)) + intBitsToFloat(R126i.y)));
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y)) + intBitsToFloat(R125i.z)));
PV1i.y = R126i.y;
R125i.z = floatBitsToInt(intBitsToFloat(R1i.x) + -(intBitsToFloat(R125i.y)));
PV1i.z = R125i.z;
R125i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(PV0i.y)) + intBitsToFloat(R124i.x)));
PV1i.w = R125i.w;
R5i.w = R127i.x;
PS1i = R5i.w;
// 20
backupReg0i = R127i.y;
PV0i.x = floatBitsToInt(min(intBitsToFloat(PV1i.w), intBitsToFloat(PV1i.y)));
R127i.y = R124i.y;
R4i.w = ((intBitsToFloat(backupReg0i) >= 0.0)?(floatBitsToInt(1.0)):(0));
R127i.z = floatBitsToInt(intBitsToFloat(R126i.x) + -(intBitsToFloat(R124i.w)));
PS0i = R127i.z;
// 21
PV1i.x = floatBitsToInt(intBitsToFloat(R3i.z) + -(intBitsToFloat(R4i.y)));
R2i.y = R125i.y;
R4i.z = ((intBitsToFloat(R125i.z) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV1i.z = R4i.z;
R3i.w = floatBitsToInt(intBitsToFloat(R5i.x) + -(intBitsToFloat(PV0i.x)));
PV1i.w = R3i.w;
PS1i = floatBitsToInt(intBitsToFloat(R126i.w) + -(intBitsToFloat(R127i.w)));
// 22
R4i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),intBitsToFloat(R4i.w)) + intBitsToFloat(R4i.y)));
R123i.y = floatBitsToInt((intBitsToFloat(PV1i.w) * intBitsToFloat(0x40c00000) + 0.0));
PV0i.y = R123i.y;
R2i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.z),intBitsToFloat(R4i.w)) + intBitsToFloat(R124i.w)));
PV0i.w = floatBitsToInt(intBitsToFloat(R0i.y) + -(intBitsToFloat(R2i.x)));
R0i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PS1i),intBitsToFloat(PV1i.z)) + intBitsToFloat(R127i.w)));
PS0i = R0i.y;
// 23
backupReg0i = R3i.y;
backupReg1i = R2i.x;
R2i.x = floatBitsToInt(-(intBitsToFloat(R125i.w)) + intBitsToFloat(R126i.y));
R3i.y = floatBitsToInt(intBitsToFloat(backupReg0i) + -(intBitsToFloat(R1i.z)));
R3i.z = floatBitsToInt(intBitsToFloat(R127i.y) + -(intBitsToFloat(R5i.w)));
R2i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(R4i.z)) + intBitsToFloat(backupReg1i)));
R0i.x = floatBitsToInt(1.0 / intBitsToFloat(PV0i.y));
PS1i = R0i.x;
}
if( activeMaskStackC[1] == true ) {
// 0
backupReg0i = R0i.w;
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.z),intBitsToFloat(R1i.y)) + intBitsToFloat(R5i.w)));
PV0i.x = R123i.x;
R1i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.y),intBitsToFloat(R4i.w)) + intBitsToFloat(R1i.z)));
PV0i.z = floatBitsToInt(intBitsToFloat(R1i.x) + -(intBitsToFloat(R2i.y)));
PV0i.w = floatBitsToInt(intBitsToFloat(R2i.x) * intBitsToFloat(R0i.x));
R125i.w = floatBitsToInt(intBitsToFloat(backupReg0i) + -(1.0));
PS0i = R125i.w;
// 1
PV1i.x = floatBitsToInt(min(intBitsToFloat(R0i.y), intBitsToFloat(R2i.w)));
PV1i.y = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(PV0i.w));
R3i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(R4i.z)) + intBitsToFloat(R2i.y)));
PV1i.z = R3i.z;
PV1i.w = floatBitsToInt(min(intBitsToFloat(R2i.z), intBitsToFloat(R4i.x)));
R126i.x = floatBitsToInt(intBitsToFloat(R3i.x) + -(1.0));
PS1i = R126i.x;
// 2
PV0i.x = floatBitsToInt(-(intBitsToFloat(R0i.w)) + intBitsToFloat(0x3f2aaaab));
R2i.y = floatBitsToInt(intBitsToFloat(PV1i.z) + -(intBitsToFloat(PV1i.x)));
R1i.z = floatBitsToInt(intBitsToFloat(R1i.y) + -(intBitsToFloat(PV1i.w)));
PV0i.z = R1i.z;
PV0i.w = floatBitsToInt(-(intBitsToFloat(R3i.x)) + intBitsToFloat(0x3f2aaaab));
R127i.w = floatBitsToInt(max(intBitsToFloat(PV1i.y), -(intBitsToFloat(PV1i.y))));
PS0i = R127i.w;
// 3
R123i.x = floatBitsToInt((intBitsToFloat(PV0i.z) * intBitsToFloat(0x40c00000) + 0.0));
PV1i.x = R123i.x;
R127i.y = PV0i.x;
R125i.z = PV0i.w;
PV1i.z = R125i.z;
PV1i.w = R126i.x;
R127i.z = R125i.w;
PS1i = R127i.z;
// 4
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.w),intBitsToFloat(uf_remappedPS[12].x)) + intBitsToFloat(uf_remappedPS[13].x)));
PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.w) + -(intBitsToFloat(PV1i.z)));
PV0i.z = floatBitsToInt(-(intBitsToFloat(R2i.z)) + intBitsToFloat(R4i.x));
R123i.w = floatBitsToInt((intBitsToFloat(R2i.y) * intBitsToFloat(0x40c00000) + 0.0));
PV0i.w = R123i.w;
PS0i = floatBitsToInt(1.0 / intBitsToFloat(PV1i.x));
// 5
backupReg0i = R0i.y;
PV1i.x = floatBitsToInt(intBitsToFloat(R127i.z) + -(intBitsToFloat(R127i.y)));
PV1i.y = floatBitsToInt(-(intBitsToFloat(backupReg0i)) + intBitsToFloat(R2i.w));
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(R4i.w)) + intBitsToFloat(R125i.z)));
R127i.w = floatBitsToInt(intBitsToFloat(PV0i.z) * intBitsToFloat(PS0i));
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PV0i.w));
// 6
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),intBitsToFloat(R4i.z)) + intBitsToFloat(R127i.y)));
PV0i.x = R123i.x;
PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.y) * intBitsToFloat(PS1i));
PV0i.z = floatBitsToInt(intBitsToFloat(R126i.x) + 1.0);
PV0i.w = floatBitsToInt(intBitsToFloat(R126i.x) + intBitsToFloat(0x3f2aaaab));
PS0i = floatBitsToInt(intBitsToFloat(R126i.x) + intBitsToFloat(0x3eaaaaab));
// 7
R126i.x = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(PV0i.y));
PV1i.y = floatBitsToInt(intBitsToFloat(R127i.z) + intBitsToFloat(R127i.w));
PV1i.z = floatBitsToInt(fract(intBitsToFloat(PV0i.z)));
PV1i.w = floatBitsToInt(fract(intBitsToFloat(PV0i.w)));
PS1i = floatBitsToInt(fract(intBitsToFloat(PS0i)));
// 8
R127i.x = floatBitsToInt((intBitsToFloat(PS1i) * intBitsToFloat(0x40c00000) + -(intBitsToFloat(0x40400000))));
PV0i.y = floatBitsToInt(intBitsToFloat(R5i.x) + 0.0);
R123i.z = floatBitsToInt((intBitsToFloat(PV1i.w) * intBitsToFloat(0x40c00000) + -(intBitsToFloat(0x40400000))));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((intBitsToFloat(PV1i.z) * intBitsToFloat(0x40c00000) + -(intBitsToFloat(0x40400000))));
PV0i.w = R123i.w;
R127i.z = floatBitsToInt(max(intBitsToFloat(PV1i.y), -(intBitsToFloat(PV1i.y))));
PS0i = R127i.z;
// 9
PV1i.x = R6i.w;
PV1i.x = clampFI32(PV1i.x);
PV1i.y = floatBitsToInt(max(intBitsToFloat(R126i.x), -(intBitsToFloat(R126i.x))));
R125i.z = floatBitsToInt(max(intBitsToFloat(PV0i.w), -(intBitsToFloat(PV0i.w))));
R127i.w = floatBitsToInt(max(intBitsToFloat(PV0i.z), -(intBitsToFloat(PV0i.z))));
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PV0i.y));
// 10
backupReg0i = R127i.x;
backupReg0i = R127i.x;
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.y),intBitsToFloat(uf_remappedPS[12].x)) + intBitsToFloat(uf_remappedPS[13].x)));
R127i.y = floatBitsToInt(intBitsToFloat(R3i.w) * intBitsToFloat(PS1i));
PV0i.z = floatBitsToInt(max(intBitsToFloat(backupReg0i), -(intBitsToFloat(backupReg0i))));
R125i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.z),intBitsToFloat(uf_remappedPS[12].x)) + intBitsToFloat(uf_remappedPS[13].x)));
PV0i.w = R125i.w;
R126i.x = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + 1.0);
PS0i = R126i.x;
// 11
R124i.x = floatBitsToInt(intBitsToFloat(R127i.w) + -(1.0));
R124i.x = clampFI32(R124i.x);
R126i.y = floatBitsToInt(intBitsToFloat(R125i.z) + -(1.0));
R126i.y = clampFI32(R126i.y);
R125i.z = floatBitsToInt(intBitsToFloat(PV0i.w) + 1.0);
R127i.w = floatBitsToInt(intBitsToFloat(PV0i.z) + -(1.0));
R127i.w = clampFI32(R127i.w);
R124i.w = floatBitsToInt(intBitsToFloat(PV0i.w) + intBitsToFloat(0x3f2aaaab));
PS1i = R124i.w;
// 12
backupReg0i = R127i.x;
backupReg0i = R127i.x;
backupReg0i = R127i.x;
R127i.x = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(0x3f2aaaab));
R125i.y = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(0x3eaaaaab));
R127i.z = floatBitsToInt(intBitsToFloat(R125i.w) + intBitsToFloat(0x3eaaaaab));
R125i.w = floatBitsToInt(intBitsToFloat(backupReg0i) + 1.0);
tempResultf = log2(intBitsToFloat(R126i.x));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
R126i.w = floatBitsToInt(tempResultf);
PS0i = R126i.w;
// 13
backupReg0i = R124i.x;
backupReg1i = R127i.y;
backupReg2i = R127i.w;
R124i.x = floatBitsToInt(intBitsToFloat(backupReg0i) + -(1.0));
R127i.y = R5i.x;
R126i.z = floatBitsToInt(intBitsToFloat(R126i.y) + -(1.0));
R127i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg1i),intBitsToFloat(uf_remappedPS[12].y)) + intBitsToFloat(uf_remappedPS[13].y)));
R126i.x = floatBitsToInt(intBitsToFloat(backupReg2i) + -(1.0));
PS1i = R126i.x;
// 14
backupReg0i = R127i.z;
backupReg1i = R127i.x;
R127i.x = floatBitsToInt(fract(intBitsToFloat(R124i.w)));
R126i.y = floatBitsToInt(fract(intBitsToFloat(R125i.z)));
R127i.z = floatBitsToInt(fract(intBitsToFloat(R125i.w)));
R125i.w = floatBitsToInt(fract(intBitsToFloat(backupReg0i)));
R124i.w = floatBitsToInt(fract(intBitsToFloat(backupReg1i)));
PS0i = R124i.w;
// 15
backupReg0i = R125i.y;
backupReg1i = R126i.z;
backupReg2i = R126i.x;
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.w), intBitsToFloat(uf_remappedPS[14].w)));
R125i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.x),intBitsToFloat(R127i.w)) + 1.0));
R126i.z = floatBitsToInt(fract(intBitsToFloat(backupReg0i)));
R126i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg1i),intBitsToFloat(R127i.w)) + 1.0));
R124i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg2i),intBitsToFloat(R127i.w)) + 1.0));
PS1i = R124i.y;
// 16
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(uf_remappedPS[15].x),intBitsToFloat(uf_remappedPS[15].y),intBitsToFloat(uf_remappedPS[15].z),-0.0),vec4(intBitsToFloat(R6i.x),intBitsToFloat(R5i.y),intBitsToFloat(R5i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.w = tempi.x;
R124i.x = floatBitsToInt(intBitsToFloat(R1i.y) + 0.0);
PS0i = R124i.x;
// 17
backupReg0i = R127i.x;
backupReg1i = R127i.y;
backupReg2i = R125i.w;
R127i.x = floatBitsToInt((intBitsToFloat(R126i.y) * intBitsToFloat(0x40c00000) + -(intBitsToFloat(0x40400000))));
R127i.y = floatBitsToInt((intBitsToFloat(backupReg0i) * intBitsToFloat(0x40c00000) + -(intBitsToFloat(0x40400000))));
R125i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg1i),intBitsToFloat(uf_remappedPS[12].z)) + intBitsToFloat(uf_remappedPS[13].z)));
R125i.w = floatBitsToInt((intBitsToFloat(backupReg2i) * intBitsToFloat(0x40c00000) + -(intBitsToFloat(0x40400000))));
R3i.w = floatBitsToInt(intBitsToFloat(R3i.z) + 0.0);
PS1i = R3i.w;
// 18
R5i.x = floatBitsToInt((intBitsToFloat(R124i.w) * intBitsToFloat(0x40c00000) + -(intBitsToFloat(0x40400000))));
R0i.y = floatBitsToInt((intBitsToFloat(R127i.z) * intBitsToFloat(0x40c00000) + -(intBitsToFloat(0x40400000))));
R4i.z = floatBitsToInt(max(intBitsToFloat(R127i.w), 0.0));
R6i.w = floatBitsToInt((intBitsToFloat(R126i.z) * intBitsToFloat(0x40c00000) + -(intBitsToFloat(0x40400000))));
R0i.w = floatBitsToInt(exp2(intBitsToFloat(R126i.x)));
PS0i = R0i.w;
// 19
R3i.x = floatBitsToInt(dot(vec4(intBitsToFloat(uf_remappedPS[16].x),intBitsToFloat(uf_remappedPS[16].y),intBitsToFloat(uf_remappedPS[16].z),-0.0),vec4(intBitsToFloat(R6i.x),intBitsToFloat(R5i.y),intBitsToFloat(R5i.z),0.0)));
PV1i.x = R3i.x;
PV1i.y = R3i.x;
PV1i.z = R3i.x;
PV1i.w = R3i.x;
R4i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.z), intBitsToFloat(R126i.w)));
PS1i = R4i.x;
// 20
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(uf_remappedPS[17].x),intBitsToFloat(uf_remappedPS[17].y),intBitsToFloat(uf_remappedPS[17].z),-0.0),vec4(intBitsToFloat(R6i.x),intBitsToFloat(R5i.y),intBitsToFloat(R5i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R3i.y = tempi.x;
R4i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.z), intBitsToFloat(R125i.y)));
PS0i = R4i.w;
// 21
R6i.x = floatBitsToInt(max(intBitsToFloat(R127i.y), -(intBitsToFloat(R127i.y))));
R5i.y = floatBitsToInt(max(intBitsToFloat(R125i.w), -(intBitsToFloat(R125i.w))));
R5i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.z), intBitsToFloat(R124i.y)));
R5i.w = floatBitsToInt(max(intBitsToFloat(R127i.x), -(intBitsToFloat(R127i.x))));
R2i.w = floatBitsToInt(1.0 / intBitsToFloat(R124i.x));
PS1i = R2i.w;
}
if( activeMaskStackC[1] == true ) {
// 0
R127i.x = floatBitsToInt(max(intBitsToFloat(R6i.w), -(intBitsToFloat(R6i.w))));
R127i.y = floatBitsToInt(max(intBitsToFloat(R5i.x), -(intBitsToFloat(R5i.x))));
R125i.z = floatBitsToInt(max(intBitsToFloat(R0i.y), -(intBitsToFloat(R0i.y))));
R125i.w = floatBitsToInt(intBitsToFloat(R1i.z) * intBitsToFloat(R2i.w));
PS0i = floatBitsToInt(1.0 / intBitsToFloat(R3i.w));
// 1
backupReg0i = R5i.z;
R126i.x = floatBitsToInt(intBitsToFloat(R2i.y) * intBitsToFloat(PS0i));
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.w),intBitsToFloat(uf_remappedPS[14].x)) + intBitsToFloat(R4i.x)));
R5i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.w),intBitsToFloat(uf_remappedPS[14].y)) + intBitsToFloat(R4i.w)));
R124i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.w),intBitsToFloat(uf_remappedPS[14].z)) + intBitsToFloat(backupReg0i)));
R124i.x = floatBitsToInt(intBitsToFloat(R5i.w) + -(1.0));
R124i.x = clampFI32(R124i.x);
PS1i = R124i.x;
// 2
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R4i.z),-0.0),vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R4i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R126i.w = floatBitsToInt(intBitsToFloat(R6i.x) + -(1.0));
R126i.w = clampFI32(R126i.w);
PS0i = R126i.w;
// 3
backupReg0i = R127i.x;
backupReg1i = R125i.z;
R127i.x = floatBitsToInt(intBitsToFloat(R127i.y) + -(1.0));
R127i.x = clampFI32(R127i.x);
R127i.y = floatBitsToInt(intBitsToFloat(backupReg0i) + -(1.0));
R127i.y = clampFI32(R127i.y);
R125i.z = floatBitsToInt(intBitsToFloat(R5i.y) + -(1.0));
R125i.z = clampFI32(R125i.z);
R127i.w = floatBitsToInt(intBitsToFloat(backupReg1i) + -(1.0));
R127i.w = clampFI32(R127i.w);
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.x));
R125i.x = floatBitsToInt(tempResultf);
PS1i = R125i.x;
// 4
backupReg0i = R1i.y;
backupReg1i = R125i.w;
R6i.x = floatBitsToInt(intBitsToFloat(R124i.w) + 1.0);
R1i.y = floatBitsToInt(intBitsToFloat(R5i.z) + 1.0);
R4i.z = floatBitsToInt(intBitsToFloat(R126i.y) + 1.0);
R125i.w = backupReg0i;
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg1i),intBitsToFloat(uf_remappedPS[12].y)) + intBitsToFloat(uf_remappedPS[13].y)));
PS0i = R127i.z;
// 5
backupReg0i = R125i.z;
backupReg1i = R126i.x;
R126i.x = floatBitsToInt(intBitsToFloat(R126i.w) + -(1.0));
R124i.y = floatBitsToInt(intBitsToFloat(R124i.x) + -(1.0));
R125i.z = R3i.z;
R126i.w = floatBitsToInt(intBitsToFloat(backupReg0i) + -(1.0));
R125i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg1i),intBitsToFloat(uf_remappedPS[12].y)) + intBitsToFloat(uf_remappedPS[13].y)));
PS1i = R125i.y;
// 6
backupReg0i = R127i.y;
backupReg1i = R127i.x;
R127i.x = floatBitsToInt(intBitsToFloat(R127i.w) + -(1.0));
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.x), intBitsToFloat(R125i.x)));
R126i.z = floatBitsToInt(intBitsToFloat(backupReg0i) + -(1.0));
R127i.w = floatBitsToInt(intBitsToFloat(backupReg1i) + -(1.0));
R124i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.y), intBitsToFloat(R125i.x)));
PS0i = R124i.z;
// 7
backupReg0i = R126i.x;
backupReg1i = R124i.y;
backupReg2i = R127i.z;
backupReg3i = R126i.w;
backupReg2i = R127i.z;
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(R127i.z)) + 1.0));
R124i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.w),intBitsToFloat(uf_remappedPS[12].z)) + intBitsToFloat(uf_remappedPS[13].z)));
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg1i),intBitsToFloat(backupReg2i)) + 1.0));
R126i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg3i),intBitsToFloat(backupReg2i)) + 1.0));
R125i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.z),intBitsToFloat(uf_remappedPS[12].z)) + intBitsToFloat(uf_remappedPS[13].z)));
PS1i = R125i.x;
// 8
backupReg0i = R127i.x;
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.w),intBitsToFloat(R125i.y)) + 1.0));
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(R125i.y)) + 1.0));
PV0i.y = R123i.y;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.z),intBitsToFloat(R125i.y)) + 1.0));
PV0i.w = R123i.w;
R0i.x = floatBitsToInt((intBitsToFloat(R127i.y) * intBitsToFloat(0x3efefeff) + intBitsToFloat(0x3efefeff)));
PS0i = R0i.x;
// 9
R3i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.x), intBitsToFloat(PV0i.y)));
R0i.y = floatBitsToInt((intBitsToFloat(R124i.z) * intBitsToFloat(0x3efefeff) + intBitsToFloat(0x3efefeff)));
R3i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.x), intBitsToFloat(PV0i.w)));
R2i.w = 0;
R0i.w = 0x3f800000;
PS1i = R0i.w;
// 10
R1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.y), intBitsToFloat(R127i.z)));
R4i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.y), intBitsToFloat(R126i.x)));
R1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.y), intBitsToFloat(R126i.w)));
R1i.w = 0;
R3i.w = 0x3f800000;
PS0i = R3i.w;
// 11
R3i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.x), intBitsToFloat(R127i.x)));
PS1i = floatBitsToInt(1.0 / intBitsToFloat(R4i.z));
// 12
R2i.x = floatBitsToInt(intBitsToFloat(R126i.y) * intBitsToFloat(PS1i));
PS0i = floatBitsToInt(1.0 / intBitsToFloat(R1i.y));
// 13
R2i.y = floatBitsToInt(intBitsToFloat(R5i.z) * intBitsToFloat(PS0i));
PS1i = floatBitsToInt(1.0 / intBitsToFloat(R6i.x));
// 14
R2i.z = floatBitsToInt(intBitsToFloat(R124i.w) * intBitsToFloat(PS1i));
tempResultf = log2(intBitsToFloat(uf_remappedPS[5].w));
PS0i = floatBitsToInt(tempResultf);
// 15
R0i.z = floatBitsToInt(intBitsToFloat(PS0i) * intBitsToFloat(0x3dcccccd));
// 16
R6i.xyz = ivec3(R3i.x,R3i.y,R3i.z);
R6i.w = R3i.w;
// 17
R5i.xyz = ivec3(R1i.x,R4i.y,R1i.z);
R5i.w = R1i.w;
// 18
R4i.xyz = ivec3(R0i.x,R0i.y,R0i.z);
R4i.w = R0i.w;
// 19
R3i.xyz = ivec3(R2i.x,R2i.y,R2i.z);
R3i.w = R2i.w;
}
// export

// enemy death weird highlights fix - just changed the passPixelColor0 line below
// original was:
//passPixelColor0 = vec4(intBitsToFloat(R3i.x), intBitsToFloat(R3i.y), intBitsToFloat(R3i.z), intBitsToFloat(R3i.w));
passPixelColor0 = vec4(0.0f, 0.0f, 0.0f, 0.0f);
passPixelColor1 = vec4(intBitsToFloat(R4i.x), intBitsToFloat(R4i.y), intBitsToFloat(R4i.z), intBitsToFloat(R4i.w));
passPixelColor2 = vec4(intBitsToFloat(R5i.x), intBitsToFloat(R5i.y), intBitsToFloat(R5i.z), intBitsToFloat(R5i.w));
passPixelColor3 = vec4(intBitsToFloat(R6i.x), intBitsToFloat(R6i.y), intBitsToFloat(R6i.z), intBitsToFloat(R6i.w));
}
