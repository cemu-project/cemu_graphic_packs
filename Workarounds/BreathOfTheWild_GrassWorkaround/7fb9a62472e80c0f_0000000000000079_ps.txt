#version 430
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 7fb9a62472e80c0f
// usesIntegerValues: false
// special state 0 0 0 0 0 0 0 0 0 
// Color buffers:
// Color0: 64543x15 at 0x42a99800 fmt 001a tm 4
// Color1: 2055x0 at 0x3d112e00 fmt 0820 tm 1
// Color2: 31823x57 at 0xf5593000 fmt 0816 tm 4
// Color3: 31823x57 at 0xf5593000 fmt 0816 tm 4
// Color4: 31823x57 at 0xf5846000 fmt 0001 tm 4
// Color5: 31823x57 at 0xf528a800 fmt 001a tm 4
// Color6: 0x0 at 0x3cda7100 fmt 0816 tm 3
// Color7: 64671x224 at 0xf4e91800 fmt 0806 tm 4
// start of shader inputs/outputs, predetermined by Cemu. Do not touch
#ifdef VULKAN
#define ATTR_LAYOUT(__vkSet, __location) layout(set = __vkSet, location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation)
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale.xy,gl_FragCoord.zw)
#else
#define ATTR_LAYOUT(__vkSet, __location) layout(location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation, std140) 
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation)
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw)
#endif
#ifdef VULKAN
layout(set = 1, binding = 1) uniform ufBlock
{
uniform ivec4 uf_remappedPS[1];
uniform vec4 uf_fragCoordScale;
};
#else
uniform ivec4 uf_remappedPS[1];
uniform vec2 uf_fragCoordScale;
#endif
TEXTURE_LAYOUT(0, 1, 0) uniform sampler2D textureUnitPS0;
layout(location = 0) noperspective in vec4 passParameterSem0;
layout(location = 0) out vec4 passPixelColor0;
// end of shader inputs/outputs
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R0f.xy = (texture(textureUnitPS0, R0f.xy).xy); // TEX_INST_SAMPLE OffsetXYZ 00 00 00

// emulate border color (0.5,0.5,0.5,0.5)
if(R0f.x <= 0.0 || R0f.x >= 1.0 || R0f.y <= 0.0 || R0f.y >= 1.0 )
	R0f.xy = vec2(0.5);

// 0
R127f.z = (R0f.y * 2.0 + -(1.0));
PV0f.z = R127f.z;
R123f.w = (R0f.x * 2.0 + -(1.0));
PV0f.w = R123f.w;
// 1
PV1f.x = mul_nonIEEE(-(PV0f.z), intBitsToFloat(uf_remappedPS[0].z));
PV1f.x = clamp(PV1f.x, 0.0, 1.0);
PV1f.y = mul_nonIEEE(-(PV0f.w), intBitsToFloat(uf_remappedPS[0].z));
PV1f.y = clamp(PV1f.y, 0.0, 1.0);
R0f.x = mul_nonIEEE(PV0f.w, intBitsToFloat(uf_remappedPS[0].z));
R0f.x = clamp(R0f.x, 0.0, 1.0);
PS1f = R0f.x;
// 2
R0f.y = mul_nonIEEE(R127f.z, intBitsToFloat(uf_remappedPS[0].z));
R0f.y = clamp(R0f.y, 0.0, 1.0);
R0f.z = PV1f.y;
R0f.w = PV1f.x;
// export
passPixelColor0 = vec4(R0f.x, R0f.y, R0f.z, R0f.w);
}
