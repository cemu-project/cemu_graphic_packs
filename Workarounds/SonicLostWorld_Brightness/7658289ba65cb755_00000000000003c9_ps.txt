#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 7658289ba65cb755
// "dark overlay"
// dumped on cemu 1.11.5
uniform ivec4 uf_remappedPS[1];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0xf4520000 res 1280x720x1 dim 1 tm: 4 format 0816 compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 0
layout(binding = 4) uniform sampler2D textureUnitPS4;// Tex4 addr 0x1786d800 res 1x1x1 dim 1 tm: 2 format 0806 compSel: 3 0 1 2 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler4 ClampX/Y/Z: 2 2 2 border: 0
layout(location = 0) in vec4 passParameterSem137;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem137;
R1f.xyz = (texture(textureUnitPS0, R0f.xy).xyz);
// 0
R0f.y = intBitsToFloat(0x3f000000);
R2f.w = 1.0;
R0f.x = (texture(textureUnitPS4, R0f.yy).x);
// 0
backupReg0f = R0f.x;
PV0f.x = backupReg0f + intBitsToFloat(0x3a83126f);
// 1
PS1f = 1.0 / PV0f.x;
// 2
PV0f.z = PS1f * intBitsToFloat(uf_remappedPS[0].x);
// 3
PV1f.y = max(PV0f.z, intBitsToFloat(0x3d800000));
// 4
PV0f.x = min(PV1f.y, intBitsToFloat(0x41800000));
// 5
R2f.x = mul_nonIEEE(R1f.x, PV0f.x);
R2f.y = mul_nonIEEE(R1f.y, PV0f.x);
R2f.z = mul_nonIEEE(R1f.z, PV0f.x);
// export
passPixelColor0 = vec4(R2f.x, R2f.y, R2f.z, R2f.w)* (16.0/9.0);
}
