#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
#ifdef VULKAN
#define ATTR_LAYOUT(__vkSet, __location) layout(set = __vkSet, location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation)
#define SET_POSITION(_v) gl_Position = _v; gl_Position.z = (gl_Position.z + gl_Position.w) / 2.0
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale.xy,gl_FragCoord.zw)
#define gl_VertexID gl_VertexIndex
#define gl_InstanceID gl_InstanceIndex
#else
#define ATTR_LAYOUT(__vkSet, __location) layout(location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation, std140) 
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation)
#define SET_POSITION(_v) gl_Position = _v
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw)
#endif
// This shader was automatically converted to be cross-compatible with Vulkan and OpenGL.

// shader e1e83a29eef8fee8
// Used for: Hiding the blue layer behind the portal that doesn't appear on the Wii U.

#ifdef VULKAN
layout(set = 0, binding = 0) uniform ufBlock
{
uniform ivec4 uf_remappedVS[7];
// uniform vec2 uf_windowSpaceToClipSpaceTransform; // Cemu optimized this uf_variable away in Cemu 1.15.7
uniform float uf_alphaTestRef;
};
#else
uniform ivec4 uf_remappedVS[7];
// uniform vec2 uf_windowSpaceToClipSpaceTransform; // Cemu optimized this uf_variable away in Cemu 1.15.7
uniform float uf_alphaTestRef;
#endif
// uf_windowSpaceToClipSpaceTransform was moved to the ufBlock
// uf_alphaTestRef was moved to the ufBlock
ATTR_LAYOUT(0, 0) in uvec4 attrDataSem0;
ATTR_LAYOUT(0, 1) in uvec4 attrDataSem5;
out gl_PerVertex
{
	vec4 gl_Position;
	float gl_PointSize;
};
layout(location = 0) out vec4 passParameterSem133;
layout(location = 1) out vec4 passParameterSem135;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){return mix(0.0, a*b, (a != 0.0) && (b != 0.0));}
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R124f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
uvec4 attrDecoder;
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = floatBitsToInt(ivec4(gl_VertexID, 0, 0, gl_InstanceID));
attrDecoder = attrDataSem0;
attrDecoder = (attrDecoder>>24)|((attrDecoder>>8)&0xFF00)|((attrDecoder<<8)&0xFF0000)|((attrDecoder<<24));
R1f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(int(attrDecoder.z)), intBitsToFloat(int(attrDecoder.w)));
attrDecoder = attrDataSem5;
attrDecoder = (attrDecoder>>24)|((attrDecoder>>8)&0xFF00)|((attrDecoder<<8)&0xFF0000)|((attrDecoder<<24));
R2f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(int(attrDecoder.z)), intBitsToFloat(int(attrDecoder.w)));
// 0
R124f.x = (mul_nonIEEE(R2f.w,intBitsToFloat(uf_remappedVS[0].w)) + intBitsToFloat(uf_remappedVS[1].w));
R124f.y = (mul_nonIEEE(R2f.z,intBitsToFloat(uf_remappedVS[0].z)) + intBitsToFloat(uf_remappedVS[1].z));
PV0f.y = R124f.y;
R127f.w = 1.0;
PV0f.w = R127f.w;
// 1
tempf.x = dot(vec4(R1f.x,R1f.y,R1f.z,PV0f.w),vec4(intBitsToFloat(uf_remappedVS[2].x),intBitsToFloat(uf_remappedVS[2].y),intBitsToFloat(uf_remappedVS[2].z),intBitsToFloat(uf_remappedVS[2].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R0f.w = tempf.x;
R127f.x = PV0f.y;
PS1f = R127f.x;
// 2
R0f.x = dot(vec4(R1f.x,R1f.y,R1f.z,R127f.w),vec4(intBitsToFloat(uf_remappedVS[3].x),intBitsToFloat(uf_remappedVS[3].y),intBitsToFloat(uf_remappedVS[3].z),intBitsToFloat(uf_remappedVS[3].w)));
PV0f.x = R0f.x;
PV0f.y = R0f.x;
PV0f.z = R0f.x;
PV0f.w = R0f.x;
R126f.w = -(R124f.x) + 1.0;
PS0f = R126f.w;
// 3
backupReg0f = R127f.x;
tempf.x = dot(vec4(R1f.x,R1f.y,R1f.z,R127f.w),vec4(intBitsToFloat(uf_remappedVS[4].x),intBitsToFloat(uf_remappedVS[4].y),intBitsToFloat(uf_remappedVS[4].z),intBitsToFloat(uf_remappedVS[4].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R0f.y = tempf.x;
R127f.x = backupReg0f + -(R124f.x);
PS1f = R127f.x;
// 4
tempf.x = dot(vec4(R1f.x,R1f.y,R1f.z,R127f.w),vec4(intBitsToFloat(uf_remappedVS[5].x),intBitsToFloat(uf_remappedVS[5].y),intBitsToFloat(uf_remappedVS[5].z),intBitsToFloat(uf_remappedVS[5].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R0f.z = tempf.x;
R127f.w = R126f.w + -(R124f.y);
PS0f = R127f.w;
// 5
PV1f.x = intBitsToFloat(uf_remappedVS[6].y) + -(1.0);
PV1f.y = intBitsToFloat(uf_remappedVS[6].y);
R127f.z = intBitsToFloat(uf_remappedVS[6].x) + -(1.0);
PV1f.w = intBitsToFloat(uf_remappedVS[6].x);
R126f.z = -(R124f.x) + 1.0;
PS1f = R126f.z;
// 6
PV0f.x = max(PV1f.w, 0.0);
PV0f.y = max(PV1f.y, 0.0);
R2f.z = (mul_nonIEEE(R2f.y,intBitsToFloat(uf_remappedVS[0].y)) + intBitsToFloat(uf_remappedVS[1].y));
PV0f.z = R2f.z;
R125f.w = (mul_nonIEEE(R2f.x,intBitsToFloat(uf_remappedVS[0].x)) + intBitsToFloat(uf_remappedVS[1].x));
PV0f.w = R125f.w;
R125f.x = max(PV1f.x, 0.0);
PS0f = R125f.x;
// 7
R126f.x = min(PV0f.x, 1.0);
PV1f.y = min(PV0f.y, 1.0);
PV1f.z = -(PV0f.w) + 1.0;
PV1f.w = PV0f.z;
R125f.y = -(R124f.y) + 1.0;
PS1f = R125f.y;
// 8
backupReg0f = R127f.x;
backupReg1f = R127f.z;
R127f.x = (mul_nonIEEE(backupReg0f,PV1f.y) + R124f.x);
R127f.y = (mul_nonIEEE(R127f.w,PV1f.y) + R124f.y);
PV0f.z = -(R2f.z) + PV1f.z;
PV0f.w = -(R125f.w) + PV1f.w;
R127f.z = max(backupReg1f, 0.0);
PS0f = R127f.z;
// 9
backupReg0f = R126f.x;
backupReg0f = R126f.x;
R126f.x = -(R2f.z) + 1.0;
R126f.y = -(R125f.w) + 1.0;
R125f.z = (mul_nonIEEE(PV0f.w,backupReg0f) + R125f.w);
R126f.w = (mul_nonIEEE(PV0f.z,backupReg0f) + R2f.z);
R127f.w = intBitsToFloat(uf_remappedVS[6].y) + -(2.0);
PS1f = R127f.w;
// 10
backupReg0f = R127f.z;
PV0f.x = min(R125f.x, 1.0);
PV0f.y = R126f.z + -(R127f.x);
R126f.z = intBitsToFloat(uf_remappedVS[6].x) + -(2.0);
PV0f.w = R125f.y + -(R127f.y);
R127f.z = min(backupReg0f, 1.0);
PS0f = R127f.z;
// 11
backupReg0f = R127f.y;
backupReg1f = R127f.w;
PV1f.x = R126f.x + -(R126f.w);
R127f.y = (mul_nonIEEE(PV0f.w,PV0f.x) + backupReg0f);
R124f.z = (mul_nonIEEE(PV0f.y,PV0f.x) + R127f.x);
PV1f.w = R126f.y + -(R125f.z);
R127f.w = max(backupReg1f, 0.0);
PS1f = R127f.w;
// 12
backupReg0f = R126f.z;
R127f.x = (mul_nonIEEE(PV1f.w,R127f.z) + R125f.z);
PV0f.y = R124f.x;
R126f.z = (mul_nonIEEE(PV1f.x,R127f.z) + R126f.w);
PV0f.w = max(backupReg0f, 0.0);
R127f.z = intBitsToFloat(uf_remappedVS[6].y) + -(intBitsToFloat(0x40400000));
PS0f = R127f.z;
// 13
PV1f.x = R125f.y + -(R124f.z);
PV1f.y = PV0f.y + -(R127f.y);
R125f.z = intBitsToFloat(uf_remappedVS[6].x) + -(intBitsToFloat(0x40400000));
PV1f.w = min(R127f.w, 1.0);
R125f.y = min(PV0f.w, 1.0);
PS1f = R125f.y;
// 14
backupReg0f = R127f.y;
backupReg1f = R127f.z;
PV0f.x = R125f.w + -(R126f.z);
R127f.y = (mul_nonIEEE(PV1f.y,PV1f.w) + backupReg0f);
R127f.z = (mul_nonIEEE(PV1f.x,PV1f.w) + R124f.z);
PV0f.w = R126f.x + -(R127f.x);
PS0f = max(backupReg1f, 0.0);
// 15
backupReg0f = R125f.y;
backupReg1f = R127f.x;
R127f.x = (mul_nonIEEE(PV0f.x,R125f.y) + R126f.z);
R125f.y = (mul_nonIEEE(PV0f.w,backupReg0f) + backupReg1f);
PV1f.z = max(R125f.z, 0.0);
R127f.w = min(PS0f, 1.0);
PS1f = 1.0 / R0f.w;
// 16
backupReg0f = R0f.x;
backupReg1f = R0f.y;
PV0f.x = R124f.x + -(R127f.z);
PV0f.y = backupReg0f * PS1f;
R126f.z = backupReg1f * PS1f;
PV0f.w = R124f.y + -(R127f.y);
R124f.x = min(PV1f.z, 1.0);
PS0f = R124f.x;
// 17
PV1f.x = R2f.z + -(R127f.x);
R123f.y = (mul_nonIEEE(PV0f.w,R127f.w) + R127f.y);
PV1f.y = R123f.y;
R123f.z = (mul_nonIEEE(PV0f.x,R127f.w) + R127f.z);
PV1f.z = R123f.z;
PV1f.w = R125f.w + -(R125f.y);
R127f.y = PV0f.y;
R127f.y /= 2.0;
PS1f = R127f.y;
// 18
PV0f.x = -(R126f.z);
PV0f.x /= 2.0;
R2f.y = (mul_nonIEEE(PV1f.x,R124f.x) + R127f.x);
R2f.z = PV1f.y;
R2f.w = PV1f.z;
R2f.x = (mul_nonIEEE(PV1f.w,R124f.x) + R125f.y);
PS0f = R2f.x;
// 19
R1f.x = R127f.y + 0.5;
R1f.y = PV0f.x + 0.5;
R1f.z = R0f.z;
R1f.w = R0f.w;
// export
SET_POSITION(vec4(0.0, 0.0, 0.0, 0.0));
// export
passParameterSem133 = vec4(0.0, 0.0, 0.0, 0.0);
// export
passParameterSem135 = vec4(0.0, 0.0, 0.0, 0.0);
// 0
}
