#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 250cb5a06cab6534
// used to set sun bloom, color, saturation, and intensity in the sky
uniform ivec4 uf_remappedPS[12];
layout(binding = 0) uniform sampler3D textureUnitPS0;// Tex0 addr 0x3cea0000 res 256x32x16 dim 2 tm: 7 format 0820 compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x10) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
layout(location = 1) in vec4 passParameterSem0;
layout(location = 2) in vec4 passParameterSem2;
layout(location = 3) in vec4 passParameterSem3;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R7i = ivec4(0);
ivec4 R8i = ivec4(0);
ivec4 R122i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R124i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
bool activeMaskStack[2];
bool activeMaskStackC[3];
activeMaskStack[0] = false;
activeMaskStackC[0] = false;
activeMaskStackC[1] = false;
activeMaskStack[0] = true;
activeMaskStackC[0] = true;
activeMaskStackC[1] = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = floatBitsToInt(vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw));
R1i = floatBitsToInt(passParameterSem0);
R2i = floatBitsToInt(passParameterSem2);
R3i = floatBitsToInt(passParameterSem3);
if( activeMaskStackC[1] == true ) {
	// 0
	R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(R1i.x)));
	//original line
	//R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.x), intBitsToFloat(uf_remappedPS[0].z)));
	// new line r0i.x is the brightness of the bloom on the sky, ufremap.z is the brightness on the ground
	// match for gureudo desert
	R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.x)*.93, intBitsToFloat(uf_remappedPS[0].z))*.95);
	// match for death mountain morning
	//R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.x)*.45, intBitsToFloat(uf_remappedPS[0].z))*.45);

	// red channel?
	PV0i.y = R126i.y;
	R123i.z = floatBitsToInt((intBitsToFloat(uf_remappedPS[1].x) * intBitsToFloat(0xc0400000) + intBitsToFloat(0xbf19999a)));
	PV0i.z = R123i.z;
	PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.y), intBitsToFloat(uf_remappedPS[0].w)));
	PV0i.w = floatBitsToInt(intBitsToFloat(PV0i.w) * 2.0);
	R122i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.x),intBitsToFloat(R1i.x)) + intBitsToFloat(0xcc1a4d90)));
	PS0i = R122i.x;
	
	// 1
	PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.z) * intBitsToFloat(0x3fb8aa3b));
	R2i.y = floatBitsToInt(intBitsToFloat(uf_remappedPS[2].x) + -(1.0));
	R1i.z = floatBitsToInt(intBitsToFloat(PV0i.w) + -(1.0));
	PV1i.z = R1i.z;
	// original
	PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.y) * intBitsToFloat(0x3fc90fdb));
	// magic line that clears death volcano brightness ruins gureudo
	//PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.y) * intBitsToFloat(0x3fc90fdb)*0.6);
	//multiplication affects saturation of blue stored in PS1i
	R124i.w = floatBitsToInt(sqrt(intBitsToFloat(PS0i)));
	//R124i.w = floatBitsToInt(sqrt(intBitsToFloat(PS0i))*5);
	PS1i = R124i.w;
	
	
	// 2
	R126i.x = floatBitsToInt(-(intBitsToFloat(uf_remappedPS[3].y)) + 1.0);
	PV0i.y = ((intBitsToFloat(R3i.x) > intBitsToFloat(PV1i.z))?int(0xFFFFFFFF):int(0x0));
	R123i.z = floatBitsToInt((intBitsToFloat(PV1i.w) * intBitsToFloat(0x3e22f983) + 0.5));
	PV0i.z = R123i.z;
	R127i.w = uf_remappedPS[3].y;
	R127i.w = floatBitsToInt(intBitsToFloat(R127i.w) / 2.0);
	// multiplication affects bloom blue which seems to be stored in PS0i
	//PS0i = floatBitsToInt(exp2(intBitsToFloat(PV1i.x)*2));
	PS0i = floatBitsToInt(exp2(intBitsToFloat(PV1i.x)));
	
	// 3
	R123i.x = ((PV0i.y == 0)?(R1i.z):(R3i.x));
	PV1i.x = R123i.x;
	
	PV1i.y = floatBitsToInt(fract(intBitsToFloat(PV0i.z)));
	PV1i.z = floatBitsToInt(-(intBitsToFloat(PS0i)) + 1.0);
	R125i.w = floatBitsToInt((-(intBitsToFloat(uf_remappedPS[4].y)) * 0.5 + 0.5));
	R127i.z = floatBitsToInt(-(intBitsToFloat(uf_remappedPS[5].y)) + 1.0);
	PS1i = R127i.z;
	
	// 4
	R123i.x = floatBitsToInt((intBitsToFloat(PV1i.y) * intBitsToFloat(0x40c90fdb) + intBitsToFloat(0xc0490fdb)));
	PV0i.x = R123i.x;
	PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.z) * intBitsToFloat(0x3f83987f));
	R125i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(PV1i.x)));
	PV0i.z = R125i.z;
	R126i.w = floatBitsToInt((intBitsToFloat(uf_remappedPS[4].y) * 0.5 + 0.5));
	R127i.y = floatBitsToInt(intBitsToFloat(R124i.w) * intBitsToFloat(0x3a95ae88));
	PS0i = R127i.y;
	
	// 5
	backupReg0i = R127i.x;
	R127i.x = ((0.0 > intBitsToFloat(PV0i.z))?int(0xFFFFFFFF):int(0x0));
	R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(PV0i.z)) + -(intBitsToFloat(backupReg0i))));
	PV1i.y = R123i.y;
	R126i.z = floatBitsToInt(max(intBitsToFloat(PV0i.y), 0.0));
	PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.x) * intBitsToFloat(0x3e22f983));
	PS1i = uf_remappedPS[5].y;
	PS1i = floatBitsToInt(intBitsToFloat(PS1i) / 2.0);
	
	// 6
	R125i.x = floatBitsToInt(intBitsToFloat(PV1i.y) + intBitsToFloat(0x4c1a4d90));
	PV0i.x = R125i.x;
	R123i.y = floatBitsToInt((intBitsToFloat(R126i.y) * 2.0 + -(1.0)));
	PV0i.y = R123i.y;
	R0i.z = floatBitsToInt(-(intBitsToFloat(uf_remappedPS[4].y)) + 0.5);
	R0i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.z),intBitsToFloat(R127i.y)) + intBitsToFloat(PS1i)));
	PS0i = floatBitsToInt(sin((intBitsToFloat(PV1i.w))/0.1591549367));
	PS0i = floatBitsToInt(intBitsToFloat(PS0i) * 2.0);

	// 7
	R0i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.x),intBitsToFloat(R126i.z)) + intBitsToFloat(R127i.w)));
	R127i.y = floatBitsToInt(intBitsToFloat(PS0i) + -(1.0));
	PV1i.y = R127i.y;
	PV1i.z = ((intBitsToFloat(PV0i.x) > 0.0)?int(0xFFFFFFFF):int(0x0));
	PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.y) + intBitsToFloat(0x3f400000));
	PV1i.w = clampFI32(PV1i.w);
	PS1i = floatBitsToInt(intBitsToFloat(R1i.z) + intBitsToFloat(0x3f400000));
	PS1i = clampFI32(PS1i);
	
	
	// 8 red
	PV0i.x = floatBitsToInt(intBitsToFloat(PV1i.y) + 1.0);
	R123i.y = ((R127i.x == 0)?(0):(PV1i.z));
	PV0i.y = R123i.y;
	R126i.z = floatBitsToInt(max(intBitsToFloat(PV1i.w), intBitsToFloat(PS1i)));
	R127i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.y)) + 1.0));
	R126i.y = floatBitsToInt(1.0 / intBitsToFloat(uf_remappedPS[6].x));
	PS0i = R126i.y;
	// 9
	backupReg0i = R126i.w;
	R123i.x = ((PV0i.y == 0)?(0x445aeaf4):(0));
	PV1i.x = R123i.x;
	R123i.y = ((PV0i.y == 0)?(0x493b34ff):(0));
	PV1i.y = R123i.y;
	R127i.z = ((PV0i.y == 0)?(0xbf800000):(0x3f800000));
	PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.x) * 0.5);
	R126i.w = ((PV0i.y == 0)?(backupReg0i):(R125i.w));
	PS1i = R126i.w;
	// 10
	backupReg0i = R125i.x;
	backupReg1i = R126i.z;
	R125i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.y), intBitsToFloat(PV1i.w)));
	PV0i.x = R125i.x;
	PV0i.y = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(PV1i.y));
	R126i.z = floatBitsToInt(intBitsToFloat(R124i.w) + intBitsToFloat(PV1i.x));
	PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg1i), intBitsToFloat(uf_remappedPS[7].x)));
	PS0i = floatBitsToInt(intBitsToFloat(R127i.w) * intBitsToFloat(0x3d747645));
	// 11
	R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(PV0i.w)));
	PV1i.x = R127i.x;
	PV1i.y = floatBitsToInt(floor(intBitsToFloat(PV0i.x)));
	R124i.z = PV0i.w;
	R124i.z = floatBitsToInt(intBitsToFloat(R124i.z) * 2.0);
	R4i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(uf_remappedPS[8].x)));
	PS1i = floatBitsToInt(sqrt(intBitsToFloat(PV0i.y)));
	// 12
	backupReg0i = R0i.x;
	PV0i.x = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(PV1i.y));
	PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.x) + 1.0);
	R2i.z = floatBitsToInt(intBitsToFloat(R125i.x) + -(intBitsToFloat(PV1i.y)));
	R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.z),intBitsToFloat(R127i.z)) + intBitsToFloat(PS1i)));
	PV0i.w = R123i.w;
	PS0i = floatBitsToInt(1.0 / intBitsToFloat(R126i.z));
	
	// 13
	backupReg0i = R127i.y;
	PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.w) * intBitsToFloat(PS0i));
	R127i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(backupReg0i)),intBitsToFloat(R124i.z)) + intBitsToFloat(PV0i.y)));
	PV1i.z = floatBitsToInt(intBitsToFloat(PV0i.x) + 0.0);
	PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.x) + 1.0);
	PS1i = floatBitsToInt(-(intBitsToFloat(R127i.x)) + 1.0);
	
	
	// 14 set r3i and rli to their final calculated values
	backupReg0i = R0i.z;
	R7i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.z), intBitsToFloat(uf_remappedPS[2].y)));
	R0i.y = floatBitsToInt(intBitsToFloat(R127i.x) + 2.0);
	PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.w), intBitsToFloat(PS1i)));
	R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(PV1i.x)) + intBitsToFloat(R126i.w)));
	PV0i.w = R123i.w;
	R8i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(uf_remappedPS[2].y)));
	PS0i = R8i.x;
	// 15
	R6i.x = floatBitsToInt(intBitsToFloat(R126i.y) * intBitsToFloat(uf_remappedPS[6].x));
	R7i.y = PV0i.w;
	R7i.z = R0i.w;
	R2i.w = floatBitsToInt(intBitsToFloat(PV0i.z) * intBitsToFloat(0x3df47645));
	R8i.y = PV0i.w;
	PS1i = R8i.y;
	// 16
	R4i.x = ((intBitsToFloat(R2i.x) > intBitsToFloat(R1i.z))?int(0xFFFFFFFF):int(0x0));
	R8i.z = R0i.w;
	tempResultf = log2(intBitsToFloat(R127i.y));
	if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
	R0i.w = floatBitsToInt(tempResultf);
	PS0i = R0i.w;
}
if( activeMaskStackC[1] == true ) {
	R3i.xyzw = floatBitsToInt(texture(textureUnitPS0, vec3(intBitsToFloat(R7i.x),intBitsToFloat(R7i.y),intBitsToFloat(R7i.z))).xyzw);
	R1i.xyzw = floatBitsToInt(texture(textureUnitPS0, vec3(intBitsToFloat(R8i.x),intBitsToFloat(R8i.y),intBitsToFloat(R8i.z))).xyzw);
}


if( activeMaskStackC[1] == true ) {
	activeMaskStack[1] = activeMaskStack[0];
	activeMaskStackC[2] = activeMaskStackC[1];
	// 0
	PV0i.x = floatBitsToInt(-(intBitsToFloat(R3i.y)) + intBitsToFloat(R1i.y));
	PV0i.y = floatBitsToInt(-(intBitsToFloat(R3i.x)) + intBitsToFloat(R1i.x));
	PV0i.z = floatBitsToInt(intBitsToFloat(R0i.w) * 1.5);
	PV0i.w = floatBitsToInt(-(intBitsToFloat(R3i.z)) + intBitsToFloat(R1i.z));
	PS0i = floatBitsToInt(-(intBitsToFloat(R3i.w)) + intBitsToFloat(R1i.w));
	// 1
	R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(R2i.z)) + intBitsToFloat(R3i.y)));
	PV1i.x = R123i.x;
	R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(R2i.z)) + intBitsToFloat(R3i.x)));
	PV1i.y = R123i.y;
	R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PS0i),intBitsToFloat(R2i.z)) + intBitsToFloat(R3i.w)));
	PV1i.z = R123i.z;
	R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(R2i.z)) + intBitsToFloat(R3i.z)));
	PV1i.w = R123i.w;
	PS1i = floatBitsToInt(exp2(intBitsToFloat(PV0i.z)));
	// 2
	R127i.x = floatBitsToInt(max(intBitsToFloat(PV1i.x), 0.0));
	PV0i.x = R127i.x;
	R127i.y = floatBitsToInt(max(intBitsToFloat(PV1i.y), 0.0));
	PV0i.y = R127i.y;
	PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(R0i.y)));
	R127i.w = floatBitsToInt(max(intBitsToFloat(PV1i.w), 0.0));
	PV0i.w = R127i.w;
	PS0i = floatBitsToInt(max(intBitsToFloat(PV1i.z), 0.0));
	// 3
	R125i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(PS0i)));
	R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(PS0i)));
	R124i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(PS0i)));
	R126i.w = floatBitsToInt(max(intBitsToFloat(PV0i.y), intBitsToFloat(0x38d1b717)));
	PS1i = floatBitsToInt(1.0 / intBitsToFloat(PV0i.z));
	// 4
	backupReg0i = R127i.x;
	backupReg1i = R127i.y;
	R127i.x = floatBitsToInt(intBitsToFloat(R2i.w) * intBitsToFloat(PS1i));
	R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.w), intBitsToFloat(R127i.w)));
	R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.w), intBitsToFloat(backupReg0i)));
	R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.w), intBitsToFloat(backupReg1i)));
	PS0i = floatBitsToInt(1.0 / intBitsToFloat(uf_remappedPS[6].y));
	// 5
	R6i.y = floatBitsToInt(intBitsToFloat(PS0i) * intBitsToFloat(uf_remappedPS[6].x));
	PS1i = floatBitsToInt(1.0 / intBitsToFloat(uf_remappedPS[6].z));
	// 6
	backupReg0i = R127i.x;
	R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(uf_remappedPS[9].x)));
	R3i.z = floatBitsToInt(intBitsToFloat(PS1i) * intBitsToFloat(uf_remappedPS[6].x));
	PS0i = floatBitsToInt(1.0 / intBitsToFloat(R126i.w));
	// 7
	PV1i.x = floatBitsToInt(intBitsToFloat(R126i.y) * intBitsToFloat(PS0i));
	PV1i.y = floatBitsToInt(intBitsToFloat(R124i.z) * intBitsToFloat(PS0i));
	PV1i.w = floatBitsToInt(intBitsToFloat(R125i.x) * intBitsToFloat(PS0i));
	// 8
	PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(PV1i.w)));
	PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.y), intBitsToFloat(PV1i.x)));
	PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.x), intBitsToFloat(PV1i.y)));
	// 9
	R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.x),intBitsToFloat(PV0i.z)) + intBitsToFloat(R127i.w)));
	PV1i.x = R123i.x;
	R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.x),intBitsToFloat(PV0i.x)) + intBitsToFloat(R127i.y)));
	PV1i.z = R123i.z;
	R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.x),intBitsToFloat(PV0i.y)) + intBitsToFloat(R127i.z)));
	PV1i.w = R123i.w;
	// 10
	PV0i.x = floatBitsToInt(max(intBitsToFloat(PV1i.w), 0.0));
	PV0i.y = floatBitsToInt(max(intBitsToFloat(PV1i.x), 0.0));
	PV0i.w = floatBitsToInt(max(intBitsToFloat(PV1i.z), 0.0));
	// 11
	R5i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(uf_remappedPS[10].x)));
	R5i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(uf_remappedPS[10].y)));
	R5i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(uf_remappedPS[10].z)));
	// 12
	predResult = (intBitsToFloat(uf_remappedPS[11].x) > 0.0);
	activeMaskStack[1] = predResult;
	activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
	activeMaskStack[1] = false;
	activeMaskStackC[2] = false;
}


if( activeMaskStackC[2] == true ) {
	// 0
	PV0i.x = R2i.y;
	PV0i.x = floatBitsToInt(intBitsToFloat(PV0i.x) / 2.0);
	R4i.y = floatBitsToInt(intBitsToFloat(uf_remappedPS[8].x) * intBitsToFloat(0x3d747645));
	PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[7].x), intBitsToFloat(uf_remappedPS[7].x)));
	// 1
	PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.z) + 1.0);
	R3i.y = floatBitsToInt(intBitsToFloat(PV0i.z) + 2.0);
	PV1i.z = floatBitsToInt(-(intBitsToFloat(PV0i.z)) + 1.0);
	PV1i.w = floatBitsToInt(floor(intBitsToFloat(PV0i.x)));
	// 2
	R1i.x = floatBitsToInt(intBitsToFloat(PV1i.z) * intBitsToFloat(0x3df47645));
	PV0i.y = floatBitsToInt(intBitsToFloat(R0i.x) + intBitsToFloat(PV1i.w));
	R1i.z = floatBitsToInt((intBitsToFloat(R2i.y) * 0.5 + -(intBitsToFloat(PV1i.w))));
	PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.x) + -0.0);
	// 3
	PV1i.z = floatBitsToInt(intBitsToFloat(PV0i.y) + 1.0);
	PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.y) + 0.0);
	tempResultf = log2(intBitsToFloat(PV0i.w));
	if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
	PS1i = floatBitsToInt(tempResultf);
	// 4
	R7i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(uf_remappedPS[2].y)));
	R1i.y = floatBitsToInt(intBitsToFloat(PS1i) * 1.5);
	R8i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.z), intBitsToFloat(uf_remappedPS[2].y)));
	PS0i = R8i.x;
}

	
if( activeMaskStackC[2] == true ) {
	R2i.xyzw = floatBitsToInt(texture(textureUnitPS0, vec3(intBitsToFloat(R7i.x),intBitsToFloat(R7i.y),intBitsToFloat(R7i.z))).xyzw);
	R0i.xyzw = floatBitsToInt(texture(textureUnitPS0, vec3(intBitsToFloat(R8i.x),intBitsToFloat(R8i.y),intBitsToFloat(R8i.z))).xyzw);
}

if( activeMaskStackC[2] == true ) {
	// 0
	backupReg0i = R0i.x;
	backupReg1i = R0i.z;
	PV0i.x = floatBitsToInt(-(intBitsToFloat(R2i.y)) + intBitsToFloat(R0i.y));
	PV0i.y = floatBitsToInt(-(intBitsToFloat(R2i.x)) + intBitsToFloat(backupReg0i));
	PV0i.z = floatBitsToInt(-(intBitsToFloat(R2i.w)) + intBitsToFloat(R0i.w));
	PV0i.w = floatBitsToInt(-(intBitsToFloat(R2i.z)) + intBitsToFloat(backupReg1i));
	PS0i = floatBitsToInt(exp2(intBitsToFloat(R1i.y)));
	// 1
	R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(R1i.z)) + intBitsToFloat(R2i.y)));
	PV1i.x = R123i.x;
	R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(R1i.z)) + intBitsToFloat(R2i.x)));
	PV1i.y = R123i.y;
	R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(R1i.z)) + intBitsToFloat(R2i.w)));
	PV1i.z = R123i.z;
	R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(R1i.z)) + intBitsToFloat(R2i.z)));
	PV1i.w = R123i.w;
	PS1i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(R3i.y)));
	// 2
	R127i.x = floatBitsToInt(max(intBitsToFloat(PV1i.x), 0.0));
	PV0i.x = R127i.x;
	R127i.y = floatBitsToInt(max(intBitsToFloat(PV1i.y), 0.0));
	PV0i.y = R127i.y;
	PV0i.z = floatBitsToInt(max(intBitsToFloat(PV1i.z), 0.0));
	R127i.w = floatBitsToInt(max(intBitsToFloat(PV1i.w), 0.0));
	PV0i.w = R127i.w;
	PS0i = floatBitsToInt(1.0 / intBitsToFloat(PS1i));
	// 3
	R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(PV0i.z)));
	R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(PV0i.z)));
	PV1i.z = floatBitsToInt(max(intBitsToFloat(PV0i.y), intBitsToFloat(0x38d1b717)));
	R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(PV0i.z)));
	PS1i = floatBitsToInt(intBitsToFloat(R1i.x) * intBitsToFloat(PS0i));
	// 4
	backupReg0i = R127i.x;
	backupReg1i = R127i.y;
	backupReg2i = R127i.w;
	R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.y), intBitsToFloat(backupReg0i)));
	R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(uf_remappedPS[9].x)));
	R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.y), intBitsToFloat(backupReg1i)));
	R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.y), intBitsToFloat(backupReg2i)));
	PS0i = floatBitsToInt(1.0 / intBitsToFloat(PV1i.z));
	// 5
	PV1i.x = floatBitsToInt(intBitsToFloat(R126i.y) * intBitsToFloat(PS0i));
	PV1i.z = floatBitsToInt(intBitsToFloat(R126i.w) * intBitsToFloat(PS0i));
	PV1i.w = floatBitsToInt(intBitsToFloat(R126i.x) * intBitsToFloat(PS0i));
	// 6
	PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.y), intBitsToFloat(PV1i.w)));
	PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.x), intBitsToFloat(PV1i.x)));
	PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(PV1i.z)));
	// 7
	R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.y),intBitsToFloat(PV0i.w)) + intBitsToFloat(R127i.w)));
	PV1i.y = R123i.y;
	R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.y),intBitsToFloat(PV0i.x)) + intBitsToFloat(R127i.x)));
	PV1i.z = R123i.z;
	R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.y),intBitsToFloat(PV0i.y)) + intBitsToFloat(R127i.z)));
	PV1i.w = R123i.w;
	// 8
	PV0i.x = floatBitsToInt(max(intBitsToFloat(PV1i.w), 0.0));
	PV0i.z = floatBitsToInt(max(intBitsToFloat(PV1i.y), 0.0));
	PV0i.w = floatBitsToInt(max(intBitsToFloat(PV1i.z), 0.0));
	// 9
	R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(uf_remappedPS[10].y)) + -(intBitsToFloat(R5i.y))));
	PV1i.x = R123i.x;
	R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(uf_remappedPS[10].x)) + -(intBitsToFloat(R5i.x))));
	PV1i.y = R123i.y;
	R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(uf_remappedPS[10].z)) + -(intBitsToFloat(R5i.z))));
	PV1i.w = R123i.w;
	// 10
	backupReg0i = R5i.x;
	backupReg1i = R5i.y;
	backupReg2i = R5i.z;
	R5i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.y),intBitsToFloat(uf_remappedPS[11].x)) + intBitsToFloat(backupReg0i)));
	R5i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),intBitsToFloat(uf_remappedPS[11].x)) + intBitsToFloat(backupReg1i)));
	R5i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.w),intBitsToFloat(uf_remappedPS[11].x)) + intBitsToFloat(backupReg2i)));
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
// 0
R5i.w = ((R4i.x == 0)?(0x3f800000):(0));
}
// export
// original line
//passPixelColor0 = vec4(intBitsToFloat(R5i.x), intBitsToFloat(R5i.y), intBitsToFloat(R5i.z) , intBitsToFloat(R5i.w));
//passPixelColor0 = vec4(intBitsToFloat(R5i.x)*0.05, intBitsToFloat(R5i.y)*0.16, intBitsToFloat(R5i.z)*0.7 , intBitsToFloat(R5i.w))*0.33;
// faron noon bridgepassPixelColor0 = vec4(intBitsToFloat(R5i.x)*0.09, intBitsToFloat(R5i.y)*0.23, intBitsToFloat(R5i.z)*.65 , intBitsToFloat(R5i.w))*0.82;
// faron morning still off passPixelColor0 = vec4(intBitsToFloat(R5i.x)*0.09, //intBitsToFloat(R5i.y)*0.22, intBitsToFloat(R5i.z)*.65 , intBitsToFloat(R5i.w))*0.82;
//passPixelColor0 = vec4(intBitsToFloat(R5i.x)*0.09, intBitsToFloat(R5i.y)*0.22, intBitsToFloat(R5i.z)*.65 , intBitsToFloat(R5i.w))*0.82;
passPixelColor0 = vec4(intBitsToFloat(R5i.x)*0.155, intBitsToFloat(R5i.y)*0.37, intBitsToFloat(R5i.z) , intBitsToFloat(R5i.w))*.86;
}
