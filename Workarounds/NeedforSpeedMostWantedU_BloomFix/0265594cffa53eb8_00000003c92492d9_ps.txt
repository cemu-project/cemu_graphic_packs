#version 430
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 0265594cffa53eb8
// start of shader inputs/outputs, predetermined by Cemu. Do not touch
#ifdef VULKAN
#define ATTR_LAYOUT(__vkSet, __location) layout(set = __vkSet, location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation)
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale.xy,gl_FragCoord.zw)
#else
#define ATTR_LAYOUT(__vkSet, __location) layout(location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation, std140) 
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation)
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw)
#endif
#ifdef VULKAN
layout(set = 1, binding = 10) uniform ufBlock
{
uniform ivec4 uf_remappedPS[18];
uniform vec4 uf_fragCoordScale;
};
#else
uniform ivec4 uf_remappedPS[18];
uniform vec2 uf_fragCoordScale;
#endif
TEXTURE_LAYOUT(0, 1, 0) uniform sampler2D textureUnitPS0;
TEXTURE_LAYOUT(1, 1, 1) uniform sampler2D textureUnitPS1;
TEXTURE_LAYOUT(2, 1, 2) uniform sampler2D textureUnitPS2;
TEXTURE_LAYOUT(3, 1, 3) uniform sampler2D textureUnitPS3;
TEXTURE_LAYOUT(4, 1, 4) uniform sampler2D textureUnitPS4;
TEXTURE_LAYOUT(5, 1, 5) uniform sampler2D textureUnitPS5;
TEXTURE_LAYOUT(11, 1, 6) uniform sampler2D textureUnitPS11;
TEXTURE_LAYOUT(13, 1, 7) uniform samplerCubeArray textureUnitPS13;
TEXTURE_LAYOUT(14, 1, 8) uniform samplerCubeArray textureUnitPS14;
TEXTURE_LAYOUT(15, 1, 9) uniform sampler2D textureUnitPS15;
layout(location = 0) in vec4 passParameterSem133;
layout(location = 1) in vec4 passParameterSem134;
layout(location = 0) out vec4 passPixelColor0;
// end of shader inputs/outputs
void redcCUBE(vec4 src0, vec4 src1, out vec3 stm, out int faceId)
{
// stm -> x .. s, y .. t, z .. MajorAxis*2.0
vec3 inputCoord = normalize(vec3(src1.y, src1.x, src0.x));
float rx = inputCoord.x;
float ry = inputCoord.y;
float rz = inputCoord.z;
if( abs(rx) > abs(ry) && abs(rx) > abs(rz) )
{
stm.z = rx*2.0;
stm.xy = vec2(ry,rz);	
if( rx >= 0.0 )
{
faceId = 0;
}
else
{
faceId = 1;
}
}
else if( abs(ry) > abs(rx) && abs(ry) > abs(rz) )
{
stm.z = ry*2.0;
stm.xy = vec2(rx,rz);	
if( ry >= 0.0 )
{
faceId = 2;
}
else
{
faceId = 3;
}
}
else //if( abs(rz) > abs(ry) && abs(rz) > abs(rx) )
{
stm.z = rz*2.0;
stm.xy = vec2(rx,ry);	
if( rz >= 0.0 )
{
faceId = 4;
}
else
{
faceId = 5;
}
}
}
vec3 redcCUBEReverse(vec2 st, int faceId)
{
st.yx = st.xy;
vec3 v;
float majorAxis = 1.0;
if( faceId == 0 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = 1.0;
}
else if( faceId == 1 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = -1.0;
}
else if( faceId == 2 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = 1.0;
}
else if( faceId == 3 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = -1.0;
}
else if( faceId == 4 )
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = 1.0;
}
else
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = -1.0;
}
return v;
}
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R7i = ivec4(0);
ivec4 R8i = ivec4(0);
ivec4 R9i = ivec4(0);
ivec4 R10i = ivec4(0);
ivec4 R11i = ivec4(0);
ivec4 R12i = ivec4(0);
ivec4 R13i = ivec4(0);
ivec4 R14i = ivec4(0);
ivec4 R15i = ivec4(0);
ivec4 R16i = ivec4(0);
ivec4 R122i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R124i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
bool activeMaskStack[2];
bool activeMaskStackC[3];
activeMaskStack[0] = false;
activeMaskStackC[0] = false;
activeMaskStackC[1] = false;
activeMaskStack[0] = true;
activeMaskStackC[0] = true;
activeMaskStackC[1] = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
float cubeMapArrayIndex13 = 0.0;
float cubeMapArrayIndex14 = 0.0;
R0i = floatBitsToInt(passParameterSem133);
R1i = floatBitsToInt(passParameterSem134);
if( activeMaskStackC[1] == true ) {
R2i.x = floatBitsToInt(texture(textureUnitPS2, intBitsToFloat(R0i.xy)).x);
R3i.xyzw = floatBitsToInt(texture(textureUnitPS1, intBitsToFloat(R0i.xy)).xyzw);
R11i.xyzw = floatBitsToInt(texture(textureUnitPS5, intBitsToFloat(R0i.xy)).xyzw);

R4i.xyz = floatBitsToInt(texture(textureUnitPS3, intBitsToFloat(R0i.xy)).xyz);

// all alpha values should be 0.0 or 1.0, except for sky which is 0.1 to 0.2,
// sky has no visible effect anyway, so we can scrap it and pretend it's zero,
// only broken foliage is 0.01 to 0.99, so we override when we detect breaks
float alpha = texture(textureUnitPS3, intBitsToFloat(R0i.xy)).w;
if(alpha > 0.0)
	if(alpha < 1.0)
		R4i = ivec4(0,0,0,0);

R6i.xyzw = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R0i.xy)).xyzw);
R12i.x = floatBitsToInt(texture(textureUnitPS11, intBitsToFloat(R0i.xy)).z);
}
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
R127i.x = floatBitsToInt(intBitsToFloat(uf_remappedPS[0].z) * 1.0);
R127i.y = floatBitsToInt(intBitsToFloat(uf_remappedPS[0].y) * 1.0);
R127i.z = floatBitsToInt(intBitsToFloat(uf_remappedPS[0].x) * 1.0);
PV0i.w = floatBitsToInt(-(intBitsToFloat(R1i.w)) + intBitsToFloat(R2i.x));
R2i.x = floatBitsToInt((intBitsToFloat(R3i.x) * 2.0 + -(1.0)));
PS0i = R2i.x;
// 1
R13i.x = floatBitsToInt(-(intBitsToFloat(R11i.x)) + 1.0);
R0i.y = floatBitsToInt((intBitsToFloat(R3i.y) * 2.0 + -(1.0)));
R124i.z = floatBitsToInt((intBitsToFloat(R3i.z) * 2.0 + -(1.0)));
R0i.w = floatBitsToInt(intBitsToFloat(uf_remappedPS[1].x) * intBitsToFloat(0x3ec4ec4f));
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PV0i.w));
// 2
R126i.x = floatBitsToInt(intBitsToFloat(R1i.x) * intBitsToFloat(PS1i));
PV0i.x = R126i.x;
R126i.y = floatBitsToInt(intBitsToFloat(R1i.y) * intBitsToFloat(PS1i));
PV0i.y = R126i.y;
R126i.z = floatBitsToInt(intBitsToFloat(R1i.z) * intBitsToFloat(PS1i));
PV0i.z = R126i.z;
R2i.w = floatBitsToInt(intBitsToFloat(uf_remappedPS[1].y) * intBitsToFloat(0x3ec4ec4f));
R9i.y = floatBitsToInt(-(intBitsToFloat(R11i.y)) + 1.0);
PS0i = R9i.y;
// 3
R14i.x = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(uf_remappedPS[2].x));
R7i.y = floatBitsToInt(intBitsToFloat(PV0i.y) + intBitsToFloat(uf_remappedPS[2].y));
R3i.z = floatBitsToInt(intBitsToFloat(PV0i.z) + intBitsToFloat(uf_remappedPS[2].z));
PV1i.z = R3i.z;
R7i.w = floatBitsToInt((intBitsToFloat(R3i.w) * intBitsToFloat(0xc1300000) + intBitsToFloat(0x41300069)));
R7i.z = floatBitsToInt(-(intBitsToFloat(R11i.z)) + 1.0);
PS1i = R7i.z;
// 4
R15i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R13i.x),intBitsToFloat(R11i.w)) + intBitsToFloat(R11i.x)));
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),intBitsToFloat(uf_remappedPS[3].z)) + intBitsToFloat(R127i.x)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),intBitsToFloat(uf_remappedPS[3].y)) + intBitsToFloat(R127i.y)));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),intBitsToFloat(uf_remappedPS[3].x)) + intBitsToFloat(R127i.z)));
PV0i.w = R123i.w;
R10i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R9i.y),intBitsToFloat(R11i.w)) + intBitsToFloat(R11i.y)));
PS0i = R10i.y;
// 5
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.y),intBitsToFloat(uf_remappedPS[4].x)) + intBitsToFloat(PV0i.w)));
PV1i.x = R123i.x;
PV1i.y = floatBitsToInt(intBitsToFloat(R124i.z) * intBitsToFloat(R124i.z));
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.y),intBitsToFloat(uf_remappedPS[4].z)) + intBitsToFloat(PV0i.y)));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.y),intBitsToFloat(uf_remappedPS[4].y)) + intBitsToFloat(PV0i.z)));
PV1i.w = R123i.w;
R5i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.z),intBitsToFloat(R11i.w)) + intBitsToFloat(R11i.z)));
PS1i = R5i.z;
// 6
R124i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R14i.x),intBitsToFloat(uf_remappedPS[5].y)) + intBitsToFloat(PV1i.w)));
PV0i.x = R124i.x;
R3i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R14i.x),intBitsToFloat(uf_remappedPS[5].x)) + intBitsToFloat(PV1i.x)));
PV0i.y = R3i.y;
R125i.z = floatBitsToInt(intBitsToFloat(R1i.z) * intBitsToFloat(R1i.z));
R124i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R14i.x),intBitsToFloat(uf_remappedPS[5].z)) + intBitsToFloat(PV1i.z)));
R122i.x = floatBitsToInt((intBitsToFloat(R0i.y) * intBitsToFloat(R0i.y) + intBitsToFloat(PV1i.y)));
PS0i = R122i.x;
// 7
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(uf_remappedPS[6].z)) + intBitsToFloat(uf_remappedPS[7].x)));
PV1i.x = R127i.x;
PV1i.y = floatBitsToInt(max(intBitsToFloat(PV0i.x), -(intBitsToFloat(PV0i.x))));
PV1i.z = floatBitsToInt(max(intBitsToFloat(PV0i.y), -(intBitsToFloat(PV0i.y))));
R127i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(uf_remappedPS[6].w)) + intBitsToFloat(uf_remappedPS[7].y)));
PV1i.w = R127i.w;
R126i.w = floatBitsToInt((intBitsToFloat(R2i.x) * intBitsToFloat(R2i.x) + intBitsToFloat(PS0i)));
PS1i = R126i.w;
// 8
PV0i.x = floatBitsToInt(max(intBitsToFloat(PV1i.x), -(intBitsToFloat(PV1i.x))));
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.x),intBitsToFloat(uf_remappedPS[6].y)) + intBitsToFloat(uf_remappedPS[8].y)));
PV0i.y = R127i.y;
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.y),intBitsToFloat(uf_remappedPS[6].x)) + intBitsToFloat(uf_remappedPS[8].x)));
PV0i.z = R127i.z;
PV0i.w = floatBitsToInt(max(intBitsToFloat(PV1i.w), -(intBitsToFloat(PV1i.w))));
R125i.x = floatBitsToInt(max(intBitsToFloat(PV1i.z), intBitsToFloat(PV1i.y)));
PS0i = R125i.x;
// 9
PV1i.x = floatBitsToInt(max(intBitsToFloat(PV0i.y), -(intBitsToFloat(PV0i.y))));
R125i.y = R127i.x;
R125i.y = floatBitsToInt(intBitsToFloat(R125i.y) / 2.0);
PV1i.z = floatBitsToInt(max(intBitsToFloat(PV0i.x), intBitsToFloat(PV0i.w)));
PV1i.w = floatBitsToInt(max(intBitsToFloat(PV0i.z), -(intBitsToFloat(PV0i.z))));
R124i.y = floatBitsToInt(intBitsToFloat(R127i.w) * intBitsToFloat(0xbe2aaaab));
PS1i = R124i.y;
// 10
backupReg0i = R127i.z;
backupReg1i = R127i.y;
R127i.x = floatBitsToInt(intBitsToFloat(R124i.w) + intBitsToFloat(uf_remappedPS[7].z));
PV0i.y = floatBitsToInt(max(intBitsToFloat(PV1i.w), intBitsToFloat(PV1i.x)));
R127i.z = backupReg0i;
R127i.z = floatBitsToInt(intBitsToFloat(R127i.z) / 2.0);
R127i.w = floatBitsToInt(intBitsToFloat(PV1i.z) + -(intBitsToFloat(0x3f7d70a4)));
R127i.y = floatBitsToInt(intBitsToFloat(backupReg1i) * intBitsToFloat(0xbe2aaaab));
PS0i = R127i.y;
// 11
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R126i.x),intBitsToFloat(R126i.y),intBitsToFloat(R126i.z),-0.0),vec4(intBitsToFloat(uf_remappedPS[9].x),intBitsToFloat(uf_remappedPS[9].y),intBitsToFloat(uf_remappedPS[9].z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R4i.w = tempi.x;
R126i.x = floatBitsToInt(intBitsToFloat(PV0i.y) + -(intBitsToFloat(0x3f7d70a4)));
PS1i = R126i.x;
// 12
backupReg0i = R125i.y;
R123i.x = floatBitsToInt((intBitsToFloat(R1i.y) * intBitsToFloat(R1i.y) + intBitsToFloat(R125i.z)));
PV0i.x = R123i.x;
R125i.y = floatBitsToInt(intBitsToFloat(R125i.x) + -(intBitsToFloat(0x3f7d70a4)));
PV0i.z = ((0.0 > intBitsToFloat(R127i.w))?int(0xFFFFFFFF):int(0x0));
R127i.w = floatBitsToInt(intBitsToFloat(backupReg0i) + 0.5);
tempResultf = 1.0 / sqrt(intBitsToFloat(R126i.w));
R125i.w = floatBitsToInt(tempResultf);
PS0i = R125i.w;
// 13
backupReg0i = R126i.x;
backupReg1i = R124i.y;
R126i.x = ((PV0i.z == 0)?(0):(R127i.x));
R124i.y = ((0.0 > intBitsToFloat(backupReg0i))?int(0xFFFFFFFF):int(0x0));
R125i.z = floatBitsToInt((intBitsToFloat(R1i.x) * intBitsToFloat(R1i.x) + intBitsToFloat(PV0i.x)));
R126i.w = floatBitsToInt(intBitsToFloat(backupReg1i) + intBitsToFloat(0x3f555555));
R127i.x = floatBitsToInt(intBitsToFloat(R127i.z) + 0.5);
PS1i = R127i.x;
// 14
backupReg0i = R124i.x;
backupReg1i = R127i.y;
R124i.x = floatBitsToInt(intBitsToFloat(backupReg0i) * intBitsToFloat(0xbe2aaaab));
R127i.y = R3i.y;
R127i.y = floatBitsToInt(intBitsToFloat(R127i.y) / 2.0);
PV0i.z = floatBitsToInt(intBitsToFloat(R124i.w) + intBitsToFloat(uf_remappedPS[8].z));
PV0i.w = floatBitsToInt(intBitsToFloat(backupReg1i) + 0.5);
R126i.y = floatBitsToInt(intBitsToFloat(R4i.w) * intBitsToFloat(0x3ccccccd));
PS0i = R126i.y;
// 15
backupReg0i = R127i.x;
backupReg1i = R125i.y;
R127i.x = ((R124i.y == 0)?(R126i.w):(PV0i.w));
R125i.y = ((R124i.y == 0)?(R127i.w):(backupReg0i));
R127i.z = ((0.0 > intBitsToFloat(backupReg1i))?int(0xFFFFFFFF):int(0x0));
R127i.w = ((R124i.y == 0)?(R126i.x):(PV0i.z));
R16i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.x), intBitsToFloat(R125i.w)));
PS1i = R16i.x;
// 16
backupReg0i = R124i.x;
R124i.x = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(0x3e2aaaaa));
R8i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.y), intBitsToFloat(R125i.w)));
PV0i.y = R8i.y;
R10i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.z), intBitsToFloat(R125i.w)));
PV0i.z = R10i.z;
PV0i.w = floatBitsToInt(intBitsToFloat(R127i.y) + 0.5);
R126i.x = floatBitsToInt(-(intBitsToFloat(R126i.y)) + 1.0);
R126i.x = clampFI32(R126i.x);
PS0i = R126i.x;
// 17
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R16i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),-0.0),vec4(-(intBitsToFloat(uf_remappedPS[10].x)),-(intBitsToFloat(uf_remappedPS[10].y)),-(intBitsToFloat(uf_remappedPS[10].z)),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R5i.w = tempi.x;
R5i.x = ((R127i.z == 0)?(R125i.y):(PV0i.w));
PS1i = R5i.x;
// 18
R10i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.x), intBitsToFloat(R4i.x)));
R5i.y = ((R127i.z == 0)?(R127i.x):(R124i.x));
R8i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.z), intBitsToFloat(R4i.z)));
R8i.w = ((R127i.z == 0)?(R127i.w):(R124i.w));
R12i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.y), intBitsToFloat(R4i.y)));
PS0i = R12i.y;
// 19
backupReg0i = R6i.y;
backupReg0i = R6i.y;
R9i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.x), intBitsToFloat(R6i.x)));
R6i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(backupReg0i)));
R9i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.z), intBitsToFloat(R6i.z)));
R6i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.x), intBitsToFloat(R0i.w)));
PS1i = R6i.x;
// 20
R3i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.x), intBitsToFloat(R2i.w)));
tempResultf = 1.0 / sqrt(intBitsToFloat(R125i.z));
PS0i = floatBitsToInt(tempResultf);
// 21
R8i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(PS0i)));
R13i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.y), intBitsToFloat(PS0i)));
R6i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.z), intBitsToFloat(PS0i)));
// 22
predResult = (intBitsToFloat(R6i.x) == 0.0);
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
R0i.xyzw = floatBitsToInt(textureGather(textureUnitPS15, vec2(0.0001) + intBitsToFloat(R5i.xy)).xyzw);
}
if( activeMaskStackC[2] == true ) {
// 0
R127i.x = floatBitsToInt((intBitsToFloat(R0i.w) >= intBitsToFloat(R8i.w))?1.0:0.0);
R127i.y = floatBitsToInt((intBitsToFloat(R0i.z) >= intBitsToFloat(R8i.w))?1.0:0.0);
PV0i.z = floatBitsToInt((intBitsToFloat(R0i.y) >= intBitsToFloat(R8i.w))?1.0:0.0);
PV0i.w = floatBitsToInt((intBitsToFloat(R0i.x) >= intBitsToFloat(R8i.w))?1.0:0.0);
R0i.w = floatBitsToInt(1.0);
PS0i = R0i.w;
// 1
PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.w) + intBitsToFloat(PV0i.z));
// 2
PV0i.z = floatBitsToInt(intBitsToFloat(R127i.y) + intBitsToFloat(PV1i.w));
// 3
PV1i.y = floatBitsToInt(intBitsToFloat(R127i.x) + intBitsToFloat(PV0i.z));
// 4
R7i.x = floatBitsToInt(intBitsToFloat(PV1i.y) * 0.25);
}
activeMaskStack[1] = activeMaskStack[1] == false;
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
// 0
R0i.w = 0;
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
predResult = (R0i.w == 0);
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
R0i.x = floatBitsToInt(texture(textureUnitPS15, intBitsToFloat(R5i.xy)).x);
}
if( activeMaskStackC[2] == true ) {
// 0
R2i.x = 0;
R1i.y = 0;
R127i.z = floatBitsToInt(-(intBitsToFloat(R6i.x)));
PV0i.z = R127i.z;
PV0i.w = 0;
R2i.y = floatBitsToInt(-(intBitsToFloat(R3i.y)));
PS0i = R2i.y;
// 1
R1i.x = floatBitsToInt(intBitsToFloat(R5i.x) + intBitsToFloat(PV0i.z));
R4i.y = R3i.y;
R1i.z = floatBitsToInt(intBitsToFloat(R5i.y) + intBitsToFloat(PV0i.w));
R127i.w = R3i.y;
R0i.y = floatBitsToInt(-(intBitsToFloat(R3i.y)));
PS1i = R0i.y;
// 2
backupReg0i = R2i.x;
backupReg1i = R2i.y;
backupReg0i = R2i.x;
R2i.x = floatBitsToInt(intBitsToFloat(R5i.x) + intBitsToFloat(R6i.x));
R2i.y = floatBitsToInt(intBitsToFloat(R5i.y) + intBitsToFloat(R1i.y));
R0i.z = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(R5i.x));
R0i.w = floatBitsToInt(intBitsToFloat(backupReg1i) + intBitsToFloat(R5i.y));
R3i.x = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(R5i.x));
PS0i = R3i.x;
// 3
backupReg0i = R3i.y;
backupReg0i = R3i.y;
R4i.x = floatBitsToInt(intBitsToFloat(R5i.x) + -(intBitsToFloat(R6i.x)));
R3i.y = floatBitsToInt(intBitsToFloat(R4i.y) + intBitsToFloat(R5i.y));
R4i.z = floatBitsToInt(intBitsToFloat(R5i.y) + -(intBitsToFloat(backupReg0i)));
R1i.w = floatBitsToInt(intBitsToFloat(R5i.x) + intBitsToFloat(R6i.x));
R1i.y = floatBitsToInt(intBitsToFloat(R5i.y) + intBitsToFloat(backupReg0i));
PS1i = R1i.y;
// 4
backupReg0i = R0i.y;
backupReg1i = R0i.x;
R0i.x = floatBitsToInt(intBitsToFloat(R5i.x) + intBitsToFloat(R6i.x));
R0i.y = floatBitsToInt(intBitsToFloat(R5i.y) + intBitsToFloat(backupReg0i));
R2i.z = floatBitsToInt(intBitsToFloat(R5i.x) + intBitsToFloat(R127i.z));
R2i.w = floatBitsToInt(intBitsToFloat(R5i.y) + intBitsToFloat(R127i.w));
R3i.w = floatBitsToInt((intBitsToFloat(backupReg1i) >= intBitsToFloat(R8i.w))?1.0:0.0);
PS0i = R3i.w;
}
if( activeMaskStackC[2] == true ) {
R1i.x = floatBitsToInt(texture(textureUnitPS15, intBitsToFloat(R1i.xz)).x);
R2i.x = floatBitsToInt(texture(textureUnitPS15, intBitsToFloat(R2i.xy)).x);
R5i.x = floatBitsToInt(texture(textureUnitPS15, intBitsToFloat(R0i.zw)).x);
R3i.x = floatBitsToInt(texture(textureUnitPS15, intBitsToFloat(R3i.xy)).x);
R4i.x = floatBitsToInt(texture(textureUnitPS15, intBitsToFloat(R4i.xz)).x);
R6i.x = floatBitsToInt(texture(textureUnitPS15, intBitsToFloat(R1i.wy)).x);
R0i.x = floatBitsToInt(texture(textureUnitPS15, intBitsToFloat(R0i.xy)).x);
R7i.x = floatBitsToInt(texture(textureUnitPS15, intBitsToFloat(R2i.zw)).x);
}
if( activeMaskStackC[2] == true ) {
// 0
R127i.x = floatBitsToInt((intBitsToFloat(R5i.x) >= intBitsToFloat(R8i.w))?1.0:0.0);
R127i.x = floatBitsToInt(intBitsToFloat(R127i.x) * 2.0);
R127i.z = floatBitsToInt((intBitsToFloat(R1i.x) >= intBitsToFloat(R8i.w))?1.0:0.0);
R127i.z = floatBitsToInt(intBitsToFloat(R127i.z) * 2.0);
R127i.w = floatBitsToInt((intBitsToFloat(R2i.x) >= intBitsToFloat(R8i.w))?1.0:0.0);
R127i.w = floatBitsToInt(intBitsToFloat(R127i.w) * 2.0);
// 1
PV1i.x = floatBitsToInt((intBitsToFloat(R6i.x) >= intBitsToFloat(R8i.w))?1.0:0.0);
PV1i.z = floatBitsToInt((intBitsToFloat(R4i.x) >= intBitsToFloat(R8i.w))?1.0:0.0);
R126i.w = floatBitsToInt((intBitsToFloat(R3i.x) >= intBitsToFloat(R8i.w))?1.0:0.0);
R126i.w = floatBitsToInt(intBitsToFloat(R126i.w) * 2.0);
// 2
backupReg0i = R0i.x;
backupReg1i = R127i.w;
PV0i.x = floatBitsToInt((intBitsToFloat(R7i.x) >= intBitsToFloat(R8i.w))?1.0:0.0);
R127i.y = floatBitsToInt(intBitsToFloat(R127i.z) + intBitsToFloat(PV1i.z));
PV0i.z = floatBitsToInt((intBitsToFloat(backupReg0i) >= intBitsToFloat(R8i.w))?1.0:0.0);
R127i.w = floatBitsToInt(intBitsToFloat(backupReg1i) + intBitsToFloat(PV1i.x));
// 3
PV1i.z = floatBitsToInt(intBitsToFloat(R127i.x) + intBitsToFloat(PV0i.z));
PV1i.w = floatBitsToInt(intBitsToFloat(R126i.w) + intBitsToFloat(PV0i.x));
// 4
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.y),intBitsToFloat(R127i.w),intBitsToFloat(PV1i.z),intBitsToFloat(PV1i.w)),vec4(intBitsToFloat(0x3d800000),intBitsToFloat(0x3d800000),intBitsToFloat(0x3d800000),intBitsToFloat(0x3d800000))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
// 5
R7i.x = floatBitsToInt((intBitsToFloat(R3i.w) * 0.25 + intBitsToFloat(PV0i.x)));
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
// 0
redcCUBE(vec4(intBitsToFloat(R10i.z),intBitsToFloat(R10i.z),intBitsToFloat(R16i.x),intBitsToFloat(R8i.y)),vec4(intBitsToFloat(R8i.y),intBitsToFloat(R16i.x),intBitsToFloat(R10i.z),intBitsToFloat(R10i.z)),cubeMapSTM,cubeMapFaceId);
R1i.x = floatBitsToInt(cubeMapSTM.x);
R1i.y = floatBitsToInt(cubeMapSTM.y);
R1i.z = floatBitsToInt(cubeMapSTM.z);
R1i.w = cubeMapFaceId;
PV0i.x = R1i.x;
PV0i.y = R1i.y;
PV0i.z = R1i.z;
PV0i.w = R1i.w;
R0i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R14i.x),intBitsToFloat(uf_remappedPS[11].z)) + intBitsToFloat(uf_remappedPS[11].w)));
PS0i = R0i.x;
// 1
R3i.x = floatBitsToInt(intBitsToFloat(R8i.x) + -(intBitsToFloat(uf_remappedPS[10].x)));
R0i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.z),intBitsToFloat(uf_remappedPS[11].z)) + intBitsToFloat(uf_remappedPS[11].w)));
R0i.z = floatBitsToInt(intBitsToFloat(R13i.y) + -(intBitsToFloat(uf_remappedPS[10].y)));
PV1i.w = R7i.x;
PV1i.w = clampFI32(PV1i.w);
PS1i = floatBitsToInt(1.0 / abs(intBitsToFloat(PV0i.z)));
// 2
backupReg0i = R1i.x;
backupReg1i = R1i.y;
R1i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(PS1i)) + 1.5));
R1i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg1i),intBitsToFloat(PS1i)) + 1.5));
R2i.z = floatBitsToInt(intBitsToFloat(R6i.z) + -(intBitsToFloat(uf_remappedPS[10].z)));
PV0i.z = R2i.z;
R2i.w = floatBitsToInt((-(intBitsToFloat(R5i.w)) * 0.5 + 1.0));
R2i.y = floatBitsToInt(intBitsToFloat(PV1i.w) + -(intBitsToFloat(uf_remappedPS[12].y)));
PS0i = R2i.y;
// 3
R2i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R0i.z),intBitsToFloat(PV0i.z),-0.0),vec4(intBitsToFloat(R3i.x),intBitsToFloat(R0i.z),intBitsToFloat(PV0i.z),0.0)));
PV1i.x = R2i.x;
PV1i.y = R2i.x;
PV1i.z = R2i.x;
PV1i.w = R2i.x;
R0i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R4i.w)),intBitsToFloat(uf_remappedPS[12].w)) + intBitsToFloat(uf_remappedPS[13].w)));
R0i.w = clampFI32(R0i.w);
PS1i = R0i.w;
}
if( activeMaskStackC[1] == true ) {
R0i.x = floatBitsToInt(texture(textureUnitPS4, intBitsToFloat(R0i.xy)).y);
R4i.xyz = floatBitsToInt(texture(textureUnitPS13, vec4(redcCUBEReverse(intBitsToFloat(R1i.yx),R1i.w),cubeMapArrayIndex13)).xyz);
R1i.xyz = floatBitsToInt(texture(textureUnitPS14, vec4(redcCUBEReverse(intBitsToFloat(R1i.yx),R1i.w),cubeMapArrayIndex14)).xyz);
}
if( activeMaskStackC[1] == true ) {
// 0
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R8i.x),intBitsToFloat(R13i.y),intBitsToFloat(R6i.z),-0.0),vec4(intBitsToFloat(R16i.x),intBitsToFloat(R8i.y),intBitsToFloat(R10i.z),0.0)));
tempi.x = clampFI32(tempi.x);
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R125i.z = tempi.x;
tempResultf = 1.0 / sqrt(intBitsToFloat(R2i.x));
PS0i = floatBitsToInt(tempResultf);
// 1
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.x), intBitsToFloat(PS0i)));
PV1i.x = R126i.x;
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.z), intBitsToFloat(PS0i)));
PV1i.y = R127i.y;
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.z), intBitsToFloat(PS0i)));
PV1i.z = R127i.z;
R127i.w = floatBitsToInt((-(intBitsToFloat(PV0i.x)) * 0.5 + 1.0));
PV1i.w = R127i.w;
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.w), intBitsToFloat(R0i.w)));
R127i.x = clampFI32(R127i.x);
PS1i = R127i.x;
// 2
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R16i.x),intBitsToFloat(R8i.y),intBitsToFloat(R10i.z),-0.0),vec4(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.z),0.0)));
tempi.x = clampFI32(tempi.x);
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
PS0i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(PV1i.w)));
// 3
backupReg0i = R127i.x;
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.y),intBitsToFloat(backupReg0i)) + intBitsToFloat(uf_remappedPS[12].y)));
R126i.y = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(0x38d1b717));
R126i.y = clampFI32(R126i.y);
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(PS0i)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.w), intBitsToFloat(R2i.w)));
R125i.x = floatBitsToInt(-(intBitsToFloat(R14i.x)) + intBitsToFloat(uf_remappedPS[14].x));
PS1i = R125i.x;
// 4
backupReg0i = R127i.y;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R8i.x),intBitsToFloat(R13i.y),intBitsToFloat(R6i.z),-0.0),vec4(intBitsToFloat(R126i.x),intBitsToFloat(backupReg0i),intBitsToFloat(R127i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.y = tempi.x;
PS0i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(PV1i.w)));
// 5
backupReg0i = R127i.x;
backupReg0i = R127i.x;
R127i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R127i.w)),intBitsToFloat(R126i.z)) + 1.0));
PV1i.y = floatBitsToInt(-(intBitsToFloat(R7i.y)) + intBitsToFloat(uf_remappedPS[14].y));
PV1i.z = floatBitsToInt(-(intBitsToFloat(R3i.z)) + intBitsToFloat(uf_remappedPS[14].z));
R126i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R2i.w)),intBitsToFloat(PS0i)) + 1.0));
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(backupReg0i)));
PS1i = R126i.z;
// 6
backupReg0i = R0i.x;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R125i.x),intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.z),-0.0),vec4(intBitsToFloat(R125i.x),intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R124i.y = tempi.x;
R127i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(uf_remappedPS[11].x)) + intBitsToFloat(uf_remappedPS[11].y)));
PS0i = R127i.w;
// 7
backupReg0i = R125i.z;
R125i.x = floatBitsToInt(-(intBitsToFloat(R6i.w)) + 1.0);
R2i.y = floatBitsToInt(-(intBitsToFloat(R127i.y)) + 1.0);
R2i.y = clampFI32(R2i.y);
R125i.z = floatBitsToInt(intBitsToFloat(R9i.x) * intBitsToFloat(0x3ec66769));
R125i.w = floatBitsToInt(max(intBitsToFloat(R5i.w), intBitsToFloat(backupReg0i)));
R126i.x = floatBitsToInt(exp2(intBitsToFloat(R7i.w)));
PS1i = R126i.x;
// 8
backupReg0i = R126i.y;
R124i.x = floatBitsToInt(intBitsToFloat(R9i.z) * intBitsToFloat(0x3ec66769));
R125i.y = floatBitsToInt(intBitsToFloat(R6i.y) * intBitsToFloat(0x3ec66769));
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.x), intBitsToFloat(R4i.x)));
R127i.z = floatBitsToInt(intBitsToFloat(R127i.z) * 4.0);
R124i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.y), intBitsToFloat(R4i.y)));
R124i.w = floatBitsToInt(intBitsToFloat(R124i.w) * 4.0);
tempResultf = max(0.0, intBitsToFloat(backupReg0i));
tempResultf = log2(tempResultf);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
R126i.y = floatBitsToInt(tempResultf);
PS0i = R126i.y;
// 9
backupReg0i = R127i.x;
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.z), intBitsToFloat(R4i.z)));
R127i.x = floatBitsToInt(intBitsToFloat(R127i.x) * 4.0);
R4i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.z), intBitsToFloat(R127i.w)));
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(R126i.w)));
R127i.w = floatBitsToInt((-(intBitsToFloat(R125i.x)) * intBitsToFloat(0x3f4ccccd) + 1.0));
R127i.w = clampFI32(R127i.w);
R125i.x = floatBitsToInt(intBitsToFloat(R126i.x) + 1.0);
PS1i = R125i.x;
// 10
backupReg0i = R126i.x;
backupReg1i = R127i.y;
backupReg2i = R125i.z;
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(R126i.y)));
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg1i), intBitsToFloat(R125i.w)));
R127i.y = clampFI32(R127i.y);
R125i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.y), intBitsToFloat(R2i.y)));
R125i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R13i.x), intBitsToFloat(backupReg2i)));
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R7i.z), intBitsToFloat(R124i.x)));
PS0i = R126i.y;
// 11
R124i.x = floatBitsToInt(intBitsToFloat(R9i.x) * intBitsToFloat(0x3ea2f983));
R3i.y = R5i.w;
R3i.y = clampFI32(R3i.y);
R124i.z = floatBitsToInt(intBitsToFloat(R6i.y) * intBitsToFloat(0x3ea2f983));
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R9i.y), intBitsToFloat(R125i.y)));
R2i.w = floatBitsToInt(intBitsToFloat(R9i.z) * intBitsToFloat(0x3ea2f983));
PS1i = R2i.w;
// 12
backupReg0i = R1i.z;
backupReg0i = R1i.z;
R4i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.y), intBitsToFloat(R1i.y)));
R4i.x = floatBitsToInt(intBitsToFloat(R4i.x) * 4.0);
R1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(R1i.x)));
R1i.y = floatBitsToInt(intBitsToFloat(R1i.y) * 4.0);
R1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(uf_remappedPS[15].z)));
R1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(backupReg0i)));
R1i.w = floatBitsToInt(intBitsToFloat(R1i.w) * 4.0);
R4i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.w), intBitsToFloat(uf_remappedPS[15].z)));
PS0i = R4i.z;
// 13
backupReg0i = R127i.y;
backupReg1i = R125i.x;
R125i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.y), intBitsToFloat(R127i.w)));
R127i.y = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(0x3aaa64c3));
R127i.z = floatBitsToInt(intBitsToFloat(backupReg1i) * intBitsToFloat(0x3d22f983));
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(uf_remappedPS[15].z)));
R127i.x = floatBitsToInt(sqrt(intBitsToFloat(R124i.y)));
PS1i = R127i.x;
// 14
backupReg0i = R126i.y;
backupReg1i = R126i.x;
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.z), intBitsToFloat(R125i.z)));
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.z), intBitsToFloat(R125i.w)));
R125i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.z), intBitsToFloat(R126i.w)));
R125i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.z), intBitsToFloat(backupReg0i)));
R126i.z = floatBitsToInt(exp2(intBitsToFloat(backupReg1i)));
PS0i = R126i.z;
// 15
backupReg0i = R127i.x;
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.y), intBitsToFloat(R124i.z)));
R124i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.y), intBitsToFloat(R124i.x)));
R0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.y), intBitsToFloat(R2i.w)));
R126i.w = floatBitsToInt(intBitsToFloat(backupReg0i) * intBitsToFloat(0x3ca3d70a));
R126i.w = clampFI32(R126i.w);
R124i.z = floatBitsToInt(intBitsToFloat(R1i.y) + -(intBitsToFloat(R1i.z)));
PS1i = R124i.z;
// 16
backupReg0i = R127i.z;
PV0i.x = floatBitsToInt(intBitsToFloat(R1i.w) + -(intBitsToFloat(R127i.w)));
PV0i.y = floatBitsToInt(intBitsToFloat(R4i.x) + -(intBitsToFloat(R4i.z)));
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.y), intBitsToFloat(R126i.x)));
R124i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(R126i.z)));
R3i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.x), intBitsToFloat(uf_remappedPS[16].x)));
PS0i = R3i.z;
// 17
backupReg0i = R1i.z;
R2i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.x), intBitsToFloat(uf_remappedPS[16].y)));
R4i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(R126i.w)) + intBitsToFloat(R127i.w)));
R1i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(R126i.w)) + intBitsToFloat(R4i.z)));
R2i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.z),intBitsToFloat(R126i.w)) + intBitsToFloat(backupReg0i)));
R5i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.x), intBitsToFloat(uf_remappedPS[16].z)));
PS1i = R5i.y;
// 18
backupReg0i = R127i.y;
R125i.x = floatBitsToInt(-(intBitsToFloat(R11i.z)) + intBitsToFloat(R5i.z));
R127i.y = floatBitsToInt(-(intBitsToFloat(R11i.y)) + intBitsToFloat(R10i.y));
R6i.z = floatBitsToInt((intBitsToFloat(R12i.x) * intBitsToFloat(0x437f0000) + -(intBitsToFloat(0x431f0000))));
R6i.z = clampFI32(R6i.z);
R127i.w = floatBitsToInt(-(intBitsToFloat(R11i.x)) + intBitsToFloat(R15i.x));
R124i.z = floatBitsToInt(1.0 / intBitsToFloat(backupReg0i));
PS0i = R124i.z;
// 19
backupReg0i = R125i.z;
backupReg1i = R125i.w;
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.y), intBitsToFloat(R3i.y)));
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R13i.x), intBitsToFloat(R124i.y)));
R125i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(R3i.y)));
R125i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg1i), intBitsToFloat(R3i.y)));
R1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R7i.z), intBitsToFloat(R0i.z)));
PS1i = R1i.x;
// 20
R0i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.z),intBitsToFloat(R125i.x)) + intBitsToFloat(R11i.z)));
R2i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R9i.y), intBitsToFloat(R127i.x)));
R0i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.z),intBitsToFloat(R127i.w)) + intBitsToFloat(R11i.x)));
R0i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.z),intBitsToFloat(R127i.y)) + intBitsToFloat(R11i.y)));
R5i.z = floatBitsToInt(intBitsToFloat(R9i.y) * 1.0);
PS0i = R5i.z;
// 21
R3i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.y),intBitsToFloat(R125i.w)) + 0.0));
R0i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.x),intBitsToFloat(R125i.z)) + 0.0));
R4i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.z), intBitsToFloat(R124i.w)));
R3i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.z),intBitsToFloat(R126i.x)) + 0.0));
R2i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.z),intBitsToFloat(R126i.y)) + 0.0));
PS1i = R2i.z;
}
if( activeMaskStackC[1] == true ) {
// 0
backupReg0i = R0i.z;
PV0i.x = floatBitsToInt(-(intBitsToFloat(R1i.y)) + intBitsToFloat(R2i.w));
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.y),intBitsToFloat(R1i.x)) + 0.0));
PV0i.z = floatBitsToInt(-(intBitsToFloat(R4i.x)) + intBitsToFloat(R1i.z));
R125i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.x),intBitsToFloat(R2i.y)) + 0.0));
R124i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(R4i.z)));
PS0i = R124i.w;
// 1
backupReg0i = R0i.w;
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(R6i.z)) + intBitsToFloat(R4i.x)));
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(R6i.z)) + intBitsToFloat(R1i.y)));
PV1i.z = floatBitsToInt(-(intBitsToFloat(R1i.w)) + intBitsToFloat(R4i.y));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(R4i.z)));
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.x), intBitsToFloat(R4i.z)));
PS1i = R126i.x;
// 2
backupReg0i = R0i.y;
PV0i.x = floatBitsToInt(intBitsToFloat(R3i.w) + -(intBitsToFloat(R2i.z)));
PV0i.y = floatBitsToInt(intBitsToFloat(R3i.x) + -(intBitsToFloat(R126i.y)));
PV0i.z = floatBitsToInt(intBitsToFloat(backupReg0i) + -(intBitsToFloat(R125i.w)));
R127i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),intBitsToFloat(R6i.z)) + intBitsToFloat(R1i.w)));
R125i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(R3i.y)));
PS0i = R125i.x;
// 3
backupReg0i = R126i.y;
backupReg1i = R126i.x;
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(R6i.z)) + intBitsToFloat(R125i.w)));
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(R6i.z)) + intBitsToFloat(R2i.z)));
R124i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(R6i.z)) + intBitsToFloat(backupReg0i)));
R125i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.w), intBitsToFloat(R3i.y)));
R125i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg1i), intBitsToFloat(R3i.y)));
PS1i = R125i.z;
// 4
backupReg0i = R127i.x;
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.w), intBitsToFloat(R127i.w)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.w), intBitsToFloat(backupReg0i)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.w), intBitsToFloat(R127i.y)));
PV0i.w = floatBitsToInt(intBitsToFloat(R13i.x) * 1.0);
R127i.y = floatBitsToInt(intBitsToFloat(R7i.z) * 1.0);
PS0i = R127i.y;
// 5
backupReg0i = R125i.x;
R125i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), intBitsToFloat(PV0i.w)));
R124i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.y),intBitsToFloat(R125i.z)) + 0.0));
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.z),intBitsToFloat(R125i.w)) + 0.0));
PV1i.z = R123i.z;
R127i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.x),intBitsToFloat(backupReg0i)) + 0.0));
R125i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(R5i.z)));
PS1i = R125i.w;
// 6
PV0i.x = floatBitsToInt(intBitsToFloat(R124i.z) + 0.0);
PV0i.y = floatBitsToInt(intBitsToFloat(R126i.x) + 0.0);
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(R127i.y)));
PV0i.w = floatBitsToInt(intBitsToFloat(R126i.y) + 0.0);
R124i.z = floatBitsToInt(intBitsToFloat(PV1i.z) + 0.0);
PS0i = R124i.z;
// 7
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R6i.y),intBitsToFloat(R125i.w)) + intBitsToFloat(PV0i.y)));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R9i.x),intBitsToFloat(R125i.x)) + intBitsToFloat(PV0i.w)));
PV1i.y = R123i.y;
PV1i.z = floatBitsToInt(intBitsToFloat(R127i.w) + 0.0);
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R9i.z),intBitsToFloat(PV0i.z)) + intBitsToFloat(PV0i.x)));
PV1i.w = R123i.w;
PS1i = floatBitsToInt(intBitsToFloat(R124i.y) + 0.0);
// 8
PV0i.x = floatBitsToInt(intBitsToFloat(PS1i) + intBitsToFloat(PV1i.w));
PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.z) + intBitsToFloat(PV1i.x));
PV0i.z = floatBitsToInt(intBitsToFloat(R124i.z) + intBitsToFloat(PV1i.y));
R6i.w = floatBitsToInt(-(intBitsToFloat(R6i.z)) + 1.0);
// 9
R6i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R10i.x),intBitsToFloat(uf_remappedPS[17].y)) + intBitsToFloat(PV0i.z)));
R6i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R12i.y),intBitsToFloat(uf_remappedPS[17].y)) + intBitsToFloat(PV0i.y)));
R6i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R8i.z),intBitsToFloat(uf_remappedPS[17].y)) + intBitsToFloat(PV0i.x)));
}
// export
passPixelColor0 = vec4(intBitsToFloat(R6i.x), intBitsToFloat(R6i.y), intBitsToFloat(R6i.z), intBitsToFloat(R6i.w));
}
