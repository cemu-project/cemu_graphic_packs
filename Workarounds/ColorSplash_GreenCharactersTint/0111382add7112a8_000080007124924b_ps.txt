#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
#ifdef VULKAN
#define ATTR_LAYOUT(__vkSet, __location) layout(set = __vkSet, location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation)
#define SET_POSITION(_v) gl_Position = _v; gl_Position.z = (gl_Position.z + gl_Position.w) / 2.0
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale.xy,gl_FragCoord.zw)
#define gl_VertexID gl_VertexIndex
#define gl_InstanceID gl_InstanceIndex
#else
#define ATTR_LAYOUT(__vkSet, __location) layout(location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation, std140) 
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation)
#define SET_POSITION(_v) gl_Position = _v
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw)
#endif
// This shader was automatically converted to be cross-compatible with Vulkan and OpenGL.

// shader 0111382add7112a8
// Used for: Removing green tint from characters.


#ifdef VULKAN
layout(set = 1, binding = 10) uniform ufBlock
{
uniform ivec4 uf_remappedPS[37];
uniform float uf_alphaTestRef;
uniform vec4 uf_fragCoordScale;
};
#else
uniform ivec4 uf_remappedPS[37];
uniform float uf_alphaTestRef;
uniform vec2 uf_fragCoordScale;
#endif
// uf_alphaTestRef was moved to the ufBlock
TEXTURE_LAYOUT(0, 1, 0) uniform sampler2D textureUnitPS0;
TEXTURE_LAYOUT(2, 1, 1) uniform sampler2D textureUnitPS2;
TEXTURE_LAYOUT(3, 1, 2) uniform sampler2D textureUnitPS3;
TEXTURE_LAYOUT(4, 1, 3) uniform sampler2D textureUnitPS4;
TEXTURE_LAYOUT(6, 1, 4) uniform sampler2D textureUnitPS6;
TEXTURE_LAYOUT(7, 1, 5) uniform sampler2D textureUnitPS7;
TEXTURE_LAYOUT(10, 1, 6) uniform sampler2D textureUnitPS10;
TEXTURE_LAYOUT(11, 1, 7) uniform sampler2D textureUnitPS11;
TEXTURE_LAYOUT(12, 1, 8) uniform sampler2D textureUnitPS12;
TEXTURE_LAYOUT(15, 1, 9) uniform samplerCubeArray textureUnitPS15;
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem2;
layout(location = 3) in vec4 passParameterSem3;
layout(location = 4) in vec4 passParameterSem4;
layout(location = 5) in vec4 passParameterSem5;
layout(location = 6) in vec4 passParameterSem6;
layout(location = 7) in vec4 passParameterSem7;
layout(location = 8) in vec4 passParameterSem254;
layout(location = 0) out vec4 passPixelColor0;
layout(location = 1) out vec4 passPixelColor1;
layout(location = 2) out vec4 passPixelColor2;
layout(location = 3) out vec4 passPixelColor3;
layout(location = 4) out vec4 passPixelColor4;
// uf_fragCoordScale was moved to the ufBlock
void redcCUBE(vec4 src0, vec4 src1, out vec3 stm, out int faceId)
{
// stm -> x .. s, y .. t, z .. MajorAxis*2.0
vec3 inputCoord = normalize(vec3(src1.y, src1.x, src0.x));
float rx = inputCoord.x;
float ry = inputCoord.y;
float rz = inputCoord.z;
if( abs(rx) > abs(ry) && abs(rx) > abs(rz) )
{
stm.z = rx*2.0;
stm.xy = vec2(ry,rz);	
if( rx >= 0.0 )
{
faceId = 0;
}
else
{
faceId = 1;
}
}
else if( abs(ry) > abs(rx) && abs(ry) > abs(rz) )
{
stm.z = ry*2.0;
stm.xy = vec2(rx,rz);	
if( ry >= 0.0 )
{
faceId = 2;
}
else
{
faceId = 3;
}
}
else //if( abs(rz) > abs(ry) && abs(rz) > abs(rx) )
{
stm.z = rz*2.0;
stm.xy = vec2(rx,ry);	
if( rz >= 0.0 )
{
faceId = 4;
}
else
{
faceId = 5;
}
}
}
vec3 redcCUBEReverse(vec2 st, int faceId)
{
st.yx = st.xy;
vec3 v;
float majorAxis = 1.0;
if( faceId == 0 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = 1.0;
}
else if( faceId == 1 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = -1.0;
}
else if( faceId == 2 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = 1.0;
}
else if( faceId == 3 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = -1.0;
}
else if( faceId == 4 )
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = 1.0;
}
else
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = -1.0;
}
return v;
}
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ return min(a*b,min(abs(a)*3.40282347E+38F,abs(b)*3.40282347E+38F)); }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R7i = ivec4(0);
ivec4 R8i = ivec4(0);
ivec4 R9i = ivec4(0);
ivec4 R10i = ivec4(0);
ivec4 R11i = ivec4(0);
ivec4 R12i = ivec4(0);
ivec4 R13i = ivec4(0);
ivec4 R14i = ivec4(0);
ivec4 R15i = ivec4(0);
ivec4 R16i = ivec4(0);
ivec4 R17i = ivec4(0);
ivec4 R18i = ivec4(0);
ivec4 R122i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R124i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
bool activeMaskStack[4];
bool activeMaskStackC[5];
activeMaskStack[0] = false;
activeMaskStack[1] = false;
activeMaskStack[2] = false;
activeMaskStackC[0] = false;
activeMaskStackC[1] = false;
activeMaskStackC[2] = false;
activeMaskStackC[3] = false;
activeMaskStack[0] = true;
activeMaskStackC[0] = true;
activeMaskStackC[1] = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
float cubeMapArrayIndex15 = 0.0;
R0i = floatBitsToInt(passParameterSem0);
R1i = floatBitsToInt(passParameterSem1);
R2i = floatBitsToInt(passParameterSem2);
R3i = floatBitsToInt(passParameterSem3);
R4i = floatBitsToInt(passParameterSem4);
R5i = floatBitsToInt(passParameterSem5);
R6i = floatBitsToInt(passParameterSem6);
R7i = floatBitsToInt(passParameterSem7);
R8i = floatBitsToInt(passParameterSem254);
R8i.w = floatBitsToInt(gl_FrontFacing?1.0:0.0);
if( activeMaskStackC[1] == true ) {
R8i.xy = floatBitsToInt(texture(textureUnitPS2, intBitsToFloat(R3i.zw)).xy);
R9i.xyzw = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R3i.xy)).xyzw);
}
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R1i.x),intBitsToFloat(R1i.y),intBitsToFloat(R1i.z),-0.0),vec4(intBitsToFloat(R1i.x),intBitsToFloat(R1i.y),intBitsToFloat(R1i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
PS0i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.x), intBitsToFloat(R8i.x)));
// 1
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.y), intBitsToFloat(R8i.x)));
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].y), intBitsToFloat(PS0i)));
R127i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R8i.x)),intBitsToFloat(R8i.x)) + 1.0));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.z), intBitsToFloat(R8i.x)));
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.x));
PS1i = floatBitsToInt(tempResultf);
// 2
R7i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(PS1i)));
PV0i.x = R7i.x;
R7i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.y), intBitsToFloat(PS1i)));
PV0i.y = R7i.y;
R4i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.z), intBitsToFloat(PS1i)));
PV0i.z = R4i.z;
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].y), intBitsToFloat(PV1i.x)));
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].y), intBitsToFloat(PV1i.w)));
PS0i = R127i.x;
// 3
backupReg0i = R127i.z;
backupReg1i = R0i.x;
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.x), intBitsToFloat(PV0i.z)));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.z), intBitsToFloat(PV0i.y)));
R127i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R8i.y)),intBitsToFloat(R8i.y)) + intBitsToFloat(backupReg0i)));
R127i.z = clampFI32(R127i.z);
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.y), intBitsToFloat(PV0i.x)));
R126i.x = floatBitsToInt(intBitsToFloat(backupReg1i) + -(intBitsToFloat(uf_remappedPS[1].x)));
PS1i = R126i.x;
// 4
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R2i.x)),intBitsToFloat(R7i.y)) + intBitsToFloat(PV1i.w)));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R2i.z)),intBitsToFloat(R7i.x)) + intBitsToFloat(PV1i.x)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R2i.y)),intBitsToFloat(R4i.z)) + intBitsToFloat(PV1i.y)));
PV0i.z = R123i.z;
R126i.w = floatBitsToInt(intBitsToFloat(R0i.y) + -(intBitsToFloat(uf_remappedPS[1].y)));
R126i.z = floatBitsToInt(intBitsToFloat(R0i.z) + -(intBitsToFloat(uf_remappedPS[1].z)));
PS0i = R126i.z;
// 5
PV1i.x = floatBitsToInt((intBitsToFloat(R8i.w) > 0.0)?1.0:0.0);
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.w), intBitsToFloat(PV0i.x)));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.w), intBitsToFloat(PV0i.y)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.w), intBitsToFloat(PV0i.z)));
PS1i = floatBitsToInt((0.0 > intBitsToFloat(R8i.w))?1.0:0.0);
// 6
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R8i.y), intBitsToFloat(PV1i.w)));
R1i.y = floatBitsToInt(1.0);
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R8i.y), intBitsToFloat(PV1i.y)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R8i.y), intBitsToFloat(PV1i.z)));
R10i.x = floatBitsToInt(intBitsToFloat(PV1i.x) + -(intBitsToFloat(PS1i)));
R10i.x = clampFI32(R10i.x);
PS0i = R10i.x;
// 7
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(uf_remappedPS[0].y)) + intBitsToFloat(R127i.x)));
PV1i.x = R123i.x;
PV1i.y = floatBitsToInt(intBitsToFloat(R126i.z) * intBitsToFloat(R126i.z));
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(uf_remappedPS[0].y)) + intBitsToFloat(R127i.w)));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(uf_remappedPS[0].y)) + intBitsToFloat(R127i.y)));
PV1i.w = R123i.w;
R8i.z = 0;
PS1i = R8i.z;
// 8
backupReg0i = R127i.z;
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.x),intBitsToFloat(R127i.z)) + intBitsToFloat(PV1i.w)));
R125i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.y),intBitsToFloat(R127i.z)) + intBitsToFloat(PV1i.z)));
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.z),intBitsToFloat(backupReg0i)) + intBitsToFloat(PV1i.x)));
PV0i.z = R127i.z;
R5i.w = ((intBitsToFloat(R10i.x) != 0.0)?int(0xFFFFFFFF):int(0x0));
R122i.x = floatBitsToInt((intBitsToFloat(R126i.w) * intBitsToFloat(R126i.w) + intBitsToFloat(PV1i.y)));
PS0i = R122i.x;
// 9
R5i.x = 0;
R127i.y = floatBitsToInt((intBitsToFloat(R126i.x) * intBitsToFloat(R126i.x) + intBitsToFloat(PS0i)));
PV1i.z = floatBitsToInt(intBitsToFloat(PV0i.z) * intBitsToFloat(PV0i.z));
R8i.w = floatBitsToInt(1.0);
R12i.x = floatBitsToInt(intBitsToFloat(R9i.x) * 1.0);
PS1i = R12i.x;
// 10
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(R125i.y),intBitsToFloat(PV1i.z),-0.0),vec4(intBitsToFloat(R127i.x),intBitsToFloat(R125i.y),1.0,0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R126i.y = tempi.x;
R12i.y = floatBitsToInt(intBitsToFloat(R9i.y) * 1.0);
PS0i = R12i.y;
// 11
R12i.z = floatBitsToInt(intBitsToFloat(R9i.z) * 1.0);
R11i.w = floatBitsToInt(intBitsToFloat(R9i.w) * 1.0);
R10i.w = ((0.0 > intBitsToFloat(uf_remappedPS[2].x))?int(0xFFFFFFFF):int(0x0));
PS1i = R10i.w;
// 12
tempResultf = 1.0 / sqrt(intBitsToFloat(R127i.y));
PS0i = floatBitsToInt(tempResultf);
// 13
R8i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.x), intBitsToFloat(PS0i)));
R5i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.w), intBitsToFloat(PS0i)));
R6i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.z), intBitsToFloat(PS0i)));
tempResultf = 1.0 / sqrt(intBitsToFloat(R126i.y));
PS1i = floatBitsToInt(tempResultf);
// 14
R2i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(PS1i)));
R2i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.y), intBitsToFloat(PS1i)));
R2i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(PS1i)));
// 15
predResult = (R10i.w != 0);
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
activeMaskStack[2] = activeMaskStack[1];
activeMaskStackC[3] = activeMaskStackC[2];
// 0
predResult = (R5i.w != 0);
activeMaskStack[2] = predResult;
activeMaskStackC[3] = predResult == true && activeMaskStackC[2] == true;
}
else {
activeMaskStack[2] = false;
activeMaskStackC[3] = false;
}
if( activeMaskStackC[3] == true ) {
R12i.xyzw = floatBitsToInt(texture(textureUnitPS6, intBitsToFloat(R3i.xy)).xyzw);
}
if( activeMaskStackC[3] == true ) {
// 0
PV0i.x = floatBitsToInt(-(intBitsToFloat(R9i.w)) + intBitsToFloat(R12i.w));
R1i.y = 0xbf800000;
// 1
R11i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(uf_remappedPS[0].w)) + intBitsToFloat(R9i.w)));
}
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
activeMaskStack[1] = activeMaskStack[1] == false;
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
activeMaskStack[2] = activeMaskStack[1];
activeMaskStackC[3] = activeMaskStackC[2];
// 0
predResult = (0.0 == intBitsToFloat(R10i.x));
activeMaskStack[2] = predResult;
activeMaskStackC[3] = predResult == true && activeMaskStackC[2] == true;
}
else {
activeMaskStack[2] = false;
activeMaskStackC[3] = false;
}
if( activeMaskStackC[3] == true ) {
R1i.xyzw = floatBitsToInt(texture(textureUnitPS6, intBitsToFloat(R3i.xy)).xyzw);
}
if( activeMaskStackC[3] == true ) {
// 0
PV0i.x = floatBitsToInt(-(intBitsToFloat(R9i.w)) + intBitsToFloat(R1i.w));
R12i.y = floatBitsToInt(intBitsToFloat(R1i.y) * 1.0);
R12i.z = floatBitsToInt(intBitsToFloat(R1i.z) * 1.0);
R12i.x = floatBitsToInt(intBitsToFloat(R1i.x) * 1.0);
PS0i = R12i.x;
// 1
R1i.y = 0xbf800000;
R11i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(uf_remappedPS[0].w)) + intBitsToFloat(R9i.w)));
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
R9i.w = floatBitsToInt(texture(textureUnitPS7, intBitsToFloat(R4i.xy)).x);
}
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R12i.x),intBitsToFloat(R12i.y),intBitsToFloat(R12i.z),-0.0),vec4(intBitsToFloat(0x3e990afe),intBitsToFloat(0x3f162c23),intBitsToFloat(0x3dea7371),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R1i.w = tempi.x;
R11i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R7i.x), intBitsToFloat(R1i.y)));
PS0i = R11i.x;
// 1
R7i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.x), intBitsToFloat(R1i.y)));
R10i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R7i.y), intBitsToFloat(R1i.y)));
R10i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.z), intBitsToFloat(R1i.y)));
R7i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.y), intBitsToFloat(R1i.y)));
PS1i = R7i.y;
// 2
R16i.x = uf_remappedPS[3].x;
R16i.y = uf_remappedPS[3].y;
R7i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.z), intBitsToFloat(R1i.y)));
R16i.w = uf_remappedPS[3].w;
R16i.z = uf_remappedPS[3].z;
PS0i = R16i.z;
// 3
predResult = (intBitsToFloat(uf_remappedPS[4].w) > 0.0);
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
PV0i.x = floatBitsToInt(intBitsToFloat(uf_remappedPS[0].z) + intBitsToFloat(0xbdcccccd));
R127i.y = floatBitsToInt(intBitsToFloat(R9i.w) + intBitsToFloat(0xbf4ccccd));
PV0i.w = floatBitsToInt(intBitsToFloat(uf_remappedPS[0].z) + intBitsToFloat(0x3dcccccd));
// 1
PV1i.x = floatBitsToInt(intBitsToFloat(uf_remappedPS[4].x) + -(1.0));
PV1i.y = floatBitsToInt(-(intBitsToFloat(PV0i.x)) + intBitsToFloat(PV0i.w));
R127i.z = floatBitsToInt(intBitsToFloat(R1i.w) + -(intBitsToFloat(PV0i.x)));
PV1i.w = floatBitsToInt(intBitsToFloat(uf_remappedPS[4].y) + -(1.0));
PS1i = floatBitsToInt(intBitsToFloat(uf_remappedPS[4].z) + -(1.0));
// 2
R127i.x = floatBitsToInt(intBitsToFloat(uf_remappedPS[3].x) + -0.0);
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PS1i),intBitsToFloat(uf_remappedPS[4].w)) + 1.0));
R126i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.w),intBitsToFloat(uf_remappedPS[4].w)) + 1.0));
R127i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),intBitsToFloat(uf_remappedPS[4].w)) + 1.0));
PS0i = floatBitsToInt(1.0 / intBitsToFloat(PV1i.y));
// 3
backupReg0i = R127i.z;
backupReg1i = R127i.y;
R126i.x = floatBitsToInt(intBitsToFloat(uf_remappedPS[3].w) + -0.0);
R127i.y = floatBitsToInt(intBitsToFloat(uf_remappedPS[3].z) + -0.0);
R127i.z = floatBitsToInt(intBitsToFloat(uf_remappedPS[3].y) + -0.0);
PV1i.w = floatBitsToInt(intBitsToFloat(backupReg0i) * intBitsToFloat(PS0i));
PV1i.w = clampFI32(PV1i.w);
R9i.w = floatBitsToInt(intBitsToFloat(backupReg1i) * intBitsToFloat(0x40a00000));
R9i.w = clampFI32(R9i.w);
PS1i = R9i.w;
// 4
R9i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(R127i.w)));
R9i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(R126i.z)));
R9i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(R126i.y)));
R16i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(R127i.x)));
PS0i = R16i.x;
// 5
R16i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R9i.w), intBitsToFloat(R127i.z)));
R16i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R9i.w), intBitsToFloat(R127i.y)));
R16i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R9i.w), intBitsToFloat(R126i.x)));
}
activeMaskStack[1] = activeMaskStack[1] == false;
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
// 0
R127i.x = floatBitsToInt(intBitsToFloat(R1i.w) + intBitsToFloat(0x3f4ccccd));
R127i.x = clampFI32(R127i.x);
PV0i.z = floatBitsToInt(intBitsToFloat(R1i.w) + intBitsToFloat(0x3e4ccccd));
R127i.w = ((intBitsToFloat(uf_remappedPS[0].z) > intBitsToFloat(R1i.w))?int(0xFFFFFFFF):int(0x0));
// 1
PV1i.y = floatBitsToInt(max(intBitsToFloat(PV0i.z), 0.0));
// 2
PV0i.x = floatBitsToInt(min(intBitsToFloat(PV1i.y), intBitsToFloat(0x3eeb851f)));
// 3
R9i.x = ((R127i.w == 0)?(R127i.x):(PV0i.x));
R9i.y = ((R127i.w == 0)?(R127i.x):(PV0i.x));
R9i.z = ((R127i.w == 0)?(R127i.x):(PV0i.x));
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
R1i.z = floatBitsToInt(texture(textureUnitPS3, intBitsToFloat(R3i.zw)).x);
R2i.xyz = floatBitsToInt(texture(textureUnitPS4, intBitsToFloat(R3i.zw)).xyz);
}
if( activeMaskStackC[1] == true ) {
// 0
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R8i.x),intBitsToFloat(R5i.y),intBitsToFloat(R6i.z),-0.0),vec4(intBitsToFloat(R7i.x),intBitsToFloat(R7i.y),intBitsToFloat(R7i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
PS0i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].x), intBitsToFloat(R1i.z)));
// 1
R4i.x = floatBitsToInt(intBitsToFloat(uf_remappedPS[5].y) * intBitsToFloat(0x3b000000));
R4i.y = floatBitsToInt(intBitsToFloat(R12i.x) + -(intBitsToFloat(R9i.x)));
R127i.z = floatBitsToInt(-(intBitsToFloat(PS0i)) + 1.0);
PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(PV0i.x));
R1i.w = floatBitsToInt(intBitsToFloat(PS0i) * intBitsToFloat(0x41000000));
PS1i = R1i.w;
// 2
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.w)),intBitsToFloat(R7i.x)) + intBitsToFloat(R8i.x)));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.w)),intBitsToFloat(R7i.y)) + intBitsToFloat(R5i.y)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.w)),intBitsToFloat(R7i.z)) + intBitsToFloat(R6i.z)));
PV0i.z = R123i.z;
R3i.w = 0;
R17i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].x), intBitsToFloat(R2i.x)));
PS0i = R17i.x;
// 3
redcCUBE(vec4(intBitsToFloat(PV0i.z),intBitsToFloat(PV0i.z),intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y)),vec4(intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.z),intBitsToFloat(PV0i.z)),cubeMapSTM,cubeMapFaceId);
R126i.x = floatBitsToInt(cubeMapSTM.x);
R126i.y = floatBitsToInt(cubeMapSTM.y);
R126i.z = floatBitsToInt(cubeMapSTM.z);
R126i.w = cubeMapFaceId;
PV1i.x = R126i.x;
PV1i.y = R126i.y;
PV1i.z = R126i.z;
PV1i.w = R126i.w;
R11i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].y), intBitsToFloat(R2i.y)));
PS1i = R11i.y;
// 4
R127i.x = floatBitsToInt((-(intBitsToFloat(R127i.z)) * intBitsToFloat(0x40400000) + 4.0));
R8i.y = floatBitsToInt(-(intBitsToFloat(R17i.x)) + 1.0);
R1i.z = PV1i.w;
R2i.w = floatBitsToInt(-(intBitsToFloat(PS1i)) + 1.0);
PS0i = floatBitsToInt(1.0 / abs(intBitsToFloat(PV1i.z)));
// 5
R2i.x = floatBitsToInt(intBitsToFloat(R12i.y) + -(intBitsToFloat(R9i.y)));
R2i.y = floatBitsToInt(intBitsToFloat(R12i.z) + -(intBitsToFloat(R9i.z)));
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.y),intBitsToFloat(PS0i)) + 1.5));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.x),intBitsToFloat(PS0i)) + 1.5));
PV1i.w = R123i.w;
R11i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].z), intBitsToFloat(R2i.z)));
PS1i = R11i.z;
// 6
R1i.x = PV1i.z;
R1i.y = PV1i.w;
R2i.z = floatBitsToInt(-(intBitsToFloat(PS1i)) + 1.0);
R4i.w = 0;
R4i.z = floatBitsToInt(1.0 / intBitsToFloat(R127i.x));
PS0i = R4i.z;
}
if( activeMaskStackC[1] == true ) {
R1i.xyzw = floatBitsToInt(textureLod(textureUnitPS15, vec4(redcCUBEReverse(intBitsToFloat(R1i.xy),R1i.z),cubeMapArrayIndex15),intBitsToFloat(R1i.w)).xyzw);
}
if( activeMaskStackC[1] == true ) {
// 0
tempi.x = floatBitsToInt(dot(vec4(-(intBitsToFloat(R8i.x)),-(intBitsToFloat(R5i.y)),-(intBitsToFloat(R6i.z)),-(intBitsToFloat(R3i.w))),vec4(intBitsToFloat(R7i.x),intBitsToFloat(R7i.y),intBitsToFloat(R7i.z),intBitsToFloat(R7i.z))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
PS0i = floatBitsToInt(max(intBitsToFloat(R1i.w), intBitsToFloat(0x38d1b717)));
// 1
PV1i.x = floatBitsToInt(max(intBitsToFloat(PV0i.x), -(intBitsToFloat(PV0i.x))));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R10i.z), intBitsToFloat(uf_remappedPS[7].z)));
R127i.x = floatBitsToInt(1.0 / intBitsToFloat(PS0i));
PS1i = R127i.x;
// 2
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R11i.x),intBitsToFloat(R10i.y),intBitsToFloat(PV1i.y),-0.0),vec4(intBitsToFloat(uf_remappedPS[7].x),intBitsToFloat(uf_remappedPS[7].y),1.0,0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R126i.z = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + 1.0);
PS0i = R126i.z;
// 3
backupReg0i = R127i.x;
backupReg0i = R127i.x;
backupReg0i = R127i.x;
R127i.x = floatBitsToInt(intBitsToFloat(R1i.y) * intBitsToFloat(backupReg0i));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(PS0i)));
PV1i.z = floatBitsToInt(max(intBitsToFloat(PV0i.x), 0.0));
R126i.w = floatBitsToInt(intBitsToFloat(R1i.x) * intBitsToFloat(backupReg0i));
R126i.y = floatBitsToInt(intBitsToFloat(R1i.z) * intBitsToFloat(backupReg0i));
PS1i = R126i.y;
// 4
R12i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.y),intBitsToFloat(R9i.w)) + intBitsToFloat(R9i.x)));
PV0i.y = floatBitsToInt(-(intBitsToFloat(PV1i.z)) + 1.0);
PV0i.y = clampFI32(PV0i.y);
R12i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.y),intBitsToFloat(R9i.w)) + intBitsToFloat(R9i.z)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.y), intBitsToFloat(PV1i.y)));
R12i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.x),intBitsToFloat(R9i.w)) + intBitsToFloat(R9i.y)));
PS0i = R12i.y;
// 5
backupReg0i = R126i.y;
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(R4i.x)));
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.z), intBitsToFloat(PV0i.w)));
PV1i.y = R126i.y;
R125i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.w), intBitsToFloat(uf_remappedPS[8].x)));
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(uf_remappedPS[8].y)));
R124i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(uf_remappedPS[8].z)));
PS1i = R124i.y;
// 6
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.y),intBitsToFloat(R8i.y)) + intBitsToFloat(R17i.x)));
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R10i.y), intBitsToFloat(PV1i.x)));
PV0i.y = R127i.y;
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R11i.x), intBitsToFloat(PV1i.x)));
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R10i.z), intBitsToFloat(PV1i.x)));
PV0i.w = R126i.w;
R125i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.y),intBitsToFloat(R2i.w)) + intBitsToFloat(R11i.y)));
PS0i = R125i.y;
// 7
backupReg0i = R126i.y;
R126i.x = PV0i.w;
R126i.x = floatBitsToInt(intBitsToFloat(R126i.x) * 2.0);
R126i.y = PV0i.y;
R126i.y = floatBitsToInt(intBitsToFloat(R126i.y) * 2.0);
R126i.z = PV0i.z;
R126i.z = floatBitsToInt(intBitsToFloat(R126i.z) * 2.0);
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(R2i.z)) + intBitsToFloat(R11i.z)));
PV1i.w = R123i.w;
R127i.z = PV0i.z;
R127i.z = floatBitsToInt(intBitsToFloat(R127i.z) * 4.0);
PS1i = R127i.z;
// 8
backupReg0i = R127i.y;
backupReg1i = R127i.x;
R127i.x = R126i.w;
R127i.x = floatBitsToInt(intBitsToFloat(R127i.x) * 4.0);
R127i.y = backupReg0i;
R127i.y = floatBitsToInt(intBitsToFloat(R127i.y) * 4.0);
R124i.z = floatBitsToInt(intBitsToFloat(backupReg1i) * intBitsToFloat(R4i.z));
R124i.z = clampFI32(R124i.z);
R126i.w = floatBitsToInt(intBitsToFloat(R125i.y) * intBitsToFloat(R4i.z));
R126i.w = clampFI32(R126i.w);
R125i.w = floatBitsToInt(intBitsToFloat(PV1i.w) * intBitsToFloat(R4i.z));
R125i.w = clampFI32(R125i.w);
PS0i = R125i.w;
// 9
R1i.x = floatBitsToInt(intBitsToFloat(R0i.x) + intBitsToFloat(R126i.z));
R2i.y = floatBitsToInt(intBitsToFloat(R0i.y) + intBitsToFloat(R126i.y));
R1i.z = floatBitsToInt(intBitsToFloat(R0i.z) + intBitsToFloat(R126i.x));
R1i.w = floatBitsToInt(intBitsToFloat(R0i.w) + intBitsToFloat(R4i.w));
R2i.x = floatBitsToInt(intBitsToFloat(R0i.x) + intBitsToFloat(R127i.z));
PS1i = R2i.x;
// 10
backupReg0i = R0i.z;
R13i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.z), intBitsToFloat(R124i.z)));
R1i.y = floatBitsToInt(intBitsToFloat(R0i.y) + intBitsToFloat(R127i.y));
R0i.z = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(R127i.x));
R2i.w = floatBitsToInt(intBitsToFloat(R0i.w) + intBitsToFloat(R4i.w));
R14i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R12i.x), intBitsToFloat(uf_remappedPS[9].x)));
PS0i = R14i.x;
// 11
R0i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R1i.x),intBitsToFloat(R2i.y),intBitsToFloat(R1i.z),intBitsToFloat(R1i.w)),vec4(intBitsToFloat(uf_remappedPS[10].x),intBitsToFloat(uf_remappedPS[10].y),intBitsToFloat(uf_remappedPS[10].z),intBitsToFloat(uf_remappedPS[10].w))));
PV1i.x = R0i.x;
PV1i.y = R0i.x;
PV1i.z = R0i.x;
PV1i.w = R0i.x;
R5i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.w), intBitsToFloat(R126i.w)));
PS1i = R5i.y;
// 12
backupReg0i = R0i.z;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R2i.x),intBitsToFloat(R1i.y),intBitsToFloat(backupReg0i),intBitsToFloat(R2i.w)),vec4(intBitsToFloat(uf_remappedPS[11].x),intBitsToFloat(uf_remappedPS[11].y),intBitsToFloat(uf_remappedPS[11].z),intBitsToFloat(uf_remappedPS[11].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R0i.w = tempi.x;
R6i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.y), intBitsToFloat(R125i.w)));
PS0i = R6i.z;
// 13
R14i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R12i.y), intBitsToFloat(uf_remappedPS[9].y)));
R14i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R12i.z), intBitsToFloat(uf_remappedPS[9].z)));
// 14
R15i.xyz = ivec3(uf_remappedPS[7].x,uf_remappedPS[7].y,uf_remappedPS[7].z);
R3i.w = 0;
}
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
predResult = (-(intBitsToFloat(uf_remappedPS[12].w)) > intBitsToFloat(R5i.z));
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
activeMaskStack[2] = activeMaskStack[1];
activeMaskStackC[3] = activeMaskStackC[2];
// 0
R1i.z = ((-(intBitsToFloat(uf_remappedPS[5].x)) > intBitsToFloat(R5i.z))?int(0xFFFFFFFF):int(0x0));
// 1
predResult = (R1i.z == 0);
activeMaskStack[2] = predResult;
activeMaskStackC[3] = predResult == true && activeMaskStackC[2] == true;
}
else {
activeMaskStack[2] = false;
activeMaskStackC[3] = false;
}
if( activeMaskStackC[3] == true ) {
activeMaskStack[3] = activeMaskStack[2];
activeMaskStackC[4] = activeMaskStackC[3];
// 0
backupReg0i = R0i.z;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R2i.x),intBitsToFloat(R1i.y),intBitsToFloat(backupReg0i),intBitsToFloat(R2i.w)),vec4(intBitsToFloat(uf_remappedPS[13].x),intBitsToFloat(uf_remappedPS[13].y),intBitsToFloat(uf_remappedPS[13].z),intBitsToFloat(uf_remappedPS[13].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
// 1
R1i.x = floatBitsToInt(1.0 / intBitsToFloat(PV0i.x));
PS1i = R1i.x;
// 2
PV0i.y = floatBitsToInt(intBitsToFloat(R0i.w) * intBitsToFloat(PS1i));
PV0i.y = floatBitsToInt(intBitsToFloat(PV0i.y) / 2.0);
// 3
PV1i.z = floatBitsToInt(intBitsToFloat(PV0i.y) + 0.5);
// 4
R13i.y = floatBitsToInt(intBitsToFloat(PV1i.z) + 0.0);
PV0i.y = R13i.y;
// 5
PV1i.x = ((intBitsToFloat(PV0i.y) >= 1.0)?int(0xFFFFFFFF):int(0x0));
// 6
R0i.w = ((PV1i.x == 0)?(0):(0x3f800000));
R8i.w = ((PV1i.x == 0)?(0):(0x3f800000));
PS0i = R8i.w;
// 7
predResult = (R0i.w == 0);
activeMaskStack[3] = predResult;
activeMaskStackC[4] = predResult == true && activeMaskStackC[3] == true;
}
else {
activeMaskStack[3] = false;
activeMaskStackC[4] = false;
}
if( activeMaskStackC[4] == true ) {
R0i.xy = ivec4(textureSize(textureUnitPS11, 0),1,1).xy;
}
if( activeMaskStackC[4] == true ) {
// 0
backupReg0i = R0i.z;
backupReg1i = R0i.x;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R2i.x),intBitsToFloat(R1i.y),intBitsToFloat(backupReg0i),intBitsToFloat(R2i.w)),vec4(intBitsToFloat(uf_remappedPS[14].x),intBitsToFloat(uf_remappedPS[14].y),intBitsToFloat(uf_remappedPS[14].z),intBitsToFloat(uf_remappedPS[14].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R126i.w = floatBitsToInt(float(backupReg1i));
PS0i = R126i.w;
// 1
backupReg0i = R0i.z;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R2i.x),intBitsToFloat(R1i.y),intBitsToFloat(backupReg0i),intBitsToFloat(R2i.w)),vec4(intBitsToFloat(uf_remappedPS[15].x),intBitsToFloat(uf_remappedPS[15].y),intBitsToFloat(uf_remappedPS[15].z),intBitsToFloat(uf_remappedPS[15].w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
PS1i = floatBitsToInt(intBitsToFloat(PV0i.x) * intBitsToFloat(R1i.x));
// 2
backupReg0i = R0i.y;
R127i.x = floatBitsToInt(intBitsToFloat(PS1i) + 1.0);
R127i.x = floatBitsToInt(intBitsToFloat(R127i.x) / 2.0);
PV0i.x = R127i.x;
PV0i.y = floatBitsToInt(-(intBitsToFloat(PV1i.x)) * intBitsToFloat(R1i.x));
R125i.z = floatBitsToInt(float(backupReg0i));
PS0i = R125i.z;
// 3
PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(0x3a19999a));
PV1i.y = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(0xba19999a));
R127i.z = floatBitsToInt(intBitsToFloat(PV0i.y) + 1.0);
R127i.z = floatBitsToInt(intBitsToFloat(R127i.z) / 2.0);
PV1i.z = R127i.z;
R127i.w = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(0xba19999a));
R127i.y = floatBitsToInt(1.0 / intBitsToFloat(R126i.w));
PS1i = R127i.y;
// 4
PV0i.x = floatBitsToInt(intBitsToFloat(PV1i.z) + intBitsToFloat(0xba19999a));
PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.z) + intBitsToFloat(0xba19999a));
R0i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.w),intBitsToFloat(PV1i.x)) + 0.5));
PV0i.z = R0i.z;
R124i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.w),intBitsToFloat(PV1i.y)) + 0.5));
PV0i.w = R124i.w;
R125i.w = floatBitsToInt(1.0 / intBitsToFloat(R125i.z));
PS0i = R125i.w;
// 5
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.z),intBitsToFloat(PV0i.y)) + 0.5));
PV1i.x = R126i.x;
PV1i.y = floatBitsToInt(intBitsToFloat(R127i.z) + intBitsToFloat(0x3a19999a));
R124i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.z),intBitsToFloat(PV0i.x)) + 0.5));
PV1i.z = R124i.z;
PV1i.w = floatBitsToInt(floor(intBitsToFloat(PV0i.w)));
R126i.z = floatBitsToInt(floor(intBitsToFloat(PV0i.z)));
PS1i = R126i.z;
// 6
R0i.x = floatBitsToInt(intBitsToFloat(PV1i.w) * intBitsToFloat(R127i.y));
R9i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.w),intBitsToFloat(R127i.w)) + 0.5));
PV0i.z = floatBitsToInt(floor(intBitsToFloat(PV1i.z)));
PV0i.w = floatBitsToInt(floor(intBitsToFloat(PV1i.x)));
R125i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.z),intBitsToFloat(PV1i.y)) + 0.5));
PS0i = R125i.x;
// 7
PV1i.x = floatBitsToInt(intBitsToFloat(R127i.x) + intBitsToFloat(0x3a19999a));
R0i.y = floatBitsToInt(intBitsToFloat(PV0i.z) * intBitsToFloat(R125i.w));
PV1i.z = floatBitsToInt(intBitsToFloat(R127i.z) + intBitsToFloat(0x3a19999a));
R1i.w = floatBitsToInt(intBitsToFloat(R127i.y) * intBitsToFloat(R126i.z));
R1i.y = floatBitsToInt(intBitsToFloat(R125i.w) * intBitsToFloat(PV0i.w));
PS1i = R1i.y;
// 8
PV0i.x = floatBitsToInt(floor(intBitsToFloat(R125i.x)));
PV0i.y = floatBitsToInt(floor(intBitsToFloat(R9i.y)));
R9i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.w),intBitsToFloat(PV1i.x)) + 0.5));
PV0i.z = R9i.z;
R8i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.z),intBitsToFloat(PV1i.z)) + 0.5));
PV0i.w = R8i.w;
R8i.x = floatBitsToInt(fract(intBitsToFloat(R124i.z)));
PS0i = R8i.x;
// 9
R2i.x = floatBitsToInt(intBitsToFloat(PV0i.y) * intBitsToFloat(R127i.y));
R2i.y = floatBitsToInt(intBitsToFloat(PV0i.x) * intBitsToFloat(R125i.w));
PV1i.z = floatBitsToInt(floor(intBitsToFloat(PV0i.z)));
PV1i.w = floatBitsToInt(floor(intBitsToFloat(PV0i.w)));
R9i.x = floatBitsToInt(fract(intBitsToFloat(R126i.x)));
PS1i = R9i.x;
// 10
R4i.x = floatBitsToInt(intBitsToFloat(R127i.y) * intBitsToFloat(PV1i.z));
R4i.y = floatBitsToInt(intBitsToFloat(R125i.w) * intBitsToFloat(PV1i.w));
R8i.z = floatBitsToInt(fract(intBitsToFloat(R124i.w)));
R9i.w = floatBitsToInt(fract(intBitsToFloat(R125i.x)));
R8i.y = floatBitsToInt(fract(intBitsToFloat(R0i.z)));
PS0i = R8i.y;
}
if( activeMaskStackC[4] == true ) {
R0i.xyzw = floatBitsToInt(textureGather(textureUnitPS11, intBitsToFloat(R0i.xy)).xyzw);
R1i.xyzw = floatBitsToInt(textureGather(textureUnitPS11, intBitsToFloat(R1i.wy)).xyzw);
R2i.xyzw = floatBitsToInt(textureGather(textureUnitPS11, intBitsToFloat(R2i.xy)).xyzw);
R4i.xyzw = floatBitsToInt(textureGather(textureUnitPS11, intBitsToFloat(R4i.xy)).xyzw);
}
if( activeMaskStackC[4] == true ) {
// 0
backupReg0i = R0i.y;
backupReg1i = R0i.x;
PV0i.x = floatBitsToInt(-(intBitsToFloat(R13i.y)) + intBitsToFloat(R0i.w));
PV0i.y = floatBitsToInt(-(intBitsToFloat(R13i.y)) + intBitsToFloat(R0i.z));
PV0i.z = floatBitsToInt(-(intBitsToFloat(R13i.y)) + intBitsToFloat(backupReg0i));
PV0i.w = floatBitsToInt(-(intBitsToFloat(R13i.y)) + intBitsToFloat(backupReg1i));
R125i.z = floatBitsToInt(-(intBitsToFloat(R13i.y)) + intBitsToFloat(R1i.w));
PS0i = R125i.z;
// 1
R126i.x = ((intBitsToFloat(PV0i.y) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV1i.x = R126i.x;
R123i.y = ((intBitsToFloat(PV0i.w) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV1i.y = R123i.y;
R124i.z = ((intBitsToFloat(PV0i.x) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV1i.z = R124i.z;
R123i.w = ((intBitsToFloat(PV0i.z) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV1i.w = R123i.w;
R125i.x = floatBitsToInt(-(intBitsToFloat(R13i.y)) + intBitsToFloat(R1i.x));
PS1i = R125i.x;
// 2
PV0i.x = floatBitsToInt(-(intBitsToFloat(R13i.y)) + intBitsToFloat(R1i.y));
R127i.y = floatBitsToInt(-(intBitsToFloat(PV1i.z)) + intBitsToFloat(PV1i.y));
PV0i.z = floatBitsToInt(-(intBitsToFloat(R13i.y)) + intBitsToFloat(R1i.z));
R125i.w = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + intBitsToFloat(PV1i.w));
R126i.y = ((intBitsToFloat(R125i.z) >= 0.0)?(floatBitsToInt(1.0)):(0));
PS0i = R126i.y;
// 3
R123i.x = ((intBitsToFloat(PV0i.x) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV1i.x = R123i.x;
R125i.y = ((intBitsToFloat(PV0i.z) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV1i.y = R125i.y;
R125i.z = floatBitsToInt(-(intBitsToFloat(R13i.y)) + intBitsToFloat(R2i.w));
R124i.w = ((intBitsToFloat(R125i.x) >= 0.0)?(floatBitsToInt(1.0)):(0));
R126i.w = floatBitsToInt(-(intBitsToFloat(R13i.y)) + intBitsToFloat(R2i.x));
PS1i = R126i.w;
// 4
backupReg0i = R124i.z;
PV0i.x = floatBitsToInt(-(intBitsToFloat(R13i.y)) + intBitsToFloat(R2i.z));
R124i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.w),intBitsToFloat(R8i.x)) + intBitsToFloat(R126i.x)));
R124i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.y),intBitsToFloat(R8i.x)) + intBitsToFloat(backupReg0i)));
PV0i.w = floatBitsToInt(-(intBitsToFloat(R13i.y)) + intBitsToFloat(R2i.y));
R126i.x = floatBitsToInt(-(intBitsToFloat(PV1i.y)) + intBitsToFloat(PV1i.x));
PS0i = R126i.x;
// 5
R127i.x = ((intBitsToFloat(R125i.z) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV1i.x = R127i.x;
R123i.y = ((intBitsToFloat(R126i.w) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV1i.y = R123i.y;
R125i.z = floatBitsToInt(-(intBitsToFloat(R126i.y)) + intBitsToFloat(R124i.w));
R126i.w = ((intBitsToFloat(PV0i.x) >= 0.0)?(floatBitsToInt(1.0)):(0));
R127i.y = ((intBitsToFloat(PV0i.w) >= 0.0)?(floatBitsToInt(1.0)):(0));
PS1i = R127i.y;
// 6
PV0i.x = floatBitsToInt(-(intBitsToFloat(R13i.y)) + intBitsToFloat(R4i.x));
PV0i.y = floatBitsToInt(-(intBitsToFloat(R13i.y)) + intBitsToFloat(R4i.z));
PV0i.z = floatBitsToInt(-(intBitsToFloat(R13i.y)) + intBitsToFloat(R4i.w));
PV0i.w = floatBitsToInt(-(intBitsToFloat(R13i.y)) + intBitsToFloat(R4i.y));
R125i.x = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + intBitsToFloat(PV1i.y));
PS0i = R125i.x;
// 7
backupReg0i = R127i.y;
R124i.x = ((intBitsToFloat(PV0i.x) >= 0.0)?(floatBitsToInt(1.0)):(0));
R127i.y = ((intBitsToFloat(PV0i.z) >= 0.0)?(floatBitsToInt(1.0)):(0));
R127i.z = ((intBitsToFloat(PV0i.y) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV1i.w = floatBitsToInt(-(intBitsToFloat(R126i.w)) + intBitsToFloat(backupReg0i));
R124i.w = ((intBitsToFloat(PV0i.w) >= 0.0)?(floatBitsToInt(1.0)):(0));
PS1i = R124i.w;
// 8
backupReg0i = R126i.y;
PV0i.x = floatBitsToInt(-(intBitsToFloat(R124i.z)) + intBitsToFloat(R124i.y));
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.z),intBitsToFloat(R9i.x)) + intBitsToFloat(backupReg0i)));
PV0i.y = R126i.y;
R125i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.w),intBitsToFloat(R9i.w)) + intBitsToFloat(R126i.w)));
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.x),intBitsToFloat(R9i.x)) + intBitsToFloat(R125i.y)));
PV0i.w = R123i.w;
R126i.x = floatBitsToInt(fract(intBitsToFloat(R8i.w)));
PS0i = R126i.x;
// 9
backupReg0i = R124i.z;
PV1i.x = floatBitsToInt(-(intBitsToFloat(R127i.y)) + intBitsToFloat(R124i.x));
PV1i.y = floatBitsToInt(-(intBitsToFloat(R127i.z)) + intBitsToFloat(R124i.w));
R124i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.x),intBitsToFloat(R9i.w)) + intBitsToFloat(R127i.x)));
PV1i.z = R124i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(R8i.z)) + intBitsToFloat(backupReg0i)));
PV1i.w = R123i.w;
PS1i = floatBitsToInt(-(intBitsToFloat(PV0i.y)) + intBitsToFloat(PV0i.w));
// 10
backupReg0i = R126i.x;
backupReg1i = R127i.y;
backupReg0i = R126i.x;
R126i.x = floatBitsToInt(-(intBitsToFloat(PV1i.z)) + intBitsToFloat(R125i.z));
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),intBitsToFloat(backupReg0i)) + intBitsToFloat(backupReg1i)));
PV0i.y = R127i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PS1i),intBitsToFloat(R8i.y)) + intBitsToFloat(R126i.y)));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.y),intBitsToFloat(backupReg0i)) + intBitsToFloat(R127i.z)));
PV0i.w = R123i.w;
PS0i = floatBitsToInt(intBitsToFloat(PV1i.w) + 0.0);
// 11
R127i.x = floatBitsToInt(intBitsToFloat(PS0i) + intBitsToFloat(PV0i.z));
PV1i.y = floatBitsToInt(fract(intBitsToFloat(R9i.z)));
PV1i.z = floatBitsToInt(-(intBitsToFloat(PV0i.y)) + intBitsToFloat(PV0i.w));
PV1i.w = floatBitsToInt(fract(intBitsToFloat(R9i.y)));
// 12
backupReg0i = R127i.y;
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),intBitsToFloat(PV1i.y)) + intBitsToFloat(backupReg0i)));
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.x),intBitsToFloat(PV1i.w)) + intBitsToFloat(R124i.z)));
PV0i.z = R123i.z;
// 13
PV1i.w = floatBitsToInt(intBitsToFloat(R127i.x) + intBitsToFloat(PV0i.z));
// 14
PV0i.x = floatBitsToInt(intBitsToFloat(PV1i.w) + intBitsToFloat(R127i.y));
// 15
R8i.w = floatBitsToInt(intBitsToFloat(PV0i.x) * 0.25);
}
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
activeMaskStack[1] = activeMaskStack[1] == false;
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
activeMaskStack[2] = activeMaskStack[1];
activeMaskStackC[3] = activeMaskStackC[2];
// 0
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R1i.x),intBitsToFloat(R2i.y),intBitsToFloat(R1i.z),intBitsToFloat(R1i.w)),vec4(intBitsToFloat(uf_remappedPS[16].x),intBitsToFloat(uf_remappedPS[16].y),intBitsToFloat(uf_remappedPS[16].z),intBitsToFloat(uf_remappedPS[16].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
// 1
R0i.w = floatBitsToInt(1.0 / intBitsToFloat(PV0i.x));
PS1i = R0i.w;
// 2
PV0i.z = floatBitsToInt(intBitsToFloat(R0i.x) * intBitsToFloat(PS1i));
PV0i.z = floatBitsToInt(intBitsToFloat(PV0i.z) / 2.0);
// 3
PV1i.y = floatBitsToInt(intBitsToFloat(PV0i.z) + 0.5);
// 4
R18i.x = floatBitsToInt(intBitsToFloat(PV1i.y) + 0.0);
PV0i.x = R18i.x;
// 5
PV1i.x = ((intBitsToFloat(PV0i.x) >= 1.0)?int(0xFFFFFFFF):int(0x0));
// 6
R0i.z = ((PV1i.x == 0)?(0):(0x3f800000));
R8i.w = ((PV1i.x == 0)?(0):(0x3f800000));
// 7
predResult = (R0i.z == 0);
activeMaskStack[2] = predResult;
activeMaskStackC[3] = predResult == true && activeMaskStackC[2] == true;
}
else {
activeMaskStack[2] = false;
activeMaskStackC[3] = false;
}
if( activeMaskStackC[3] == true ) {
R0i.xy = ivec4(textureSize(textureUnitPS10, 0),1,1).xy;
}
if( activeMaskStackC[3] == true ) {
// 0
backupReg0i = R0i.x;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R1i.x),intBitsToFloat(R2i.y),intBitsToFloat(R1i.z),intBitsToFloat(R1i.w)),vec4(intBitsToFloat(uf_remappedPS[17].x),intBitsToFloat(uf_remappedPS[17].y),intBitsToFloat(uf_remappedPS[17].z),intBitsToFloat(uf_remappedPS[17].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R126i.w = floatBitsToInt(float(backupReg0i));
PS0i = R126i.w;
// 1
backupReg0i = R0i.w;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R1i.x),intBitsToFloat(R2i.y),intBitsToFloat(R1i.z),intBitsToFloat(R1i.w)),vec4(intBitsToFloat(uf_remappedPS[18].x),intBitsToFloat(uf_remappedPS[18].y),intBitsToFloat(uf_remappedPS[18].z),intBitsToFloat(uf_remappedPS[18].w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
PS1i = floatBitsToInt(intBitsToFloat(PV0i.x) * intBitsToFloat(backupReg0i));
// 2
backupReg0i = R0i.y;
R127i.x = floatBitsToInt(intBitsToFloat(PS1i) + 1.0);
R127i.x = floatBitsToInt(intBitsToFloat(R127i.x) / 2.0);
PV0i.x = R127i.x;
PV0i.y = floatBitsToInt(-(intBitsToFloat(PV1i.x)) * intBitsToFloat(R0i.w));
R125i.z = floatBitsToInt(float(backupReg0i));
PS0i = R125i.z;
// 3
PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(0x3a19999a));
PV1i.y = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(0xba19999a));
R127i.z = floatBitsToInt(intBitsToFloat(PV0i.y) + 1.0);
R127i.z = floatBitsToInt(intBitsToFloat(R127i.z) / 2.0);
PV1i.z = R127i.z;
R127i.w = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(0xba19999a));
R127i.y = floatBitsToInt(1.0 / intBitsToFloat(R126i.w));
PS1i = R127i.y;
// 4
PV0i.x = floatBitsToInt(intBitsToFloat(PV1i.z) + intBitsToFloat(0xba19999a));
PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.z) + intBitsToFloat(0xba19999a));
R0i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.w),intBitsToFloat(PV1i.x)) + 0.5));
PV0i.z = R0i.z;
R124i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.w),intBitsToFloat(PV1i.y)) + 0.5));
PV0i.w = R124i.w;
R125i.w = floatBitsToInt(1.0 / intBitsToFloat(R125i.z));
PS0i = R125i.w;
// 5
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.z),intBitsToFloat(PV0i.y)) + 0.5));
PV1i.x = R126i.x;
PV1i.y = floatBitsToInt(intBitsToFloat(R127i.z) + intBitsToFloat(0x3a19999a));
R124i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.z),intBitsToFloat(PV0i.x)) + 0.5));
PV1i.z = R124i.z;
PV1i.w = floatBitsToInt(floor(intBitsToFloat(PV0i.w)));
R126i.z = floatBitsToInt(floor(intBitsToFloat(PV0i.z)));
PS1i = R126i.z;
// 6
R0i.x = floatBitsToInt(intBitsToFloat(PV1i.w) * intBitsToFloat(R127i.y));
R8i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.w),intBitsToFloat(R127i.w)) + 0.5));
PV0i.z = floatBitsToInt(floor(intBitsToFloat(PV1i.z)));
PV0i.w = floatBitsToInt(floor(intBitsToFloat(PV1i.x)));
R125i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.z),intBitsToFloat(PV1i.y)) + 0.5));
PS0i = R125i.x;
// 7
PV1i.x = floatBitsToInt(intBitsToFloat(R127i.x) + intBitsToFloat(0x3a19999a));
R0i.y = floatBitsToInt(intBitsToFloat(PV0i.z) * intBitsToFloat(R125i.w));
PV1i.z = floatBitsToInt(intBitsToFloat(R127i.z) + intBitsToFloat(0x3a19999a));
R1i.w = floatBitsToInt(intBitsToFloat(R127i.y) * intBitsToFloat(R126i.z));
R1i.y = floatBitsToInt(intBitsToFloat(R125i.w) * intBitsToFloat(PV0i.w));
PS1i = R1i.y;
// 8
PV0i.x = floatBitsToInt(floor(intBitsToFloat(R125i.x)));
PV0i.y = floatBitsToInt(floor(intBitsToFloat(R8i.y)));
R9i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.w),intBitsToFloat(PV1i.x)) + 0.5));
PV0i.z = R9i.z;
R9i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.z),intBitsToFloat(PV1i.z)) + 0.5));
PV0i.w = R9i.w;
R8i.x = floatBitsToInt(fract(intBitsToFloat(R124i.z)));
PS0i = R8i.x;
// 9
R2i.x = floatBitsToInt(intBitsToFloat(PV0i.y) * intBitsToFloat(R127i.y));
R2i.y = floatBitsToInt(intBitsToFloat(PV0i.x) * intBitsToFloat(R125i.w));
PV1i.z = floatBitsToInt(floor(intBitsToFloat(PV0i.z)));
PV1i.w = floatBitsToInt(floor(intBitsToFloat(PV0i.w)));
R9i.x = floatBitsToInt(fract(intBitsToFloat(R126i.x)));
PS1i = R9i.x;
// 10
R4i.x = floatBitsToInt(intBitsToFloat(R127i.y) * intBitsToFloat(PV1i.z));
R4i.y = floatBitsToInt(intBitsToFloat(R125i.w) * intBitsToFloat(PV1i.w));
R8i.z = floatBitsToInt(fract(intBitsToFloat(R124i.w)));
R8i.w = floatBitsToInt(fract(intBitsToFloat(R125i.x)));
R9i.y = floatBitsToInt(fract(intBitsToFloat(R0i.z)));
PS0i = R9i.y;
}
if( activeMaskStackC[3] == true ) {
R0i.xyzw = floatBitsToInt(textureGather(textureUnitPS10, intBitsToFloat(R0i.xy)).xyzw);
R1i.xyzw = floatBitsToInt(textureGather(textureUnitPS10, intBitsToFloat(R1i.wy)).xyzw);
R2i.xyzw = floatBitsToInt(textureGather(textureUnitPS10, intBitsToFloat(R2i.xy)).xyzw);
R4i.xyzw = floatBitsToInt(textureGather(textureUnitPS10, intBitsToFloat(R4i.xy)).xyzw);
}
if( activeMaskStackC[3] == true ) {
// 0
backupReg0i = R0i.y;
backupReg1i = R0i.x;
PV0i.x = floatBitsToInt(-(intBitsToFloat(R18i.x)) + intBitsToFloat(R0i.w));
PV0i.y = floatBitsToInt(-(intBitsToFloat(R18i.x)) + intBitsToFloat(R0i.z));
PV0i.z = floatBitsToInt(-(intBitsToFloat(R18i.x)) + intBitsToFloat(backupReg0i));
PV0i.w = floatBitsToInt(-(intBitsToFloat(R18i.x)) + intBitsToFloat(backupReg1i));
R125i.z = floatBitsToInt(-(intBitsToFloat(R18i.x)) + intBitsToFloat(R1i.w));
PS0i = R125i.z;
// 1
R126i.x = ((intBitsToFloat(PV0i.y) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV1i.x = R126i.x;
R123i.y = ((intBitsToFloat(PV0i.w) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV1i.y = R123i.y;
R124i.z = ((intBitsToFloat(PV0i.x) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV1i.z = R124i.z;
R123i.w = ((intBitsToFloat(PV0i.z) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV1i.w = R123i.w;
R125i.x = floatBitsToInt(-(intBitsToFloat(R18i.x)) + intBitsToFloat(R1i.x));
PS1i = R125i.x;
// 2
PV0i.x = floatBitsToInt(-(intBitsToFloat(R18i.x)) + intBitsToFloat(R1i.y));
R127i.y = floatBitsToInt(-(intBitsToFloat(PV1i.z)) + intBitsToFloat(PV1i.y));
PV0i.z = floatBitsToInt(-(intBitsToFloat(R18i.x)) + intBitsToFloat(R1i.z));
R125i.w = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + intBitsToFloat(PV1i.w));
R126i.y = ((intBitsToFloat(R125i.z) >= 0.0)?(floatBitsToInt(1.0)):(0));
PS0i = R126i.y;
// 3
backupReg0i = R125i.x;
R125i.x = ((intBitsToFloat(PV0i.x) >= 0.0)?(floatBitsToInt(1.0)):(0));
R125i.y = ((intBitsToFloat(PV0i.z) >= 0.0)?(floatBitsToInt(1.0)):(0));
R125i.z = floatBitsToInt(-(intBitsToFloat(R18i.x)) + intBitsToFloat(R2i.w));
R123i.w = ((intBitsToFloat(backupReg0i) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV1i.w = R123i.w;
R124i.w = floatBitsToInt(-(intBitsToFloat(R18i.x)) + intBitsToFloat(R2i.x));
PS1i = R124i.w;
// 4
PV0i.x = floatBitsToInt(-(intBitsToFloat(R18i.x)) + intBitsToFloat(R2i.z));
R124i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.w),intBitsToFloat(R8i.x)) + intBitsToFloat(R126i.x)));
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.y),intBitsToFloat(R8i.x)) + intBitsToFloat(R124i.z)));
PV0i.w = floatBitsToInt(-(intBitsToFloat(R18i.x)) + intBitsToFloat(R2i.y));
R124i.z = floatBitsToInt(-(intBitsToFloat(R126i.y)) + intBitsToFloat(PV1i.w));
PS0i = R124i.z;
// 5
backupReg0i = R125i.x;
backupReg1i = R125i.z;
R125i.x = floatBitsToInt(-(intBitsToFloat(R125i.y)) + intBitsToFloat(backupReg0i));
R123i.y = ((intBitsToFloat(R124i.w) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV1i.y = R123i.y;
R125i.z = ((intBitsToFloat(backupReg1i) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV1i.z = R125i.z;
R124i.w = ((intBitsToFloat(PV0i.x) >= 0.0)?(floatBitsToInt(1.0)):(0));
R127i.y = ((intBitsToFloat(PV0i.w) >= 0.0)?(floatBitsToInt(1.0)):(0));
PS1i = R127i.y;
// 6
PV0i.x = floatBitsToInt(-(intBitsToFloat(R18i.x)) + intBitsToFloat(R4i.x));
PV0i.y = floatBitsToInt(-(intBitsToFloat(R18i.x)) + intBitsToFloat(R4i.z));
PV0i.z = floatBitsToInt(-(intBitsToFloat(R18i.x)) + intBitsToFloat(R4i.w));
PV0i.w = floatBitsToInt(-(intBitsToFloat(R18i.x)) + intBitsToFloat(R4i.y));
R126i.x = floatBitsToInt(-(intBitsToFloat(PV1i.z)) + intBitsToFloat(PV1i.y));
PS0i = R126i.x;
// 7
backupReg0i = R127i.y;
R127i.x = ((intBitsToFloat(PV0i.x) >= 0.0)?(floatBitsToInt(1.0)):(0));
R127i.y = ((intBitsToFloat(PV0i.z) >= 0.0)?(floatBitsToInt(1.0)):(0));
R126i.z = ((intBitsToFloat(PV0i.y) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV1i.w = floatBitsToInt(-(intBitsToFloat(R124i.w)) + intBitsToFloat(backupReg0i));
R125i.w = ((intBitsToFloat(PV0i.w) >= 0.0)?(floatBitsToInt(1.0)):(0));
PS1i = R125i.w;
// 8
backupReg0i = R125i.z;
backupReg1i = R125i.y;
PV0i.x = floatBitsToInt(-(intBitsToFloat(R127i.z)) + intBitsToFloat(R124i.y));
R125i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.z),intBitsToFloat(R9i.x)) + intBitsToFloat(R126i.y)));
PV0i.y = R125i.y;
R125i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.x),intBitsToFloat(R8i.w)) + intBitsToFloat(backupReg0i)));
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.x),intBitsToFloat(R9i.x)) + intBitsToFloat(backupReg1i)));
PV0i.w = R123i.w;
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.w),intBitsToFloat(R8i.w)) + intBitsToFloat(R124i.w)));
PS0i = R126i.y;
// 9
PV1i.x = floatBitsToInt(fract(intBitsToFloat(R9i.w)));
PV1i.y = floatBitsToInt(-(intBitsToFloat(R126i.z)) + intBitsToFloat(R125i.w));
PV1i.z = floatBitsToInt(-(intBitsToFloat(R127i.y)) + intBitsToFloat(R127i.x));
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(R8i.z)) + intBitsToFloat(R127i.z)));
PV1i.w = R123i.w;
R127i.z = floatBitsToInt(-(intBitsToFloat(PV0i.y)) + intBitsToFloat(PV0i.w));
PS1i = R127i.z;
// 10
backupReg0i = R127i.y;
backupReg1i = R126i.z;
PV0i.x = floatBitsToInt(-(intBitsToFloat(R125i.z)) + intBitsToFloat(R126i.y));
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),intBitsToFloat(PV1i.x)) + intBitsToFloat(backupReg0i)));
PV0i.y = R127i.y;
R126i.z = floatBitsToInt(intBitsToFloat(PV1i.w) + 0.0);
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.x)) + intBitsToFloat(backupReg1i)));
PV0i.w = R123i.w;
PS0i = floatBitsToInt(fract(intBitsToFloat(R8i.y)));
// 11
PV1i.x = floatBitsToInt(fract(intBitsToFloat(R9i.z)));
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.z),intBitsToFloat(R9i.y)) + intBitsToFloat(R125i.y)));
PV1i.y = R123i.y;
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(PS0i)) + intBitsToFloat(R125i.z)));
PV1i.w = floatBitsToInt(-(intBitsToFloat(PV0i.y)) + intBitsToFloat(PV0i.w));
// 12
backupReg0i = R127i.y;
PV0i.x = floatBitsToInt(intBitsToFloat(R126i.z) + intBitsToFloat(PV1i.y));
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.w),intBitsToFloat(PV1i.x)) + intBitsToFloat(backupReg0i)));
// 13
PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(R127i.z));
// 14
PV0i.x = floatBitsToInt(intBitsToFloat(PV1i.w) + intBitsToFloat(R127i.y));
// 15
R8i.w = floatBitsToInt(intBitsToFloat(PV0i.x) * 0.25);
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
// 0
PV0i.x = floatBitsToInt(intBitsToFloat(R7i.w) * 1.0);
R0i.y = floatBitsToInt(intBitsToFloat(R8i.w) + -(1.0));
R127i.z = floatBitsToInt(min(intBitsToFloat(R5i.z), intBitsToFloat(0x41200000)));
R7i.w = floatBitsToInt(-(intBitsToFloat(uf_remappedPS[19].y)) + 1.0);
R1i.x = floatBitsToInt(intBitsToFloat(R5i.x) + intBitsToFloat(R3i.x));
PS0i = R1i.x;
// 1
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R10i.z), -(intBitsToFloat(R3i.w))));
PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.x) * intBitsToFloat(0x3a51b717));
// 2
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R10i.z),-(intBitsToFloat(R15i.z))) + intBitsToFloat(PV1i.x)));
PV0i.x = R123i.x;
R2i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(PV1i.w)));
PV0i.y = R2i.y;
// 3
R0i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R10i.y),-(intBitsToFloat(R15i.y))) + intBitsToFloat(PV0i.x)));
R1i.y = floatBitsToInt(intBitsToFloat(PV0i.y) + intBitsToFloat(R3i.y));
}
if( activeMaskStackC[1] == true ) {
R8i.y = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R1i.xy)).w);
}
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
R0i.z = floatBitsToInt(intBitsToFloat(R8i.y) * 1.0);
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R11i.x),-(intBitsToFloat(R15i.x))) + intBitsToFloat(R0i.x)));
PV0i.w = R123i.w;
// 1
PV1i.y = floatBitsToInt(intBitsToFloat(PV0i.w) + intBitsToFloat(0x3f266666));
// 2
PV0i.z = floatBitsToInt(min(intBitsToFloat(PV1i.y), 1.0));
// 3
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.y),intBitsToFloat(PV0i.z)) + 1.0));
PV1i.w = R123i.w;
// 4
R4i.y = floatBitsToInt(intBitsToFloat(R7i.w) + intBitsToFloat(PV1i.w));
R4i.y = clampFI32(R4i.y);
// 5
predResult = (R10i.w != 0);
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
activeMaskStack[2] = activeMaskStack[1];
activeMaskStackC[3] = activeMaskStackC[2];
// 0
predResult = (R5i.w != 0);
activeMaskStack[2] = predResult;
activeMaskStackC[3] = predResult == true && activeMaskStackC[2] == true;
}
else {
activeMaskStack[2] = false;
activeMaskStackC[3] = false;
}
if( activeMaskStackC[3] == true ) {
R0i.x = floatBitsToInt(texture(textureUnitPS6, intBitsToFloat(R1i.xy)).w);
}
if( activeMaskStackC[3] == true ) {
// 0
backupReg0i = R0i.x;
PV0i.x = floatBitsToInt(-(intBitsToFloat(R8i.y)) + intBitsToFloat(backupReg0i));
// 1
R0i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(uf_remappedPS[0].w)) + intBitsToFloat(R8i.y)));
}
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
activeMaskStack[1] = activeMaskStack[1] == false;
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
activeMaskStack[2] = activeMaskStack[1];
activeMaskStackC[3] = activeMaskStackC[2];
// 0
predResult = (0.0 == intBitsToFloat(R10i.x));
activeMaskStack[2] = predResult;
activeMaskStackC[3] = predResult == true && activeMaskStackC[2] == true;
}
else {
activeMaskStack[2] = false;
activeMaskStackC[3] = false;
}
if( activeMaskStackC[3] == true ) {
R0i.w = floatBitsToInt(texture(textureUnitPS6, intBitsToFloat(R1i.xy)).w);
}
if( activeMaskStackC[3] == true ) {
// 0
PV0i.x = floatBitsToInt(-(intBitsToFloat(R8i.y)) + intBitsToFloat(R0i.w));
// 1
R0i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(uf_remappedPS[0].w)) + intBitsToFloat(R8i.y)));
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
// 0
backupReg0i = R0i.z;
backupReg0i = R0i.z;
R0i.x = floatBitsToInt(-(intBitsToFloat(R5i.x)) + intBitsToFloat(R3i.x));
R0i.y = floatBitsToInt(intBitsToFloat(R2i.y) * intBitsToFloat(0x3f19999a));
PV0i.y = R0i.y;
PV0i.z = floatBitsToInt(-(intBitsToFloat(backupReg0i)) + 1.0);
R0i.w = ((intBitsToFloat(0x3f666666) > intBitsToFloat(backupReg0i))?int(0xFFFFFFFF):int(0x0));
// 1
R3i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(uf_remappedPS[7].x)),intBitsToFloat(PV0i.z)) + intBitsToFloat(R7i.x)));
R0i.y = floatBitsToInt(-(intBitsToFloat(PV0i.y)) + intBitsToFloat(R3i.y));
R3i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(uf_remappedPS[7].y)),intBitsToFloat(PV0i.z)) + intBitsToFloat(R7i.y)));
R3i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(uf_remappedPS[7].z)),intBitsToFloat(PV0i.z)) + intBitsToFloat(R7i.z)));
}
if( activeMaskStackC[1] == true ) {
R0i.z = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R0i.xy)).w);
}
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
backupReg0i = R0i.z;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.z),intBitsToFloat(R3i.w),-0.0),vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.z),intBitsToFloat(R3i.w),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R1i.w = floatBitsToInt(intBitsToFloat(backupReg0i) * 1.0);
PS0i = R1i.w;
// 1
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.x));
PS1i = floatBitsToInt(tempResultf);
// 2
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(PS1i)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.x), intBitsToFloat(PS1i)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.w), intBitsToFloat(PS1i)));
// 3
R15i.x = ((R0i.w == 0)?(R7i.x):(PV0i.z));
R15i.y = ((R0i.w == 0)?(R7i.y):(PV0i.x));
R15i.z = ((R0i.w == 0)?(R7i.z):(PV0i.w));
// 4
predResult = (R10i.w != 0);
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
activeMaskStack[2] = activeMaskStack[1];
activeMaskStackC[3] = activeMaskStackC[2];
// 0
predResult = (R5i.w != 0);
activeMaskStack[2] = predResult;
activeMaskStackC[3] = predResult == true && activeMaskStackC[2] == true;
}
else {
activeMaskStack[2] = false;
activeMaskStackC[3] = false;
}
if( activeMaskStackC[3] == true ) {
R0i.y = floatBitsToInt(texture(textureUnitPS6, intBitsToFloat(R0i.xy)).w);
}
if( activeMaskStackC[3] == true ) {
// 0
PV0i.x = floatBitsToInt(-(intBitsToFloat(R0i.z)) + intBitsToFloat(R0i.y));
// 1
R1i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(uf_remappedPS[0].w)) + intBitsToFloat(R0i.z)));
}
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
activeMaskStack[1] = activeMaskStack[1] == false;
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
activeMaskStack[2] = activeMaskStack[1];
activeMaskStackC[3] = activeMaskStackC[2];
// 0
predResult = (0.0 == intBitsToFloat(R10i.x));
activeMaskStack[2] = predResult;
activeMaskStackC[3] = predResult == true && activeMaskStackC[2] == true;
}
else {
activeMaskStack[2] = false;
activeMaskStackC[3] = false;
}
if( activeMaskStackC[3] == true ) {
R0i.x = floatBitsToInt(texture(textureUnitPS6, intBitsToFloat(R0i.xy)).w);
}
if( activeMaskStackC[3] == true ) {
// 0
backupReg0i = R0i.x;
PV0i.x = floatBitsToInt(-(intBitsToFloat(R0i.z)) + intBitsToFloat(backupReg0i));
// 1
R1i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(uf_remappedPS[0].w)) + intBitsToFloat(R0i.z)));
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
predResult = (intBitsToFloat(0x3f666666) > intBitsToFloat(R1i.w));
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
PV0i.y = floatBitsToInt(-(intBitsToFloat(R1i.w)) + 1.0);
// 1
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[7].x),intBitsToFloat(PV0i.y)) + intBitsToFloat(R15i.x)));
PV1i.x = R127i.x;
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[7].y),intBitsToFloat(PV0i.y)) + intBitsToFloat(R15i.y)));
PV1i.y = R127i.y;
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[7].z),intBitsToFloat(PV0i.y)) + intBitsToFloat(R15i.z)));
PV1i.z = R127i.z;
R127i.w = floatBitsToInt((intBitsToFloat(0xbe4ccccc) * intBitsToFloat(PV0i.y) + 1.0));
PV1i.w = R127i.w;
// 2
backupReg0i = R14i.x;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.z),-0.0),vec4(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R14i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PV1i.w)));
PS0i = R14i.x;
// 3
backupReg0i = R14i.y;
backupReg1i = R14i.z;
R14i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(R127i.w)));
R14i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg1i), intBitsToFloat(R127i.w)));
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.x));
PS1i = floatBitsToInt(tempResultf);
// 4
R15i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(PS1i)));
R15i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), intBitsToFloat(PS1i)));
R15i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(PS1i)));
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
// 0
R127i.x = floatBitsToInt(intBitsToFloat(uf_remappedPS[20].z) * intBitsToFloat(0x3f3e3d71));
PV0i.y = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(R15i.x)), -(intBitsToFloat(R15i.x))));
R127i.z = floatBitsToInt(intBitsToFloat(uf_remappedPS[20].y) * intBitsToFloat(0x3f3e3d71));
R127i.w = floatBitsToInt(intBitsToFloat(uf_remappedPS[20].x) * intBitsToFloat(0x3f3e3d71));
PS0i = floatBitsToInt(1.0 / intBitsToFloat(R6i.w));
// 1
PV1i.x = floatBitsToInt(intBitsToFloat(R6i.x) * intBitsToFloat(PS0i));
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R15i.y),-(intBitsToFloat(R15i.y))) + intBitsToFloat(PV0i.y)));
PV1i.z = floatBitsToInt(-(intBitsToFloat(R6i.y)) * intBitsToFloat(PS0i));
R126i.w = floatBitsToInt(intBitsToFloat(uf_remappedPS[21].x) * intBitsToFloat(0x3edbab86));
R126i.z = floatBitsToInt(intBitsToFloat(uf_remappedPS[21].y) * intBitsToFloat(0x3edbab86));
PS1i = R126i.z;
// 2
backupReg0i = R127i.w;
R6i.x = floatBitsToInt(intBitsToFloat(PV1i.x) + 1.0);
R6i.x = floatBitsToInt(intBitsToFloat(R6i.x) / 2.0);
R6i.y = floatBitsToInt(intBitsToFloat(PV1i.z) + 1.0);
R6i.y = floatBitsToInt(intBitsToFloat(R6i.y) / 2.0);
PV0i.z = floatBitsToInt(intBitsToFloat(uf_remappedPS[21].z) * intBitsToFloat(0x3edbab86));
R127i.w = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(R15i.z)), intBitsToFloat(backupReg0i)));
R125i.w = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(R15i.z)), intBitsToFloat(R127i.z)));
PS0i = R125i.w;
// 3
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), intBitsToFloat(R126i.w)));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), intBitsToFloat(PV0i.z)));
PV1i.z = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(R15i.z)), intBitsToFloat(R127i.x)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), intBitsToFloat(R126i.z)));
R127i.y = floatBitsToInt(intBitsToFloat(uf_remappedPS[22].x) * intBitsToFloat(0x3f5bab86));
PS1i = R127i.y;
// 4
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R15i.z)),intBitsToFloat(R125i.w)) + intBitsToFloat(PV1i.w)));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R15i.z)),intBitsToFloat(R127i.w)) + intBitsToFloat(PV1i.x)));
PV0i.y = R123i.y;
PV0i.z = floatBitsToInt(intBitsToFloat(uf_remappedPS[22].y) * intBitsToFloat(0x3f5bab86));
R123i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R15i.z)),intBitsToFloat(PV1i.z)) + intBitsToFloat(PV1i.y)));
PV0i.w = R123i.w;
R127i.w = floatBitsToInt(intBitsToFloat(uf_remappedPS[22].z) * intBitsToFloat(0x3f5bab86));
PS0i = R127i.w;
// 5
R0i.x = floatBitsToInt((intBitsToFloat(uf_remappedPS[23].z) * intBitsToFloat(0x3f62dfc6) + intBitsToFloat(PV0i.w)));
R0i.y = floatBitsToInt((intBitsToFloat(uf_remappedPS[23].y) * intBitsToFloat(0x3f62dfc6) + intBitsToFloat(PV0i.x)));
R0i.z = floatBitsToInt((intBitsToFloat(uf_remappedPS[23].x) * intBitsToFloat(0x3f62dfc6) + intBitsToFloat(PV0i.y)));
R0i.w = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(R15i.x)), intBitsToFloat(R127i.y)));
R1i.y = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(R15i.x)), intBitsToFloat(PV0i.z)));
PS1i = R1i.y;
// 6
R1i.x = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(R15i.x)), intBitsToFloat(R127i.w)));
R2i.y = floatBitsToInt(intBitsToFloat(uf_remappedPS[24].z) * intBitsToFloat(0x3f5bab86));
R1i.z = floatBitsToInt(intBitsToFloat(uf_remappedPS[24].y) * intBitsToFloat(0x3f5bab86));
R6i.w = floatBitsToInt(intBitsToFloat(uf_remappedPS[24].x) * intBitsToFloat(0x3f5bab86));
R2i.x = floatBitsToInt(intBitsToFloat(R16i.x) + -(1.0));
PS0i = R2i.x;
}
if( activeMaskStackC[1] == true ) {
R1i.w = floatBitsToInt(texture(textureUnitPS12, intBitsToFloat(R6i.xy)).x);
}
if( activeMaskStackC[1] == true ) {
// 0
R127i.x = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(R15i.x)), intBitsToFloat(R6i.w)));
R123i.y = floatBitsToInt((-(intBitsToFloat(uf_remappedPS[20].z)) * intBitsToFloat(0x3e7da72a) + intBitsToFloat(R0i.x)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((-(intBitsToFloat(uf_remappedPS[20].y)) * intBitsToFloat(0x3e7da72a) + intBitsToFloat(R0i.y)));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((-(intBitsToFloat(uf_remappedPS[20].x)) * intBitsToFloat(0x3e7da72a) + intBitsToFloat(R0i.z)));
PV0i.w = R123i.w;
R127i.w = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(R15i.x)), intBitsToFloat(R1i.z)));
PS0i = R127i.w;
// 1
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R15i.y)),intBitsToFloat(R0i.w)) + intBitsToFloat(PV0i.w)));
PV1i.x = R123i.x;
PV1i.y = floatBitsToInt(intBitsToFloat(uf_remappedPS[25].x) * intBitsToFloat(0x3f5bab86));
R126i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R15i.y)),intBitsToFloat(R1i.x)) + intBitsToFloat(PV0i.y)));
R123i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R15i.y)),intBitsToFloat(R1i.y)) + intBitsToFloat(PV0i.z)));
PV1i.w = R123i.w;
R126i.x = floatBitsToInt(intBitsToFloat(uf_remappedPS[25].y) * intBitsToFloat(0x3f5bab86));
PS1i = R126i.x;
// 2
backupReg0i = R127i.x;
R127i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R15i.z)),intBitsToFloat(R127i.w)) + intBitsToFloat(PV1i.w)));
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R15i.z)),intBitsToFloat(backupReg0i)) + intBitsToFloat(PV1i.x)));
PV0i.y = R123i.y;
PV0i.z = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(R15i.x)), intBitsToFloat(R2i.y)));
PV0i.w = floatBitsToInt(intBitsToFloat(uf_remappedPS[25].z) * intBitsToFloat(0x3f5bab86));
PS0i = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(R15i.y)), intBitsToFloat(PV1i.y)));
// 3
PV1i.x = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(R15i.y)), intBitsToFloat(PV0i.w)));
PV1i.y = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(R15i.y)), intBitsToFloat(R126i.x)));
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R15i.z)),intBitsToFloat(PS0i)) + intBitsToFloat(PV0i.y)));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R15i.z)),intBitsToFloat(PV0i.z)) + intBitsToFloat(R126i.z)));
PV1i.w = R123i.w;
PS1i = floatBitsToInt(intBitsToFloat(uf_remappedPS[26].x) * intBitsToFloat(0x3f82fc69));
// 4
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R15i.z)),intBitsToFloat(PV1i.x)) + intBitsToFloat(PV1i.w)));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R15i.z)),intBitsToFloat(PV1i.y)) + intBitsToFloat(R127i.x)));
PV0i.y = R123i.y;
PV0i.z = floatBitsToInt(intBitsToFloat(uf_remappedPS[26].z) * intBitsToFloat(0x3f82fc69));
PV0i.w = floatBitsToInt(intBitsToFloat(uf_remappedPS[26].y) * intBitsToFloat(0x3f82fc69));
R127i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R15i.x)),intBitsToFloat(PS1i)) + intBitsToFloat(PV1i.z)));
PS0i = R127i.w;
// 5
PV1i.x = floatBitsToInt(intBitsToFloat(uf_remappedPS[27].y) * intBitsToFloat(0x3f82fc69));
R126i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R15i.x)),intBitsToFloat(PV0i.z)) + intBitsToFloat(PV0i.x)));
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R15i.x)),intBitsToFloat(PV0i.w)) + intBitsToFloat(PV0i.y)));
PV1i.z = R123i.z;
PV1i.w = floatBitsToInt(intBitsToFloat(uf_remappedPS[27].x) * intBitsToFloat(0x3f82fc69));
R127i.y = floatBitsToInt(intBitsToFloat(uf_remappedPS[27].z) * intBitsToFloat(0x3f82fc69));
PS1i = R127i.y;
// 6
R1i.x = floatBitsToInt(intBitsToFloat(uf_remappedPS[28].x) + -(1.0));
R125i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R15i.y)),intBitsToFloat(PV1i.w)) + intBitsToFloat(R127i.w)));
R0i.z = floatBitsToInt(intBitsToFloat(uf_remappedPS[28].z) + -(1.0));
R0i.w = floatBitsToInt(intBitsToFloat(uf_remappedPS[28].y) + -(1.0));
R127i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R15i.y)),intBitsToFloat(PV1i.x)) + intBitsToFloat(PV1i.z)));
PS0i = R127i.w;
// 7
backupReg0i = R127i.y;
PV1i.x = floatBitsToInt(intBitsToFloat(uf_remappedPS[29].x) * intBitsToFloat(0x3f82fc69));
R127i.y = floatBitsToInt(intBitsToFloat(uf_remappedPS[29].y) * intBitsToFloat(0x3f82fc69));
R126i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R15i.y)),intBitsToFloat(backupReg0i)) + intBitsToFloat(R126i.y)));
R125i.w = floatBitsToInt(intBitsToFloat(uf_remappedPS[29].z) * intBitsToFloat(0x3f82fc69));
R6i.y = floatBitsToInt(intBitsToFloat(R16i.z) + -(1.0));
PS1i = R6i.y;
// 8
backupReg0i = R125i.y;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R15i.x),intBitsToFloat(R15i.y),intBitsToFloat(R15i.z),-0.0),vec4(-(intBitsToFloat(uf_remappedPS[7].x)),-(intBitsToFloat(uf_remappedPS[7].y)),-(intBitsToFloat(uf_remappedPS[7].z)),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R2i.y = tempi.x;
R125i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R15i.z)),intBitsToFloat(PV1i.x)) + intBitsToFloat(backupReg0i)));
PS0i = R125i.y;
// 9
R127i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R15i.z)),intBitsToFloat(R127i.y)) + intBitsToFloat(R127i.w)));
R0i.y = floatBitsToInt(-(intBitsToFloat(uf_remappedPS[23].w)) + 1.0);
R2i.z = floatBitsToInt(intBitsToFloat(R16i.y) + -(1.0));
R127i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R15i.z)),intBitsToFloat(R125i.w)) + intBitsToFloat(R126i.z)));
PS1i = floatBitsToInt(1.0 / intBitsToFloat(uf_remappedPS[30].x));
// 10
R126i.x = floatBitsToInt(-(intBitsToFloat(uf_remappedPS[31].x)) + 1.0);
R3i.y = floatBitsToInt(intBitsToFloat(R16i.w) + -(1.0));
R126i.z = floatBitsToInt(-(intBitsToFloat(uf_remappedPS[31].y)) + 1.0);
R6i.w = floatBitsToInt(intBitsToFloat(R125i.y) * intBitsToFloat(PS1i));
R6i.w = floatBitsToInt(intBitsToFloat(R6i.w) * 2.0);
PS0i = floatBitsToInt(1.0 / intBitsToFloat(uf_remappedPS[30].y));
// 11
R8i.x = floatBitsToInt(intBitsToFloat(R11i.x) + 1.0);
PV1i.y = floatBitsToInt(-(intBitsToFloat(uf_remappedPS[31].z)) + 1.0);
R1i.z = floatBitsToInt(intBitsToFloat(R127i.x) * intBitsToFloat(PS0i));
R1i.z = floatBitsToInt(intBitsToFloat(R1i.z) * 2.0);
R5i.w = R4i.y;
PS1i = floatBitsToInt(1.0 / intBitsToFloat(uf_remappedPS[30].z));
// 12
R3i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.x),intBitsToFloat(R1i.w)) + intBitsToFloat(uf_remappedPS[31].x)));
R1i.y = floatBitsToInt(intBitsToFloat(R127i.w) * intBitsToFloat(PS1i));
R1i.y = floatBitsToInt(intBitsToFloat(R1i.y) * 2.0);
R3i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.y),intBitsToFloat(R1i.w)) + intBitsToFloat(uf_remappedPS[31].z)));
R2i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.z),intBitsToFloat(R1i.w)) + intBitsToFloat(uf_remappedPS[31].y)));
R8i.y = floatBitsToInt(intBitsToFloat(R10i.y) + 1.0);
PS0i = R8i.y;
// 13
R8i.z = floatBitsToInt(intBitsToFloat(R10i.z) + 1.0);
R10i.w = floatBitsToInt(1.0);
R8i.w = floatBitsToInt(1.0);
PS1i = R8i.w;
}
if( activeMaskStackC[1] == true ) {
// 0
backupReg0i = R0i.z;
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.w),intBitsToFloat(uf_remappedPS[9].w)) + 1.0));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.x),intBitsToFloat(uf_remappedPS[9].w)) + 1.0));
PV0i.y = R123i.y;
R0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[12].x), intBitsToFloat(R6i.w)));
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(uf_remappedPS[9].w)) + 1.0));
PV0i.w = R123i.w;
R0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[12].y), intBitsToFloat(R1i.z)));
PS0i = R0i.w;
// 1
R126i.x = floatBitsToInt(max(intBitsToFloat(R2i.y), intBitsToFloat(PV0i.w)));
PV1i.x = R126i.x;
R125i.y = floatBitsToInt(max(intBitsToFloat(R2i.y), intBitsToFloat(PV0i.x)));
PV1i.y = R125i.y;
R126i.z = floatBitsToInt(max(intBitsToFloat(R2i.y), intBitsToFloat(PV0i.y)));
PV1i.z = R126i.z;
R6i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[12].z), intBitsToFloat(R1i.y)));
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[19].z), intBitsToFloat(R0i.y)));
PS1i = R127i.x;
// 2
R4i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R12i.x),intBitsToFloat(uf_remappedPS[32].x)) + intBitsToFloat(uf_remappedPS[33].x)));
PV0i.y = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + 1.0);
PV0i.z = floatBitsToInt(-(intBitsToFloat(PV1i.y)) + 1.0);
PV0i.w = floatBitsToInt(-(intBitsToFloat(PV1i.z)) + 1.0);
R5i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R12i.y),intBitsToFloat(uf_remappedPS[32].y)) + intBitsToFloat(uf_remappedPS[33].y)));
PS0i = R5i.x;
// 3
backupReg0i = R126i.x;
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(R17i.x)) + intBitsToFloat(R126i.z)));
PV1i.x = R126i.x;
R1i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R12i.z),intBitsToFloat(uf_remappedPS[32].z)) + intBitsToFloat(uf_remappedPS[33].z)));
R126i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(R11i.z)) + intBitsToFloat(backupReg0i)));
PV1i.z = R126i.z;
R127i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(R11i.y)) + intBitsToFloat(R125i.y)));
PV1i.w = R127i.w;
// 4
backupReg0i = R0i.z;
backupReg1i = R0i.w;
R1i.x = floatBitsToInt(-(intBitsToFloat(R0i.z)) + intBitsToFloat(PV1i.x));
PV0i.y = floatBitsToInt(intBitsToFloat(R6i.w) + -(intBitsToFloat(PV1i.z)));
PV0i.z = floatBitsToInt(intBitsToFloat(R0i.w) + -(intBitsToFloat(PV1i.w)));
PV0i.w = floatBitsToInt(intBitsToFloat(backupReg0i) + -(intBitsToFloat(PV1i.x)));
R0i.x = floatBitsToInt(-(intBitsToFloat(backupReg1i)) + intBitsToFloat(PV1i.w));
PS0i = R0i.x;
// 5
R6i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(R127i.x)) + intBitsToFloat(R126i.x)));
R0i.y = floatBitsToInt(-(intBitsToFloat(R6i.w)) + intBitsToFloat(R126i.z));
R1i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(R127i.x)) + intBitsToFloat(R126i.z)));
R1i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(R127i.x)) + intBitsToFloat(R127i.w)));
R9i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R11i.w), intBitsToFloat(uf_remappedPS[34].x)));
PS1i = R9i.w;
// 6
R7i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(R2i.x)));
R7i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(R2i.z)));
R7i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(R6i.y)));
R7i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(R3i.y)));
}
if( activeMaskStackC[1] == true ) {
// 0
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.y),intBitsToFloat(uf_remappedPS[23].w)) + intBitsToFloat(R6i.w)));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.x),intBitsToFloat(uf_remappedPS[23].w)) + intBitsToFloat(R0i.w)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.x),intBitsToFloat(uf_remappedPS[23].w)) + intBitsToFloat(R0i.z)));
PV0i.z = R123i.z;
R127i.w = floatBitsToInt(min(intBitsToFloat(R6i.x), intBitsToFloat(uf_remappedPS[31].x)));
PV0i.w = R127i.w;
R125i.y = floatBitsToInt(min(intBitsToFloat(R1i.w), intBitsToFloat(uf_remappedPS[31].y)));
PS0i = R125i.y;
// 1
R127i.x = floatBitsToInt(min(intBitsToFloat(R1i.z), intBitsToFloat(uf_remappedPS[31].z)));
PV1i.x = R127i.x;
R0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.z), intBitsToFloat(PV0i.x)));
R0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.y), intBitsToFloat(PV0i.y)));
R0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R13i.x), intBitsToFloat(PV0i.z)));
PS1i = floatBitsToInt(intBitsToFloat(R6i.x) + -(intBitsToFloat(PV0i.w)));
// 2
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PS1i),intBitsToFloat(R4i.y)) + intBitsToFloat(R127i.w)));
PV0i.x = R123i.x;
PV0i.y = floatBitsToInt(intBitsToFloat(R1i.z) + -(intBitsToFloat(PV1i.x)));
PV0i.w = floatBitsToInt(intBitsToFloat(R1i.w) + -(intBitsToFloat(R125i.y)));
// 3
R10i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(R3i.x)));
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(R4i.y)) + intBitsToFloat(R125i.y)));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(R4i.y)) + intBitsToFloat(R127i.x)));
PV1i.w = R123i.w;
// 4
R10i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.z), intBitsToFloat(R2i.w)));
R10i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(R3i.z)));
}
if( activeMaskStackC[1] == true ) {
// 0
backupReg0i = R0i.z;
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.w), intBitsToFloat(uf_remappedPS[35].x)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.y), intBitsToFloat(uf_remappedPS[35].z)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(uf_remappedPS[35].y)));
// 1
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R14i.y),intBitsToFloat(uf_remappedPS[30].y)) + intBitsToFloat(PV0i.w)));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R14i.x),intBitsToFloat(uf_remappedPS[30].x)) + intBitsToFloat(PV0i.x)));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R14i.z),intBitsToFloat(uf_remappedPS[30].z)) + intBitsToFloat(PV0i.z)));
PV1i.z = R123i.z;
// 2
backupReg0i = R1i.y;
R1i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),intBitsToFloat(R10i.y)) + intBitsToFloat(R5i.x)));
R0i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.y),intBitsToFloat(R10i.x)) + intBitsToFloat(R4i.x)));
R0i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),intBitsToFloat(R10i.z)) + intBitsToFloat(backupReg0i)));
}
if( activeMaskStackC[1] == true ) {
// 0
R9i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.z), intBitsToFloat(uf_remappedPS[36].x)));
R9i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.y), intBitsToFloat(uf_remappedPS[36].y)));
R9i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.w), intBitsToFloat(uf_remappedPS[36].z)));
// 1
R4i.xyz = ivec3(R7i.x,R7i.y,R7i.z);
R4i.w = R7i.w;
// 2
R3i.xyz = ivec3(R8i.x,R8i.y,R8i.z);
R3i.w = R8i.w;
// 3
R1i.xyz = ivec3(R15i.x,R15i.y,R15i.z);
R1i.w = R5i.w;
// 4
R0i.xyz = ivec3(R9i.x,R9i.y,R9i.z);
R0i.w = R9i.w;
// 5
R2i.xyz = ivec3(R10i.x,R10i.y,R10i.z);
R2i.w = R10i.w;
}
// export
if( ((vec4(intBitsToFloat(R0i.x), intBitsToFloat(R0i.y), intBitsToFloat(R0i.z), intBitsToFloat(R0i.w))).a >= uf_alphaTestRef) == false) discard;
passPixelColor0 = vec4(intBitsToFloat(R0i.x), intBitsToFloat(R0i.y), intBitsToFloat(R0i.z), intBitsToFloat(R0i.w));
passPixelColor1 = vec4(intBitsToFloat(R1i.x), intBitsToFloat(R1i.y), intBitsToFloat(R1i.z), intBitsToFloat(R1i.w));
passPixelColor2 = vec4(intBitsToFloat(R2i.x), intBitsToFloat(R2i.y), intBitsToFloat(R2i.z), intBitsToFloat(R2i.w));
passPixelColor3 = vec4(intBitsToFloat(R3i.x), intBitsToFloat(R3i.y), intBitsToFloat(R3i.z), intBitsToFloat(R3i.w));
passPixelColor4 = vec4(intBitsToFloat(R4i.x), intBitsToFloat(R4i.y), intBitsToFloat(R4i.z), intBitsToFloat(R4i.w));
}
