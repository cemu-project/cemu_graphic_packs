#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_shading_language_packing : enable
// shader b9eeedc9f6628c36 // distant cloud and fog vs
layout(binding = 6, std140) uniform uniformBlockVS6
{
vec4 uf_blockVS6[1024];
};

layout(binding = 7, std140) uniform uniformBlockVS7
{
vec4 uf_blockVS7[1024];
};

layout(binding = 8, std140) uniform uniformBlockVS8
{
vec4 uf_blockVS8[1024];
};

layout(binding = 11, std140) uniform uniformBlockVS11
{
vec4 uf_blockVS11[1024];
};

layout(binding = 13, std140) uniform uniformBlockVS13
{
vec4 uf_blockVS13[1024];
};

layout(binding = 14, std140) uniform uniformBlockVS14
{
vec4 uf_blockVS14[1024];
};

uniform vec2 uf_windowSpaceToClipSpaceTransform;
uniform float uf_alphaTestRef;
layout(binding = 40) uniform sampler2D textureUnitVS8;// Tex8 addr 0x3da26000 res 256x256x1 dim 1 tm: 4 format 0820 compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler26 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 45) uniform sampler2D textureUnitVS13;// Tex13 addr 0x3db8b000 res 12x1x1 dim 1 tm: 2 format 0816 compSel: 0 1 2 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler31 ClampX/Y/Z: 2 2 2 border: 1
layout(location = 0) in uvec4 attrDataSem0;
layout(location = 1) in uvec4 attrDataSem1;
layout(location = 2) in uvec4 attrDataSem2;
layout(location = 3) in uvec4 attrDataSem3;
layout(location = 4) in uvec4 attrDataSem4;
layout(location = 5) in uvec4 attrDataSem5;
layout(location = 6) in uvec4 attrDataSem6;
layout(location = 7) in uvec4 attrDataSem7;
layout(location = 8) in uvec4 attrDataSem8;
layout(location = 9) in uvec4 attrDataSem9;
layout(location = 10) in uvec4 attrDataSem10;
layout(location = 11) in uvec4 attrDataSem11;
layout(location = 12) in uvec4 attrDataSem12;
layout(location = 13) in uvec4 attrDataSem13;
out gl_PerVertex
{
	vec4 gl_Position;
	float gl_PointSize;
};
layout(location = 0) out vec4 passParameterSem0;
layout(location = 1) out vec4 passParameterSem1;
layout(location = 2) out vec4 passParameterSem3;
layout(location = 4) out vec4 passParameterSem8;
layout(location = 6) out vec4 passParameterSem11;
layout(location = 7) out vec4 passParameterSem14;
layout(location = 8) out vec4 passParameterSem15;
layout(location = 9) out vec4 passParameterSem16;
layout(location = 3) out vec4 passParameterSem4;
layout(location = 5) out vec4 passParameterSem9;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ return min(a*b,min(abs(a)*3.40282347E+38F,abs(b)*3.40282347E+38F)); }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R7i = ivec4(0);
ivec4 R8i = ivec4(0);
ivec4 R9i = ivec4(0);
ivec4 R10i = ivec4(0);
ivec4 R11i = ivec4(0);
ivec4 R12i = ivec4(0);
ivec4 R13i = ivec4(0);
ivec4 R14i = ivec4(0);
ivec4 R15i = ivec4(0);
ivec4 R16i = ivec4(0);
ivec4 R17i = ivec4(0);
ivec4 R18i = ivec4(0);
ivec4 R19i = ivec4(0);
ivec4 R20i = ivec4(0);
ivec4 R21i = ivec4(0);
ivec4 R22i = ivec4(0);
ivec4 R23i = ivec4(0);
ivec4 R24i = ivec4(0);
ivec4 R25i = ivec4(0);
ivec4 R122i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R124i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
uvec4 attrDecoder;
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
bool activeMaskStack[4];
bool activeMaskStackC[5];
activeMaskStack[0] = false;
activeMaskStack[1] = false;
activeMaskStack[2] = false;
activeMaskStackC[0] = false;
activeMaskStackC[1] = false;
activeMaskStackC[2] = false;
activeMaskStackC[3] = false;
activeMaskStack[0] = true;
activeMaskStackC[0] = true;
activeMaskStackC[1] = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = ivec4(gl_VertexID, 0, 0, gl_InstanceID);
attrDecoder = attrDataSem8;
attrDecoder = (attrDecoder>>24)|((attrDecoder>>8)&0xFF00)|((attrDecoder<<8)&0xFF0000)|((attrDecoder<<24));
R9i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), int(attrDecoder.w));
attrDecoder.xyz = attrDataSem7.xyz;
attrDecoder.xyz = (attrDecoder.xyz>>24)|((attrDecoder.xyz>>8)&0xFF00)|((attrDecoder.xyz<<8)&0xFF0000)|((attrDecoder.xyz<<24));
attrDecoder.w = 0;
R8i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), floatBitsToInt(1.0));
attrDecoder = attrDataSem12;
attrDecoder = (attrDecoder>>24)|((attrDecoder>>8)&0xFF00)|((attrDecoder<<8)&0xFF0000)|((attrDecoder<<24));
R12i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), int(attrDecoder.w));
attrDecoder = attrDataSem3;
R4i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), int(attrDecoder.w));
attrDecoder = attrDataSem4;
R5i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), int(attrDecoder.w));
attrDecoder = attrDataSem5;
attrDecoder = (attrDecoder>>24)|((attrDecoder>>8)&0xFF00)|((attrDecoder<<8)&0xFF0000)|((attrDecoder<<24));
R6i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), int(attrDecoder.w));
attrDecoder = attrDataSem6;
attrDecoder = (attrDecoder>>24)|((attrDecoder>>8)&0xFF00)|((attrDecoder<<8)&0xFF0000)|((attrDecoder<<24));
R7i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), int(attrDecoder.w));
attrDecoder = attrDataSem10;
attrDecoder = (attrDecoder>>24)|((attrDecoder>>8)&0xFF00)|((attrDecoder<<8)&0xFF0000)|((attrDecoder<<24));
R11i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), int(attrDecoder.w));
attrDecoder = attrDataSem9;
attrDecoder = (attrDecoder>>24)|((attrDecoder>>8)&0xFF00)|((attrDecoder<<8)&0xFF0000)|((attrDecoder<<24));
R10i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), int(attrDecoder.w));
attrDecoder = attrDataSem0;
attrDecoder = (attrDecoder>>24)|((attrDecoder>>8)&0xFF00)|((attrDecoder<<8)&0xFF0000)|((attrDecoder<<24));
R1i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), int(attrDecoder.w));
attrDecoder = attrDataSem1;
attrDecoder = (attrDecoder>>24)|((attrDecoder>>8)&0xFF00)|((attrDecoder<<8)&0xFF0000)|((attrDecoder<<24));
R2i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), int(attrDecoder.w));
attrDecoder = attrDataSem2;
attrDecoder = (attrDecoder>>24)|((attrDecoder>>8)&0xFF00)|((attrDecoder<<8)&0xFF0000)|((attrDecoder<<24));
R3i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), int(attrDecoder.w));
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
R7i.z = floatBitsToInt(-(intBitsToFloat(R12i.y)) + 1.0);
R0i.w = 0;
R1i.w = floatBitsToInt(1.0);
PS0i = R1i.w;
// 1
R9i.w = floatBitsToInt(-(intBitsToFloat(R7i.w)) + uf_blockVS8[2].x);
R11i.w = floatBitsToInt(-(intBitsToFloat(R12i.x)) + 1.0);
PS1i = R11i.w;
// 2
predResult = (0.0 > intBitsToFloat(R9i.w));
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
R17i.x = 0;
R17i.y = 0;
R17i.z = floatBitsToInt(uf_blockVS6[18].y * intBitsToFloat(0x40a00000));
R18i.x = 0;
PS0i = R18i.x;
// 1
R2i.w = R1i.w;
}
activeMaskStack[1] = activeMaskStack[1] == false;
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
// 0
R2i.w = R0i.w;
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
predResult = (R2i.w == 0);
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
activeMaskStack[2] = activeMaskStack[1];
activeMaskStackC[3] = activeMaskStackC[2];
// 0
PS0i = int(intBitsToFloat(R6i.w));
// 1
R0i.x = floatBitsToInt(float(PS0i));
PS1i = R0i.x;
// 2
backupReg0i = R0i.x;
predResult = (intBitsToFloat(R9i.w) >= intBitsToFloat(backupReg0i));
activeMaskStack[2] = predResult;
activeMaskStackC[3] = predResult == true && activeMaskStackC[2] == true;
}
else {
activeMaskStack[2] = false;
activeMaskStackC[3] = false;
}
if( activeMaskStackC[3] == true ) {
// 0
R17i.x = 0;
R17i.y = 0;
R17i.z = floatBitsToInt(uf_blockVS6[18].y * intBitsToFloat(0x40a00000));
R18i.x = 0;
PS0i = R18i.x;
// 1
R0i.w = R1i.w;
}
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
activeMaskStack[2] = activeMaskStack[1];
activeMaskStackC[3] = activeMaskStackC[2];
// 0
predResult = (R0i.w == 0);
activeMaskStack[2] = predResult;
activeMaskStackC[3] = predResult == true && activeMaskStackC[2] == true;
}
else {
activeMaskStack[2] = false;
activeMaskStackC[3] = false;
}
if( activeMaskStackC[3] == true ) {
activeMaskStack[3] = activeMaskStack[2];
activeMaskStackC[4] = activeMaskStackC[3];
// 0
R127i.x = R1i.y;
R0i.y = R2i.x;
R0i.z = R3i.x;
R127i.w = R2i.y;
R127i.z = R3i.y;
PS0i = R127i.z;
// 1
R126i.x = R1i.z;
R127i.y = R2i.z;
R126i.z = R3i.z;
// 2
backupReg0i = R0i.y;
backupReg0i = R0i.y;
backupReg1i = R0i.z;
backupReg1i = R0i.z;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R1i.x),intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),-0.0),vec4(intBitsToFloat(R1i.x),intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
// 3
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(R127i.w),intBitsToFloat(R127i.z),-0.0),vec4(intBitsToFloat(R127i.x),intBitsToFloat(R127i.w),intBitsToFloat(R127i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R6i.y = floatBitsToInt(sqrt(intBitsToFloat(PV0i.x)));
PS1i = R6i.y;
// 4
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R126i.x),intBitsToFloat(R127i.y),intBitsToFloat(R126i.z),-0.0),vec4(intBitsToFloat(R126i.x),intBitsToFloat(R127i.y),intBitsToFloat(R126i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R0i.w = floatBitsToInt(sqrt(intBitsToFloat(PV1i.x)));
PS0i = R0i.w;
// 5
R0i.y = floatBitsToInt(sqrt(intBitsToFloat(PV0i.x)));
PS1i = R0i.y;
// 6
predResult = (intBitsToFloat(R6i.y) > 0.0);
activeMaskStack[3] = predResult;
activeMaskStackC[4] = predResult == true && activeMaskStackC[3] == true;
}
else {
activeMaskStack[3] = false;
activeMaskStackC[4] = false;
}
if( activeMaskStackC[4] == true ) {
// 0
R127i.y = floatBitsToInt(1.0 / intBitsToFloat(R6i.y));
PS0i = R127i.y;
// 1
R13i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(PS0i)));
R15i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.x), intBitsToFloat(PS0i)));
PS1i = R15i.x;
// 2
R14i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.x), intBitsToFloat(R127i.y)));
}
activeMaskStack[3] = activeMaskStack[3] == false;
activeMaskStackC[4] = activeMaskStack[3] == true && activeMaskStackC[3] == true;
if( activeMaskStackC[4] == true ) {
// 0
R13i.x = 0;
PV0i.x = R13i.x;
// 1
R14i.x = PV0i.x;
// 2
R15i.x = R13i.x;
}
activeMaskStackC[3] = activeMaskStack[2] == true && activeMaskStackC[2] == true;
if( activeMaskStackC[3] == true ) {
activeMaskStack[3] = activeMaskStack[2];
activeMaskStackC[4] = activeMaskStackC[3];
// 0
predResult = (intBitsToFloat(R0i.w) > 0.0);
activeMaskStack[3] = predResult;
activeMaskStackC[4] = predResult == true && activeMaskStackC[3] == true;
}
else {
activeMaskStack[3] = false;
activeMaskStackC[4] = false;
}
if( activeMaskStackC[4] == true ) {
// 0
R127i.x = floatBitsToInt(1.0 / intBitsToFloat(R0i.w));
PS0i = R127i.x;
// 1
R13i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.y), intBitsToFloat(PS0i)));
R15i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.y), intBitsToFloat(PS0i)));
PS1i = R15i.y;
// 2
R14i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.y), intBitsToFloat(R127i.x)));
}
activeMaskStack[3] = activeMaskStack[3] == false;
activeMaskStackC[4] = activeMaskStack[3] == true && activeMaskStackC[3] == true;
if( activeMaskStackC[4] == true ) {
// 0
R14i.y = 0;
R15i.y = 0;
PS0i = R15i.y;
// 1
R13i.y = 0;
}
activeMaskStackC[3] = activeMaskStack[2] == true && activeMaskStackC[2] == true;
if( activeMaskStackC[3] == true ) {
activeMaskStack[3] = activeMaskStack[2];
activeMaskStackC[4] = activeMaskStackC[3];
// 0
predResult = (intBitsToFloat(R0i.y) > 0.0);
activeMaskStack[3] = predResult;
activeMaskStackC[4] = predResult == true && activeMaskStackC[3] == true;
}
else {
activeMaskStack[3] = false;
activeMaskStackC[4] = false;
}
if( activeMaskStackC[4] == true ) {
// 0
R127i.x = floatBitsToInt(1.0 / intBitsToFloat(R0i.y));
PS0i = R127i.x;
// 1
R13i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.z), intBitsToFloat(PS0i)));
R15i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.z), intBitsToFloat(PS0i)));
PS1i = R15i.z;
// 2
R14i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(R127i.x)));
}
activeMaskStack[3] = activeMaskStack[3] == false;
activeMaskStackC[4] = activeMaskStack[3] == true && activeMaskStackC[3] == true;
if( activeMaskStackC[4] == true ) {
// 0
R14i.z = 0;
R15i.z = 0;
PS0i = R15i.z;
// 1
R13i.z = 0;
}
activeMaskStackC[3] = activeMaskStack[2] == true && activeMaskStackC[2] == true;
if( activeMaskStackC[3] == true ) {
// 0
PV0i.x = floatBitsToInt((uf_blockVS7[9].x > 0.0)?1.0:0.0);
PV0i.y = floatBitsToInt((0.0 > uf_blockVS7[9].x)?1.0:0.0);
R127i.z = floatBitsToInt(intBitsToFloat(R10i.y) + intBitsToFloat(R10i.z));
R0i.w = 0x3f800000;
R1i.w = floatBitsToInt(uf_blockVS8[4].w);
PS0i = R1i.w;
// 1
R126i.x = R10i.z;
R126i.x = floatBitsToInt(intBitsToFloat(R126i.x) * 2.0);
R126i.y = floatBitsToInt(intBitsToFloat(R10i.x) + intBitsToFloat(R10i.y));
R125i.z = floatBitsToInt(intBitsToFloat(PV0i.x) + -(intBitsToFloat(PV0i.y)));
R2i.w = floatBitsToInt(uf_blockVS8[5].w);
R3i.w = floatBitsToInt(uf_blockVS8[6].w);
PS1i = R3i.w;
// 2
backupReg0i = R0i.w;
R6i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R1i.x),intBitsToFloat(R1i.y),intBitsToFloat(R1i.z),intBitsToFloat(R1i.w)),vec4(intBitsToFloat(R4i.x),intBitsToFloat(R4i.y),intBitsToFloat(R4i.z),intBitsToFloat(backupReg0i))));
PV0i.x = R6i.x;
PV0i.y = R6i.x;
PV0i.z = R6i.x;
PV0i.w = R6i.x;
R127i.w = floatBitsToInt(1.0 / uf_blockVS7[9].x);
PS0i = R127i.w;
// 3
backupReg0i = R0i.w;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R2i.x),intBitsToFloat(R2i.y),intBitsToFloat(R2i.z),intBitsToFloat(R2i.w)),vec4(intBitsToFloat(R4i.x),intBitsToFloat(R4i.y),intBitsToFloat(R4i.z),intBitsToFloat(backupReg0i))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R7i.y = tempi.x;
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R10i.x), uf_blockVS7[10].y));
PS1i = R127i.x;
// 4
backupReg0i = R0i.w;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),intBitsToFloat(R3i.w)),vec4(intBitsToFloat(R4i.x),intBitsToFloat(R4i.y),intBitsToFloat(R4i.z),intBitsToFloat(backupReg0i))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R12i.z = tempi.x;
R127i.y = floatBitsToInt(uf_blockVS7[5].x) & 0x00020000;
PS0i = R127i.y;
// 5
R125i.x = floatBitsToInt(-(intBitsToFloat(R125i.z)) + 1.0);
PV1i.y = floatBitsToInt(intBitsToFloat(R9i.w) * intBitsToFloat(R127i.w));
R126i.z = floatBitsToInt(uf_blockVS7[5].x) & 0x00010000;
R127i.w = floatBitsToInt(uf_blockVS7[5].x) & 0x00040000;
R12i.w = floatBitsToInt(1.0 / intBitsToFloat(R0i.x));
PS1i = R12i.w;
// 6
backupReg0i = R127i.x;
R127i.x = R10i.y;
R127i.x = floatBitsToInt(intBitsToFloat(R127i.x) * 2.0);
R125i.y = floatBitsToInt(intBitsToFloat(R127i.z) * 0.5);
PV0i.z = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(PV1i.y));
R126i.w = floatBitsToInt(floor(intBitsToFloat(R126i.x)));
PS0i = floatBitsToInt(float(R127i.y));
// 7
PV1i.x = floatBitsToInt(fract(intBitsToFloat(PV0i.z)));
PV1i.y = floatBitsToInt((intBitsToFloat(PS0i) > 0.0)?1.0:0.0);
R19i.z = floatBitsToInt(intBitsToFloat(R9i.w) * intBitsToFloat(R12i.w));
PV1i.z = R19i.z;
PV1i.w = floatBitsToInt((0.0 > intBitsToFloat(PS0i))?1.0:0.0);
PS1i = floatBitsToInt(float(R126i.z));
// 8
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.z), intBitsToFloat(PV1i.x)));
R127i.y = floatBitsToInt(intBitsToFloat(PV1i.y) + -(intBitsToFloat(PV1i.w)));
PV0i.z = floatBitsToInt((intBitsToFloat(PS1i) > 0.0)?1.0:0.0);
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.z), intBitsToFloat(R125i.x)));
PS0i = floatBitsToInt((0.0 > intBitsToFloat(PS1i))?1.0:0.0);
// 9
backupReg0i = R126i.y;
R125i.x = floatBitsToInt(intBitsToFloat(PV0i.z) + -(intBitsToFloat(PS0i)));
R126i.y = floatBitsToInt(intBitsToFloat(backupReg0i) * 0.5);
R3i.z = floatBitsToInt(intBitsToFloat(PV0i.w) + intBitsToFloat(PV0i.x));
R125i.w = floatBitsToInt(intBitsToFloat(R10i.x) + intBitsToFloat(R10i.z));
PS1i = floatBitsToInt(float(R127i.w));
// 10
R3i.x = floatBitsToInt(intBitsToFloat(R125i.y) + -(0.5));
R3i.x = floatBitsToInt(intBitsToFloat(R3i.x) * 2.0);
PV0i.y = floatBitsToInt((0.0 > intBitsToFloat(PS1i))?1.0:0.0);
PV0i.z = floatBitsToInt((intBitsToFloat(PS1i) > 0.0)?1.0:0.0);
R124i.w = floatBitsToInt(floor(intBitsToFloat(R127i.x)));
R127i.w = int(intBitsToFloat(R127i.y));
PS0i = R127i.w;
// 11
PV1i.x = 0 - PS0i;
PV1i.y = floatBitsToInt((intBitsToFloat(R126i.w) > 0.0)?1.0:0.0);
PV1i.z = floatBitsToInt((0.0 > intBitsToFloat(R126i.w))?1.0:0.0);
PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.z) + -(intBitsToFloat(PV0i.y)));
R127i.y = int(intBitsToFloat(R125i.x));
PS1i = R127i.y;
// 12
R127i.x = floatBitsToInt(intBitsToFloat(PV1i.y) + -(intBitsToFloat(PV1i.z)));
R125i.y = R10i.x;
R125i.y = floatBitsToInt(intBitsToFloat(R125i.y) * 2.0);
PV0i.z = max(R127i.w, PV1i.x);
PV0i.w = 0 - PS1i;
R125i.x = int(intBitsToFloat(PV1i.w));
PS0i = R125i.x;
// 13
R126i.x = max(R127i.y, PV0i.w);
R127i.y = floatBitsToInt(intBitsToFloat(R125i.w) * 0.5);
R4i.z = floatBitsToInt(intBitsToFloat(R126i.y) + -(0.5));
R4i.z = floatBitsToInt(intBitsToFloat(R4i.z) * 2.0);
PV1i.w = 0 - PS0i;
PS1i = floatBitsToInt(float(PV0i.z));
PS1i = floatBitsToInt(intBitsToFloat(PS1i) * 2.0);
// 14
PV0i.x = floatBitsToInt(floor(intBitsToFloat(R125i.y)));
PV0i.y = floatBitsToInt((intBitsToFloat(R124i.w) > 0.0)?1.0:0.0);
R125i.z = max(R125i.x, PV1i.w);
PV0i.w = floatBitsToInt((0.0 > intBitsToFloat(R124i.w))?1.0:0.0);
R3i.y = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(PS1i)), intBitsToFloat(R127i.x)));
PS0i = R3i.y;
// 15
PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.y) + -(intBitsToFloat(PV0i.w)));
PV1i.y = floatBitsToInt((intBitsToFloat(PV0i.x) > 0.0)?1.0:0.0);
PV1i.z = floatBitsToInt((0.0 > intBitsToFloat(PV0i.x))?1.0:0.0);
R0i.w = floatBitsToInt(intBitsToFloat(R127i.y) + -(0.5));
R0i.w = floatBitsToInt(intBitsToFloat(R0i.w) * 2.0);
PS1i = floatBitsToInt(float(R126i.x));
PS1i = floatBitsToInt(intBitsToFloat(PS1i) * 2.0);
// 16
PV0i.x = floatBitsToInt(max(intBitsToFloat(R10i.x), 0.0));
PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.y) + -(intBitsToFloat(PV1i.z)));
R2i.z = floatBitsToInt(intBitsToFloat(R10i.y) + -(0.5));
R1i.w = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(PS1i)), intBitsToFloat(PV1i.x)));
PS0i = floatBitsToInt(float(R125i.z));
PS0i = floatBitsToInt(intBitsToFloat(PS0i) * 2.0);
// 17
PV1i.x = floatBitsToInt(min(intBitsToFloat(PV0i.x), 0.0));
R4i.y = floatBitsToInt(intBitsToFloat(R10i.x) + -(0.5));
R1i.z = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(PS0i)), intBitsToFloat(PV0i.y)));
R2i.w = floatBitsToInt(intBitsToFloat(R10i.z) + -(0.5));
PS1i = floatBitsToInt(uf_blockVS7[13].y);
PS1i = floatBitsToInt(intBitsToFloat(PS1i) / 2.0);
// 18
R1i.x = floatBitsToInt(intBitsToFloat(R11i.x) + intBitsToFloat(PV1i.x));
PV0i.y = floatBitsToInt(uf_blockVS7[13].x);
PV0i.y = floatBitsToInt(intBitsToFloat(PV0i.y) / 2.0);
R6i.z = floatBitsToInt(intBitsToFloat(R10i.x) + 1.0);
R5i.w = floatBitsToInt(intBitsToFloat(R9i.y) + intBitsToFloat(PS1i));
R6i.y = floatBitsToInt(intBitsToFloat(R10i.y) + 1.0);
PS0i = R6i.y;
// 19
PV1i.x = ((intBitsToFloat(R9i.w) == 0.0)?int(0xFFFFFFFF):int(0x0));
R0i.y = floatBitsToInt(intBitsToFloat(R9i.x) + intBitsToFloat(PV0i.y));
R3i.w = floatBitsToInt(intBitsToFloat(R10i.z) + 1.0);
// 20
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R5i.x),intBitsToFloat(R5i.y),intBitsToFloat(R5i.z),-0.0),vec4(intBitsToFloat(R14i.x),intBitsToFloat(R14i.y),intBitsToFloat(R14i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.y = tempi.x;
R4i.w = ((PV1i.x == 0)?(R9i.w):(0x3f800000));
PS0i = R4i.w;
// 21
R7i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R5i.x),intBitsToFloat(R5i.y),intBitsToFloat(R5i.z),-0.0),vec4(intBitsToFloat(R13i.x),intBitsToFloat(R13i.y),intBitsToFloat(R13i.z),0.0)));
PV1i.x = R7i.x;
PV1i.y = R7i.x;
PV1i.z = R7i.x;
PV1i.w = R7i.x;
// 22
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R5i.x),intBitsToFloat(R5i.y),intBitsToFloat(R5i.z),-0.0),vec4(intBitsToFloat(R15i.x),intBitsToFloat(R15i.y),intBitsToFloat(R15i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R9i.y = tempi.x;
R13i.z = floatBitsToInt(intBitsToFloat(R127i.y) + intBitsToFloat(0x358637bd));
PS0i = R13i.z;
}
if( activeMaskStackC[3] == true ) {
// 0
R124i.x = floatBitsToInt(-(intBitsToFloat(R12i.z)) + uf_blockVS6[17].z);
PV0i.x = R124i.x;
R1i.y = floatBitsToInt(intBitsToFloat(R6i.x) + -(uf_blockVS6[17].x));
R5i.z = floatBitsToInt(intBitsToFloat(R7i.y) + -(uf_blockVS6[17].y));
R125i.w = floatBitsToInt(-(intBitsToFloat(R6i.x)) + uf_blockVS6[17].x);
PV0i.w = R125i.w;
R0i.z = floatBitsToInt(intBitsToFloat(R12i.z) + -(uf_blockVS6[17].z));
PS0i = R0i.z;
// 1
PV1i.x = floatBitsToInt(intBitsToFloat(R3i.z) + -(uf_blockVS7[97].w));
PV1i.y = floatBitsToInt(-(uf_blockVS7[96].w) + uf_blockVS7[97].w);
R124i.z = floatBitsToInt(intBitsToFloat(R3i.z) + -(uf_blockVS7[96].w));
R124i.w = floatBitsToInt((-(intBitsToFloat(PV0i.w)) > 0.0)?1.0:0.0);
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PV0i.x));
// 2
R2i.x = ((intBitsToFloat(PV1i.x) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV0i.y = floatBitsToInt(-(intBitsToFloat(R125i.w)) * intBitsToFloat(PS1i));
R125i.z = floatBitsToInt((0.0 > -(intBitsToFloat(R125i.w)))?1.0:0.0);
PV0i.w = floatBitsToInt(-(uf_blockVS7[96].x) + uf_blockVS7[97].x);
R126i.w = floatBitsToInt(1.0 / intBitsToFloat(PV1i.y));
PS0i = R126i.w;
// 3
PV1i.x = floatBitsToInt((0.0 > intBitsToFloat(PV0i.y))?1.0:0.0);
R127i.y = floatBitsToInt(max(intBitsToFloat(PV0i.y), -(intBitsToFloat(PV0i.y))));
PV1i.y = R127i.y;
R126i.z = floatBitsToInt(intBitsToFloat(PV0i.w) * intBitsToFloat(PS0i));
PV1i.w = floatBitsToInt((intBitsToFloat(PV0i.y) > 0.0)?1.0:0.0);
tempResultf = log2(uf_blockVS7[114].w);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1i = floatBitsToInt(tempResultf);
// 4
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R9i.w), intBitsToFloat(PS1i)));
R2i.y = floatBitsToInt(intBitsToFloat(R124i.w) + -(intBitsToFloat(R125i.z)));
PV0i.z = floatBitsToInt(intBitsToFloat(PV1i.w) + -(intBitsToFloat(PV1i.x)));
R124i.w = ((intBitsToFloat(PV1i.y) > 1.0)?int(0xFFFFFFFF):int(0x0));
PV0i.w = R124i.w;
PS0i = floatBitsToInt(1.0 / intBitsToFloat(PV1i.y));
// 5
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.z), intBitsToFloat(R126i.z)));
R5i.y = floatBitsToInt(((PV0i.w == 0)?(intBitsToFloat(PV0i.z)):(-(intBitsToFloat(PV0i.z)))));
PV1i.z = floatBitsToInt(intBitsToFloat(PV0i.z) * intBitsToFloat(0x3fc90fdb));
R123i.w = ((PV0i.w == 0)?(R127i.y):(PS0i));
PV1i.w = R123i.w;
R126i.z = ((intBitsToFloat(R124i.z) >= 0.0)?(floatBitsToInt(1.0)):(0));
PS1i = R126i.z;
// 6
backupReg0i = R126i.x;
R125i.x = ((R124i.w == 0)?(0):(PV1i.z));
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.x), uf_blockVS7[115].y));
PV0i.z = floatBitsToInt(min(intBitsToFloat(PV1i.w), 1.0));
PV0i.w = floatBitsToInt(-(intBitsToFloat(R2i.x)) + 1.0);
R126i.x = floatBitsToInt(exp2(intBitsToFloat(backupReg0i)));
PS0i = R126i.x;
// 7
backupReg0i = R127i.x;
R127i.x = floatBitsToInt(uf_blockVS7[96].x + intBitsToFloat(backupReg0i));
R125i.y = floatBitsToInt(max(intBitsToFloat(PV0i.z), -(1.0)));
PV1i.y = R125i.y;
R3i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.z), intBitsToFloat(PV0i.w)));
PV1i.w = floatBitsToInt(-(uf_blockVS7[114].w) + 1.0);
R5i.x = floatBitsToInt(-(intBitsToFloat(R126i.z)) + 1.0);
PS1i = R5i.x;
// 8
backupReg0i = R127i.y;
backupReg1i = R126i.x;
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.z), uf_blockVS7[115].x));
R127i.y = floatBitsToInt(uf_blockVS7[114].y + intBitsToFloat(backupReg0i));
PV0i.z = floatBitsToInt(-(intBitsToFloat(backupReg1i)) + 1.0);
R124i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.y), intBitsToFloat(PV1i.y)));
PV0i.w = R124i.w;
PS0i = floatBitsToInt(1.0 / intBitsToFloat(PV1i.w));
// 9
R123i.x = floatBitsToInt((intBitsToFloat(0x3edcf805) * intBitsToFloat(PV0i.w) + 1.0));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((intBitsToFloat(0x3d6ee04d) * intBitsToFloat(PV0i.w) + intBitsToFloat(0x3f43b24e)));
PV1i.y = R123i.y;
R127i.z = floatBitsToInt(intBitsToFloat(PV0i.z) * intBitsToFloat(PS0i));
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(R3i.z)));
R126i.z = floatBitsToInt(mul_nonIEEE(uf_blockVS7[96].x, intBitsToFloat(R5i.x)));
PS1i = R126i.z;
// 10
backupReg0i = R126i.x;
R126i.x = floatBitsToInt(intBitsToFloat(backupReg0i) + uf_blockVS7[114].x);
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.w), uf_blockVS7[115].z));
R125i.z = floatBitsToInt(mul_nonIEEE(abs(intBitsToFloat(R125i.y)), intBitsToFloat(PV1i.x)));
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.w),intBitsToFloat(PV1i.y)) + 1.0));
PV0i.w = R123i.w;
R124i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), intBitsToFloat(R3i.y)));
PS0i = R124i.w;
// 11
PV1i.x = ((0.0 > intBitsToFloat(R124i.x))?int(0xFFFFFFFF):int(0x0));
R124i.y = floatBitsToInt(intBitsToFloat(R127i.w) + intBitsToFloat(R126i.z));
PV1i.z = ((uf_blockVS7[114].w == 1.0)?int(0xFFFFFFFF):int(0x0));
PV1i.w = ((-(intBitsToFloat(R125i.w)) == 0.0)?int(0xFFFFFFFF):int(0x0));
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PV0i.w));
// 12
R127i.x = floatBitsToInt(intBitsToFloat(R127i.y) + intBitsToFloat(R124i.w));
R127i.y = ((PV1i.z == 0)?(R127i.z):(R9i.w));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.z), intBitsToFloat(PS1i)));
R0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(PV1i.x)));
PS0i = floatBitsToInt(mul_nonIEEE(uf_blockVS7[97].x, intBitsToFloat(R2i.x)));
// 13
R3i.x = floatBitsToInt(uf_blockVS7[114].z + intBitsToFloat(R126i.y));
PV1i.x = R3i.x;
R123i.y = ((intBitsToFloat(R125i.y) > 0.0)?(PV0i.z):(floatBitsToInt(-(intBitsToFloat(PV0i.z)))));
PV1i.y = R123i.y;
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.x), intBitsToFloat(R1i.w)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.z), uf_blockVS7[113].y));
R124i.w = floatBitsToInt(intBitsToFloat(PS0i) + intBitsToFloat(R124i.y));
PS1i = R124i.w;
// 14
backupReg0i = R126i.x;
R126i.x = floatBitsToInt(-(uf_blockVS7[96].y) + uf_blockVS7[97].y);
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(R1i.z)));
R125i.z = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(PV1i.z));
R125i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.y),intBitsToFloat(PV1i.y)) + intBitsToFloat(R125i.x)));
PV0i.w = R125i.w;
R127i.w = floatBitsToInt(intBitsToFloat(PV1i.w) + 0.0);
PS0i = R127i.w;
// 15
PV1i.x = floatBitsToInt((0.0 > intBitsToFloat(PV0i.w))?1.0:0.0);
R125i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(R127i.y)));
R127i.z = floatBitsToInt(-(uf_blockVS7[96].z) + uf_blockVS7[97].z);
PV1i.w = floatBitsToInt((intBitsToFloat(PV0i.w) > 0.0)?1.0:0.0);
R124i.y = ((intBitsToFloat(R124i.x) == 0.0)?int(0xFFFFFFFF):int(0x0));
PS1i = R124i.y;
// 16
backupReg0i = R126i.y;
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.y), uf_blockVS7[113].x));
R126i.y = floatBitsToInt(intBitsToFloat(R2i.y) * intBitsToFloat(0x3fc90fdb));
PV0i.z = floatBitsToInt(intBitsToFloat(PV1i.w) + -(intBitsToFloat(PV1i.x)));
R1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(R124i.w)));
R124i.w = floatBitsToInt(intBitsToFloat(R3i.x) + intBitsToFloat(backupReg0i));
PS0i = R124i.w;
// 17
PV1i.x = floatBitsToInt(intBitsToFloat(R126i.x) * intBitsToFloat(R126i.w));
PV1i.y = floatBitsToInt(intBitsToFloat(R127i.z) * intBitsToFloat(R126i.w));
R126i.z = floatBitsToInt(intBitsToFloat(R127i.w) + intBitsToFloat(R125i.y));
PV1i.w = floatBitsToInt(-(intBitsToFloat(R2i.y)) + intBitsToFloat(PV0i.z));
R127i.z = floatBitsToInt(intBitsToFloat(PV0i.x) + 0.0);
PS1i = R127i.z;
// 18
PV0i.x = floatBitsToInt(intBitsToFloat(PV1i.w) * intBitsToFloat(0x3fc90fdb));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.w), uf_blockVS7[113].z));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.z), intBitsToFloat(PV1i.x)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.z), intBitsToFloat(R127i.y)));
R125i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.z), intBitsToFloat(PV1i.y)));
PS0i = R125i.z;
// 19
PV1i.x = floatBitsToInt(intBitsToFloat(R127i.z) + intBitsToFloat(PV0i.w));
PV1i.y = floatBitsToInt(intBitsToFloat(PV0i.y) + 0.0);
PV1i.z = floatBitsToInt(intBitsToFloat(R125i.w) + -(intBitsToFloat(PV0i.x)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.w), intBitsToFloat(R127i.y)));
PS1i = floatBitsToInt(uf_blockVS7[96].y + intBitsToFloat(PV0i.z));
// 20
R3i.x = floatBitsToInt(intBitsToFloat(PV1i.y) + intBitsToFloat(PV1i.w));
R123i.y = ((R0i.w == 0)?(PV1i.z):(0x40490fdb));
PV0i.y = R123i.y;
PV0i.z = floatBitsToInt(uf_blockVS7[96].z + intBitsToFloat(R125i.z));
R123i.w = floatBitsToInt((intBitsToFloat(PV1i.x) * intBitsToFloat(0x3e22f983) + 0.5));
PV0i.w = R123i.w;
R4i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(R3i.z)));
PS0i = R4i.y;
// 21
backupReg0i = R5i.x;
backupReg0i = R5i.x;
R5i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), intBitsToFloat(R3i.z)));
R5i.y = floatBitsToInt(mul_nonIEEE(uf_blockVS7[96].y, intBitsToFloat(backupReg0i)));
R1i.z = floatBitsToInt(mul_nonIEEE(uf_blockVS7[96].z, intBitsToFloat(backupReg0i)));
R123i.w = ((R124i.y == 0)?(PV0i.y):(R126i.y));
PV1i.w = R123i.w;
R4i.x = floatBitsToInt(fract(intBitsToFloat(PV0i.w)));
PS1i = R4i.x;
// 22
backupReg0i = R0i.z;
backupReg0i = R0i.z;
tempi.x = floatBitsToInt(dot(vec4(-(intBitsToFloat(R1i.y)),-(intBitsToFloat(R5i.z)),-(intBitsToFloat(backupReg0i)),-0.0),vec4(-(intBitsToFloat(R1i.y)),-(intBitsToFloat(R5i.z)),-(intBitsToFloat(backupReg0i)),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R2i.y = tempi.x;
R3i.z = floatBitsToInt(intBitsToFloat(R126i.z) + -(intBitsToFloat(PV1i.w)));
PS0i = R3i.z;
}
if( activeMaskStackC[3] == true ) {
// 0
backupReg0i = R2i.y;
R123i.x = floatBitsToInt((intBitsToFloat(R3i.z) * intBitsToFloat(0x3e22f983) + 0.5));
PV0i.x = R123i.x;
R2i.y = floatBitsToInt(intBitsToFloat(R4i.y) + intBitsToFloat(R5i.y));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.w), uf_blockVS8[3].y));
R125i.w = floatBitsToInt((intBitsToFloat(R3i.x) * intBitsToFloat(0x3e22f983) + 0.5));
tempResultf = 1.0 / sqrt(intBitsToFloat(backupReg0i));
PS0i = floatBitsToInt(tempResultf);
// 1
PV1i.x = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(R1i.y)), intBitsToFloat(PS0i)));
PV1i.y = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(R0i.z)), intBitsToFloat(PS0i)));
PV1i.z = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(R5i.z)), intBitsToFloat(PS0i)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), uf_blockVS7[13].z));
R126i.y = floatBitsToInt(fract(intBitsToFloat(PV0i.x)));
PS1i = R126i.y;
// 2
R3i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(PV1i.x)));
PV0i.x = R3i.x;
R3i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(PV1i.z)));
PV0i.y = R3i.y;
R2i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(PV1i.y)));
PV0i.z = R2i.z;
R0i.w = floatBitsToInt(intBitsToFloat(R5i.x) + intBitsToFloat(R1i.z));
R126i.z = floatBitsToInt((intBitsToFloat(R4i.x) * intBitsToFloat(0x40c90fdb) + intBitsToFloat(0xc0490fdb)));
PS0i = R126i.z;
// 3
backupReg0i = R126i.y;
R126i.x = floatBitsToInt(fract(intBitsToFloat(R125i.w)));
R126i.y = floatBitsToInt(intBitsToFloat(R1i.y) + intBitsToFloat(PV0i.x));
R125i.z = floatBitsToInt(intBitsToFloat(R5i.z) + intBitsToFloat(PV0i.y));
R125i.w = floatBitsToInt((intBitsToFloat(backupReg0i) * intBitsToFloat(0x40c90fdb) + intBitsToFloat(0xc0490fdb)));
R127i.z = floatBitsToInt(intBitsToFloat(R0i.z) + intBitsToFloat(PV0i.z));
PS1i = R127i.z;
// 4
backupReg0i = R0i.z;
backupReg0i = R0i.z;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R1i.y),intBitsToFloat(R5i.z),intBitsToFloat(backupReg0i),-0.0),vec4(intBitsToFloat(R1i.y),intBitsToFloat(R5i.z),intBitsToFloat(backupReg0i),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R124i.w = tempi.x;
R124i.y = floatBitsToInt(intBitsToFloat(R126i.z) * intBitsToFloat(0x3e22f983));
PS0i = R124i.y;
// 5
R127i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R126i.y),intBitsToFloat(R125i.z),intBitsToFloat(R127i.z),-0.0),vec4(intBitsToFloat(R126i.y),intBitsToFloat(R125i.z),intBitsToFloat(R127i.z),0.0)));
PV1i.x = R127i.x;
PV1i.y = R127i.x;
PV1i.z = R127i.x;
PV1i.w = R127i.x;
R124i.x = floatBitsToInt(intBitsToFloat(R125i.w) * intBitsToFloat(0x3e22f983));
PS1i = R124i.x;
// 6
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.w), uf_blockVS8[3].y));
R123i.z = floatBitsToInt((intBitsToFloat(R126i.x) * intBitsToFloat(0x40c90fdb) + intBitsToFloat(0xc0490fdb)));
PV0i.z = R123i.z;
R127i.z = floatBitsToInt(sqrt(intBitsToFloat(R124i.w)));
PS0i = R127i.z;
// 7
R127i.y = floatBitsToInt(intBitsToFloat(PV0i.z) * intBitsToFloat(0x3e22f983));
R126i.x = floatBitsToInt(cos((intBitsToFloat(R124i.y))/0.1591549367));
PS1i = R126i.x;
// 8
R125i.z = floatBitsToInt(sin((intBitsToFloat(R124i.x))/0.1591549367));
PS0i = R125i.z;
// 9
R125i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.x), intBitsToFloat(PS0i)));
R124i.w = floatBitsToInt(sqrt(intBitsToFloat(R127i.x)));
PS1i = R124i.w;
// 10
PS0i = floatBitsToInt(1.0 / intBitsToFloat(R127i.z));
// 11
R1i.w = floatBitsToInt(intBitsToFloat(R124i.w) * intBitsToFloat(PS0i));
PV1i.w = R1i.w;
R127i.w = floatBitsToInt(sin((intBitsToFloat(R124i.y))/0.1591549367));
PS1i = R127i.w;
// 12
R5i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.y), intBitsToFloat(PV1i.w)));
PV0i.x = R5i.x;
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(R125i.z)));
R126i.y = floatBitsToInt(cos((intBitsToFloat(R124i.x))/0.1591549367));
PS0i = R126i.y;
// 13
R124i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.x), intBitsToFloat(PS0i)));
PV1i.x = R124i.x;
R4i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(R0i.y)));
R125i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.w), intBitsToFloat(PS0i)));
R124i.w = floatBitsToInt(sin((intBitsToFloat(R127i.y))/0.1591549367));
PS1i = R124i.w;
// 14
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(R127i.z)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(R125i.y)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(PV1i.x)));
R6i.w = floatBitsToInt(-(intBitsToFloat(PS1i)));
R127i.x = floatBitsToInt(cos((intBitsToFloat(R127i.y))/0.1591549367));
PS0i = R127i.x;
// 15
R4i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.x), intBitsToFloat(PS0i)));
R0i.y = floatBitsToInt(intBitsToFloat(R124i.x) + intBitsToFloat(PV0i.x));
R0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.z), intBitsToFloat(PS0i)));
PV1i.z = R0i.z;
R2i.w = floatBitsToInt(-(intBitsToFloat(R125i.w)) + intBitsToFloat(PV0i.y));
PV1i.w = R2i.w;
R7i.w = floatBitsToInt(intBitsToFloat(R127i.z) + intBitsToFloat(PV0i.z));
PS1i = R7i.w;
// 16
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.w), intBitsToFloat(R125i.w)));
R1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.w), intBitsToFloat(R127i.x)));
R5i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.y), intBitsToFloat(R127i.x)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R8i.z), intBitsToFloat(PV1i.z)));
PS0i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R8i.z), intBitsToFloat(PV1i.w)));
// 17
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R8i.z), intBitsToFloat(R0i.y)));
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R8i.y),intBitsToFloat(R6i.w)) + intBitsToFloat(PV0i.w)));
PV1i.y = R123i.y;
R1i.z = floatBitsToInt(-(intBitsToFloat(R125i.y)) + intBitsToFloat(PV0i.x));
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R8i.y),intBitsToFloat(R4i.x)) + intBitsToFloat(PS0i)));
PV1i.w = R123i.w;
// 18
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R8i.y),intBitsToFloat(R1i.y)) + intBitsToFloat(PV1i.x)));
PV0i.x = R123i.x;
R15i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R8i.x),intBitsToFloat(R7i.w)) + intBitsToFloat(PV1i.w)));
R16i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R8i.x),intBitsToFloat(R5i.z)) + intBitsToFloat(PV1i.y)));
PS0i = R16i.x;
// 19
R8i.z = floatBitsToInt(uf_blockVS8[3].z);
R8i.w = floatBitsToInt(uf_blockVS8[3].w);
R16i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R8i.x),intBitsToFloat(R1i.z)) + intBitsToFloat(PV0i.x)));
PS1i = R16i.z;
}
if( activeMaskStackC[3] == true ) {
activeMaskStack[3] = activeMaskStack[2];
activeMaskStackC[4] = activeMaskStackC[3];
// 0
PV0i.y = floatBitsToInt(mul_nonIEEE(uf_blockVS7[97].z, intBitsToFloat(R2i.x)));
PV0i.z = floatBitsToInt(mul_nonIEEE(uf_blockVS7[97].y, intBitsToFloat(R2i.x)));
// 1
PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.z) + intBitsToFloat(R2i.y));
R125i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.z), uf_blockVS11[2].x));
PV1i.z = floatBitsToInt(intBitsToFloat(PV0i.y) + intBitsToFloat(R0i.w));
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.y), uf_blockVS11[2].x));
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.w), uf_blockVS11[2].x));
PS1i = R126i.y;
// 2
backupReg0i = R0i.x;
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R11i.z), intBitsToFloat(PV1i.z)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), uf_blockVS11[1].w));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R11i.y), intBitsToFloat(PV1i.x)));
// 3
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(R8i.z)));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(R8i.w)));
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PV0i.z));
// 4
R0i.x = floatBitsToInt(intBitsToFloat(R4i.w) * intBitsToFloat(PS1i));
R0i.x = clampFI32(R0i.x);
R2i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(R1i.w)));
PV0i.y = R2i.y;
R3i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.z), intBitsToFloat(R1i.w)));
PV0i.z = R3i.z;
// 5
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R9i.z), intBitsToFloat(PV0i.z)));
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(R5i.w)));
// 6
backupReg0i = R0i.y;
backupReg1i = R0i.z;
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PV1i.y)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.w), intBitsToFloat(PV1i.y)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg1i), intBitsToFloat(PV1i.y)));
// 7
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.z),intBitsToFloat(R6i.w)) + intBitsToFloat(PV0i.w)));
PV1i.x = R123i.x;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.z),intBitsToFloat(R1i.y)) + intBitsToFloat(PV0i.y)));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.z),intBitsToFloat(R4i.x)) + intBitsToFloat(PV0i.z)));
PV1i.w = R123i.w;
// 8
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.y),intBitsToFloat(R7i.w)) + intBitsToFloat(PV1i.w)));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.y),intBitsToFloat(R5i.z)) + intBitsToFloat(PV1i.x)));
PV0i.y = R123i.y;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.y),intBitsToFloat(R1i.z)) + intBitsToFloat(PV1i.z)));
PV0i.w = R123i.w;
// 9
R1i.xyz = floatBitsToInt(vec3(intBitsToFloat(R6i.x),intBitsToFloat(R7i.y),intBitsToFloat(R12i.z)) + vec3(intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.w)));
PV1i.x = R1i.x;
PV1i.y = R1i.y;
PV1i.z = R1i.z;
// 10
PV0i.x = floatBitsToInt(intBitsToFloat(PV1i.y) + intBitsToFloat(R127i.w));
R127i.z = floatBitsToInt(intBitsToFloat(PV1i.z) + intBitsToFloat(R126i.y));
PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.x) + intBitsToFloat(R125i.y));
// 11
PV1i.y = floatBitsToInt(intBitsToFloat(PV0i.w) + intBitsToFloat(PV0i.x));
// 12
R0i.w = floatBitsToInt(intBitsToFloat(R127i.z) + intBitsToFloat(PV1i.y));
// 13
predResult = (uf_blockVS11[5].y != 0.0);
activeMaskStack[3] = predResult;
activeMaskStackC[4] = predResult == true && activeMaskStackC[3] == true;
}
else {
activeMaskStack[3] = false;
activeMaskStackC[4] = false;
}
if( activeMaskStackC[4] == true ) {
// 0
PV0i.y = floatBitsToInt(uf_blockVS8[5].w);
PV0i.z = floatBitsToInt(uf_blockVS8[4].w);
// 1
R127i.x = floatBitsToInt(intBitsToFloat(PV0i.z) + -(intBitsToFloat(R1i.x)));
R127i.y = floatBitsToInt(intBitsToFloat(PV0i.y) + -(intBitsToFloat(R1i.y)));
PV1i.w = floatBitsToInt(uf_blockVS8[6].w);
R127i.z = floatBitsToInt(1.0 / uf_blockVS11[5].y);
PS1i = R127i.z;
// 2
PV0i.z = floatBitsToInt(intBitsToFloat(PV1i.w) + -(intBitsToFloat(R1i.z)));
// 3
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(R127i.y),intBitsToFloat(PV0i.z),-0.0),vec4(intBitsToFloat(R127i.x),intBitsToFloat(R127i.y),intBitsToFloat(PV0i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
// 4
PS0i = floatBitsToInt(sqrt(intBitsToFloat(PV1i.x)));
// 5
PV1i.y = floatBitsToInt(intBitsToFloat(PS0i) * intBitsToFloat(R127i.z));
PV1i.y = clampFI32(PV1i.y);
// 6
backupReg0i = R0i.x;
R0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PV1i.y)));
}
activeMaskStackC[3] = activeMaskStack[2] == true && activeMaskStackC[2] == true;
if( activeMaskStackC[3] == true ) {
// 0
PV0i.x = floatBitsToInt(-(intBitsToFloat(R7i.y)) + intBitsToFloat(R1i.y));
R127i.w = floatBitsToInt(uf_blockVS8[4].w + uf_blockVS8[5].w);
PS0i = floatBitsToInt(1.0 / intBitsToFloat(R2i.y));
// 1
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.x), uf_blockVS11[0].z));
PV1i.y = floatBitsToInt(mul_nonIEEE(uf_blockVS11[1].z, uf_blockVS11[0].w));
PV1i.z = floatBitsToInt(intBitsToFloat(PV0i.x) * intBitsToFloat(PS0i));
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.w), uf_blockVS11[0].w));
// 2
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.w), intBitsToFloat(PV1i.y)));
PV0i.y = ((0.0 > intBitsToFloat(PV1i.z))?int(0xFFFFFFFF):int(0x0));
PV0i.z = floatBitsToInt(uf_blockVS8[6].w + intBitsToFloat(R127i.w));
PV0i.w = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(PV1i.z)), intBitsToFloat(PV1i.z)));
PS0i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.z), intBitsToFloat(PV1i.z)));
// 3
PV1i.x = floatBitsToInt(mul_nonIEEE(uf_blockVS8[2].x, uf_blockVS11[1].x));
R127i.y = floatBitsToInt(intBitsToFloat(PV0i.z) * intBitsToFloat(0x3dd70a3d));
R0i.z = ((PV0i.y == 0)?(PS0i):(PV0i.w));
// 4
PV0i.x = floatBitsToInt(mul_nonIEEE(uf_blockVS11[1].y, uf_blockVS11[0].z));
PV0i.z = floatBitsToInt(intBitsToFloat(PV1i.x) + intBitsToFloat(R126i.w));
PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.x) + intBitsToFloat(R127i.x));
// 5
PV1i.y = floatBitsToInt(intBitsToFloat(R127i.y) + intBitsToFloat(PV0i.z));
PV1i.z = floatBitsToInt(intBitsToFloat(R127i.y) + intBitsToFloat(PV0i.w));
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.x), intBitsToFloat(PV0i.x)));
// 6
R123i.x = floatBitsToInt((intBitsToFloat(PV1i.y) * intBitsToFloat(0x3e22f983) + 0.5));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((intBitsToFloat(PV1i.z) * intBitsToFloat(0x3e22f983) + 0.5));
PV0i.y = R123i.y;
// 7
PV1i.x = floatBitsToInt(fract(intBitsToFloat(PV0i.y)));
PV1i.w = floatBitsToInt(fract(intBitsToFloat(PV0i.x)));
// 8
R123i.z = floatBitsToInt((intBitsToFloat(PV1i.w) * intBitsToFloat(0x40c90fdb) + intBitsToFloat(0xc0490fdb)));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((intBitsToFloat(PV1i.x) * intBitsToFloat(0x40c90fdb) + intBitsToFloat(0xc0490fdb)));
PV0i.w = R123i.w;
// 9
R127i.y = floatBitsToInt(intBitsToFloat(PV0i.z) * intBitsToFloat(0x3e22f983));
PV1i.y = R127i.y;
R127i.z = floatBitsToInt(intBitsToFloat(PV0i.w) * intBitsToFloat(0x3e22f983));
// 10
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R7i.x),intBitsToFloat(R9i.y),intBitsToFloat(R13i.z),-0.0),vec4(intBitsToFloat(R7i.x),intBitsToFloat(R9i.y),intBitsToFloat(R13i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.w = tempi.x;
PS0i = floatBitsToInt(sin((intBitsToFloat(PV1i.y))/0.1591549367));
// 11
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(R126i.x)));
PS1i = floatBitsToInt(cos((intBitsToFloat(R127i.y))/0.1591549367));
// 12
R0i.y = floatBitsToInt(intBitsToFloat(R1i.x) + intBitsToFloat(PV1i.z));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.x), intBitsToFloat(PS1i)));
PS0i = floatBitsToInt(sin((intBitsToFloat(R127i.z))/0.1591549367));
// 13
R0i.x = floatBitsToInt(intBitsToFloat(R1i.z) + intBitsToFloat(PV0i.w));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(R126i.w)));
PS1i = floatBitsToInt(sqrt(intBitsToFloat(R127i.w)));
// 14
backupReg0i = R1i.y;
R1i.x = ((intBitsToFloat(PS1i) > 0.0)?int(0xFFFFFFFF):int(0x0));
R1i.y = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(PV1i.z));
// 15
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R7i.x),intBitsToFloat(R9i.y),intBitsToFloat(R13i.z),-0.0),vec4(intBitsToFloat(R7i.x),intBitsToFloat(R9i.y),intBitsToFloat(R13i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
// 16
tempResultf = 1.0 / sqrt(intBitsToFloat(PV1i.x));
PS0i = floatBitsToInt(tempResultf);
// 17
R2i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R7i.x), intBitsToFloat(PS0i)));
R2i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R9i.y), intBitsToFloat(PS0i)));
R1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R13i.z), intBitsToFloat(PS0i)));
}
if( activeMaskStackC[3] == true ) {
activeMaskStack[3] = activeMaskStack[2];
activeMaskStackC[4] = activeMaskStackC[3];
// 0
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.z), uf_blockVS14[1].w));
// 1
PV1i.x = floatBitsToInt(mul_nonIEEE(uf_blockVS11[2].y, intBitsToFloat(PV0i.y)));
// 2
PV0i.y = floatBitsToInt(mul_nonIEEE(uf_blockVS14[1].z, intBitsToFloat(PV1i.x)));
PV0i.z = floatBitsToInt(mul_nonIEEE(uf_blockVS14[1].y, intBitsToFloat(PV1i.x)));
PV0i.w = floatBitsToInt(mul_nonIEEE(uf_blockVS14[1].x, intBitsToFloat(PV1i.x)));
// 3
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.x), intBitsToFloat(PV0i.w)));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.x), intBitsToFloat(PV0i.y)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.x), intBitsToFloat(PV0i.z)));
// 4
backupReg0i = R0i.x;
R0i.xyz = floatBitsToInt(vec3(intBitsToFloat(R0i.y),intBitsToFloat(R1i.y),intBitsToFloat(backupReg0i)) + vec3(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.w),intBitsToFloat(PV1i.z)));
PV0i.x = R0i.x;
PV0i.y = R0i.y;
PV0i.z = R0i.z;
// 5
R4i.x = floatBitsToInt(-(intBitsToFloat(R6i.x)) + intBitsToFloat(PV0i.x));
PV1i.x = R4i.x;
R1i.y = floatBitsToInt(-(intBitsToFloat(R7i.y)) + intBitsToFloat(PV0i.y));
PV1i.y = R1i.y;
R3i.z = floatBitsToInt(-(intBitsToFloat(R12i.z)) + intBitsToFloat(PV0i.z));
PV1i.z = R3i.z;
// 6
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.z),-0.0),vec4(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
// 7
PS1i = floatBitsToInt(sqrt(intBitsToFloat(PV0i.x)));
// 8
PV0i.z = ((intBitsToFloat(PS1i) > 0.0)?int(0xFFFFFFFF):int(0x0));
// 9
R4i.z = ((PV0i.z == 0)?(0):(R1i.x));
// 10
predResult = (R4i.z != 0);
activeMaskStack[3] = predResult;
activeMaskStackC[4] = predResult == true && activeMaskStackC[3] == true;
}
else {
activeMaskStack[3] = false;
activeMaskStackC[4] = false;
}
if( activeMaskStackC[4] == true ) {
// 0
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R1i.y),intBitsToFloat(R3i.z),-0.0),vec4(intBitsToFloat(R4i.x),intBitsToFloat(R1i.y),intBitsToFloat(R3i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R7i.x), uf_blockVS7[95].x));
PS0i = R127i.x;
// 1
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R13i.z), uf_blockVS7[95].x));
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R9i.y), uf_blockVS7[95].x));
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.x));
PS1i = floatBitsToInt(tempResultf);
// 2
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.x), intBitsToFloat(PS1i)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.y), intBitsToFloat(PS1i)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(PS1i)));
// 3
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R2i.x),intBitsToFloat(R2i.y),intBitsToFloat(R1i.z),-0.0),vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
// 4
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(R127i.w)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(R127i.x)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(R127i.z)));
// 5
backupReg0i = R0i.x;
backupReg1i = R0i.y;
backupReg2i = R0i.z;
R0i.xyz = floatBitsToInt(vec3(intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),intBitsToFloat(backupReg2i)) + vec3(intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.w)));
}
activeMaskStackC[3] = activeMaskStack[2] == true && activeMaskStackC[2] == true;
if( activeMaskStackC[3] == true ) {
// 0
R127i.x = floatBitsToInt(intBitsToFloat(R6i.x) + intBitsToFloat(R3i.x));
R6i.y = floatBitsToInt(intBitsToFloat(R7i.y) + intBitsToFloat(R3i.y));
R127i.z = floatBitsToInt(intBitsToFloat(R12i.z) + intBitsToFloat(R2i.z));
R4i.w = floatBitsToInt(intBitsToFloat(R3i.x) + intBitsToFloat(R0i.x));
R5i.y = floatBitsToInt(intBitsToFloat(R3i.y) + intBitsToFloat(R0i.y));
PS0i = R5i.y;
// 1
R126i.x = 0x3f800000;
R0i.y = floatBitsToInt(uf_blockVS7[60].x);
R8i.z = floatBitsToInt(intBitsToFloat(R2i.z) + intBitsToFloat(R0i.z));
PV1i.z = R8i.z;
R127i.w = 0x3f800000;
PV1i.w = R127i.w;
R0i.z = floatBitsToInt(uf_blockVS7[60].y);
PS1i = R0i.z;
// 2
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.w),intBitsToFloat(R5i.y),intBitsToFloat(PV1i.z),intBitsToFloat(PV1i.w)),vec4(uf_blockVS6[8].x,uf_blockVS6[8].y,uf_blockVS6[8].z,uf_blockVS6[8].w)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R9i.z = tempi.x;
// 3
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.w),intBitsToFloat(R5i.y),intBitsToFloat(R8i.z),intBitsToFloat(R127i.w)),vec4(uf_blockVS6[9].x,uf_blockVS6[9].y,uf_blockVS6[9].z,uf_blockVS6[9].w)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R7i.y = tempi.x;
// 4
R11i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.w),intBitsToFloat(R5i.y),intBitsToFloat(R8i.z),intBitsToFloat(R127i.w)),vec4(uf_blockVS6[10].x,uf_blockVS6[10].y,uf_blockVS6[10].z,uf_blockVS6[10].w)));
PV0i.x = R11i.x;
PV0i.y = R11i.x;
PV0i.z = R11i.x;
PV0i.w = R11i.x;
// 5
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.w),intBitsToFloat(R5i.y),intBitsToFloat(R8i.z),intBitsToFloat(R127i.w)),vec4(uf_blockVS6[11].x,uf_blockVS6[11].y,uf_blockVS6[11].z,uf_blockVS6[11].w)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R5i.w = tempi.x;
// 6
R0i.x = floatBitsToInt(uf_blockVS7[60].z);
PV0i.y = PV1i.x;
PV0i.y = floatBitsToInt(intBitsToFloat(PV0i.y) / 2.0);
R12i.z = floatBitsToInt((intBitsToFloat(R11i.x) * 0.0 + intBitsToFloat(PV1i.x)));
PV0i.z = R12i.z;
// 7
R127i.y = floatBitsToInt(-(uf_blockVS7[68].x) + uf_blockVS7[69].x);
R11i.z = floatBitsToInt((intBitsToFloat(R11i.x) * 0.5 + intBitsToFloat(PV0i.y)));
PV1i.z = R11i.z;
R123i.w = floatBitsToInt((intBitsToFloat(R11i.x) * 0.0 + intBitsToFloat(PV0i.y)));
PV1i.w = R123i.w;
R8i.x = floatBitsToInt(1.0 / intBitsToFloat(PV0i.z));
PS1i = R8i.x;
// 8
R13i.x = floatBitsToInt((intBitsToFloat(R9i.z) * 0.5 + intBitsToFloat(PV1i.w)));
R9i.y = floatBitsToInt((intBitsToFloat(R7i.y) * -(0.5) + intBitsToFloat(PV1i.w)));
PV0i.z = floatBitsToInt(-(uf_blockVS7[68].w) + uf_blockVS7[69].w);
PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.z) * intBitsToFloat(PS1i));
// 9
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),uf_blockVS6[18].w) + -(uf_blockVS6[18].y)));
PV1i.z = R123i.z;
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PV0i.z));
// 10
R1i.z = floatBitsToInt(intBitsToFloat(R127i.y) * intBitsToFloat(PS1i));
R127i.w = floatBitsToInt(-(uf_blockVS7[69].x) + uf_blockVS7[70].x);
PS0i = floatBitsToInt(1.0 / intBitsToFloat(PV1i.z));
// 11
R7i.x = floatBitsToInt(-(uf_blockVS6[18].z) * intBitsToFloat(PS0i));
// 12
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(R6i.y),intBitsToFloat(R127i.z),intBitsToFloat(R126i.x)),vec4(uf_blockVS6[10].x,uf_blockVS6[10].y,uf_blockVS6[10].z,uf_blockVS6[10].w)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R126i.z = tempi.x;
// 13
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(R6i.y),intBitsToFloat(R127i.z),intBitsToFloat(R126i.x)),vec4(uf_blockVS6[11].x,uf_blockVS6[11].y,uf_blockVS6[11].z,uf_blockVS6[11].w)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
// 14
PV0i.x = PV1i.x;
PV0i.x = floatBitsToInt(intBitsToFloat(PV0i.x) / 2.0);
R127i.y = floatBitsToInt(-(uf_blockVS7[69].w) + uf_blockVS7[70].w);
R123i.z = floatBitsToInt((intBitsToFloat(R126i.z) * 0.0 + intBitsToFloat(PV1i.x)));
PV0i.z = R123i.z;
// 15
R126i.y = floatBitsToInt(-(uf_blockVS7[70].x) + uf_blockVS7[71].x);
R123i.w = floatBitsToInt((intBitsToFloat(R126i.z) * 0.5 + intBitsToFloat(PV0i.x)));
PV1i.w = R123i.w;
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PV0i.z));
// 16
PV0i.x = floatBitsToInt(intBitsToFloat(PV1i.w) * intBitsToFloat(PS1i));
PV0i.y = floatBitsToInt(-(uf_blockVS7[70].w) + uf_blockVS7[71].w);
PS0i = floatBitsToInt(1.0 / intBitsToFloat(R127i.y));
// 17
R1i.x = floatBitsToInt(intBitsToFloat(R127i.w) * intBitsToFloat(PS0i));
PV1i.w = floatBitsToInt(mul_nonIEEE(uf_blockVS6[18].w, intBitsToFloat(PV0i.x)));
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PV0i.y));
// 18
PV0i.x = floatBitsToInt(-(uf_blockVS6[18].y) + intBitsToFloat(PV1i.w));
R2i.z = floatBitsToInt(intBitsToFloat(R126i.y) * intBitsToFloat(PS1i));
// 19
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PV0i.x));
// 20
R6i.x = floatBitsToInt(-(uf_blockVS6[18].z) * intBitsToFloat(PS1i));
// 21
R2i.x = floatBitsToInt(uf_blockVS7[76].x);
R1i.w = floatBitsToInt(uf_blockVS7[76].y);
}
if( activeMaskStackC[3] == true ) {
// 0
backupReg0i = R0i.y;
backupReg1i = R0i.z;
PV0i.x = floatBitsToInt((uf_blockVS7[8].y > 0.0)?1.0:0.0);
R0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), uf_blockVS8[0].x));
R0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg1i), uf_blockVS8[0].y));
PV0i.w = floatBitsToInt((0.0 > uf_blockVS7[8].y)?1.0:0.0);
PS0i = floatBitsToInt(1.0 / uf_blockVS7[8].y);
// 1
backupReg0i = R0i.x;
PV1i.x = floatBitsToInt(intBitsToFloat(R9i.w) * intBitsToFloat(PS0i));
R1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), uf_blockVS8[0].z));
R126i.z = floatBitsToInt(intBitsToFloat(PV0i.x) + -(intBitsToFloat(PV0i.w)));
PV1i.z = R126i.z;
R127i.w = floatBitsToInt((uf_blockVS7[8].w > 0.0)?1.0:0.0);
// 2
PV0i.x = floatBitsToInt((0.0 > uf_blockVS7[8].w)?1.0:0.0);
R126i.y = floatBitsToInt(-(intBitsToFloat(PV1i.z)) + 1.0);
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R10i.x),uf_blockVS7[9].z) + intBitsToFloat(PV1i.x)));
PV0i.w = R123i.w;
// 3
backupReg0i = R127i.w;
PV1i.z = floatBitsToInt(fract(intBitsToFloat(PV0i.w)));
R127i.w = floatBitsToInt(intBitsToFloat(backupReg0i) + -(intBitsToFloat(PV0i.x)));
PS1i = floatBitsToInt(1.0 / uf_blockVS7[8].w);
// 4
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.z), intBitsToFloat(PV1i.z)));
PV0i.y = floatBitsToInt(intBitsToFloat(R9i.w) * intBitsToFloat(PS1i));
// 5
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R10i.x),uf_blockVS7[10].x) + intBitsToFloat(PV0i.y)));
PV1i.x = R123i.x;
R0i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R19i.z),intBitsToFloat(R126i.y)) + intBitsToFloat(PV0i.x)));
// 6
R126i.z = floatBitsToInt(-(intBitsToFloat(R127i.w)) + 1.0);
PV0i.w = floatBitsToInt(fract(intBitsToFloat(PV1i.x)));
// 7
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.w), intBitsToFloat(PV0i.w)));
// 8
R0i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R19i.z),intBitsToFloat(R126i.z)) + intBitsToFloat(PV1i.y)));
}
if( activeMaskStackC[3] == true ) {
// 0
PV0i.x = floatBitsToInt(intBitsToFloat(R0i.w) + -(uf_blockVS7[69].w));
PV0i.z = floatBitsToInt(intBitsToFloat(R0i.w) + -(uf_blockVS7[68].w));
// 1
R127i.x = ((intBitsToFloat(PV0i.z) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV1i.x = R127i.x;
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(R1i.z)) + uf_blockVS7[68].x));
R126i.z = ((intBitsToFloat(PV0i.x) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV1i.z = R126i.z;
R127i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(R1i.x)) + uf_blockVS7[69].x));
// 2
PV0i.x = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + 1.0);
PV0i.y = floatBitsToInt(intBitsToFloat(R0i.w) + -(uf_blockVS7[71].w));
PV0i.z = floatBitsToInt(intBitsToFloat(R0i.w) + -(uf_blockVS7[70].w));
PV0i.w = floatBitsToInt(-(intBitsToFloat(PV1i.z)) + 1.0);
// 3
backupReg0i = R127i.x;
R127i.x = ((intBitsToFloat(PV0i.y) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV1i.x = R127i.x;
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(R2i.z)) + uf_blockVS7[70].x));
R127i.z = ((intBitsToFloat(PV0i.z) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV1i.z = R127i.z;
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PV0i.w)));
PS1i = floatBitsToInt(mul_nonIEEE(uf_blockVS7[68].x, intBitsToFloat(PV0i.x)));
// 4
backupReg0i = R0i.y;
PV0i.x = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + 1.0);
PV0i.y = floatBitsToInt(-(intBitsToFloat(PV1i.z)) + 1.0);
R13i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), uf_blockVS7[59].x));
R126i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.y),intBitsToFloat(PV1i.w)) + intBitsToFloat(PS1i)));
R14i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.z), uf_blockVS7[59].x));
PS0i = R14i.z;
// 5
backupReg0i = R127i.z;
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.z), intBitsToFloat(PV0i.y)));
R13i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.y), uf_blockVS7[59].x));
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PV0i.x)));
R0i.w = floatBitsToInt(uf_blockVS7[76].z);
// 6
R125i.x = floatBitsToInt(intBitsToFloat(R0i.x) + -(uf_blockVS7[85].w));
PV0i.x = R125i.x;
PV0i.y = floatBitsToInt(-(uf_blockVS7[84].w) + uf_blockVS7[85].w);
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.w),intBitsToFloat(PV1i.x)) + intBitsToFloat(R126i.w)));
PV0i.z = R123i.z;
R127i.w = floatBitsToInt(intBitsToFloat(R0i.x) + -(uf_blockVS7[84].w));
PV0i.w = R127i.w;
// 7
R126i.x = ((intBitsToFloat(PV0i.w) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV1i.x = R126i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.y),intBitsToFloat(R127i.z)) + intBitsToFloat(PV0i.z)));
PV1i.y = R123i.y;
PV1i.z = floatBitsToInt(-(uf_blockVS7[84].x) + uf_blockVS7[85].x);
R126i.w = ((intBitsToFloat(PV0i.x) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV1i.w = R126i.w;
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PV0i.y));
// 8
R1i.x = floatBitsToInt((mul_nonIEEE(uf_blockVS7[71].x,intBitsToFloat(R127i.x)) + intBitsToFloat(PV1i.y)));
R125i.y = floatBitsToInt(intBitsToFloat(R0i.x) + -(uf_blockVS7[86].w));
PV0i.y = R125i.y;
PV0i.z = floatBitsToInt(-(intBitsToFloat(PV1i.w)) + 1.0);
PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.z) * intBitsToFloat(PS1i));
PS0i = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + 1.0);
// 9
backupReg0i = R0i.x;
PV1i.x = floatBitsToInt(intBitsToFloat(backupReg0i) + -(uf_blockVS7[87].w));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.x), intBitsToFloat(PV0i.z)));
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.w),intBitsToFloat(PV0i.w)) + uf_blockVS7[84].x));
PV1i.z = R123i.z;
R127i.w = ((intBitsToFloat(PV0i.y) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV1i.w = R127i.w;
PS1i = floatBitsToInt(mul_nonIEEE(uf_blockVS7[84].x, intBitsToFloat(PS0i)));
// 10
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),intBitsToFloat(PV1i.y)) + intBitsToFloat(PS1i)));
R127i.y = floatBitsToInt(-(uf_blockVS7[85].x) + uf_blockVS7[86].x);
R126i.z = ((intBitsToFloat(PV1i.x) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV0i.z = R126i.z;
PV0i.w = floatBitsToInt(-(intBitsToFloat(PV1i.w)) + 1.0);
// 11
PV1i.x = floatBitsToInt(-(intBitsToFloat(PV0i.z)) + 1.0);
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.w), intBitsToFloat(PV0i.w)));
PV1i.w = floatBitsToInt(-(uf_blockVS7[85].w) + uf_blockVS7[86].w);
// 12
backupReg0i = R127i.w;
R127i.z = floatBitsToInt(-(uf_blockVS7[86].x) + uf_blockVS7[87].x);
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PV1i.x)));
PS0i = floatBitsToInt(1.0 / intBitsToFloat(PV1i.w));
// 13
PV1i.x = floatBitsToInt(-(uf_blockVS7[86].w) + uf_blockVS7[87].w);
PV1i.y = floatBitsToInt(intBitsToFloat(R127i.y) * intBitsToFloat(PS0i));
// 14
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.x),intBitsToFloat(PV1i.y)) + uf_blockVS7[85].x));
PV0i.x = R123i.x;
PS0i = floatBitsToInt(1.0 / intBitsToFloat(PV1i.x));
// 15
PV1i.x = floatBitsToInt(intBitsToFloat(R127i.z) * intBitsToFloat(PS0i));
R126i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(R126i.y)) + intBitsToFloat(R126i.x)));
// 16
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.y),intBitsToFloat(PV1i.x)) + uf_blockVS7[86].x));
PV0i.z = R123i.z;
// 17
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(R127i.w)) + intBitsToFloat(R126i.w)));
PV1i.z = R123i.z;
// 18
R1i.y = floatBitsToInt((mul_nonIEEE(uf_blockVS7[87].x,intBitsToFloat(R126i.z)) + intBitsToFloat(PV1i.z)));
}
if( activeMaskStackC[3] == true ) {
// 0
R15i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), uf_blockVS8[0].w));
R125i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.x), uf_blockVS8[1].x));
// 1
PV1i.x = ((intBitsToFloat(R10i.x) > 0.5)?int(0xFFFFFFFF):int(0x0));
R11i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.y), uf_blockVS8[1].w));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.w), uf_blockVS8[1].z));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.w), uf_blockVS8[1].y));
PS1i = ((intBitsToFloat(R10i.y) > 0.5)?int(0xFFFFFFFF):int(0x0));
// 2
R14i.x = floatBitsToInt(mul_nonIEEE(uf_blockVS7[59].x, intBitsToFloat(R125i.y)));
R1i.y = ((PV1i.x == 0)?(R12i.x):(R11i.w));
R15i.z = floatBitsToInt(mul_nonIEEE(uf_blockVS7[59].x, intBitsToFloat(PV1i.z)));
R6i.w = floatBitsToInt(mul_nonIEEE(uf_blockVS7[59].x, intBitsToFloat(PV1i.w)));
R0i.y = ((PS1i == 0)?(R12i.y):(R7i.z));
PS0i = R0i.y;
// 3
PV1i.x = ((intBitsToFloat(R10i.w) > 0.5)?int(0xFFFFFFFF):int(0x0));
PV1i.y = ((intBitsToFloat(R10i.z) > 0.5)?int(0xFFFFFFFF):int(0x0));
R2i.z = ((intBitsToFloat(R10i.z) > 0.5)?int(0xFFFFFFFF):int(0x0));
PV1i.w = ((intBitsToFloat(R10i.y) > 0.5)?int(0xFFFFFFFF):int(0x0));
R0i.x = R11i.w;
PS1i = R0i.x;
// 4
R1i.x = ((PV1i.y == 0)?(R12i.x):(R11i.w));
R2i.y = ((PV1i.w == 0)?(R12i.y):(R12i.y));
R0i.z = ((PV1i.w == 0)?(R12i.x):(PS1i));
R0i.w = ((PV1i.x == 0)?(R12i.y):(R7i.z));
R9i.x = floatBitsToInt(uf_blockVS8[3].x);
PS0i = R9i.x;
}
if( activeMaskStackC[3] == true ) {
// 0
PV0i.x = floatBitsToInt(uf_blockVS7[5].x) & 0x00100000;
PV0i.y = floatBitsToInt(uf_blockVS7[5].x) & 0x00080000;
// 1
PV1i.x = (PV0i.y == 0x00080000)?int(0xFFFFFFFF):int(0x0);
PV1i.y = floatBitsToInt(uf_blockVS7[5].x) & 0x00200000;
PV1i.z = floatBitsToInt(uf_blockVS7[5].x) & 0x00400000;
PV1i.w = (PV0i.x == 0x00100000)?int(0xFFFFFFFF):int(0x0);
// 2
R4i.x = ((PV1i.w == 0)?(R12i.y):(R0i.y));
R0i.y = ((PV1i.x == 0)?(R12i.x):(R1i.y));
PV0i.z = (PV1i.y == 0x00200000)?int(0xFFFFFFFF):int(0x0);
PV0i.w = (PV1i.z == 0x00400000)?int(0xFFFFFFFF):int(0x0);
PS0i = floatBitsToInt(uf_blockVS7[5].x) & 0x00800000;
// 3
PV1i.x = (PS0i == 0x00800000)?int(0xFFFFFFFF):int(0x0);
PV1i.y = floatBitsToInt(uf_blockVS7[5].x) & 0x01000000;
R7i.z = ((PV0i.w == 0)?(R12i.y):(R0i.w));
R2i.w = ((PV0i.z == 0)?(R12i.x):(R1i.x));
PS1i = floatBitsToInt(uf_blockVS7[5].y) & int(1);
// 4
R126i.x = ((PV1i.x == 0)?(R12i.y):(R2i.y));
PV0i.x = R126i.x;
R125i.y = (PV1i.y == 0x01000000)?int(0xFFFFFFFF):int(0x0);
R6i.z = (int(1) != PS1i)?int(0xFFFFFFFF):int(0x0);
PV0i.z = R6i.z;
R127i.w = ((PV1i.x == 0)?(R12i.x):(R0i.z));
PV0i.w = R127i.w;
R125i.x = int(uf_blockVS7[26].x);
PS0i = R125i.x;
// 5
PV1i.x = floatBitsToInt(-(intBitsToFloat(PV0i.x)) + 1.0);
PV1i.y = floatBitsToInt(uf_blockVS7[5].x) & 0x00000100;
R123i.z = ((R2i.z == 0)?(PV0i.w):(PV0i.w));
PV1i.z = R123i.z;
R124i.w = ((PV0i.z == 0)?(R10i.x):(R10i.y));
R127i.z = int(uf_blockVS7[26].y);
PS1i = R127i.z;
// 6
PV0i.x = floatBitsToInt(uf_blockVS7[5].x) & 0x00000200;
R123i.y = ((R2i.z == 0)?(R126i.x):(PV1i.x));
PV0i.y = R123i.y;
R126i.z = floatBitsToInt(uf_blockVS7[5].x) & 0x00000400;
R3i.w = ((R125i.y == 0)?(R127i.w):(PV1i.z));
PS0i = floatBitsToInt(float(PV1i.y));
// 7
R5i.x = ((R125i.y == 0)?(R126i.x):(PV0i.y));
PV1i.y = floatBitsToInt((intBitsToFloat(PS0i) > 0.0)?1.0:0.0);
PV1i.z = floatBitsToInt((0.0 > intBitsToFloat(PS0i))?1.0:0.0);
R125i.w = floatBitsToInt(uf_blockVS7[5].x) & 0x00000800;
PS1i = floatBitsToInt(float(PV0i.x));
// 8
PV0i.x = floatBitsToInt((intBitsToFloat(PS1i) > 0.0)?1.0:0.0);
PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.y) + -(intBitsToFloat(PV1i.z)));
PV0i.z = floatBitsToInt((0.0 > intBitsToFloat(PS1i))?1.0:0.0);
R0i.w = int(-1) + R125i.x;
PS0i = floatBitsToInt(float(R126i.z));
// 9
PV1i.x = floatBitsToInt((intBitsToFloat(PS0i) > 0.0)?1.0:0.0);
PV1i.y = floatBitsToInt(intBitsToFloat(PV0i.x) + -(intBitsToFloat(PV0i.z)));
PV1i.z = floatBitsToInt((0.0 > intBitsToFloat(PS0i))?1.0:0.0);
R127i.w = int(intBitsToFloat(PV0i.y));
PS1i = R127i.w;
// 10
PV0i.x = 0 - PS1i;
PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.x) + -(intBitsToFloat(PV1i.z)));
R126i.w = int(intBitsToFloat(PV1i.y));
PS0i = R126i.w;
// 11
PV1i.x = 0 - PS0i;
R126i.z = max(R127i.w, PV0i.x);
R127i.w = int(intBitsToFloat(PV0i.y));
PS1i = R127i.w;
// 12
PV0i.x = 0 - PS1i;
R4i.z = max(R126i.w, PV1i.x);
R126i.w = floatBitsToInt(uf_blockVS7[5].x) & 0x04000000;
PS0i = floatBitsToInt(float(R125i.w));
// 13
PV1i.x = floatBitsToInt((intBitsToFloat(PS0i) > 0.0)?1.0:0.0);
PV1i.y = floatBitsToInt((0.0 > intBitsToFloat(PS0i))?1.0:0.0);
R3i.z = max(R127i.w, PV0i.x);
R126i.y = floatBitsToInt(float(R125i.x));
PS1i = R126i.y;
// 14
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.w), intBitsToFloat(PS1i)));
PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.x) + -(intBitsToFloat(PV1i.y)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R9i.w), intBitsToFloat(PS1i)));
R125i.y = floatBitsToInt(float(R127i.z));
PS0i = R125i.y;
// 15
PV1i.x = floatBitsToInt(intBitsToFloat(R12i.w) * intBitsToFloat(PV0i.w));
R124i.w = int(intBitsToFloat(PV0i.y));
PS1i = R124i.w;
// 16
PV0i.x = 0 - PS1i;
PS0i = int(intBitsToFloat(PV1i.x));
// 17
R127i.z = max(R124i.w, PV0i.x);
R12i.y = R126i.z * PS0i;
PS1i = R12i.y;
// 18
PS0i = floatBitsToInt(1.0 / intBitsToFloat(R125i.y));
// 19
PV1i.x = floatBitsToInt(intBitsToFloat(R9i.w) * intBitsToFloat(PS0i));
R1i.w = floatBitsToInt(float(R125i.x));
PS1i = R1i.w;
// 20
R3i.x = floatBitsToInt(abs(intBitsToFloat(PS1i)));
R0i.z = int(intBitsToFloat(PV1i.x));
PS0i = R0i.z;
// 21
PS1i = floatBitsToInt(float(PS0i));
// 22
PV0i.w = floatBitsToInt(-(intBitsToFloat(R126i.y)) + intBitsToFloat(PS1i));
R1i.x = floatBitsToInt(float(R0i.z));
PS0i = R1i.x;
// 23
R123i.x = ((intBitsToFloat(PV0i.w) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV1i.x = R123i.x;
R126i.z = floatBitsToInt(abs(intBitsToFloat(PS0i)));
R5i.z = floatBitsToInt(1.0 / abs(intBitsToFloat(R1i.w)));
PS1i = R5i.z;
// 24
PV0i.y = floatBitsToInt(mul_nonIEEE(abs(intBitsToFloat(R1i.x)), intBitsToFloat(PS1i)));
PS0i = int(intBitsToFloat(PV1i.x));
// 25
backupReg0i = R0i.w;
R0i.x = int(1) - PS0i;
PV1i.w = floatBitsToInt(trunc(intBitsToFloat(PV0i.y)));
R1i.z = PS0i * backupReg0i;
PS1i = R1i.z;
// 26
R126i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.w)),intBitsToFloat(R3i.x)) + intBitsToFloat(R126i.z)));
PV0i.y = R126i.y;
PS0i = floatBitsToInt(float(R126i.w));
// 27
PV1i.x = floatBitsToInt((intBitsToFloat(PV0i.y) >= abs(intBitsToFloat(R1i.w)))?1.0:0.0);
PV1i.y = floatBitsToInt((0.0 > intBitsToFloat(PS0i))?1.0:0.0);
PV1i.z = floatBitsToInt((intBitsToFloat(PS0i) > 0.0)?1.0:0.0);
PV1i.w = floatBitsToInt(-(abs(intBitsToFloat(R1i.w))) + intBitsToFloat(PV0i.y));
R2i.x = int(intBitsToFloat(R126i.x));
PS1i = R2i.x;
// 28
R2i.z = ((intBitsToFloat(PV1i.x) == 0.0)?(R126i.y):(PV1i.w));
PV0i.z = R2i.z;
PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.z) + -(intBitsToFloat(PV1i.y)));
R0i.w = R127i.z * PS1i;
PS0i = R0i.w;
// 29
R2i.y = floatBitsToInt(abs(intBitsToFloat(R1i.w)) + intBitsToFloat(PV0i.z));
R12i.x = int(intBitsToFloat(PV0i.w));
PS1i = R12i.x;
}
if( activeMaskStackC[3] == true ) {
// 0
PV0i.z = 0 - R12i.x;
R123i.w = ((-(intBitsToFloat(R2i.z)) > 0.0)?(R2i.y):(R2i.z));
PV0i.w = R123i.w;
// 1
R123i.x = ((-(intBitsToFloat(R1i.x)) > 0.0)?(floatBitsToInt(-(intBitsToFloat(PV0i.w)))):(PV0i.w));
PV1i.x = R123i.x;
PV1i.y = max(R12i.x, PV0i.z);
// 2
R123i.z = ((intBitsToFloat(R1i.w) == 0.0)?(R1i.x):(PV1i.x));
PV0i.z = R123i.z;
PS0i = PV1i.y * R2i.x;
// 3
R126i.y = R0i.z + PS0i;
PS1i = int(intBitsToFloat(PV0i.z));
// 4
backupReg0i = R0i.x;
PS0i = backupReg0i * PS1i;
// 5
PV1i.y = PS0i + R1i.z;
R126i.x = R3i.z * R126i.y;
PS1i = R126i.x;
// 6
PS0i = R4i.z * PV1i.y;
// 7
PV1i.w = PS0i + R12i.y;
// 8
PV0i.x = R126i.x + PV1i.w;
// 9
PV1i.z = R0i.w + PV0i.x;
// 10
R125i.y = floatBitsToInt(float(PV1i.z));
PS0i = R125i.y;
// 11
R127i.z = floatBitsToInt(abs(intBitsToFloat(PS0i)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.z), abs(intBitsToFloat(PS0i))));
// 12
PV0i.x = floatBitsToInt(trunc(intBitsToFloat(PV1i.w)));
// 13
R126i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.x)),intBitsToFloat(R3i.x)) + intBitsToFloat(R127i.z)));
PV1i.y = R126i.y;
// 14
PV0i.x = floatBitsToInt((intBitsToFloat(PV1i.y) >= abs(intBitsToFloat(R1i.w)))?1.0:0.0);
PV0i.w = floatBitsToInt(-(abs(intBitsToFloat(R1i.w))) + intBitsToFloat(PV1i.y));
// 15
R127i.z = ((intBitsToFloat(PV0i.x) == 0.0)?(R126i.y):(PV0i.w));
PV1i.z = R127i.z;
// 16
PV0i.y = floatBitsToInt(abs(intBitsToFloat(R1i.w)) + intBitsToFloat(PV1i.z));
// 17
R123i.w = ((-(intBitsToFloat(R127i.z)) > 0.0)?(PV0i.y):(R127i.z));
PV1i.w = R123i.w;
// 18
R123i.x = ((-(intBitsToFloat(R125i.y)) > 0.0)?(floatBitsToInt(-(intBitsToFloat(PV1i.w)))):(PV1i.w));
PV0i.x = R123i.x;
// 19
R123i.z = ((intBitsToFloat(R1i.w) == 0.0)?(R125i.y):(PV0i.x));
PV1i.z = R123i.z;
// 20
R125i.y = int(intBitsToFloat(PV1i.z));
PS0i = R125i.y;
// 21
R126i.w = floatBitsToInt(float(PS0i));
PS1i = R126i.w;
// 22
PV0i.x = floatBitsToInt((intBitsToFloat(PS1i) > 0.0)?1.0:0.0);
PV0i.z = floatBitsToInt((0.0 > intBitsToFloat(PS1i))?1.0:0.0);
R125i.x = floatBitsToInt(float(R125i.y));
PS0i = R125i.x;
// 23
PV1i.y = floatBitsToInt(intBitsToFloat(PV0i.x) + -(intBitsToFloat(PV0i.z)));
PV1i.z = floatBitsToInt(abs(intBitsToFloat(PS0i)) * 0.25);
R124i.w = floatBitsToInt(abs(intBitsToFloat(PS0i)));
// 24
PV0i.y = floatBitsToInt(trunc(intBitsToFloat(PV1i.z)));
R123i.w = floatBitsToInt((intBitsToFloat(PV1i.y) * 0.5 + intBitsToFloat(R126i.w)));
PV0i.w = R123i.w;
// 25
R126i.x = floatBitsToInt((-(intBitsToFloat(PV0i.y)) * 4.0 + intBitsToFloat(R124i.w)));
PV1i.x = R126i.x;
PV1i.y = floatBitsToInt(intBitsToFloat(PV0i.w) * 0.25);
// 26
PV0i.x = floatBitsToInt(trunc(intBitsToFloat(PV1i.y)));
PV0i.y = floatBitsToInt((intBitsToFloat(PV1i.x) >= 4.0)?1.0:0.0);
PV0i.z = floatBitsToInt(intBitsToFloat(PV1i.x) + intBitsToFloat(0xc0800000));
// 27
R124i.w = ((intBitsToFloat(PV0i.y) == 0.0)?(R126i.x):(PV0i.z));
PV1i.w = R124i.w;
PS1i = int(intBitsToFloat(PV0i.x));
// 28
PV0i.x = floatBitsToInt(intBitsToFloat(PV1i.w) + 4.0);
R1i.w = PS1i + 0x0000001b;
PS0i = int(uf_blockVS7[48].z);
// 29
R123i.z = ((-(intBitsToFloat(R124i.w)) > 0.0)?(PV0i.x):(R124i.w));
PV1i.z = R123i.z;
R124i.w = floatBitsToInt(float(PS0i));
PS1i = R124i.w;
// 30
PV0i.x = floatBitsToInt(-(abs(intBitsToFloat(PS1i))) + 0.0);
R123i.y = ((-(intBitsToFloat(R125i.x)) > 0.0)?(floatBitsToInt(-(intBitsToFloat(PV1i.z)))):(PV1i.z));
PV0i.y = R123i.y;
PV0i.z = floatBitsToInt((0.0 >= abs(intBitsToFloat(PS1i)))?1.0:0.0);
// 31
R125i.y = ((intBitsToFloat(PV0i.z) == 0.0)?(0):(PV0i.x));
PV1i.y = R125i.y;
PS1i = int(intBitsToFloat(PV0i.y));
// 32
PV0i.x = int(-1) + PS1i;
R126i.y = 0xfffffffd + PS1i;
R127i.z = 0xfffffffe + PS1i;
PV0i.w = floatBitsToInt(abs(intBitsToFloat(R124i.w)) + intBitsToFloat(PV1i.y));
PS0i = floatBitsToInt(float(PS1i));
// 33
R123i.x = ((-(intBitsToFloat(R125i.y)) > 0.0)?(PV0i.w):(R125i.y));
PV1i.x = R123i.x;
PV1i.y = floatBitsToInt((0.0 > intBitsToFloat(PS0i))?1.0:0.0);
PV1i.z = floatBitsToInt((intBitsToFloat(PS0i) > 0.0)?1.0:0.0);
PS1i = floatBitsToInt(float(PV0i.x));
// 34
PV0i.x = floatBitsToInt((0.0 > intBitsToFloat(PS1i))?1.0:0.0);
PV0i.y = floatBitsToInt((intBitsToFloat(PS1i) > 0.0)?1.0:0.0);
R126i.z = ((intBitsToFloat(R124i.w) == 0.0)?(0):(PV1i.x));
PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.z) + -(intBitsToFloat(PV1i.y)));
PS0i = floatBitsToInt(float(R127i.z));
// 35
PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.y) + -(intBitsToFloat(PV0i.x)));
PV1i.y = floatBitsToInt((0.0 > intBitsToFloat(PS0i))?1.0:0.0);
PV1i.w = floatBitsToInt((intBitsToFloat(PS0i) > 0.0)?1.0:0.0);
R125i.x = int(intBitsToFloat(PV0i.w));
PS1i = R125i.x;
// 36
PV0i.x = 0 - PS1i;
PV0i.z = floatBitsToInt(intBitsToFloat(PV1i.w) + -(intBitsToFloat(PV1i.y)));
R127i.z = int(intBitsToFloat(PV1i.x));
PS0i = R127i.z;
// 37
PV1i.x = 0 - PS0i;
PV1i.y = max(R125i.x, PV0i.x);
R125i.y = int(intBitsToFloat(PV0i.z));
PS1i = R125i.y;
// 38
R3i.x = int(1) - PV1i.y;
PV0i.y = 0 - PS1i;
PV0i.w = max(R127i.z, PV1i.x);
PS0i = floatBitsToInt(float(R126i.y));
// 39
PV1i.x = max(R125i.y, PV0i.y);
R2i.y = int(1) - PV0i.w;
PV1i.z = floatBitsToInt((intBitsToFloat(PS0i) > 0.0)?1.0:0.0);
PV1i.w = floatBitsToInt((0.0 > intBitsToFloat(PS0i))?1.0:0.0);
R3i.y = int(intBitsToFloat(R126i.z));
PS1i = R3i.y;
// 40
PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.z) + -(intBitsToFloat(PV1i.w)));
R5i.z = int(1) - PV1i.x;
PS0i = floatBitsToInt(1.0 / intBitsToFloat(R124i.w));
// 41
PV1i.x = floatBitsToInt(intBitsToFloat(PS0i) * 0.0);
R124i.w = int(intBitsToFloat(PV0i.y));
PS1i = R124i.w;
// 42
PV0i.x = 0 - PS1i;
PV0i.z = floatBitsToInt(trunc(intBitsToFloat(PV1i.x)));
R0i.w = floatBitsToInt(1.0 / uf_blockVS7[48].z);
PS0i = R0i.w;
// 43
PV1i.z = max(R124i.w, PV0i.x);
R4i.y = int(intBitsToFloat(PV0i.z));
PS1i = R4i.y;
// 44
R12i.y = int(1) - PV1i.z;
}
if( activeMaskStackC[3] == true ) {
R1i.xyzw = floatBitsToInt(uf_blockVS7[R1i.w].xyzw);
}
if( activeMaskStackC[3] == true ) {
// 0
R126i.x = floatBitsToInt(mul_nonIEEE(uf_blockVS7[48].x, intBitsToFloat(R0i.w)));
PV0i.x = R126i.x;
R125i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R10i.y), uf_blockVS7[45].y));
R125i.y = floatBitsToInt(intBitsToFloat(R125i.y) * 2.0);
R127i.z = ((R6i.z == 0)?(0):(int(1)));
PV0i.z = R127i.z;
R124i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R10i.x), uf_blockVS7[45].x));
R124i.w = floatBitsToInt(intBitsToFloat(R124i.w) * 2.0);
R126i.w = R12i.y * R1i.w;
PS0i = R126i.w;
// 1
PV1i.x = floatBitsToInt(uf_blockVS7[44].z + uf_blockVS7[45].x);
R126i.y = (PV0i.z == int(1))?int(0xFFFFFFFF):int(0x0);
R124i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.y),intBitsToFloat(PV0i.x)) + -(0.5)));
PV1i.w = floatBitsToInt(uf_blockVS7[44].w + uf_blockVS7[45].y);
R125i.x = R5i.z * R1i.z;
PS1i = R125i.x;
// 2
PV0i.x = floatBitsToInt(-(intBitsToFloat(R125i.y)) + intBitsToFloat(PV1i.w));
PV0i.y = floatBitsToInt(uf_blockVS7[46].x + uf_blockVS7[46].z);
PV0i.z = floatBitsToInt(-(intBitsToFloat(R124i.w)) + intBitsToFloat(PV1i.x));
PV0i.w = floatBitsToInt(uf_blockVS7[46].y + uf_blockVS7[46].w);
R126i.z = R2i.y * R1i.y;
PS0i = R126i.z;
// 3
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R10i.y),uf_blockVS7[46].w) + intBitsToFloat(PV0i.w)));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R10i.x),uf_blockVS7[46].z) + intBitsToFloat(PV0i.y)));
PV1i.y = R123i.y;
R125i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R9i.w)),uf_blockVS7[44].x) + -(intBitsToFloat(PV0i.z))));
R124i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R9i.w),uf_blockVS7[44].y) + intBitsToFloat(PV0i.x)));
PS1i = R3i.x * R1i.x;
// 4
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R9i.w),uf_blockVS7[45].z) + intBitsToFloat(PV1i.y)));
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R9i.w),uf_blockVS7[45].w) + intBitsToFloat(PV1i.x)));
PV0i.z = (R127i.z == 0x00000002)?int(0xFFFFFFFF):int(0x0);
PV0i.w = R126i.z + PS1i;
PS0i = floatBitsToInt(1.0 / uf_blockVS7[48].w);
// 5
PV1i.x = R125i.x + PV0i.w;
R125i.y = floatBitsToInt(mul_nonIEEE(uf_blockVS7[48].y, intBitsToFloat(PS0i)));
PV1i.y = R125i.y;
R123i.z = ((PV0i.z == 0)?(R10i.x):(R10i.z));
PV1i.z = R123i.z;
R127i.w = ((PV0i.z == 0)?(R10i.y):(R10i.x));
PS1i = floatBitsToInt(float(R3i.y));
// 6
backupReg0i = R126i.x;
backupReg1i = R125i.z;
R126i.x = ((R126i.y == 0)?(PV1i.z):(R10i.y));
R124i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.x),intBitsToFloat(PV1i.y)) + -(0.5)));
R125i.z = R126i.w + PV1i.x;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(PS1i)) + intBitsToFloat(backupReg1i)));
PV0i.w = R123i.w;
PS0i = floatBitsToInt(float(R4i.y));
// 7
backupReg0i = R124i.z;
R123i.x = ((R126i.y == 0)?(R127i.w):(R10i.z));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R125i.y)),intBitsToFloat(PS0i)) + intBitsToFloat(R124i.w)));
PV1i.y = R123i.y;
R124i.z = ((R126i.y == 0)?(R10i.x):(R10i.y));
R127i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.x),intBitsToFloat(backupReg0i)) + intBitsToFloat(PV0i.w)));
R127i.z = ((R126i.y == 0)?(R10i.y):(R10i.z));
PS1i = R127i.z;
// 8
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.y),intBitsToFloat(R124i.y)) + -(intBitsToFloat(PV1i.y))));
PV0i.x = R123i.x;
R127i.y = floatBitsToInt(mul_nonIEEE(uf_blockVS7[50].x, intBitsToFloat(R126i.x)));
R127i.y = floatBitsToInt(intBitsToFloat(R127i.y) * 2.0);
R124i.w = floatBitsToInt(mul_nonIEEE(uf_blockVS7[50].y, intBitsToFloat(PV1i.x)));
R124i.w = floatBitsToInt(intBitsToFloat(R124i.w) * 2.0);
PS0i = int(uf_blockVS7[53].z);
// 9
PV1i.x = floatBitsToInt(uf_blockVS7[49].w + uf_blockVS7[50].y);
R1i.y = floatBitsToInt(intBitsToFloat(R127i.w) + 0.5);
PV1i.z = floatBitsToInt(uf_blockVS7[49].z + uf_blockVS7[50].x);
R1i.w = floatBitsToInt(intBitsToFloat(PV0i.x) + 0.5);
R126i.w = floatBitsToInt(float(PS0i));
PS1i = R126i.w;
// 10
backupReg0i = R127i.y;
R127i.x = floatBitsToInt(abs(intBitsToFloat(PS1i)));
R127i.y = floatBitsToInt(-(intBitsToFloat(backupReg0i)) + intBitsToFloat(PV1i.z));
R126i.z = floatBitsToInt(-(intBitsToFloat(R124i.w)) + intBitsToFloat(PV1i.x));
PV0i.w = floatBitsToInt(uf_blockVS7[51].x + uf_blockVS7[51].z);
R126i.x = floatBitsToInt(float(R125i.z));
PS0i = R126i.x;
// 11
backupReg0i = R125i.z;
PV1i.x = floatBitsToInt((intBitsToFloat(PS0i) > 0.0)?1.0:0.0);
PV1i.y = floatBitsToInt(uf_blockVS7[51].y + uf_blockVS7[51].w);
PV1i.z = floatBitsToInt((0.0 > intBitsToFloat(PS0i))?1.0:0.0);
R124i.w = floatBitsToInt((mul_nonIEEE(uf_blockVS7[51].z,intBitsToFloat(R124i.z)) + intBitsToFloat(PV0i.w)));
R125i.z = floatBitsToInt(float(backupReg0i));
PS1i = R125i.z;
// 12
backupReg0i = R127i.z;
R125i.x = floatBitsToInt(abs(intBitsToFloat(PS1i)));
PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.x) + -(intBitsToFloat(PV1i.z)));
R127i.z = floatBitsToInt((mul_nonIEEE(uf_blockVS7[51].w,intBitsToFloat(backupReg0i)) + intBitsToFloat(PV1i.y)));
R125i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R9i.w)),uf_blockVS7[49].x) + -(intBitsToFloat(R127i.y))));
PS0i = floatBitsToInt(1.0 / abs(intBitsToFloat(R126i.w)));
// 13
PV1i.x = floatBitsToInt(mul_nonIEEE(abs(intBitsToFloat(R125i.z)), intBitsToFloat(PS0i)));
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R9i.w),uf_blockVS7[49].y) + intBitsToFloat(R126i.z)));
R10i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R9i.w),uf_blockVS7[50].z) + intBitsToFloat(R124i.w)));
R123i.w = floatBitsToInt((intBitsToFloat(PV0i.y) * 0.5 + intBitsToFloat(R126i.x)));
PV1i.w = R123i.w;
PS1i = floatBitsToInt(1.0 / intBitsToFloat(R126i.w));
// 14
PV0i.x = floatBitsToInt(trunc(intBitsToFloat(PV1i.x)));
R124i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R9i.w),uf_blockVS7[50].w) + intBitsToFloat(R127i.z)));
PV0i.z = floatBitsToInt(intBitsToFloat(PV1i.w) * intBitsToFloat(PS1i));
PS0i = floatBitsToInt(1.0 / uf_blockVS7[53].z);
// 15
R10i.x = floatBitsToInt(intBitsToFloat(R19i.z) + 0.0);
PV1i.y = floatBitsToInt(trunc(intBitsToFloat(PV0i.z)));
R124i.z = floatBitsToInt(mul_nonIEEE(uf_blockVS7[53].x, intBitsToFloat(PS0i)));
PV1i.z = R124i.z;
R124i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.x)),intBitsToFloat(R127i.x)) + intBitsToFloat(R125i.x)));
PV1i.w = R124i.w;
PS1i = floatBitsToInt(1.0 / uf_blockVS7[53].w);
// 16
PV0i.x = floatBitsToInt(-(abs(intBitsToFloat(R126i.w))) + intBitsToFloat(PV1i.w));
R125i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.w),intBitsToFloat(PV1i.z)) + -(0.5)));
PV0i.z = floatBitsToInt((intBitsToFloat(PV1i.w) >= abs(intBitsToFloat(R126i.w)))?1.0:0.0);
R127i.w = floatBitsToInt(mul_nonIEEE(uf_blockVS7[53].y, intBitsToFloat(PS1i)));
PV0i.w = R127i.w;
PS0i = int(intBitsToFloat(PV1i.y));
// 17
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.w), uf_blockVS7[58].x));
R126i.y = ((intBitsToFloat(PV0i.z) == 0.0)?(R124i.w):(PV0i.x));
PV1i.y = R126i.y;
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.x), uf_blockVS7[58].y));
R124i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.z),intBitsToFloat(PV0i.w)) + -(0.5)));
PS1i = floatBitsToInt(float(PS0i));
// 18
backupReg0i = R127i.y;
PV0i.x = floatBitsToInt(abs(intBitsToFloat(R126i.w)) + intBitsToFloat(PV1i.y));
R127i.y = floatBitsToInt(intBitsToFloat(R6i.x) + -(uf_blockVS7[93].x));
R126i.z = floatBitsToInt(-(uf_blockVS7[93].x) + uf_blockVS7[93].y);
R123i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R127i.w)),intBitsToFloat(PS1i)) + intBitsToFloat(backupReg0i)));
PV0i.w = R123i.w;
PS0i = floatBitsToInt(1.0 / uf_blockVS7[58].z);
// 19
R123i.x = ((-(intBitsToFloat(R126i.y)) > 0.0)?(PV0i.x):(R126i.y));
PV1i.x = R123i.x;
R2i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(R127i.x)));
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.y),intBitsToFloat(R124i.w)) + -(intBitsToFloat(PV0i.w))));
PV1i.z = R123i.z;
R3i.w = floatBitsToInt(intBitsToFloat(R10i.x) + -(uf_blockVS7[104].w));
PS1i = floatBitsToInt(1.0 / uf_blockVS7[58].w);
// 20
R4i.x = floatBitsToInt(intBitsToFloat(PV1i.z) + 0.5);
R126i.y = floatBitsToInt(-(uf_blockVS7[104].x) + uf_blockVS7[105].x);
R123i.z = ((-(intBitsToFloat(R125i.z)) > 0.0)?(floatBitsToInt(-(intBitsToFloat(PV1i.x)))):(PV1i.x));
PV0i.z = R123i.z;
R0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(R127i.z)));
PS0i = floatBitsToInt(1.0 / intBitsToFloat(R126i.z));
// 21
R127i.x = floatBitsToInt(-(uf_blockVS7[104].w) + uf_blockVS7[105].w);
R123i.y = ((intBitsToFloat(R126i.w) == 0.0)?(R125i.z):(PV0i.z));
PV1i.y = R123i.y;
R10i.w = floatBitsToInt(intBitsToFloat(R127i.y) * intBitsToFloat(PS0i));
R10i.w = clampFI32(R10i.w);
// 22
PS0i = int(intBitsToFloat(PV1i.y));
// 23
R5i.x = floatBitsToInt(intBitsToFloat(R10i.x) + -(uf_blockVS7[106].w));
R125i.z = floatBitsToInt(-(uf_blockVS7[105].w) + uf_blockVS7[106].w);
R2i.w = floatBitsToInt(intBitsToFloat(R10i.x) + -(uf_blockVS7[105].w));
PS1i = floatBitsToInt(float(PS0i));
// 24
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.z),intBitsToFloat(PS1i)) + intBitsToFloat(R125i.w)));
PV0i.x = R123i.x;
R10i.y = floatBitsToInt(-(uf_blockVS7[105].x) + uf_blockVS7[106].x);
PS0i = floatBitsToInt(1.0 / intBitsToFloat(R127i.x));
// 25
R6i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R10i.z),intBitsToFloat(R125i.y)) + intBitsToFloat(PV0i.x)));
R3i.y = floatBitsToInt(-(uf_blockVS7[106].x) + uf_blockVS7[107].x);
R10i.z = floatBitsToInt(intBitsToFloat(R126i.y) * intBitsToFloat(PS0i));
R4i.y = floatBitsToInt(1.0 / intBitsToFloat(R125i.z));
PS1i = R4i.y;
}
if( activeMaskStackC[3] == true ) {
// 0
backupReg0i = R4i.y;
R124i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.w),intBitsToFloat(R10i.z)) + uf_blockVS7[104].x));
R4i.y = floatBitsToInt(intBitsToFloat(R6i.x) + 0.5);
R125i.z = floatBitsToInt(intBitsToFloat(R10i.x) + -(uf_blockVS7[107].w));
PV0i.z = R125i.z;
PV0i.w = floatBitsToInt(intBitsToFloat(R10i.y) * intBitsToFloat(backupReg0i));
R126i.w = ((intBitsToFloat(R3i.w) >= 0.0)?(floatBitsToInt(1.0)):(0));
PS0i = R126i.w;
// 1
R6i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.w),intBitsToFloat(PV0i.w)) + uf_blockVS7[105].x));
R126i.y = ((intBitsToFloat(R2i.w) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV1i.y = R126i.y;
R124i.z = floatBitsToInt(intBitsToFloat(R10i.x) + -(uf_blockVS7[108].w));
PV1i.z = R124i.z;
R125i.w = ((intBitsToFloat(R5i.x) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV1i.w = R125i.w;
R125i.y = ((intBitsToFloat(PV0i.z) >= 0.0)?(floatBitsToInt(1.0)):(0));
PS1i = R125i.y;
// 2
R126i.x = ((intBitsToFloat(PV1i.z) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV0i.x = R126i.x;
PV0i.y = floatBitsToInt(-(intBitsToFloat(PS1i)) + 1.0);
PV0i.z = floatBitsToInt(-(intBitsToFloat(PV1i.w)) + 1.0);
PV0i.w = floatBitsToInt(-(uf_blockVS7[106].w) + uf_blockVS7[107].w);
R127i.x = floatBitsToInt(-(intBitsToFloat(PV1i.y)) + 1.0);
PS0i = R127i.x;
// 3
R125i.x = floatBitsToInt(-(uf_blockVS7[107].x) + uf_blockVS7[108].x);
PV1i.y = floatBitsToInt(-(intBitsToFloat(PV0i.x)) + 1.0);
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.w), intBitsToFloat(PV0i.y)));
R124i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.y), intBitsToFloat(PV0i.z)));
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PV0i.w));
// 4
PV0i.x = floatBitsToInt(-(uf_blockVS7[107].w) + uf_blockVS7[108].w);
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.w), intBitsToFloat(R127i.x)));
PV0i.z = floatBitsToInt(intBitsToFloat(R3i.y) * intBitsToFloat(PS1i));
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.y), intBitsToFloat(PV1i.y)));
R126i.y = floatBitsToInt(-(intBitsToFloat(R126i.w)) + 1.0);
PS0i = R126i.y;
// 5
R124i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.x),intBitsToFloat(PV0i.z)) + uf_blockVS7[106].x));
R126i.w = floatBitsToInt(intBitsToFloat(R10i.x) + -(uf_blockVS7[109].w));
PV1i.w = R126i.w;
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PV0i.x));
// 6
backupReg0i = R125i.x;
R125i.x = ((intBitsToFloat(PV1i.w) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV0i.x = R125i.x;
R125i.y = floatBitsToInt(-(uf_blockVS7[108].x) + uf_blockVS7[109].x);
R7i.z = 0;
PV0i.w = floatBitsToInt(intBitsToFloat(backupReg0i) * intBitsToFloat(PS1i));
// 7
R5i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.z),intBitsToFloat(PV0i.w)) + uf_blockVS7[107].x));
PV1i.y = floatBitsToInt(-(intBitsToFloat(PV0i.x)) + 1.0);
R126i.z = floatBitsToInt(intBitsToFloat(R10i.x) + -(uf_blockVS7[110].w));
PV1i.z = R126i.z;
// 8
R127i.x = ((intBitsToFloat(PV1i.z) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV0i.x = R127i.x;
R125i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.x), intBitsToFloat(PV1i.y)));
PV0i.w = floatBitsToInt(-(uf_blockVS7[108].w) + uf_blockVS7[109].w);
PS0i = floatBitsToInt(intBitsToFloat(R11i.z) * intBitsToFloat(R11i.z));
// 9
R126i.x = floatBitsToInt(-(uf_blockVS7[109].x) + uf_blockVS7[110].x);
PV1i.y = floatBitsToInt(-(intBitsToFloat(PV0i.x)) + 1.0);
R123i.z = floatBitsToInt((intBitsToFloat(R9i.y) * intBitsToFloat(R9i.y) + intBitsToFloat(PS0i)));
PV1i.z = R123i.z;
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PV0i.w));
// 10
backupReg0i = R125i.y;
PV0i.x = floatBitsToInt(-(uf_blockVS7[109].w) + uf_blockVS7[110].w);
R125i.y = floatBitsToInt((intBitsToFloat(R13i.x) * intBitsToFloat(R13i.x) + intBitsToFloat(PV1i.z)));
PV0i.z = floatBitsToInt(intBitsToFloat(backupReg0i) * intBitsToFloat(PS1i));
R2i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.x), intBitsToFloat(PV1i.y)));
// 11
PV1i.x = floatBitsToInt(intBitsToFloat(R10i.x) + -(uf_blockVS7[111].w));
R3i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.z),intBitsToFloat(PV0i.z)) + uf_blockVS7[108].x));
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PV0i.x));
// 12
backupReg0i = R125i.y;
R10i.x = ((intBitsToFloat(PV1i.x) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV0i.x = R10i.x;
R125i.y = floatBitsToInt(-(uf_blockVS7[110].x) + uf_blockVS7[111].x);
PV0i.w = floatBitsToInt(intBitsToFloat(R126i.x) * intBitsToFloat(PS1i));
tempResultf = 1.0 / sqrt(intBitsToFloat(backupReg0i));
R125i.w = floatBitsToInt(tempResultf);
PS0i = R125i.w;
// 13
R125i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.w),intBitsToFloat(PV0i.w)) + uf_blockVS7[109].x));
PV1i.y = floatBitsToInt(-(intBitsToFloat(PV0i.x)) + 1.0);
R124i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R11i.z), intBitsToFloat(PS0i)));
PV1i.w = floatBitsToInt(mul_nonIEEE(uf_blockVS7[104].x, intBitsToFloat(R126i.y)));
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R13i.x), intBitsToFloat(PS0i)));
PS1i = R126i.x;
// 14
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.x),intBitsToFloat(R127i.y)) + intBitsToFloat(PV1i.w)));
PV0i.x = R123i.x;
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R9i.y), intBitsToFloat(R125i.w)));
R10i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(PV1i.y)));
PV0i.w = floatBitsToInt(-(uf_blockVS7[110].w) + uf_blockVS7[111].w);
R125i.w = 0;
PS0i = R125i.w;
// 15
R127i.x = floatBitsToInt(uf_blockVS6[0].y);
R126i.y = floatBitsToInt(uf_blockVS6[1].y);
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R6i.x),intBitsToFloat(R124i.w)) + intBitsToFloat(PV0i.x)));
PV1i.z = R123i.z;
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PV0i.w));
// 16
PV0i.x = floatBitsToInt(uf_blockVS6[2].y);
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.y),intBitsToFloat(R127i.z)) + intBitsToFloat(PV1i.z)));
PV0i.y = R123i.y;
R127i.z = floatBitsToInt(intBitsToFloat(R125i.y) * intBitsToFloat(PS1i));
// 17
backupReg0i = R124i.z;
backupReg0i = R124i.z;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R126i.x),intBitsToFloat(R127i.y),intBitsToFloat(backupReg0i),intBitsToFloat(backupReg0i)),vec4(-(intBitsToFloat(R127i.x)),-(intBitsToFloat(R126i.y)),-(intBitsToFloat(PV0i.x)),-(intBitsToFloat(R125i.w)))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R124i.z = tempi.x;
R122i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.x),intBitsToFloat(R127i.w)) + intBitsToFloat(PV0i.y)));
PS1i = R122i.x;
// 18
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.y),intBitsToFloat(R125i.z)) + intBitsToFloat(PS1i)));
PV0i.x = R123i.x;
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.z),intBitsToFloat(R127i.z)) + uf_blockVS7[110].x));
// 19
backupReg0i = R125i.x;
R125i.x = floatBitsToInt(uf_blockVS6[17].x + -(intBitsToFloat(R4i.w)));
PV1i.y = floatBitsToInt(intBitsToFloat(R124i.z) + intBitsToFloat(0x3edc28f6));
PV1i.y = clampFI32(PV1i.y);
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(R2i.w)) + intBitsToFloat(PV0i.x)));
PV1i.z = R123i.z;
R127i.w = floatBitsToInt(uf_blockVS6[17].y + -(intBitsToFloat(R5i.y)));
R124i.z = floatBitsToInt(uf_blockVS6[17].z + -(intBitsToFloat(R8i.z)));
PS1i = R124i.z;
// 20
PV0i.x = floatBitsToInt(intBitsToFloat(PS1i) * intBitsToFloat(PS1i));
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.y),intBitsToFloat(R10i.z)) + intBitsToFloat(PV1i.z)));
PV0i.w = R123i.w;
tempResultf = log2(intBitsToFloat(PV1i.y));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
R5i.x = floatBitsToInt(tempResultf);
PS0i = R5i.x;
// 21
R123i.x = floatBitsToInt((intBitsToFloat(R127i.w) * intBitsToFloat(R127i.w) + intBitsToFloat(PV0i.x)));
PV1i.x = R123i.x;
R12i.y = floatBitsToInt((mul_nonIEEE(uf_blockVS7[111].x,intBitsToFloat(R10i.x)) + intBitsToFloat(PV0i.w)));
// 22
R123i.y = floatBitsToInt((intBitsToFloat(R125i.x) * intBitsToFloat(R125i.x) + intBitsToFloat(PV1i.x)));
PV0i.y = R123i.y;
// 23
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.y));
PS1i = floatBitsToInt(tempResultf);
// 24
R10i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.x), intBitsToFloat(PS1i)));
R5i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.w), intBitsToFloat(PS1i)));
R10i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.z), intBitsToFloat(PS1i)));
}
if( activeMaskStackC[3] == true ) {
// 0
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R10i.x),intBitsToFloat(R5i.y),intBitsToFloat(R10i.z),-0.0),vec4(uf_blockVS13[28].x,uf_blockVS13[28].y,uf_blockVS13[28].z,0.0)));
tempi.x = floatBitsToInt(intBitsToFloat(tempi.x) / 2.0);
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
// 1
PV1i.x = floatBitsToInt(min(uf_blockVS6[17].y, uf_blockVS13[27].z));
R127i.y = floatBitsToInt(intBitsToFloat(PV0i.x) + 0.5);
PV1i.y = R127i.y;
// 2
R125i.x = floatBitsToInt(-(intBitsToFloat(PV1i.y)) + 1.0);
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.x),uf_blockVS13[37].x) + -(uf_blockVS13[37].y)));
R123i.y = clampFI32(R123i.y);
PV0i.y = R123i.y;
PV0i.z = floatBitsToInt(-(intBitsToFloat(R6i.y)) + intBitsToFloat(PV1i.x));
PV0i.w = floatBitsToInt(mul_nonIEEE(uf_blockVS13[38].z, intBitsToFloat(R5i.x)));
R122i.x = floatBitsToInt((intBitsToFloat(PV1i.y) * intBitsToFloat(0xbc996e30) + intBitsToFloat(0x3d981626)));
PS0i = R122i.x;
// 3
PV1i.x = floatBitsToInt(-(intBitsToFloat(PV0i.y)) + 1.0);
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.x),uf_blockVS13[22].x) + -(uf_blockVS13[22].y)));
R123i.y = clampFI32(R123i.y);
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.y),intBitsToFloat(PS0i)) + intBitsToFloat(0xbe593484)));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(uf_blockVS13[27].y,intBitsToFloat(PV0i.z)) + uf_blockVS13[27].x));
R123i.w = clampFI32(R123i.w);
PV1i.w = R123i.w;
PS1i = floatBitsToInt(exp2(intBitsToFloat(PV0i.w)));
// 4
R10i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), uf_blockVS13[26].w));
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.y),intBitsToFloat(PV1i.z)) + intBitsToFloat(0x3fc90da4)));
PV0i.z = floatBitsToInt(-(intBitsToFloat(PV1i.y)) + 1.0);
R127i.w = floatBitsToInt((mul_nonIEEE(-(uf_blockVS13[38].w),intBitsToFloat(PS1i)) + 1.0));
tempResultf = log2(intBitsToFloat(PV1i.x));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0i = floatBitsToInt(tempResultf);
// 5
PV1i.y = floatBitsToInt(uf_blockVS13[28].y + 1.0);
PV1i.z = floatBitsToInt(mul_nonIEEE(uf_blockVS13[38].x, intBitsToFloat(PS0i)));
R125i.w = floatBitsToInt((uf_blockVS13[28].y * 1.0 + intBitsToFloat(R7i.x)));
tempResultf = log2(intBitsToFloat(PV0i.z));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1i = floatBitsToInt(tempResultf);
// 6
PV0i.x = floatBitsToInt(mul_nonIEEE(uf_blockVS13[23].y, intBitsToFloat(PS1i)));
R127i.y = floatBitsToInt(mul_nonIEEE(uf_blockVS13[23].x, intBitsToFloat(PS1i)));
PV0i.z = floatBitsToInt(intBitsToFloat(PV1i.y) * 1.5);
PV0i.z = clampFI32(PV0i.z);
PS0i = floatBitsToInt(exp2(intBitsToFloat(PV1i.z)));
// 7
PV1i.x = floatBitsToInt(-(intBitsToFloat(PS0i)) + 1.0);
R124i.z = floatBitsToInt(intBitsToFloat(PV0i.z) * intBitsToFloat(0x41700000));
PS1i = floatBitsToInt(exp2(intBitsToFloat(PV0i.x)));
PS1i = floatBitsToInt(intBitsToFloat(PS1i) / 2.0);
// 8
R5i.y = floatBitsToInt(intBitsToFloat(PS1i) + 0.5);
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(R127i.w)));
PS0i = floatBitsToInt(sqrt(intBitsToFloat(R125i.x)));
// 9
PV1i.y = floatBitsToInt(intBitsToFloat(PS0i) * intBitsToFloat(0x3f22f983));
R2i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), uf_blockVS13[25].w));
PS1i = floatBitsToInt(exp2(intBitsToFloat(R127i.y)));
// 10
R5i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.y),-(intBitsToFloat(R126i.y))) + 1.0));
PV0i.y = floatBitsToInt(intBitsToFloat(R9i.y) * intBitsToFloat(R8i.x));
R123i.z = floatBitsToInt((mul_nonIEEE(-(uf_blockVS13[23].z),intBitsToFloat(PS1i)) + uf_blockVS13[23].z));
R123i.z = clampFI32(R123i.z);
PV0i.z = R123i.z;
R8i.w = 0;
PS0i = floatBitsToInt(1.0 / intBitsToFloat(R124i.z));
// 11
PV1i.x = floatBitsToInt(intBitsToFloat(R125i.w) * intBitsToFloat(PS0i));
R10i.y = ((0.0 >= intBitsToFloat(R10i.w))?int(0xFFFFFFFF):int(0x0));
PV1i.z = floatBitsToInt(intBitsToFloat(PV0i.z) + -0.0);
PV1i.z = clampFI32(PV1i.z);
PV1i.w = floatBitsToInt(-(intBitsToFloat(PV0i.y)) + 1.0);
R2i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R9i.x),intBitsToFloat(R10i.w)) + 0.0));
PS1i = R2i.x;
// 12
R9i.x = PV1i.z;
R6i.y = PV1i.z;
R123i.z = floatBitsToInt((intBitsToFloat(PV1i.w) * intBitsToFloat(0x3f333333) + intBitsToFloat(0x3e19999a)));
R123i.z = clampFI32(R123i.z);
PV0i.z = R123i.z;
PV0i.w = floatBitsToInt(max(intBitsToFloat(PV1i.x), intBitsToFloat(0x3e4ccccd)));
R1i.z = floatBitsToInt(uf_blockVS6[18].y * intBitsToFloat(0x40a00000));
PS0i = R1i.z;
// 13
PV1i.x = floatBitsToInt(-(intBitsToFloat(PV0i.z)) + 1.0);
R3i.y = 0;
PV1i.y = R3i.y;
R10i.z = floatBitsToInt(min(intBitsToFloat(PV0i.w), 1.0));
R4i.w = 0;
R0i.x = 0;
PS1i = R0i.x;
// 14
R1i.x = R16i.x;
R14i.y = R15i.y;
R0i.z = R16i.z;
PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.x) + intBitsToFloat(0x40200000));
R3i.w = ((R10i.y == 0)?(R9i.z):(PV1i.y));
PS0i = R3i.w;
// 15
backupReg0i = R7i.y;
R8i.x = floatBitsToInt(intBitsToFloat(PV0i.w) * intBitsToFloat(0x3daaaaab));
R7i.y = ((R10i.y == 0)?(R11i.x):(R1i.z));
R9i.z = ((R10i.y == 0)?(backupReg0i):(R4i.w));
R7i.w = ((R10i.y == 0)?(R5i.w):(R5i.w));
R10i.w = ((R10i.y == 0)?(R2i.x):(R0i.x));
PS1i = R10i.w;
}
if( activeMaskStackC[3] == true ) {
R5i.xyz = floatBitsToInt(texture(textureUnitVS8, intBitsToFloat(R5i.xy)).xyz);
R8i.xyzw = floatBitsToInt(texture(textureUnitVS13, intBitsToFloat(R8i.xw)).xyzw);
}
if( activeMaskStackC[3] == true ) {
// 0
backupReg0i = R5i.z;
R125i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.y), intBitsToFloat(R10i.z)));
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.x), intBitsToFloat(R10i.z)));
R5i.z = floatBitsToInt(mul_nonIEEE(uf_blockVS11[2].w, uf_blockVS14[0].z));
R125i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(R10i.z)));
R10i.z = ((R10i.y == 0)?(R12i.y):(R12i.y));
PS0i = R10i.z;
// 1
R5i.x = ((R10i.y == 0)?(R18i.z):(R18i.z));
R5i.y = floatBitsToInt(mul_nonIEEE(uf_blockVS11[2].w, uf_blockVS14[0].w));
R6i.z = ((R10i.y == 0)?(0):(0x3f800000));
PV1i.z = R6i.z;
R123i.w = ((R10i.y == 0)?(0):(R2i.w));
PV1i.w = R123i.w;
R122i.x = ((R10i.y == 0)?(0):(R10i.x));
PS1i = R122i.x;
// 2
R20i.x = ((PV1i.z == 0)?(R2i.w):(PV1i.w));
R20i.y = ((PV1i.z == 0)?(R10i.x):(PS1i));
R123i.z = ((R10i.y == 0)?(0):(R6i.y));
PV0i.z = R123i.z;
R123i.w = ((R10i.y == 0)?(0):(R7i.z));
PV0i.w = R123i.w;
R122i.x = ((R10i.y == 0)?(0):(R126i.y));
PS0i = R122i.x;
// 3
R21i.x = ((R6i.z == 0)?(R126i.y):(PS0i));
R126i.y = ((R10i.y == 0)?(0):(R125i.w));
R20i.z = ((R6i.z == 0)?(R6i.y):(PV0i.z));
R20i.w = ((R6i.z == 0)?(R7i.z):(PV0i.w));
R127i.x = ((R10i.y == 0)?(0):(R9i.x));
PS1i = R127i.x;
// 4
R126i.x = ((R10i.y == 0)?(0):(R8i.w));
R127i.y = ((R10i.y == 0)?(0):(R8i.z));
R123i.z = ((R10i.y == 0)?(0):(R125i.x));
PV0i.z = R123i.z;
R127i.w = ((R10i.y == 0)?(0):(R8i.x));
R6i.y = ((R10i.y == 0)?(0):(R0i.z));
PS0i = R6i.y;
// 5
backupReg0i = R9i.x;
R9i.x = ((R10i.y == 0)?(0):(R1i.w));
R21i.y = ((R6i.z == 0)?(R125i.x):(PV0i.z));
PV1i.y = R21i.y;
R21i.z = ((R6i.z == 0)?(R125i.w):(R126i.y));
R21i.w = ((R6i.z == 0)?(backupReg0i):(R127i.x));
// 6
R22i.x = ((R6i.z == 0)?(R8i.x):(R127i.w));
R123i.z = ((R10i.y == 0)?(0):(R8i.y));
PV0i.z = R123i.z;
R2i.w = ((R10i.y == 0)?(0):(R1i.x));
R0i.y = ((R10i.y == 0)?(0):(R1i.z));
PS0i = R0i.y;
// 7
R22i.y = ((R6i.z == 0)?(R8i.y):(PV0i.z));
R22i.z = ((R6i.z == 0)?(R8i.z):(R127i.y));
R22i.w = ((R6i.z == 0)?(R8i.w):(R126i.x));
// 8
R8i.z = ((R10i.y == 0)?(0):(R14i.y));
}
if( activeMaskStackC[3] == true ) {
// 0
PV0i.x = floatBitsToInt(mul_nonIEEE(uf_blockVS7[44].y, intBitsToFloat(R5i.y)));
R127i.y = floatBitsToInt((mul_nonIEEE(uf_blockVS7[49].y,intBitsToFloat(R5i.z)) + intBitsToFloat(R4i.y)));
R124i.z = floatBitsToInt((mul_nonIEEE(uf_blockVS7[44].y,intBitsToFloat(R5i.z)) + intBitsToFloat(R1i.y)));
PV0i.z = R124i.z;
PV0i.w = floatBitsToInt(mul_nonIEEE(uf_blockVS7[49].y, intBitsToFloat(R5i.y)));
// 1
R126i.x = floatBitsToInt((mul_nonIEEE(uf_blockVS11[3].w,intBitsToFloat(PV0i.w)) + intBitsToFloat(R4i.x)));
R123i.y = ((R10i.y == 0)?(0):(PV0i.z));
PV1i.y = R123i.y;
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.y), uf_blockVS7[54].y));
R127i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),uf_blockVS11[3].w) + intBitsToFloat(R1i.w)));
PV1i.w = R127i.w;
R1i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.z),uf_blockVS7[54].y) + intBitsToFloat(R2i.y)));
PS1i = R1i.x;
// 2
R23i.x = ((R6i.z == 0)?(R124i.z):(PV1i.y));
R1i.y = floatBitsToInt((mul_nonIEEE(uf_blockVS11[3].w,intBitsToFloat(PV1i.z)) + intBitsToFloat(R0i.w)));
PV0i.y = R1i.y;
R123i.z = ((R10i.y == 0)?(0):(PV1i.w));
PV0i.z = R123i.z;
R123i.w = ((R10i.y == 0)?(0):(PS1i));
PV0i.w = R123i.w;
R122i.x = ((R10i.y == 0)?(0):(R127i.y));
PS0i = R122i.x;
// 3
R19i.x = ((R6i.z == 0)?(R1i.x):(PV0i.w));
R23i.y = ((R6i.z == 0)?(R127i.w):(PV0i.z));
R23i.z = ((R6i.z == 0)?(R127i.y):(PS0i));
R123i.w = ((R10i.y == 0)?(0):(PV0i.y));
PV1i.w = R123i.w;
R122i.x = ((R10i.y == 0)?(0):(R126i.x));
PS1i = R122i.x;
// 4
R123i.x = ((R10i.y == 0)?(R18i.x):(R0i.x));
PV0i.x = R123i.x;
R19i.y = ((R6i.z == 0)?(R1i.y):(PV1i.w));
R124i.z = ((R10i.y == 0)?(R18i.z):(R18i.z));
R23i.w = ((R6i.z == 0)?(R126i.x):(PS1i));
R126i.z = ((R10i.y == 0)?(R17i.w):(R5i.w));
PS0i = R126i.z;
// 5
R18i.x = ((R6i.z == 0)?(R10i.w):(PV0i.x));
R123i.y = ((R10i.y == 0)?(0):(R13i.x));
PV1i.y = R123i.y;
R127i.z = ((R10i.y == 0)?(0):(R11i.z));
R123i.w = ((R10i.y == 0)?(R18i.y):(R12i.y));
PV1i.w = R123i.w;
R122i.x = ((R10i.y == 0)?(0):(R14i.x));
PS1i = R122i.x;
// 6
backupReg0i = R14i.x;
R24i.x = ((R6i.z == 0)?(R13i.x):(PV1i.y));
R18i.y = ((R6i.z == 0)?(R10i.z):(PV1i.w));
R18i.z = ((R6i.z == 0)?(R5i.x):(R124i.z));
R123i.w = ((R10i.y == 0)?(0):(R9i.y));
PV0i.w = R123i.w;
R14i.x = ((R6i.z == 0)?(backupReg0i):(PS1i));
PS0i = R14i.x;
// 7
R123i.x = ((R10i.y == 0)?(0):(R6i.w));
PV1i.x = R123i.x;
R24i.y = ((R6i.z == 0)?(R9i.y):(PV0i.w));
R24i.z = ((R6i.z == 0)?(R11i.z):(R127i.z));
R125i.w = ((R10i.y == 0)?(0):(R15i.x));
PS1i = R16i.x;
// 8
R16i.x = ((R6i.z == 0)?(PS1i):(R2i.w));
R14i.y = ((R6i.z == 0)?(R6i.w):(PV1i.x));
R123i.z = ((R10i.y == 0)?(0):(R12i.z));
PV0i.z = R123i.z;
R127i.w = ((R10i.y == 0)?(0):(R11i.y));
R122i.x = ((R10i.y == 0)?(0):(R13i.z));
PS0i = R122i.x;
// 9
R25i.x = ((R6i.z == 0)?(R13i.z):(PS0i));
R123i.y = ((R10i.y == 0)?(R17i.x):(R3i.y));
PV1i.y = R123i.y;
R123i.z = ((R10i.y == 0)?(R17i.y):(R4i.w));
PV1i.z = R123i.z;
R24i.w = ((R6i.z == 0)?(R12i.z):(PV0i.z));
// 10
R17i.x = ((R6i.z == 0)?(R3i.w):(PV1i.y));
R17i.y = ((R6i.z == 0)?(R9i.z):(PV1i.z));
R123i.z = ((R10i.y == 0)?(0):(R14i.z));
PV0i.z = R123i.z;
PV0i.w = R15i.y;
// 11
R16i.y = ((R6i.z == 0)?(PV0i.w):(R8i.z));
R25i.y = ((R6i.z == 0)?(R14i.z):(PV0i.z));
PS1i = R25i.y;
// 12
R126i.x = ((R10i.y == 0)?(0):(R13i.y));
PV0i.y = R16i.z;
R123i.w = ((R10i.y == 0)?(0):(R15i.z));
PV0i.w = R123i.w;
// 13
R16i.z = ((R6i.z == 0)?(PV0i.y):(R6i.y));
R14i.w = ((R6i.z == 0)?(R11i.y):(R127i.w));
R14i.z = ((R6i.z == 0)?(R15i.z):(PV0i.w));
PS1i = R14i.z;
// 14
R123i.x = ((R10i.y == 0)?(R17i.z):(R1i.z));
PV0i.x = R123i.x;
R25i.z = ((R6i.z == 0)?(R13i.y):(R126i.x));
R25i.w = ((R6i.z == 0)?(R15i.x):(R125i.w));
// 15
R17i.z = ((R6i.z == 0)?(R7i.y):(PV0i.x));
R17i.w = ((R6i.z == 0)?(R7i.w):(R126i.z));
R16i.w = ((R6i.z == 0)?(R9i.x):(R9i.x));
PS1i = R16i.w;
// 16
R19i.z = ((R6i.z == 0)?(R1i.z):(R0i.y));
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
// export
gl_Position = vec4(intBitsToFloat(R17i.x), intBitsToFloat(R17i.y), intBitsToFloat(R17i.z), intBitsToFloat(R17i.w));
// export
passParameterSem0 = vec4(intBitsToFloat(R25i.x), intBitsToFloat(R25i.y), intBitsToFloat(R25i.z), intBitsToFloat(R25i.w));
// export
passParameterSem1 = vec4(intBitsToFloat(R14i.x), intBitsToFloat(R14i.y), intBitsToFloat(R14i.z), intBitsToFloat(R14i.w));
// export
passParameterSem3 = vec4(intBitsToFloat(R24i.x), intBitsToFloat(R24i.y), intBitsToFloat(R24i.z), intBitsToFloat(R24i.w));
// export
passParameterSem8 = vec4(intBitsToFloat(R23i.x), intBitsToFloat(R23i.y), intBitsToFloat(R23i.z), intBitsToFloat(R23i.w));
// export
passParameterSem11 = vec4(intBitsToFloat(R16i.x), intBitsToFloat(R16i.y), intBitsToFloat(R16i.z), intBitsToFloat(R16i.w));
// export
passParameterSem14 = vec4(intBitsToFloat(R22i.x), intBitsToFloat(R22i.y), intBitsToFloat(R22i.z), intBitsToFloat(R22i.w));
// export
passParameterSem15 = vec4(intBitsToFloat(R21i.x), intBitsToFloat(R21i.y), intBitsToFloat(R21i.z), intBitsToFloat(R21i.w));
// export
passParameterSem16 = vec4(intBitsToFloat(R20i.x), intBitsToFloat(R20i.y), intBitsToFloat(R20i.z), intBitsToFloat(R20i.w));
// export
passParameterSem4 = vec4(intBitsToFloat(R18i.x), intBitsToFloat(R18i.y), intBitsToFloat(R18i.z), intBitsToFloat(R18i.z));
// export
passParameterSem9 = vec4(intBitsToFloat(R19i.x), intBitsToFloat(R19i.y), intBitsToFloat(R19i.z), intBitsToFloat(R19i.z));
}
