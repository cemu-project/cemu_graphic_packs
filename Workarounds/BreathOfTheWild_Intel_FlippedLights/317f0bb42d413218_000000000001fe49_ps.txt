#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 317f0bb42d413218
// Used to clean up shrine elevator lights flip
uniform ivec4 uf_remappedPS[10];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0xf5054000 res 640x360x1 dim 1 tm: 4 format 080e compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0xf494a800 res 1280x720x1 dim 1 tm: 4 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 2) uniform sampler2D textureUnitPS2;// Tex2 addr 0x3d4f5000 res 64x64x1 dim 1 tm: 4 format 0806 compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 2 2 2 border: 1
layout(location = 1) noperspective in vec4 passParameterSem0;
layout(location = 0) out vec4 passPixelColor0;
layout(location = 1) out vec4 passPixelColor1;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R7i = ivec4(0);
ivec4 R8i = ivec4(0);
ivec4 R122i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R124i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
bool activeMaskStack[2];
bool activeMaskStackC[3];
activeMaskStack[0] = false;
activeMaskStackC[0] = false;
activeMaskStackC[1] = false;
activeMaskStack[0] = true;
activeMaskStackC[0] = true;
activeMaskStackC[1] = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = floatBitsToInt(vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw));
R1i = floatBitsToInt(passParameterSem0);
if( activeMaskStackC[1] == true ) {
// 0
PV0i.z = floatBitsToInt(intBitsToFloat(R0i.y) + intBitsToFloat(0xbc23d70a));
PV0i.w = floatBitsToInt(intBitsToFloat(R0i.x) + intBitsToFloat(0xbc23d70a));
R2i.y = floatBitsToInt((1.0 / intBitsToFloat(uf_remappedPS[0].w)));
PS0i = R2i.y;
// 1
// -0.01 0xbc23d70a
// -0.02 0xbca3d70a
// -0.05 0xbd4ccccd
// -0.1 0xbdcccccd
// -0.5 0xbf000000
// 6 0x40c00000
// 7 0x40a00000
// 7.5 0x40f00000
// 8 0x41000000
// 9 0x41100000
R0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w) , intBitsToFloat(uf_remappedPS[1].z) ) );
// seems we need to shift by dec 7.5 or hex 0x41100000 for unknown reasons. probably related to scale probably breaks on increased resolutions.
R0i.y = floatBitsToInt(1-mul_nonIEEE(intBitsToFloat(PV0i.z) - intBitsToFloat(0x40f00000), intBitsToFloat(uf_remappedPS[1].w)) );
}
if( activeMaskStackC[1] == true ) {
R2i.x = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R0i.xy)).x);
R0i.xyzw = floatBitsToInt(texture(textureUnitPS1, intBitsToFloat(R0i.xy)).xyzw);
}
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
R127i.x = floatBitsToInt((intBitsToFloat(R0i.x) * 2.0 + -(1.0)));
R127i.y = floatBitsToInt((intBitsToFloat(R0i.y) * 2.0 + -(1.0)));
R127i.z = floatBitsToInt((intBitsToFloat(R0i.z) * 2.0 + -(1.0)));
PV0i.z = R127i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].y),intBitsToFloat(R2i.x)) + intBitsToFloat(uf_remappedPS[2].x)));
PV0i.w = R123i.w;
// 1
R125i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.y), -(intBitsToFloat(PV0i.w))));
PV1i.x = R125i.x;
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), -(intBitsToFloat(PV0i.w))));
PV1i.y = R126i.y;
R126i.z = floatBitsToInt(-(intBitsToFloat(PV0i.w)));
PV1i.z = R126i.z;
PS1i = floatBitsToInt(intBitsToFloat(PV0i.z) * intBitsToFloat(PV0i.z));
// 2
R5i.x = floatBitsToInt(-(intBitsToFloat(PV1i.y)) + intBitsToFloat(uf_remappedPS[3].x));
PV0i.x = R5i.x;
R7i.y = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + intBitsToFloat(uf_remappedPS[3].y));
PV0i.y = R7i.y;
R7i.z = floatBitsToInt(-(intBitsToFloat(PV1i.z)) + intBitsToFloat(uf_remappedPS[3].z));
PV0i.z = R7i.z;
R122i.x = floatBitsToInt((intBitsToFloat(R127i.y) * intBitsToFloat(R127i.y) + intBitsToFloat(PS1i)));
PS0i = R122i.x;
// 3
tempi.x = floatBitsToInt(dot(vec4(-(intBitsToFloat(PV0i.x)),-(intBitsToFloat(PV0i.y)),-(intBitsToFloat(PV0i.z)),-0.0),vec4(intBitsToFloat(uf_remappedPS[0].x),intBitsToFloat(uf_remappedPS[0].y),intBitsToFloat(uf_remappedPS[0].z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R122i.x = floatBitsToInt((intBitsToFloat(R127i.x) * intBitsToFloat(R127i.x) + intBitsToFloat(PS0i)));
PS1i = R122i.x;
// 4
R126i.x = floatBitsToInt(intBitsToFloat(PV1i.x) * intBitsToFloat(R2i.y));
R126i.x = clampFI32(R126i.x);
PV0i.x = R126i.x;
tempResultf = 1.0 / sqrt(intBitsToFloat(PS1i));
PS0i = floatBitsToInt(tempResultf);
// 5
R7i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(PS0i)));
R8i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), intBitsToFloat(PS0i)));
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].y),intBitsToFloat(PV0i.x)) + intBitsToFloat(uf_remappedPS[3].y)));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].x),intBitsToFloat(PV0i.x)) + intBitsToFloat(uf_remappedPS[3].x)));
PV1i.w = R123i.w;
R8i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(PS0i)));
PS1i = R8i.z;
// 6
backupReg0i = R126i.x;
R126i.x = floatBitsToInt(intBitsToFloat(R126i.y) + -(intBitsToFloat(PV1i.w)));
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].z),intBitsToFloat(backupReg0i)) + intBitsToFloat(uf_remappedPS[3].z)));
PV0i.y = R123i.y;
R127i.z = floatBitsToInt(intBitsToFloat(R125i.x) + -(intBitsToFloat(PV1i.z)));
// 7
backupReg0i = R126i.z;
R126i.z = floatBitsToInt(intBitsToFloat(backupReg0i) + -(intBitsToFloat(PV0i.y)));
PV1i.z = R126i.z;
// 8
tempi.x = floatBitsToInt(dot(vec4(-(intBitsToFloat(R126i.x)),-(intBitsToFloat(R127i.z)),-(intBitsToFloat(PV1i.z)),-0.0),vec4(-(intBitsToFloat(R126i.x)),-(intBitsToFloat(R127i.z)),-(intBitsToFloat(PV1i.z)),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R7i.w = tempi.x;
// 9
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.x));
PS1i = floatBitsToInt(tempResultf);
// 10
R6i.x = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(R126i.x)), intBitsToFloat(PS1i)));
R6i.y = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(R127i.z)), intBitsToFloat(PS1i)));
R6i.z = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(R126i.z)), intBitsToFloat(PS1i)));
R5i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(uf_remappedPS[4].w)));
PV0i.w = R5i.w;
// 11
R6i.w = floatBitsToInt(1.0 / intBitsToFloat(PV0i.w));
PS1i = R6i.w;
// 12
predResult = (intBitsToFloat(R5i.w) > 1.0);
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
PV0i.x = floatBitsToInt(intBitsToFloat(uf_remappedPS[0].z) + intBitsToFloat(R6i.z));
PV0i.z = floatBitsToInt(intBitsToFloat(uf_remappedPS[0].y) + intBitsToFloat(R6i.y));
PV0i.w = floatBitsToInt(intBitsToFloat(uf_remappedPS[0].x) + intBitsToFloat(R6i.x));
R1i.w = 0x3f800000;
PS0i = R1i.w;
// 1
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(R6i.w)) + -(intBitsToFloat(uf_remappedPS[0].x))));
PV1i.x = R127i.x;
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(R6i.w)) + -(intBitsToFloat(uf_remappedPS[0].y))));
PV1i.y = R127i.y;
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(R6i.w)) + -(intBitsToFloat(uf_remappedPS[0].z))));
PV1i.z = R127i.z;
// 2
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.z),-0.0),vec4(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
// 3
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.x));
PS1i = floatBitsToInt(tempResultf);
// 4
R6i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(PS1i)));
R6i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), intBitsToFloat(PS1i)));
R6i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(PS1i)));
// 5
R5i.w = R1i.w;
}
activeMaskStack[1] = activeMaskStack[1] == false;
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
// 0
R1i.w = R6i.w;
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
// 0
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R7i.x),intBitsToFloat(R8i.y),intBitsToFloat(R8i.z),-0.0),vec4(intBitsToFloat(R6i.x),intBitsToFloat(R6i.y),intBitsToFloat(R6i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R2i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.w),intBitsToFloat(uf_remappedPS[5].x)) + intBitsToFloat(uf_remappedPS[5].y)));
PS0i = R2i.x;
// 1
PV1i.x = floatBitsToInt(max(intBitsToFloat(PV0i.x), -(1.0)));
R3i.y = floatBitsToInt(-(intBitsToFloat(R0i.w)) + 1.0);
PV1i.y = R3i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.x),intBitsToFloat(R1i.x)) + 1.0));
PV1i.z = R123i.z;
R2i.w = floatBitsToInt(-(intBitsToFloat(uf_remappedPS[6].x)) + intBitsToFloat(uf_remappedPS[7].x));
R4i.y = floatBitsToInt(-(intBitsToFloat(uf_remappedPS[6].y)) + intBitsToFloat(uf_remappedPS[7].y));
PS1i = R4i.y;
// 2
R123i.x = floatBitsToInt((intBitsToFloat(PV1i.y) * 0.5 + 0.5));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.y),intBitsToFloat(R1i.y)) + intBitsToFloat(PV1i.z)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.y)) + intBitsToFloat(0x3d4ccccd)));
R123i.z = clampFI32(R123i.z);
PV0i.z = R123i.z;
PV0i.w = floatBitsToInt(min(intBitsToFloat(PV1i.x), 1.0));
R2i.z = 0;
PS0i = R2i.z;
// 3
backupReg0i = R1i.w;
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), intBitsToFloat(PV0i.z)));
PV1i.x = R127i.x;
R2i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(uf_remappedPS[5].z)) + intBitsToFloat(uf_remappedPS[5].w)));
R4i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(PV0i.x)));
R4i.z = floatBitsToInt(intBitsToFloat(R4i.z) / 2.0);
PV1i.z = R4i.z;
R1i.w = floatBitsToInt(intBitsToFloat(backupReg0i) * intBitsToFloat(0x40400000));
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.y));
PS1i = floatBitsToInt(tempResultf);
// 4
R4i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(PS1i)));
PV0i.x = R4i.x;
R5i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.y), intBitsToFloat(PS1i)));
PV0i.y = R5i.y;
R5i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.z), intBitsToFloat(PS1i)));
PV0i.z = R5i.z;
R4i.w = floatBitsToInt(intBitsToFloat(PV1i.x) + -(1.0));
R3i.w = floatBitsToInt(-(intBitsToFloat(PV1i.z)) + 1.0);
PS0i = R3i.w;
// 5
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R7i.x),intBitsToFloat(R8i.y),intBitsToFloat(R8i.z),-0.0),vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R6i.y = floatBitsToInt(intBitsToFloat(R127i.x) * intBitsToFloat(0x3ea2f983));
PS1i = R6i.y;
// 6
R0i.x = floatBitsToInt(intBitsToFloat(R6i.w) + intBitsToFloat(0xbf666666));
R0i.y = PV1i.x;
R0i.y = clampFI32(R0i.y);
R0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.w), intBitsToFloat(R5i.w)));
R0i.w = PV1i.x;
R0i.w = floatBitsToInt(intBitsToFloat(R0i.w) * 2.0);
R3i.x = floatBitsToInt(-(intBitsToFloat(R1i.x)) + intBitsToFloat(uf_remappedPS[6].x));
PS0i = R3i.x;
}
if( activeMaskStackC[1] == true ) {
R3i.z = floatBitsToInt(texture(textureUnitPS2, intBitsToFloat(R2i.xy)).x);
}
if( activeMaskStackC[1] == true ) {
// 0
R124i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.x),intBitsToFloat(R0i.w)) + -(intBitsToFloat(R4i.x))));
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R8i.y),intBitsToFloat(R0i.w)) + -(intBitsToFloat(R5i.y))));
R126i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R8i.z),intBitsToFloat(R0i.w)) + -(intBitsToFloat(R5i.z))));
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.y),intBitsToFloat(R3i.w)) + intBitsToFloat(R4i.z)));
PV0i.w = R123i.w;
R126i.x = floatBitsToInt(intBitsToFloat(R0i.x) * intBitsToFloat(0x40a00000));
R126i.x = clampFI32(R126i.x);
PS0i = R126i.x;
// 1
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R5i.x),intBitsToFloat(R7i.y),intBitsToFloat(R7i.z),-0.0),vec4(intBitsToFloat(uf_remappedPS[0].x),intBitsToFloat(uf_remappedPS[0].y),intBitsToFloat(uf_remappedPS[0].z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R127i.y = tempi.x;
R0i.y = floatBitsToInt(1.0 / intBitsToFloat(PV0i.w));
PS1i = R0i.y;
// 2
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(uf_remappedPS[0].x),intBitsToFloat(uf_remappedPS[0].y),intBitsToFloat(uf_remappedPS[0].z),-0.0),vec4(intBitsToFloat(R124i.x),intBitsToFloat(R126i.y),intBitsToFloat(R126i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.w = tempi.x;
R125i.x = floatBitsToInt(1.0 / intBitsToFloat(R1i.w));
PS0i = R125i.x;
// 3
R127i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R5i.x),intBitsToFloat(R7i.y),intBitsToFloat(R7i.z),-0.0),vec4(intBitsToFloat(R124i.x),intBitsToFloat(R126i.y),intBitsToFloat(R126i.z),0.0)));
PV1i.x = R127i.x;
PV1i.y = R127i.x;
PV1i.z = R127i.x;
PV1i.w = R127i.x;
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), intBitsToFloat(PV0i.x)));
PS1i = R127i.z;
// 4
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R5i.x),intBitsToFloat(R7i.y),intBitsToFloat(R7i.z),-0.0),vec4(intBitsToFloat(R5i.x),intBitsToFloat(R7i.y),intBitsToFloat(R7i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
PS0i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), intBitsToFloat(PV1i.x)));
// 5
backupReg0i = R127i.x;
backupReg1i = R127i.z;
R127i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.x)),intBitsToFloat(R127i.w)) + intBitsToFloat(PS0i)));
R125i.y = floatBitsToInt(-(intBitsToFloat(R1i.y)) + intBitsToFloat(uf_remappedPS[6].y));
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.z), intBitsToFloat(R126i.x)));
R123i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(uf_remappedPS[0].w)),intBitsToFloat(backupReg0i)) + intBitsToFloat(backupReg1i)));
PV1i.w = R123i.w;
R127i.w = floatBitsToInt(intBitsToFloat(R3i.y) + intBitsToFloat(R125i.x));
R127i.w = clampFI32(R127i.w);
PS1i = R127i.w;
// 6
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R2i.w),intBitsToFloat(R4i.y),intBitsToFloat(R2i.z),-0.0),vec4(intBitsToFloat(R2i.w),intBitsToFloat(R4i.y),intBitsToFloat(R4i.y),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
PS0i = floatBitsToInt(1.0 / intBitsToFloat(PV1i.w));
// 7
backupReg0i = R127i.x;
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R7i.w), intBitsToFloat(uf_remappedPS[8].y)));
R127i.x = clampFI32(R127i.x);
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.z), intBitsToFloat(uf_remappedPS[9].y)));
R124i.z = ((intBitsToFloat(R2i.x) > intBitsToFloat(uf_remappedPS[9].x))?int(0xFFFFFFFF):int(0x0));
R1i.w = floatBitsToInt(intBitsToFloat(backupReg0i) * intBitsToFloat(PS0i));
PV1i.w = R1i.w;
R126i.w = floatBitsToInt(1.0 / intBitsToFloat(PV0i.x));
PS1i = R126i.w;
// 8
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].x),intBitsToFloat(PV1i.w)) + intBitsToFloat(R5i.x)));
PV0i.x = R126i.x;
R124i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].y),intBitsToFloat(PV1i.w)) + intBitsToFloat(R7i.y)));
PV0i.y = R124i.y;
R0i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].z),intBitsToFloat(PV1i.w)) + intBitsToFloat(R7i.z)));
PV0i.z = R0i.z;
PV0i.w = floatBitsToInt(-(intBitsToFloat(PV1i.w)) + 1.0);
PV0i.w = clampFI32(PV0i.w);
R125i.z = floatBitsToInt(1.0 / intBitsToFloat(R127i.w));
PS0i = R125i.z;
// 9
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R124i.x),intBitsToFloat(R126i.y),intBitsToFloat(R126i.z),-0.0),vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(R127i.z)));
PS1i = R1i.z;
// 10
backupReg0i = R126i.y;
backupReg1i = R125i.z;
backupReg2i = R127i.x;
backupReg2i = R127i.x;
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.x),intBitsToFloat(PV1i.x)) + -(intBitsToFloat(R126i.x))));
PV0i.x = R127i.x;
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(PV1i.x)) + -(intBitsToFloat(R124i.y))));
PV0i.y = R126i.y;
R125i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.z),intBitsToFloat(PV1i.x)) + -(intBitsToFloat(R0i.z))));
PV0i.z = R125i.z;
R5i.w = floatBitsToInt(intBitsToFloat(R3i.y) * intBitsToFloat(backupReg1i));
R126i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(backupReg2i)),intBitsToFloat(backupReg2i)) + 1.0));
PS0i = R126i.z;
// 11
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),-0.0),vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R127i.w = floatBitsToInt(-(intBitsToFloat(uf_remappedPS[6].z)) + intBitsToFloat(uf_remappedPS[7].z));
PS1i = R127i.w;
// 12
tempi.x = floatBitsToInt(dot(vec4(-(intBitsToFloat(R3i.x)),-(intBitsToFloat(R125i.y)),-(intBitsToFloat(R125i.y)),-0.0),vec4(intBitsToFloat(R2i.w),intBitsToFloat(R4i.y),intBitsToFloat(R2i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
PS0i = floatBitsToInt(sqrt(intBitsToFloat(PV1i.x)));
// 13
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(R127i.y)));
R127i.y = floatBitsToInt(max(-(intBitsToFloat(R6i.z)), 0.0));
PV1i.z = floatBitsToInt(intBitsToFloat(PV0i.x) * intBitsToFloat(R126i.w));
PV1i.z = clampFI32(PV1i.z);
R0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.z), intBitsToFloat(R126i.z)));
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PS0i));
// 14
backupReg0i = R124i.z;
PV0i.x = floatBitsToInt(intBitsToFloat(uf_remappedPS[4].w) * intBitsToFloat(PS1i));
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.w),intBitsToFloat(PV1i.z)) + intBitsToFloat(R3i.x)));
PV0i.y = R123i.y;
R124i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.y),intBitsToFloat(PV1i.z)) + intBitsToFloat(R125i.y)));
R126i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.w),intBitsToFloat(PV1i.z)) + intBitsToFloat(uf_remappedPS[6].z)));
R2i.w = ((backupReg0i == 0)?(R3i.z):(PV1i.x));
PS0i = R2i.w;
// 15
backupReg0i = R0i.w;
PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.x) + -(1.0));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(PV0i.y)));
R126i.z = floatBitsToInt(min(intBitsToFloat(R127i.y), 1.0));
PV1i.w = PV0i.x;
PV1i.w = clampFI32(PV1i.w);
R124i.x = floatBitsToInt(-(intBitsToFloat(backupReg0i)) + 1.0);
PS1i = R124i.x;
// 16
backupReg0i = R127i.x;
backupReg1i = R126i.y;
backupReg2i = R125i.z;
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(PV1i.w)) + intBitsToFloat(R126i.x)));
PV0i.x = R127i.x;
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg1i),intBitsToFloat(PV1i.w)) + intBitsToFloat(R124i.y)));
PV0i.y = R126i.y;
R125i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg2i),intBitsToFloat(PV1i.w)) + intBitsToFloat(R0i.z)));
PV0i.z = R125i.z;
R125i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.z),intBitsToFloat(R124i.z)) + intBitsToFloat(PV1i.y)));
R127i.w = floatBitsToInt(1.0 / intBitsToFloat(PV1i.x));
PS0i = R127i.w;
// 17
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),-0.0),vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R124i.z = ((0.0 > intBitsToFloat(PS0i))?int(0xFFFFFFFF):int(0x0));
PS1i = R124i.z;
// 18
PV0i.y = floatBitsToInt(intBitsToFloat(R127i.w) * -(1.0));
R8i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.z),intBitsToFloat(R124i.x)) + intBitsToFloat(R0i.w)));
tempResultf = 1.0 / sqrt(intBitsToFloat(PV1i.x));
PS0i = floatBitsToInt(tempResultf);
// 19
R3i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(PS0i)));
PV1i.x = R3i.x;
R3i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.y), intBitsToFloat(PS0i)));
PV1i.y = R3i.y;
R0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.z), intBitsToFloat(PS0i)));
PV1i.z = R0i.z;
R123i.w = ((R124i.z == 0)?(R127i.w):(PV0i.y));
PV1i.w = R123i.w;
R7i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R126i.w)),intBitsToFloat(R125i.w)) + 1.0));
R7i.w = clampFI32(R7i.w);
PS1i = R7i.w;
// 20
R2i.x = floatBitsToInt(intBitsToFloat(R4i.x) + intBitsToFloat(PV1i.x));
PV0i.x = R2i.x;
R2i.y = floatBitsToInt(intBitsToFloat(R5i.y) + intBitsToFloat(PV1i.y));
PV0i.y = R2i.y;
R3i.z = floatBitsToInt(intBitsToFloat(R5i.z) + intBitsToFloat(PV1i.z));
PV0i.z = R3i.z;
R6i.w = floatBitsToInt(intBitsToFloat(PV1i.w) * intBitsToFloat(0x3dcccccd));
R6i.w = clampFI32(R6i.w);
R2i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[4].x), intBitsToFloat(R2i.w)));
PS0i = R2i.z;
// 21
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),-0.0),vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R4i.y = tempi.x;
R1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[4].y), intBitsToFloat(R2i.w)));
PS1i = R1i.y;
}
if( activeMaskStackC[1] == true ) {
// 0
backupReg0i = R0i.z;
R126i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R7i.x),intBitsToFloat(R8i.y),intBitsToFloat(R8i.z),-0.0),vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(backupReg0i),0.0)));
R126i.x = clampFI32(R126i.x);
PV0i.x = R126i.x;
PV0i.y = R126i.x;
PV0i.z = R126i.x;
PV0i.w = R126i.x;
tempResultf = 1.0 / sqrt(intBitsToFloat(R4i.y));
PS0i = floatBitsToInt(tempResultf);
// 1
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.x), intBitsToFloat(PS0i)));
PV1i.x = R127i.x;
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.y), intBitsToFloat(PS0i)));
PV1i.y = R126i.y;
R125i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(PS0i)));
PV1i.z = R125i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(R3i.w)) + intBitsToFloat(R4i.z)));
PV1i.w = R123i.w;
R124i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[4].z), intBitsToFloat(R2i.w)));
PS1i = R124i.x;
// 2
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R7i.x),intBitsToFloat(R8i.y),intBitsToFloat(R8i.z),-0.0),vec4(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.z),0.0)));
tempi.x = clampFI32(tempi.x);
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.w = floatBitsToInt(1.0 / intBitsToFloat(PV1i.w));
PS0i = R127i.w;
// 3
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R5i.y),intBitsToFloat(R5i.z),-0.0),vec4(intBitsToFloat(R127i.x),intBitsToFloat(R126i.y),intBitsToFloat(R125i.z),0.0)));
tempi.x = clampFI32(tempi.x);
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
PS1i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(PV0i.x)));
// 4
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.y), intBitsToFloat(R127i.w)));
R126i.y = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + 1.0);
PV0i.y = R126i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.w),intBitsToFloat(PS1i)) + 1.0));
PV0i.z = R123i.z;
PV0i.w = floatBitsToInt(intBitsToFloat(R2i.z) * intBitsToFloat(0x3ea2f983));
R125i.z = floatBitsToInt(intBitsToFloat(R1i.y) * intBitsToFloat(0x3ea2f983));
PS0i = R125i.z;
// 5
backupReg0i = R124i.x;
backupReg1i = R0i.w;
R124i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(PV0i.y)));
PV1i.x = R124i.x;
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), intBitsToFloat(PV0i.z)));
R124i.z = floatBitsToInt((intBitsToFloat(R1i.w) * intBitsToFloat(0x41200000) + 1.0));
R124i.z = clampFI32(R124i.z);
PV1i.w = floatBitsToInt(intBitsToFloat(backupReg0i) * intBitsToFloat(0x3ea2f983));
R2i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg1i), intBitsToFloat(PV0i.w)));
PS1i = R2i.x;
// 6
R2i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.w), intBitsToFloat(R125i.z)));
R2i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.w), intBitsToFloat(PV1i.w)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.y), intBitsToFloat(PV1i.x)));
PS0i = floatBitsToInt(1.0 / intBitsToFloat(PV1i.y));
// 7
backupReg0i = R124i.x;
R124i.x = floatBitsToInt(intBitsToFloat(R6i.y) * intBitsToFloat(PS0i));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PV0i.w)));
R2i.w = 0;
// 8
R123i.y = floatBitsToInt((intBitsToFloat(PV1i.z) * intBitsToFloat(0x3f75c28f) + intBitsToFloat(0x3d23d70a)));
PV0i.y = R123i.y;
// 9
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.x), intBitsToFloat(PV0i.y)));
// 10
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(PV1i.z)));
// 11
PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.y) * 0.25);
// 12
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.x), intBitsToFloat(PV1i.x)));
// 13
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.z), intBitsToFloat(PV0i.w)));
// 14
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.w), intBitsToFloat(PV1i.z)));
// 15
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.w), intBitsToFloat(PV0i.y)));
// 16
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[4].z), intBitsToFloat(PV1i.x)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[4].y), intBitsToFloat(PV1i.x)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[4].x), intBitsToFloat(PV1i.x)));
// 17
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R7i.w), intBitsToFloat(PV0i.w)));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R7i.w), intBitsToFloat(PV0i.y)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R7i.w), intBitsToFloat(PV0i.z)));
// 18
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R8i.w), intBitsToFloat(PV1i.w)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R8i.w), intBitsToFloat(PV1i.x)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R8i.w), intBitsToFloat(PV1i.z)));
// 19
R0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.z), intBitsToFloat(PV0i.y)));
R0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.z), intBitsToFloat(PV0i.x)));
R0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.z), intBitsToFloat(PV0i.w)));
// 20
R1i.xyz = ivec3(R2i.x,R2i.y,R2i.z);
R1i.w = R2i.w;
// 21
R2i.xyz = ivec3(R0i.x,R0i.y,R0i.z);
R2i.w = R0i.w;
}
// export
passPixelColor0 = vec4(intBitsToFloat(R1i.x), intBitsToFloat(R1i.y), intBitsToFloat(R1i.z), intBitsToFloat(R1i.w));
passPixelColor1 = vec4(intBitsToFloat(R2i.x), intBitsToFloat(R2i.y), intBitsToFloat(R2i.z), intBitsToFloat(R2i.w));
}
