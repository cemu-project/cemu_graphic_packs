#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// Shader From Intel Flipped Lights
// shader f9fd48fb4ead7fcd
// blue lights on shrine exit to flip
uniform ivec4 uf_remappedPS[8];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0xf5054000 res 640x360x1 dim 1 tm: 4 format 080e compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0xf494a800 res 1280x720x1 dim 1 tm: 4 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 2 2 2 border: 1
layout(location = 1) noperspective in vec4 passParameterSem0;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R122i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R124i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = floatBitsToInt(vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw));
R1i = floatBitsToInt(passParameterSem0);
// 0
backupReg0i = R0i.x;
backupReg1i = R0i.y;
PV0i.x = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(0xbc23d70a));
PV0i.y = uf_remappedPS[0].x;
PV0i.y = floatBitsToInt(intBitsToFloat(PV0i.y) / 2.0);
PV0i.z = floatBitsToInt(intBitsToFloat(backupReg1i) + intBitsToFloat(0xbc23d70a));
R2i.w = 0x3f800000;
R1i.w = uf_remappedPS[0].z;
R1i.w = floatBitsToInt(intBitsToFloat(R1i.w) / 2.0);
PS0i = R1i.w;
// 1
R0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(uf_remappedPS[1].z)));
R0i.y = floatBitsToInt(1-mul_nonIEEE(intBitsToFloat(PV0i.z) - intBitsToFloat(0x40f00000), intBitsToFloat(uf_remappedPS[1].w)));
R1i.z = uf_remappedPS[0].y;
R1i.z = floatBitsToInt(intBitsToFloat(R1i.z) / 2.0);
R4i.w = 0;
R3i.w = floatBitsToInt(1.0 / intBitsToFloat(PV0i.y));
PS1i = R3i.w;
R0i.w = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R0i.xy)).x);
R0i.xyz = floatBitsToInt(texture(textureUnitPS1, intBitsToFloat(R0i.xy)).xyz);
// 0
R126i.x = floatBitsToInt((intBitsToFloat(R0i.x) * 2.0 + -(1.0)));
R125i.y = floatBitsToInt((intBitsToFloat(R0i.y) * 2.0 + -(1.0)));
R124i.z = floatBitsToInt((intBitsToFloat(R0i.z) * 2.0 + -(1.0)));
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].y),intBitsToFloat(R0i.w)) + intBitsToFloat(uf_remappedPS[2].x)));
PV0i.w = R123i.w;
R126i.y = floatBitsToInt(1.0 / intBitsToFloat(R1i.w));
PS0i = R126i.y;
// 1
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), -(intBitsToFloat(PV0i.w))));
PV1i.x = R127i.x;
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.y), -(intBitsToFloat(PV0i.w))));
PV1i.y = R127i.y;
R127i.z = floatBitsToInt(-(intBitsToFloat(PV0i.w)));
PV1i.z = R127i.z;
PV1i.w = uf_remappedPS[3].x;
PV1i.w = floatBitsToInt(intBitsToFloat(PV1i.w) / 2.0);
R125i.z = floatBitsToInt(1.0 / intBitsToFloat(R1i.z));
PS1i = R125i.z;
// 2
R125i.x = floatBitsToInt(dot(vec4(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.z),intBitsToFloat(R2i.w)),vec4(intBitsToFloat(uf_remappedPS[4].x),intBitsToFloat(uf_remappedPS[4].y),intBitsToFloat(uf_remappedPS[4].z),intBitsToFloat(uf_remappedPS[4].w))));
PV0i.x = R125i.x;
PV0i.y = R125i.x;
PV0i.z = R125i.x;
PV0i.w = R125i.x;
R127i.w = floatBitsToInt(1.0 / intBitsToFloat(PV1i.w));
PS0i = R127i.w;
// 3
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(R127i.y),intBitsToFloat(R127i.z),intBitsToFloat(R2i.w)),vec4(intBitsToFloat(uf_remappedPS[5].x),intBitsToFloat(uf_remappedPS[5].y),intBitsToFloat(uf_remappedPS[5].z),intBitsToFloat(uf_remappedPS[5].w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R1i.z = tempi.x;
R126i.z = floatBitsToInt(max(intBitsToFloat(PV0i.x), -(intBitsToFloat(PV0i.x))));
PS1i = R126i.z;
// 4
backupReg0i = R127i.y;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(backupReg0i),intBitsToFloat(R127i.z),intBitsToFloat(R2i.w)),vec4(intBitsToFloat(uf_remappedPS[6].x),intBitsToFloat(uf_remappedPS[6].y),intBitsToFloat(uf_remappedPS[6].z),intBitsToFloat(uf_remappedPS[6].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.y = tempi.x;
R127i.x = floatBitsToInt(max(intBitsToFloat(PV1i.x), -(intBitsToFloat(PV1i.x))));
PS0i = R127i.x;
// 5
PV1i.x = floatBitsToInt(intBitsToFloat(R126i.z) * intBitsToFloat(R3i.w));
PV1i.y = floatBitsToInt(max(intBitsToFloat(PV0i.x), -(intBitsToFloat(PV0i.x))));
PV1i.z = floatBitsToInt(intBitsToFloat(PS0i) * intBitsToFloat(R126i.y));
PV1i.w = uf_remappedPS[3].z;
PV1i.w = floatBitsToInt(intBitsToFloat(PV1i.w) / 2.0);
R124i.y = floatBitsToInt(intBitsToFloat(R126i.z) * intBitsToFloat(R127i.w));
R124i.y = clampFI32(R124i.y);
PS1i = R124i.y;
// 6
PV0i.x = floatBitsToInt(intBitsToFloat(R124i.z) * intBitsToFloat(R124i.z));
R126i.y = floatBitsToInt(max(intBitsToFloat(PV1i.x), intBitsToFloat(PV1i.z)));
PV0i.z = floatBitsToInt(intBitsToFloat(R1i.z) * intBitsToFloat(R1i.z));
R125i.w = floatBitsToInt(intBitsToFloat(PV1i.y) * intBitsToFloat(R125i.z));
R125i.z = floatBitsToInt(1.0 / intBitsToFloat(PV1i.w));
PS0i = R125i.z;
// 7
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R126i.x),intBitsToFloat(R125i.y),intBitsToFloat(PV0i.x),-0.0),vec4(intBitsToFloat(R126i.x),intBitsToFloat(R125i.y),1.0,0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R122i.x = floatBitsToInt((intBitsToFloat(R127i.y) * intBitsToFloat(R127i.y) + intBitsToFloat(PV0i.z)));
PS1i = R122i.x;
// 8
R1i.x = floatBitsToInt(max(intBitsToFloat(R125i.w), intBitsToFloat(R126i.y)));
PV0i.x = R1i.x;
R1i.y = floatBitsToInt(intBitsToFloat(R127i.x) * intBitsToFloat(R125i.z));
R1i.y = clampFI32(R1i.y);
R123i.z = floatBitsToInt((intBitsToFloat(R125i.x) * intBitsToFloat(R125i.x) + intBitsToFloat(PS1i)));
PV0i.z = R123i.z;
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.w), intBitsToFloat(R125i.w)));
tempResultf = 1.0 / sqrt(intBitsToFloat(PV1i.x));
PS0i = floatBitsToInt(tempResultf);
// 9
backupReg0i = R126i.x;
backupReg1i = R125i.y;
backupReg2i = R124i.z;
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PS0i)));
R125i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg1i), intBitsToFloat(PS0i)));
R124i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg2i), intBitsToFloat(PS0i)));
R124i.w = ((1.0 > intBitsToFloat(PV0i.x))?int(0xFFFFFFFF):int(0x0));
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.z));
PS1i = floatBitsToInt(tempResultf);
// 10
backupReg0i = R125i.x;
R125i.x = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(backupReg0i)), intBitsToFloat(PS1i)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(R1i.x)));
R125i.z = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(R1i.z)), intBitsToFloat(PS1i)));
R127i.w = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(R127i.y)), intBitsToFloat(PS1i)));
R127i.x = floatBitsToInt(1.0 / intBitsToFloat(R126i.y));
PS0i = R127i.x;
// 11
R124i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R126i.x),intBitsToFloat(R125i.y),intBitsToFloat(R124i.z),-0.0),vec4(intBitsToFloat(uf_remappedPS[4].x),intBitsToFloat(uf_remappedPS[4].y),intBitsToFloat(uf_remappedPS[4].z),0.0)));
PV1i.x = R124i.x;
PV1i.y = R124i.x;
PV1i.z = R124i.x;
PV1i.w = R124i.x;
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(PV0i.y)));
PS1i = R126i.y;
// 12
backupReg0i = R125i.x;
backupReg0i = R125i.x;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R126i.x),intBitsToFloat(R125i.y),intBitsToFloat(R124i.z),-0.0),vec4(intBitsToFloat(uf_remappedPS[6].x),intBitsToFloat(uf_remappedPS[6].y),intBitsToFloat(uf_remappedPS[6].z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.y = tempi.x;
R125i.x = floatBitsToInt(((R124i.w == 0)?(intBitsToFloat(backupReg0i)):(-(intBitsToFloat(backupReg0i)))));
PS0i = R125i.x;
// 13
backupReg0i = R124i.z;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R126i.x),intBitsToFloat(R125i.y),intBitsToFloat(backupReg0i),-0.0),vec4(intBitsToFloat(uf_remappedPS[5].x),intBitsToFloat(uf_remappedPS[5].y),intBitsToFloat(uf_remappedPS[5].z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R124i.z = tempi.x;
R125i.y = floatBitsToInt(((R124i.w == 0)?(intBitsToFloat(R127i.w)):(-(intBitsToFloat(R127i.w)))));
PS1i = R125i.y;
// 14
backupReg0i = R127i.x;
backupReg0i = R127i.x;
backupReg0i = R127i.x;
backupReg0i = R127i.x;
backupReg1i = R126i.w;
R127i.x = ((R124i.w == 0)?(backupReg0i):(R126i.y));
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R125i.w)),intBitsToFloat(backupReg0i)) + 1.0));
R123i.y = clampFI32(R123i.y);
PV0i.y = R123i.y;
R123i.z = floatBitsToInt(((R124i.w == 0)?(intBitsToFloat(R125i.z)):(-(intBitsToFloat(R125i.z)))));
PV0i.z = R123i.z;
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(backupReg0i)));
PS0i = floatBitsToInt(1.0 / intBitsToFloat(backupReg1i));
PS0i = clampFI32(PS0i);
// 15
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R124i.x),intBitsToFloat(R127i.y),intBitsToFloat(R124i.z),-0.0),vec4(intBitsToFloat(R125i.x),intBitsToFloat(R125i.y),intBitsToFloat(PV0i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
PS1i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(PV0i.y)));
// 16
backupReg0i = R126i.y;
PV0i.x = floatBitsToInt(intBitsToFloat(R127i.x) + intBitsToFloat(PV1i.x));
PV0i.x = clampFI32(PV0i.x);
R126i.y = ((R124i.w == 0)?(PS1i):(0x3f800000));
R123i.w = ((R124i.w == 0)?(R126i.w):(backupReg0i));
PV0i.w = R123i.w;
// 17
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(PV0i.x)));
PV1i.w = floatBitsToInt(max(intBitsToFloat(R124i.y), intBitsToFloat(R1i.y)));
// 18
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.y), intBitsToFloat(PV1i.x)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(PV1i.w)));
// 19
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(uf_remappedPS[7].x)));
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.z)),intBitsToFloat(PV0i.z)) + 1.0));
PV1i.y = R123i.y;
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(uf_remappedPS[7].y)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(uf_remappedPS[7].z)));
// 20
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.y), intBitsToFloat(PV1i.y)));
R126i.y = floatBitsToInt(intBitsToFloat(PV1i.z) * intBitsToFloat(0x3ea2f983));
R124i.z = floatBitsToInt(intBitsToFloat(PV1i.x) * intBitsToFloat(0x3ea2f983));
R126i.w = floatBitsToInt(intBitsToFloat(PV1i.w) * intBitsToFloat(0x3ea2f983));
// 21
R123i.x = ((R124i.w == 0)?(PV0i.x):(R1i.x));
PV1i.x = R123i.x;
// 22
R4i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(R124i.z)));
R4i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(R126i.y)));
R4i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(R126i.w)));
// export
passPixelColor0 = vec4(intBitsToFloat(R4i.x), intBitsToFloat(R4i.y), intBitsToFloat(R4i.z), intBitsToFloat(R4i.w));
}
