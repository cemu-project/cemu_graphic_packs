#version 420
#extension GL_ARB_texture_gather : enable
// shader f1a49f43d95bec30 //skybox
uniform ivec4 uf_remappedPS[2];
layout(location = 0) out vec4 passPixelColor0;
layout(location = 1) out vec4 passPixelColor1;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
// 0
R1f.x = (intBitsToFloat(uf_remappedPS[0].z) * 0.5 + 0.5);
R0f.y = intBitsToFloat(uf_remappedPS[1].y);
R1f.z = 0.0;
R0f.w = 0.0;
R0f.x = intBitsToFloat(uf_remappedPS[1].x);
PS0f = R0f.x;
// 1
R0f.z = intBitsToFloat(uf_remappedPS[1].z);
PV1f.z = R0f.z;
// 2
R2f.xyz = vec3(R0f.x,R0f.y,PV1f.z);
R2f.w = R0f.w;
// 3
R3f.xyz = vec3(R1f.x,R1f.y,R1f.y);
R3f.w = R1f.z;
// export
passPixelColor0 = vec4(R2f.x*0.9, R2f.y*0.9, R2f.z*1.2, R2f.w)*0.75;
passPixelColor1 = vec4(R3f.x, R3f.y, R3f.z, R3f.w);
}
