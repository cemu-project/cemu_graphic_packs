#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
#ifdef VULKAN
#define ATTR_LAYOUT(__vkSet, __location) layout(set = __vkSet, location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation)
#define SET_POSITION(_v) gl_Position = _v; gl_Position.z = (gl_Position.z + gl_Position.w) / 2.0
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale.xy,gl_FragCoord.zw)
#define gl_VertexID gl_VertexIndex
#define gl_InstanceID gl_InstanceIndex
#else
#define ATTR_LAYOUT(__vkSet, __location) layout(location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation, std140) 
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation)
#define SET_POSITION(_v) gl_Position = _v
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw)
#endif
// This shader was automatically converted to be cross-compatible with Vulkan and OpenGL.

// shader 78a2659662685d55
//specular highlight
TEXTURE_LAYOUT(0, 1, 0) uniform sampler2D textureUnitPS0;
layout(location = 0) in vec4 passParameterSem133;
layout(location = 0) out vec4 passPixelColor0;
#ifdef VULKAN
layout(set = 1, binding = 1) uniform ufBlock
{
uniform vec4 uf_fragCoordScale;
};
#else
uniform vec2 uf_fragCoordScale;
#endif
float scaleFactor = uf_fragCoordScale.x;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R7i = ivec4(0);
ivec4 R8i = ivec4(0);
ivec4 R9i = ivec4(0);
ivec4 R10i = ivec4(0);
ivec4 R11i = ivec4(0);
ivec4 R12i = ivec4(0);
ivec4 R13i = ivec4(0);
ivec4 R14i = ivec4(0);
ivec4 R15i = ivec4(0);
ivec4 R16i = ivec4(0);
ivec4 R17i = ivec4(0);
ivec4 R18i = ivec4(0);
ivec4 R19i = ivec4(0);
ivec4 R20i = ivec4(0);
ivec4 R21i = ivec4(0);
ivec4 R22i = ivec4(0);
ivec4 R23i = ivec4(0);
ivec4 R24i = ivec4(0);
ivec4 R25i = ivec4(0);
ivec4 R122i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R124i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
bool activeMaskStack[2];
bool activeMaskStackC[3];
activeMaskStack[0] = false;
activeMaskStackC[0] = false;
activeMaskStackC[1] = false;
activeMaskStack[0] = true;
activeMaskStackC[0] = true;
activeMaskStackC[1] = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = floatBitsToInt(passParameterSem133);
if( activeMaskStackC[1] == true ) {
// 0
R1i.xyz = floatBitsToInt(vec3(intBitsToFloat(R0i.x),intBitsToFloat(R0i.y),intBitsToFloat(R0i.x)) + vec3(0.0,0.0,intBitsToFloat(0xba99999a))*scaleFactor);
R1i.w = floatBitsToInt(intBitsToFloat(R0i.y) + 0.0);
R2i.x = floatBitsToInt(intBitsToFloat(R0i.x) + intBitsToFloat(0x3a99999a)*scaleFactor);
PS0i = R2i.x;
// 1
R3i.x = floatBitsToInt(intBitsToFloat(R0i.x) + 0.0);
R2i.y = floatBitsToInt(intBitsToFloat(R0i.y) + 0.0);
R3i.zwy = floatBitsToInt(vec3(intBitsToFloat(R0i.y),intBitsToFloat(R0i.x),intBitsToFloat(R0i.y)) + vec3(intBitsToFloat(0xbb088889)*scaleFactor,0.0,intBitsToFloat(0x3b088889)*scaleFactor));
PS1i = R3i.y;
}
if( activeMaskStackC[1] == true ) {
R7i.xyzw = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R1i.xy)).xyzw);
R8i.xyzw = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R1i.zw)).xyzw);
R9i.xyzw = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R2i.xy)).xyzw);
R10i.xyzw = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R3i.xz)).xyzw);
R11i.xyzw = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R3i.wy)).xyzw);
}
if( activeMaskStackC[1] == true ) {
// 0
R127i.x = floatBitsToInt(intBitsToFloat(R8i.w) + intBitsToFloat(R9i.w));
R127i.x = floatBitsToInt(intBitsToFloat(R127i.x) * 2.0);
R127i.y = floatBitsToInt(intBitsToFloat(R8i.z) + intBitsToFloat(R9i.z));
R127i.y = floatBitsToInt(intBitsToFloat(R127i.y) * 2.0);
R127i.z = floatBitsToInt(intBitsToFloat(R8i.y) + intBitsToFloat(R9i.y));
R127i.z = floatBitsToInt(intBitsToFloat(R127i.z) * 2.0);
R127i.w = floatBitsToInt(intBitsToFloat(R8i.x) + intBitsToFloat(R9i.x));
R127i.w = floatBitsToInt(intBitsToFloat(R127i.w) * 2.0);
R3i.x = floatBitsToInt(intBitsToFloat(R0i.x) + intBitsToFloat(0xba4ccccd)*scaleFactor);
PS0i = R3i.x;
// 1
R5i.x = floatBitsToInt(intBitsToFloat(R10i.z) + intBitsToFloat(R11i.z));
R5i.x = floatBitsToInt(intBitsToFloat(R5i.x) * 2.0);
R4i.y = floatBitsToInt(intBitsToFloat(R10i.w) + intBitsToFloat(R11i.w));
R4i.y = floatBitsToInt(intBitsToFloat(R4i.y) * 2.0);
R2i.z = floatBitsToInt(intBitsToFloat(R10i.y) + intBitsToFloat(R11i.y));
R2i.z = floatBitsToInt(intBitsToFloat(R2i.z) * 2.0);
R4i.w = floatBitsToInt(intBitsToFloat(R10i.x) + intBitsToFloat(R11i.x));
R4i.w = floatBitsToInt(intBitsToFloat(R4i.w) * 2.0);
R3i.y = floatBitsToInt(intBitsToFloat(R0i.y) + 0.0);
PS1i = R3i.y;
// 2
R2i.x = floatBitsToInt(intBitsToFloat(R0i.x) + intBitsToFloat(0x3a4ccccd)*scaleFactor);
R2i.y = floatBitsToInt(intBitsToFloat(R0i.y) + 0.0);
R3i.z = floatBitsToInt(intBitsToFloat(R0i.x) + 0.0);
R3i.w = floatBitsToInt(intBitsToFloat(R0i.y) + intBitsToFloat(0xbab60b61)*scaleFactor);
R1i.x = floatBitsToInt(intBitsToFloat(R0i.x) + 0.0);
PS0i = R1i.x;
// 3
R4i.x = floatBitsToInt((intBitsToFloat(R7i.y) * 2.0 + intBitsToFloat(R127i.z)));
R1i.y = floatBitsToInt(intBitsToFloat(R0i.y) + intBitsToFloat(0x3ab60b61)*scaleFactor);
R1i.z = floatBitsToInt((intBitsToFloat(R7i.x) * 2.0 + intBitsToFloat(R127i.w)));
R1i.w = floatBitsToInt((intBitsToFloat(R7i.z) * 2.0 + intBitsToFloat(R127i.y)));
R2i.w = floatBitsToInt((intBitsToFloat(R7i.w) * 2.0 + intBitsToFloat(R127i.x)));
PS1i = R2i.w;
}
if( activeMaskStackC[1] == true ) {
R12i.xyzw = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R3i.xy)).xyzw);
R13i.xyzw = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R2i.xy)).xyzw);
R14i.xyzw = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R3i.zw)).xyzw);
R15i.xyzw = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R1i.xy)).xyzw);
}
if( activeMaskStackC[1] == true ) {
// 0
R124i.x = floatBitsToInt(intBitsToFloat(R1i.z) * intBitsToFloat(0x3e2aaaab));
R127i.y = floatBitsToInt(intBitsToFloat(R12i.z) + intBitsToFloat(R13i.z));
PV0i.z = floatBitsToInt(intBitsToFloat(R12i.y) + intBitsToFloat(R13i.y));
PV0i.w = floatBitsToInt(intBitsToFloat(R12i.x) + intBitsToFloat(R13i.x));
R1i.y = floatBitsToInt(intBitsToFloat(R4i.x) * intBitsToFloat(0x3e2aaaab));
PS0i = R1i.y;
// 1
R123i.x = floatBitsToInt((-(intBitsToFloat(R7i.x)) * 2.0 + intBitsToFloat(PV0i.w)));
PV1i.x = R123i.x;
R126i.y = floatBitsToInt(intBitsToFloat(R14i.z) + intBitsToFloat(R15i.z));
PV1i.z = floatBitsToInt(intBitsToFloat(R14i.y) + intBitsToFloat(R15i.y));
PV1i.w = floatBitsToInt(intBitsToFloat(R14i.x) + intBitsToFloat(R15i.x));
R122i.x = floatBitsToInt((-(intBitsToFloat(R7i.y)) * 2.0 + intBitsToFloat(PV0i.z)));
PS1i = R122i.x;
// 2
PV0i.x = floatBitsToInt(max(intBitsToFloat(PS1i), -(intBitsToFloat(PS1i))));
PV0i.y = floatBitsToInt(max(intBitsToFloat(PV1i.x), -(intBitsToFloat(PV1i.x))));
R123i.z = floatBitsToInt((-(intBitsToFloat(R7i.z)) * 2.0 + intBitsToFloat(R127i.y)));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((-(intBitsToFloat(R7i.x)) * 2.0 + intBitsToFloat(PV1i.w)));
PV0i.w = R123i.w;
R127i.w = floatBitsToInt((-(intBitsToFloat(R7i.y)) * 2.0 + intBitsToFloat(PV1i.z)));
PS0i = R127i.w;
// 3
backupReg0i = R126i.y;
R127i.x = floatBitsToInt(intBitsToFloat(PV0i.y) * 0.5);
R126i.y = floatBitsToInt(intBitsToFloat(PV0i.x) * 0.5);
R123i.z = floatBitsToInt((-(intBitsToFloat(R7i.z)) * 2.0 + intBitsToFloat(backupReg0i)));
PV1i.z = R123i.z;
PV1i.w = floatBitsToInt(max(intBitsToFloat(PV0i.z), -(intBitsToFloat(PV0i.z))));
PS1i = floatBitsToInt(max(intBitsToFloat(PV0i.w), -(intBitsToFloat(PV0i.w))));
// 4
PV0i.x = floatBitsToInt(max(intBitsToFloat(R127i.w), -(intBitsToFloat(R127i.w))));
R127i.y = floatBitsToInt(intBitsToFloat(PS1i) * 0.5);
PV0i.z = floatBitsToInt(intBitsToFloat(PV1i.w) * 0.5);
R127i.w = floatBitsToInt(max(intBitsToFloat(PV1i.z), -(intBitsToFloat(PV1i.z))));
R127i.z = floatBitsToInt(intBitsToFloat(R1i.w) * intBitsToFloat(0x3e2aaaab));
PS0i = R127i.z;
// 5
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(R126i.y),intBitsToFloat(PV0i.z),-0.0),vec4(intBitsToFloat(0x3e991687)*scaleFactor,intBitsToFloat(0x3f1645a2)*scaleFactor,intBitsToFloat(0x3de978d5)*scaleFactor,0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R124i.y = tempi.x;
R126i.y = floatBitsToInt(intBitsToFloat(PV0i.x) * 0.5);
PS1i = R126i.y;
// 6
R127i.x = floatBitsToInt((intBitsToFloat(R7i.x) * 2.0 + intBitsToFloat(R4i.w)));
R125i.y = floatBitsToInt((intBitsToFloat(R7i.y) * 2.0 + intBitsToFloat(R2i.z)));
PV0i.z = floatBitsToInt(intBitsToFloat(R127i.w) * 0.5);
R127i.w = floatBitsToInt(intBitsToFloat(R2i.w) * intBitsToFloat(0x3e2aaaab));
R126i.x = floatBitsToInt((intBitsToFloat(R7i.z) * 2.0 + intBitsToFloat(R5i.x)));
PS0i = R126i.x;
// 7
R125i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.y),intBitsToFloat(R126i.y),intBitsToFloat(PV0i.z),-0.0),vec4(intBitsToFloat(0x3e991687),intBitsToFloat(0x3f1645a2),intBitsToFloat(0x3de978d5),0.0)));
PV1i.x = R125i.x;
PV1i.y = R125i.x;
PV1i.z = R125i.x;
PV1i.w = R125i.x;
R125i.w = floatBitsToInt(-(intBitsToFloat(R7i.x)) + intBitsToFloat(R124i.x));
PS1i = R125i.w;
// 8
backupReg0i = R127i.x;
backupReg1i = R124i.y;
R127i.x = floatBitsToInt(intBitsToFloat(backupReg0i) * intBitsToFloat(0x3e2aaaab));
R124i.y = floatBitsToInt(intBitsToFloat(R125i.y) * intBitsToFloat(0x3e2aaaab));
R125i.z = floatBitsToInt(intBitsToFloat(R126i.x) * intBitsToFloat(0x3e2aaaab));
R123i.w = floatBitsToInt((intBitsToFloat(R7i.w) * 2.0 + intBitsToFloat(R4i.y)));
PV0i.w = R123i.w;
R126i.w = floatBitsToInt((intBitsToFloat(backupReg1i) * intBitsToFloat(0x40400000) + -(intBitsToFloat(0x3dcccccd)*scaleFactor)));
PS0i = R126i.w;
// 9
backupReg0i = R125i.x;
backupReg1i = R127i.w;
R125i.x = floatBitsToInt(-(intBitsToFloat(R7i.y)) + intBitsToFloat(R1i.y));
R125i.y = floatBitsToInt(-(intBitsToFloat(R7i.z)) + intBitsToFloat(R127i.z));
R124i.z = floatBitsToInt(intBitsToFloat(PV0i.w) * intBitsToFloat(0x3e2aaaab));
R127i.w = floatBitsToInt((intBitsToFloat(backupReg0i) * intBitsToFloat(0x40400000) + -(intBitsToFloat(0x3dcccccd)*scaleFactor)));
R126i.z = floatBitsToInt(-(intBitsToFloat(R7i.w)) + intBitsToFloat(backupReg1i));
PS1i = R126i.z;
// 10
backupReg0i = R0i.y;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(R124i.y),intBitsToFloat(R125i.z),-0.0),vec4(intBitsToFloat(0x3e991687)*scaleFactor,intBitsToFloat(0x3f1645a2)*scaleFactor,intBitsToFloat(0x3de978d5)*scaleFactor,0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R4i.y = floatBitsToInt(intBitsToFloat(backupReg0i) + 0.0);
PS0i = R4i.y;
// 11
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R124i.x),intBitsToFloat(R1i.y),intBitsToFloat(R127i.z),-0.0),vec4(intBitsToFloat(0x3e991687)*scaleFactor,intBitsToFloat(0x3f1645a2)*scaleFactor,intBitsToFloat(0x3de978d5)*scaleFactor,0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PV0i.x));
// 12
R124i.x = floatBitsToInt(intBitsToFloat(R126i.w) * intBitsToFloat(PS1i));
R124i.x = clampFI32(R124i.x);
R1i.y = floatBitsToInt(intBitsToFloat(R0i.y) + 0.0);
R4i.z = floatBitsToInt(intBitsToFloat(R0i.x) + intBitsToFloat(0x3b333333)*scaleFactor);
R1i.w = floatBitsToInt(intBitsToFloat(R0i.x) + intBitsToFloat(0x3b8ccccd)*scaleFactor);
PS0i = floatBitsToInt(1.0 / intBitsToFloat(PV1i.x));
// 13
backupReg0i = R0i.x;
backupReg0i = R0i.x;
PV1i.x = floatBitsToInt(intBitsToFloat(R127i.w) * intBitsToFloat(PS0i));
PV1i.x = clampFI32(PV1i.x);
R2i.y = floatBitsToInt(intBitsToFloat(R0i.y) + 0.0);
R2i.z = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(0x3bc00000)*scaleFactor);
R3i.w = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(0xbb333333)*scaleFactor);
R3i.y = floatBitsToInt(intBitsToFloat(R0i.y) + 0.0);
PS1i = R3i.y;
// 14
backupReg0i = R125i.x;
backupReg1i = R125i.w;
R125i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.y),intBitsToFloat(PV1i.x)) + intBitsToFloat(R7i.z)));
PV0i.x = R125i.x;
R125i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.z),intBitsToFloat(PV1i.x)) + intBitsToFloat(R7i.w)));
PV0i.y = R125i.y;
R126i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(PV1i.x)) + intBitsToFloat(R7i.y)));
PV0i.z = R126i.z;
R125i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg1i),intBitsToFloat(PV1i.x)) + intBitsToFloat(R7i.x)));
PV0i.w = R125i.w;
R5i.x = floatBitsToInt(intBitsToFloat(R0i.x) + intBitsToFloat(0xbb8ccccd)*scaleFactor);
PS0i = R5i.x;
// 15
backupReg0i = R0i.y;
PV1i.x = floatBitsToInt(intBitsToFloat(R125i.z) + -(intBitsToFloat(PV0i.x)));
PV1i.x = floatBitsToInt(intBitsToFloat(PV1i.x) / 2.0);
PV1i.y = floatBitsToInt(intBitsToFloat(R124i.z) + -(intBitsToFloat(PV0i.y)));
PV1i.y = floatBitsToInt(intBitsToFloat(PV1i.y) / 2.0);
PV1i.z = floatBitsToInt(intBitsToFloat(R124i.y) + -(intBitsToFloat(PV0i.z)));
PV1i.z = floatBitsToInt(intBitsToFloat(PV1i.z) / 2.0);
PV1i.w = floatBitsToInt(intBitsToFloat(R127i.x) + -(intBitsToFloat(PV0i.w)));
PV1i.w = floatBitsToInt(intBitsToFloat(PV1i.w) / 2.0);
R5i.y = floatBitsToInt(intBitsToFloat(backupReg0i) + 0.0);
PS1i = R5i.y;
// 16
R16i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.w),intBitsToFloat(R124i.x)) + intBitsToFloat(R125i.w)));
R16i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),intBitsToFloat(R124i.x)) + intBitsToFloat(R126i.z)));
R16i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),intBitsToFloat(R124i.x)) + intBitsToFloat(R125i.x)));
R16i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.y),intBitsToFloat(R124i.x)) + intBitsToFloat(R125i.y)));
R6i.x = floatBitsToInt(intBitsToFloat(R0i.x) + intBitsToFloat(0xbbc00000)*scaleFactor);
PS0i = R6i.x;
}
if( activeMaskStackC[1] == true ) {
R17i.xyzw = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R4i.zy)).xyzw);
R18i.xyzw = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R1i.wy)).xyzw);
R19i.xyzw = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R2i.zy)).xyzw);
R20i.xyzw = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R3i.wy)).xyzw);
R21i.xyzw = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R5i.xy)).xyzw);
}
if( activeMaskStackC[1] == true ) {
// 0
R5i.x = floatBitsToInt(intBitsToFloat(R0i.x) + 0.0);
R6i.y = floatBitsToInt(intBitsToFloat(R0i.y) + 0.0);
R5i.z = floatBitsToInt(intBitsToFloat(R0i.y) + intBitsToFloat(0x3b9f49f5)*scaleFactor);
PV0i.w = floatBitsToInt(intBitsToFloat(R9i.w) + intBitsToFloat(R17i.w));
R3i.x = floatBitsToInt(intBitsToFloat(R0i.x) + 0.0);
PS0i = R3i.x;
// 1
R1i.x = floatBitsToInt(intBitsToFloat(R0i.x) + 0.0);
R3i.y = floatBitsToInt(intBitsToFloat(R0i.y) + intBitsToFloat(0x3bfa4fa5)*scaleFactor);
R2i.z = floatBitsToInt(intBitsToFloat(R18i.w) + intBitsToFloat(PV0i.w));
R1i.w = floatBitsToInt(intBitsToFloat(R0i.y) + intBitsToFloat(0x3c2aaaab)*scaleFactor);
R4i.x = floatBitsToInt(intBitsToFloat(R0i.x) + 0.0);
PS1i = R4i.x;
}
if( activeMaskStackC[1] == true ) {
R22i.xyzw = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R6i.xy)).xyzw);
R6i.xyzw = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R5i.xz)).xyzw);
R3i.xyzw = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R3i.xy)).xyzw);
R23i.xyzw = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R1i.xw)).xyzw);
}
if( activeMaskStackC[1] == true ) {
// 0
backupReg0i = R0i.y;
backupReg1i = R0i.x;
backupReg0i = R0i.y;
PV0i.x = floatBitsToInt(intBitsToFloat(R11i.w) + intBitsToFloat(R6i.w));
PV0i.y = floatBitsToInt(intBitsToFloat(R19i.w) + intBitsToFloat(R2i.z));
R4i.z = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(0xbb9f49f5)*scaleFactor);
R1i.w = floatBitsToInt(intBitsToFloat(backupReg1i) + 0.0);
R1i.y = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(0xbbfa4fa5)*scaleFactor);
PS0i = R1i.y;
// 1
backupReg0i = R3i.w;
R1i.x = floatBitsToInt(intBitsToFloat(R8i.w) + intBitsToFloat(PV0i.y));
R2i.y = floatBitsToInt(intBitsToFloat(R0i.y) + intBitsToFloat(0xbc2aaaab)*scaleFactor);
R2i.z = floatBitsToInt(intBitsToFloat(R0i.x) + 0.0);
R3i.w = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(PV0i.x));
}
if( activeMaskStackC[1] == true ) {
R4i.xyzw = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R4i.xz)).xyzw);
R5i.xyzw = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R1i.wy)).xyzw);
R24i.xyzw = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R2i.zy)).xyzw);
}
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
PV0i.z = floatBitsToInt(intBitsToFloat(R23i.w) + intBitsToFloat(R3i.w));
PV0i.w = floatBitsToInt(intBitsToFloat(R20i.w) + intBitsToFloat(R1i.x));
// 1
PV1i.y = floatBitsToInt(intBitsToFloat(R10i.w) + intBitsToFloat(PV0i.z));
PV1i.z = floatBitsToInt(intBitsToFloat(R21i.w) + intBitsToFloat(PV0i.w));
// 2
PV0i.x = floatBitsToInt(intBitsToFloat(R4i.w) + intBitsToFloat(PV1i.y));
PV0i.y = floatBitsToInt(intBitsToFloat(R22i.w) + intBitsToFloat(PV1i.z));
// 3
PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.y) * intBitsToFloat(0x3e000000));
PV1i.x = floatBitsToInt(intBitsToFloat(PV1i.x) * 2.0);
PV1i.w = floatBitsToInt(intBitsToFloat(R5i.w) + intBitsToFloat(PV0i.x));
// 4
PV0i.y = floatBitsToInt(intBitsToFloat(R24i.w) + intBitsToFloat(PV1i.w));
R0i.z = floatBitsToInt(intBitsToFloat(PV1i.x) + -(1.0));
R0i.z = clampFI32(R0i.z);
// 5
PV1i.z = floatBitsToInt(intBitsToFloat(PV0i.y) * intBitsToFloat(0x3e000000));
PV1i.z = floatBitsToInt(intBitsToFloat(PV1i.z) * 2.0);
// 6
R25i.x = floatBitsToInt(intBitsToFloat(PV1i.z) + -(1.0));
R25i.x = clampFI32(R25i.x);
PV0i.x = R25i.x;
// 7
PV1i.x = floatBitsToInt(intBitsToFloat(R0i.z) + -(intBitsToFloat(PV0i.x)));
// 8
R1i.y = floatBitsToInt(max(intBitsToFloat(PV1i.x), -(intBitsToFloat(PV1i.x))));
// 9
predResult = (intBitsToFloat(R1i.y) > intBitsToFloat(0x3e4ccccd));
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
PV0i.x = floatBitsToInt(intBitsToFloat(R11i.x) + intBitsToFloat(R6i.x));
R124i.y = floatBitsToInt(intBitsToFloat(R7i.w) + -(intBitsToFloat(R12i.w)));
PV0i.z = floatBitsToInt(intBitsToFloat(R11i.z) + intBitsToFloat(R6i.z));
PV0i.w = floatBitsToInt(intBitsToFloat(R11i.y) + intBitsToFloat(R6i.y));
R2i.y = floatBitsToInt(intBitsToFloat(R7i.w) + -(intBitsToFloat(R14i.w)));
PS0i = R2i.y;
// 1
PV1i.x = floatBitsToInt(intBitsToFloat(R3i.y) + intBitsToFloat(PV0i.w));
PV1i.y = floatBitsToInt(intBitsToFloat(R3i.x) + intBitsToFloat(PV0i.x));
PV1i.z = floatBitsToInt(intBitsToFloat(R9i.x) + intBitsToFloat(R17i.x));
PV1i.w = floatBitsToInt(intBitsToFloat(R3i.z) + intBitsToFloat(PV0i.z));
R127i.x = floatBitsToInt(intBitsToFloat(R9i.y) + intBitsToFloat(R17i.y));
PS1i = R127i.x;
// 2
PV0i.x = floatBitsToInt(intBitsToFloat(R23i.z) + intBitsToFloat(PV1i.w));
PV0i.y = floatBitsToInt(intBitsToFloat(R23i.y) + intBitsToFloat(PV1i.x));
PV0i.z = floatBitsToInt(intBitsToFloat(R23i.x) + intBitsToFloat(PV1i.y));
PV0i.w = floatBitsToInt(intBitsToFloat(R9i.z) + intBitsToFloat(R17i.z));
R127i.z = floatBitsToInt(intBitsToFloat(R18i.x) + intBitsToFloat(PV1i.z));
PS0i = R127i.z;
// 3
PV1i.x = floatBitsToInt(intBitsToFloat(R18i.z) + intBitsToFloat(PV0i.w));
PV1i.y = floatBitsToInt(intBitsToFloat(R18i.y) + intBitsToFloat(R127i.x));
PV1i.z = floatBitsToInt(intBitsToFloat(R10i.y) + intBitsToFloat(PV0i.y));
PV1i.w = floatBitsToInt(intBitsToFloat(R10i.x) + intBitsToFloat(PV0i.z));
R127i.y = floatBitsToInt(intBitsToFloat(R10i.z) + intBitsToFloat(PV0i.x));
PS1i = R127i.y;
// 4
PV0i.x = floatBitsToInt(intBitsToFloat(R4i.x) + intBitsToFloat(PV1i.w));
PV0i.y = floatBitsToInt(intBitsToFloat(R19i.z) + intBitsToFloat(PV1i.x));
PV0i.z = floatBitsToInt(intBitsToFloat(R19i.y) + intBitsToFloat(PV1i.y));
PV0i.w = floatBitsToInt(intBitsToFloat(R19i.x) + intBitsToFloat(R127i.z));
R127i.w = floatBitsToInt(intBitsToFloat(R4i.y) + intBitsToFloat(PV1i.z));
PS0i = R127i.w;
// 5
PV1i.x = floatBitsToInt(intBitsToFloat(R8i.x) + intBitsToFloat(PV0i.w));
PV1i.y = floatBitsToInt(intBitsToFloat(R8i.z) + intBitsToFloat(PV0i.y));
PV1i.z = floatBitsToInt(intBitsToFloat(R4i.z) + intBitsToFloat(R127i.y));
PV1i.w = floatBitsToInt(intBitsToFloat(R8i.y) + intBitsToFloat(PV0i.z));
R127i.y = floatBitsToInt(intBitsToFloat(R5i.x) + intBitsToFloat(PV0i.x));
PS1i = R127i.y;
// 6
PV0i.x = floatBitsToInt(intBitsToFloat(R5i.y) + intBitsToFloat(R127i.w));
PV0i.y = floatBitsToInt(intBitsToFloat(R20i.x) + intBitsToFloat(PV1i.x));
PV0i.z = floatBitsToInt(intBitsToFloat(R20i.y) + intBitsToFloat(PV1i.w));
PV0i.w = floatBitsToInt(intBitsToFloat(R5i.z) + intBitsToFloat(PV1i.z));
R127i.w = floatBitsToInt(intBitsToFloat(R20i.z) + intBitsToFloat(PV1i.y));
PS0i = R127i.w;
// 7
PV1i.x = floatBitsToInt(intBitsToFloat(R21i.x) + intBitsToFloat(PV0i.y));
PV1i.y = floatBitsToInt(intBitsToFloat(R24i.y) + intBitsToFloat(PV0i.x));
PV1i.z = floatBitsToInt(intBitsToFloat(R24i.x) + intBitsToFloat(R127i.y));
PV1i.w = floatBitsToInt(intBitsToFloat(R24i.z) + intBitsToFloat(PV0i.w));
R127i.y = floatBitsToInt(intBitsToFloat(R21i.y) + intBitsToFloat(PV0i.z));
PS1i = R127i.y;
// 8
R127i.x = floatBitsToInt(intBitsToFloat(R21i.z) + intBitsToFloat(R127i.w));
R126i.y = floatBitsToInt(intBitsToFloat(PV1i.z) * intBitsToFloat(0x3e000000));
R127i.z = floatBitsToInt(intBitsToFloat(PV1i.y) * intBitsToFloat(0x3e000000));
R127i.w = floatBitsToInt(intBitsToFloat(PV1i.w) * intBitsToFloat(0x3e000000));
R126i.w = floatBitsToInt(intBitsToFloat(R22i.x) + intBitsToFloat(PV1i.x));
PS0i = R126i.w;
// 9
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R7i.x),intBitsToFloat(R7i.y),intBitsToFloat(R7i.z),-0.0),vec4(intBitsToFloat(0x3e991687)*scaleFactor,intBitsToFloat(0x3f1645a2),intBitsToFloat(0x3de978d5),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R1i.z = tempi.x;
R126i.z = floatBitsToInt(intBitsToFloat(R22i.y) + intBitsToFloat(R127i.y));
PS1i = R126i.z;
// 10
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R12i.x),intBitsToFloat(R12i.y),intBitsToFloat(R12i.z),-0.0),vec4(intBitsToFloat(0x3e991687)*scaleFactor,intBitsToFloat(0x3f1645a2),intBitsToFloat(0x3de978d5),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R125i.y = tempi.x;
R127i.y = floatBitsToInt(intBitsToFloat(R22i.z) + intBitsToFloat(R127i.x));
PS0i = R127i.y;
// 11
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R126i.y),intBitsToFloat(R127i.z),intBitsToFloat(R127i.w),-0.0),vec4(intBitsToFloat(0x3e991687)*scaleFactor,intBitsToFloat(0x3f1645a2),intBitsToFloat(0x3de978d5),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R127i.w = tempi.x;
PS1i = floatBitsToInt(intBitsToFloat(R1i.z) + -(intBitsToFloat(PV0i.x)));
// 12
backupReg0i = R127i.y;
R127i.x = floatBitsToInt(intBitsToFloat(R126i.w) * intBitsToFloat(0x3e000000));
R127i.y = floatBitsToInt(intBitsToFloat(R126i.z) * intBitsToFloat(0x3e000000));
R126i.z = floatBitsToInt(intBitsToFloat(backupReg0i) * intBitsToFloat(0x3e000000));
PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.x) + -(intBitsToFloat(R125i.y)));
PS0i = floatBitsToInt(1.0 / intBitsToFloat(PS1i));
// 13
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R14i.x),intBitsToFloat(R14i.y),intBitsToFloat(R14i.z),-0.0),vec4(intBitsToFloat(0x3e991687)*scaleFactor,intBitsToFloat(0x3f1645a2)*scaleFactor,intBitsToFloat(0x3de978d5)*scaleFactor,0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R126i.w = tempi.x;
R127i.z = floatBitsToInt(intBitsToFloat(PV0i.w) * intBitsToFloat(PS0i));
R127i.z = clampFI32(R127i.z);
PS1i = R127i.z;
// 14
R1i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(R127i.y),intBitsToFloat(R126i.z),-0.0),vec4(intBitsToFloat(0x3e991687)*scaleFactor,intBitsToFloat(0x3f1645a2)*scaleFactor,intBitsToFloat(0x3de978d5)*scaleFactor,0.0)));
PV0i.x = R1i.x;
PV0i.y = R1i.x;
PV0i.z = R1i.x;
PV0i.w = R1i.x;
R127i.x = floatBitsToInt(intBitsToFloat(R1i.z) + -(intBitsToFloat(PV1i.x)));
PS0i = R127i.x;
// 15
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R13i.x),intBitsToFloat(R13i.y),intBitsToFloat(R13i.z),-0.0),vec4(intBitsToFloat(0x3e991687)*scaleFactor,intBitsToFloat(0x3f1645a2)*scaleFactor,intBitsToFloat(0x3de978d5)*scaleFactor,0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R127i.y = floatBitsToInt(intBitsToFloat(PV0i.x) + -(intBitsToFloat(R126i.w)));
PS1i = R127i.y;
// 16
PV0i.x = ((intBitsToFloat(R127i.z) == 0.0)?int(0xFFFFFFFF):int(0x0));
PV0i.y = floatBitsToInt(-(intBitsToFloat(R1i.z)) + intBitsToFloat(PV1i.x));
R126i.z = floatBitsToInt(intBitsToFloat(R7i.x) + -(intBitsToFloat(R12i.x)));
R126i.w = floatBitsToInt(intBitsToFloat(R7i.y) + -(intBitsToFloat(R12i.y)));
PS0i = floatBitsToInt(1.0 / intBitsToFloat(R127i.x));
// 17
backupReg0i = R127i.z;
PV1i.x = floatBitsToInt(intBitsToFloat(R7i.z) + -(intBitsToFloat(R12i.z)));
R1i.y = floatBitsToInt(intBitsToFloat(R7i.x) + -(intBitsToFloat(R14i.x)));
R127i.z = floatBitsToInt(intBitsToFloat(R127i.y) * intBitsToFloat(PS0i));
R127i.z = clampFI32(R127i.z);
R123i.w = ((PV0i.x == 0)?(backupReg0i):(0x3f800000));
PV1i.w = R123i.w;
R125i.w = floatBitsToInt(1.0 / intBitsToFloat(PV0i.y));
PS1i = R125i.w;
// 18
R3i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.w)) + intBitsToFloat(R12i.z)));
R4i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.w),intBitsToFloat(PV1i.w)) + intBitsToFloat(R12i.y)));
R4i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.z),intBitsToFloat(PV1i.w)) + intBitsToFloat(R12i.x)));
R2i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.y),intBitsToFloat(PV1i.w)) + intBitsToFloat(R12i.w)));
R124i.y = floatBitsToInt(intBitsToFloat(R127i.w) + -(intBitsToFloat(R1i.z)));
PS0i = R124i.y;
// 19
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R15i.x),intBitsToFloat(R15i.y),intBitsToFloat(R15i.z),-0.0),vec4(intBitsToFloat(0x3e991687)*scaleFactor,intBitsToFloat(0x3f1645a2)*scaleFactor,intBitsToFloat(0x3de978d5)*scaleFactor,0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
PS1i = ((intBitsToFloat(R127i.z) == 0.0)?int(0xFFFFFFFF):int(0x0));
// 20
R2i.x = floatBitsToInt(-(intBitsToFloat(R1i.z)) + intBitsToFloat(PV1i.x));
R3i.y = ((PS1i == 0)?(R127i.z):(0x3f800000));
R3i.z = floatBitsToInt(intBitsToFloat(R124i.y) * intBitsToFloat(R125i.w));
R3i.z = clampFI32(R3i.z);
R1i.w = floatBitsToInt(intBitsToFloat(R13i.y) + -(intBitsToFloat(R4i.y)));
R2i.z = floatBitsToInt(intBitsToFloat(R13i.w) + -(intBitsToFloat(R2i.w)));
PS0i = R2i.z;
}
if( activeMaskStackC[2] == true ) {
// 0
PV0i.x = floatBitsToInt(intBitsToFloat(R7i.y) + -(intBitsToFloat(R14i.y)));
R124i.y = floatBitsToInt(intBitsToFloat(R13i.x) + -(intBitsToFloat(R4i.z)));
R127i.z = floatBitsToInt(intBitsToFloat(R1i.x) + -(intBitsToFloat(R1i.z)));
R125i.w = floatBitsToInt(intBitsToFloat(R13i.z) + -(intBitsToFloat(R3i.x)));
// 1
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.y),intBitsToFloat(R3i.y)) + intBitsToFloat(R14i.x)));
PV1i.x = R126i.x;
R127i.y = ((1.0 > intBitsToFloat(R3i.z))?int(0xFFFFFFFF):int(0x0));
PV1i.z = floatBitsToInt(intBitsToFloat(R7i.z) + -(intBitsToFloat(R14i.z)));
R126i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(R3i.y)) + intBitsToFloat(R14i.y)));
R127i.w = floatBitsToInt(1.0 / intBitsToFloat(R2i.x));
PS1i = R127i.w;
// 2
backupReg0i = R2i.y;
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.y),intBitsToFloat(R3i.z)) + intBitsToFloat(R4i.z)));
R2i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(R3i.y)) + intBitsToFloat(R14i.w)));
R125i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),intBitsToFloat(R3i.y)) + intBitsToFloat(R14i.z)));
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.w),intBitsToFloat(R3i.z)) + intBitsToFloat(R3i.x)));
PV0i.w = R123i.w;
R125i.w = floatBitsToInt(intBitsToFloat(R15i.x) + -(intBitsToFloat(PV1i.x)));
PS0i = R125i.w;
// 3
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.w),intBitsToFloat(R3i.z)) + intBitsToFloat(R4i.y)));
PV1i.x = R123i.x;
R124i.y = floatBitsToInt(intBitsToFloat(R127i.z) * intBitsToFloat(R127i.w));
R124i.y = clampFI32(R124i.y);
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.z),intBitsToFloat(R3i.z)) + intBitsToFloat(R2i.w)));
PV1i.z = R123i.z;
R127i.w = ((R127i.y == 0)?(R3i.x):(PV0i.w));
// 4
backupReg0i = R127i.y;
backupReg1i = R127i.x;
backupReg0i = R127i.y;
R127i.x = ((R127i.y == 0)?(R4i.y):(PV1i.x));
R127i.y = ((backupReg0i == 0)?(R4i.z):(backupReg1i));
R127i.z = ((backupReg0i == 0)?(R2i.w):(PV1i.z));
PV0i.w = floatBitsToInt(intBitsToFloat(R15i.y) + -(intBitsToFloat(R126i.w)));
PS0i = floatBitsToInt(intBitsToFloat(R15i.z) + -(intBitsToFloat(R125i.z)));
// 5
PV1i.x = floatBitsToInt(intBitsToFloat(R15i.w) + -(intBitsToFloat(R2i.y)));
R126i.y = ((1.0 > intBitsToFloat(R124i.y))?int(0xFFFFFFFF):int(0x0));
PV1i.y = R126i.y;
R126i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(R124i.y)) + intBitsToFloat(R126i.w)));
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.w),intBitsToFloat(R124i.y)) + intBitsToFloat(R126i.x)));
PV1i.w = R123i.w;
R125i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PS0i),intBitsToFloat(R124i.y)) + intBitsToFloat(R125i.z)));
PS1i = R125i.y;
// 6
backupReg0i = R127i.z;
backupReg1i = R126i.x;
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),intBitsToFloat(R124i.y)) + intBitsToFloat(R2i.y)));
PV0i.y = floatBitsToInt(-(intBitsToFloat(R16i.z)) + intBitsToFloat(R127i.w));
R127i.z = floatBitsToInt(-(intBitsToFloat(R16i.w)) + intBitsToFloat(backupReg0i));
PV0i.w = floatBitsToInt(-(intBitsToFloat(R16i.x)) + intBitsToFloat(R127i.y));
R127i.w = ((PV1i.y == 0)?(backupReg1i):(PV1i.w));
PS0i = R127i.w;
// 7
backupReg0i = R127i.x;
R127i.x = ((R126i.y == 0)?(R126i.w):(R126i.z));
R123i.y = ((R126i.y == 0)?(R125i.z):(R125i.y));
PV1i.y = R123i.y;
PV1i.z = floatBitsToInt(-(intBitsToFloat(R16i.y)) + intBitsToFloat(backupReg0i));
R126i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(R25i.x)) + intBitsToFloat(R16i.x)));
PV1i.w = R126i.w;
R125i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(R25i.x)) + intBitsToFloat(R16i.z)));
PS1i = R125i.y;
// 8
R123i.x = ((R126i.y == 0)?(R2i.y):(R126i.x));
PV0i.x = R123i.x;
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.z),intBitsToFloat(R25i.x)) + intBitsToFloat(R16i.w)));
PV0i.y = R127i.y;
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),intBitsToFloat(R25i.x)) + intBitsToFloat(R16i.y)));
PV0i.z = R127i.z;
PV0i.w = floatBitsToInt(intBitsToFloat(R127i.w) + -(intBitsToFloat(PV1i.w)));
R126i.y = floatBitsToInt(intBitsToFloat(PV1i.y) + -(intBitsToFloat(PS1i)));
PS0i = R126i.y;
// 9
backupReg0i = R0i.z;
PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.x) + -(intBitsToFloat(PV0i.y)));
PV1i.z = floatBitsToInt(intBitsToFloat(R127i.x) + -(intBitsToFloat(PV0i.z)));
R16i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(backupReg0i)) + intBitsToFloat(R126i.w)));
PS1i = R16i.x;
// 10
R16i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),intBitsToFloat(R0i.z)) + intBitsToFloat(R127i.z)));
R16i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.y),intBitsToFloat(R0i.z)) + intBitsToFloat(R125i.y)));
R16i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),intBitsToFloat(R0i.z)) + intBitsToFloat(R127i.y)));
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
// 0
R1i.x = floatBitsToInt(intBitsToFloat(R0i.x) + intBitsToFloat(0xba99999a)*scaleFactor);
R1i.y = floatBitsToInt(intBitsToFloat(R0i.y) + intBitsToFloat(0xbb088889)*scaleFactor);
R0i.z = floatBitsToInt(intBitsToFloat(R0i.x) + intBitsToFloat(0x3a99999a)*scaleFactor);
R0i.w = floatBitsToInt(intBitsToFloat(R0i.y) + intBitsToFloat(0xbb088889)*scaleFactor);
R2i.x = floatBitsToInt(intBitsToFloat(R0i.x) + intBitsToFloat(0xba99999a)*scaleFactor);
PS0i = R2i.x;
// 1
R3i.x = floatBitsToInt(intBitsToFloat(R0i.x) + intBitsToFloat(0x3a99999a)*scaleFactor);
R2i.y = floatBitsToInt(intBitsToFloat(R0i.y) + intBitsToFloat(0x3b088889)*scaleFactor);
R3i.z = floatBitsToInt(intBitsToFloat(R0i.y) + intBitsToFloat(0x3b088889)*scaleFactor);
R4i.w = floatBitsToInt(intBitsToFloat(R7i.x) + -(intBitsToFloat(R16i.x)));
R1i.z = floatBitsToInt(intBitsToFloat(R7i.y) + -(intBitsToFloat(R16i.y)));
PS1i = R1i.z;
}
if( activeMaskStackC[1] == true ) {
R1i.w = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R1i.xy)).w);
R0i.w = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R0i.zw)).w);
R2i.w = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R2i.xy)).w);
R3i.w = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R3i.xz)).w);
}
if( activeMaskStackC[1] == true ) {
// 0
R127i.x = floatBitsToInt(intBitsToFloat(R7i.z) + -(intBitsToFloat(R16i.z)));
PV0i.y = floatBitsToInt(intBitsToFloat(R1i.w) + intBitsToFloat(R0i.w));
// 1
PV1i.x = floatBitsToInt(intBitsToFloat(R2i.w) + intBitsToFloat(PV0i.y));
R127i.y = floatBitsToInt(intBitsToFloat(R7i.w) + -(intBitsToFloat(R16i.w)));
// 2
PV0i.w = floatBitsToInt(intBitsToFloat(R3i.w) + intBitsToFloat(PV1i.x));
PV0i.w = floatBitsToInt(intBitsToFloat(PV0i.w) * 4.0);
// 3
PV1i.z = floatBitsToInt(intBitsToFloat(R7i.w) + intBitsToFloat(PV0i.w));
// 4
PV0i.y = floatBitsToInt(intBitsToFloat(R10i.w) + intBitsToFloat(PV1i.z));
// 5
PV1i.x = floatBitsToInt(intBitsToFloat(R11i.w) + intBitsToFloat(PV0i.y));
// 6
PV0i.w = floatBitsToInt(intBitsToFloat(R8i.w) + intBitsToFloat(PV1i.x));
// 7
PV1i.z = floatBitsToInt(intBitsToFloat(R9i.w) + intBitsToFloat(PV0i.w));
// 8
PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.z) * intBitsToFloat(0x3d23d70a));
// 9
R123i.x = floatBitsToInt((intBitsToFloat(PV0i.y) * intBitsToFloat(0x40400000) + -(1.5)));
R123i.x = clampFI32(R123i.x);
PV1i.x = R123i.x;
// 10
R1i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.w),intBitsToFloat(PV1i.x)) + intBitsToFloat(R16i.x)));
R1i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.z),intBitsToFloat(PV1i.x)) + intBitsToFloat(R16i.y)));
R1i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.x),intBitsToFloat(PV1i.x)) + intBitsToFloat(R16i.z)));
R1i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.y),intBitsToFloat(PV1i.x)) + intBitsToFloat(R16i.w)));
}
// export
passPixelColor0 = vec4(intBitsToFloat(R1i.x), intBitsToFloat(R1i.y), intBitsToFloat(R1i.z), intBitsToFloat(R1i.w));
}
