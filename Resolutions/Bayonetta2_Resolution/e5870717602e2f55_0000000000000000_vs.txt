#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
#ifdef VULKAN
#define ATTR_LAYOUT(__vkSet, __location) layout(set = __vkSet, location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation)
#define SET_POSITION(_v) gl_Position = _v; gl_Position.z = (gl_Position.z + gl_Position.w) / 2.0
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale.xy,gl_FragCoord.zw)
#define gl_VertexID gl_VertexIndex
#define gl_InstanceID gl_InstanceIndex
#else
#define ATTR_LAYOUT(__vkSet, __location) layout(location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation, std140) 
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation)
#define SET_POSITION(_v) gl_Position = _v
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw)
#endif
// This shader was automatically converted to be cross-compatible with Vulkan and OpenGL.

// shader e5870717602e2f55 //layer blur
const float resScale = float($height)/float($gameHeight);
#ifdef VULKAN
layout(set = 0, binding = 0) uniform ufBlock
{
uniform ivec4 uf_remappedVS[8];
// uniform vec2 uf_windowSpaceToClipSpaceTransform; // Cemu optimized this uf_variable away in Cemu 1.15.7
};
#else
uniform ivec4 uf_remappedVS[8];
// uniform vec2 uf_windowSpaceToClipSpaceTransform; // Cemu optimized this uf_variable away in Cemu 1.15.7
#endif
// uf_windowSpaceToClipSpaceTransform was moved to the ufBlock
ATTR_LAYOUT(0, 0) in uvec4 attrDataSem0;
ATTR_LAYOUT(0, 1) in uvec4 attrDataSem5;
ATTR_LAYOUT(0, 2) in uvec4 attrDataSem16;
out gl_PerVertex
{
	vec4 gl_Position;
	float gl_PointSize;
};
layout(location = 1) out vec4 passParameterSem134;
layout(location = 2) out vec4 passParameterSem135;
layout(location = 3) out vec4 passParameterSem136;
layout(location = 0) out vec4 passParameterSem133;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
uvec4 attrDecoder;
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = floatBitsToInt(ivec4(gl_VertexID, 0, 0, gl_InstanceID));
attrDecoder = attrDataSem0;
attrDecoder = (attrDecoder>>24)|((attrDecoder>>8)&0xFF00)|((attrDecoder<<8)&0xFF0000)|((attrDecoder<<24));
R2f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(int(attrDecoder.z)), intBitsToFloat(int(attrDecoder.w)));
attrDecoder = attrDataSem5;
attrDecoder = (attrDecoder>>24)|((attrDecoder>>8)&0xFF00)|((attrDecoder<<8)&0xFF0000)|((attrDecoder<<24));
R3f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(int(attrDecoder.z)), intBitsToFloat(int(attrDecoder.w)));
attrDecoder = attrDataSem16;
attrDecoder = (attrDecoder>>24)|((attrDecoder>>8)&0xFF00)|((attrDecoder<<8)&0xFF0000)|((attrDecoder<<24));
R1f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(int(attrDecoder.z)), intBitsToFloat(int(attrDecoder.w)));
// 0
R126f.x = 1.0;
R126f.y = mul_nonIEEE(intBitsToFloat(uf_remappedVS[0].x), intBitsToFloat(uf_remappedVS[1].x))/resScale;
R0f.z = 0.0;
R127f.w = 1.0;
PV0f.w = R127f.w;
R0f.w = 1.0;
PS0f = R0f.w;
// 1
R127f.x = dot(vec4(intBitsToFloat(uf_remappedVS[2].x),intBitsToFloat(uf_remappedVS[2].y),intBitsToFloat(uf_remappedVS[2].z),intBitsToFloat(uf_remappedVS[2].w)),vec4(R2f.x,R2f.y,R2f.z,PV0f.w));
PV1f.x = R127f.x;
PV1f.y = R127f.x;
PV1f.z = R127f.x;
PV1f.w = R127f.x;
R6f.x = R3f.x;
PS1f = R6f.x;
// 2
tempf.x = dot(vec4(intBitsToFloat(uf_remappedVS[3].x),intBitsToFloat(uf_remappedVS[3].y),intBitsToFloat(uf_remappedVS[3].z),intBitsToFloat(uf_remappedVS[3].w)),vec4(R2f.x,R2f.y,R2f.z,R127f.w));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R127f.y = tempf.x;
R6f.y = R3f.y;
PS0f = R6f.y;
// 3
tempf.x = dot(vec4(intBitsToFloat(uf_remappedVS[4].x),intBitsToFloat(uf_remappedVS[4].y),intBitsToFloat(uf_remappedVS[4].z),intBitsToFloat(uf_remappedVS[4].w)),vec4(R2f.x,R2f.y,R2f.z,R127f.w));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R127f.z = tempf.x;
// 4
R0f.x = dot(vec4(R127f.x,R127f.y,PV1f.x,R126f.x),vec4(intBitsToFloat(uf_remappedVS[5].x),intBitsToFloat(uf_remappedVS[5].y),intBitsToFloat(uf_remappedVS[5].z),intBitsToFloat(uf_remappedVS[5].w)));
PV0f.x = R0f.x;
PV0f.y = R0f.x;
PV0f.z = R0f.x;
PV0f.w = R0f.x;
// 5
tempf.x = dot(vec4(R127f.x,R127f.y,R127f.z,R126f.x),vec4(intBitsToFloat(uf_remappedVS[6].x),intBitsToFloat(uf_remappedVS[6].y),intBitsToFloat(uf_remappedVS[6].z),intBitsToFloat(uf_remappedVS[6].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R0f.y = tempf.x;
// 6
PV0f.w = mul_nonIEEE(intBitsToFloat(uf_remappedVS[0].y), intBitsToFloat(uf_remappedVS[1].y))/resScale;
// 7
R127f.x = mul_nonIEEE(R126f.y, intBitsToFloat(uf_remappedVS[1].z));
PV1f.x = R127f.x;
R2f.y = mul_nonIEEE(R1f.y, intBitsToFloat(uf_remappedVS[7].y));
R127f.z = mul_nonIEEE(PV0f.w, intBitsToFloat(uf_remappedVS[1].z));
PV1f.z = R127f.z;
R2f.x = mul_nonIEEE(R1f.x, intBitsToFloat(uf_remappedVS[7].x));
PS1f = R2f.x;
// 8
PV0f.x = R3f.y + PV1f.z;
R126f.y = R3f.x + PV1f.x;
R126f.z = PV1f.z * intBitsToFloat(0x40400000);
PV0f.z = R126f.z;
R127f.w = PV1f.x * intBitsToFloat(0x40400000);
PV0f.w = R127f.w;
R126f.w = (PV1f.x * 2.0 + R3f.x);
PS0f = R126f.w;
// 9
R126f.x = R3f.y + PV0f.z;
R127f.y = R3f.x + PV0f.w;
R123f.z = (R127f.z * 2.0 + R3f.y);
PV1f.z = R123f.z;
R4f.w = PV0f.x;
R4f.x = R3f.x + -(R127f.x);
PS1f = R4f.x;
// 10
R5f.x = (-(R127f.x) * 2.0 + R3f.x);
R4f.y = R3f.y + -(R127f.z);
R4f.z = R126f.y;
R5f.w = PV1f.z;
R5f.y = (-(R127f.z) * 2.0 + R3f.y);
PS0f = R5f.y;
// 11
backupReg0f = R3f.x;
backupReg1f = R3f.y;
R3f.x = backupReg0f + -(R127f.w);
R3f.y = backupReg1f + -(R126f.z);
R5f.z = R126f.w;
R3f.w = R126f.x;
R3f.z = R127f.y;
PS1f = R3f.z;
// 12
R2f.z = mul_nonIEEE(R1f.z, intBitsToFloat(uf_remappedVS[7].z));
R2f.w = mul_nonIEEE(R1f.w, intBitsToFloat(uf_remappedVS[7].w));
// export
SET_POSITION(vec4(R0f.x, R0f.y, R0f.z, R0f.w));
// export
// skipped export to semanticId 255
// export
passParameterSem134 = vec4(R4f.x, R4f.y, R4f.z, R4f.w);
// export
passParameterSem135 = vec4(R5f.x, R5f.y, R5f.z, R5f.w);
// export
passParameterSem136 = vec4(R3f.x, R3f.y, R3f.z, R3f.w);
// export
passParameterSem133 = vec4(R6f.x, R6f.y, R6f.z, R6f.z);
// 0
}
