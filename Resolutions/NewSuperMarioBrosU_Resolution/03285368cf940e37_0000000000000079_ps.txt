#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 03285368cf940e37 //box bg

float dither = $dither ;
float scaleShader = $scaleShader;
float scaleBlur = ($scaleBlur); //0.25 4k
int sampleScale = 2;
float lightBloom = 0.95; 


layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0xf4240800 res 1280x720x1 dim 1 tm: 4 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
layout(location = 0) in vec4 passParameterSem3;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;

// FabriceNeyret2 CC, single shader gaussian by intermediate MIPmap level. www.shadertoy.com/view/ltScRG
const int samples = 8 * sampleScale, //8 or 4 balances xy position
LOD = 2,         // gaussian done on MIPmap at scale LOD
sLOD = 1 << LOD; // tile size = 2^LOD
const float sigma = float(samples) * .25;

float gaussian(vec2 i) {
	return exp(-.5* dot(i /= sigma, i)) / (6.28 * sigma*sigma);
}

vec4 blur(sampler2D sp, vec2 U, vec2 scale) {
	vec4 O = vec4(0.0);
	int s = samples / sLOD;

	for (int i = 0; i < s*s; i++) {
		vec2 d = vec2(i%s, i / s)*float(sLOD) - float(samples) / 2.;
		O += gaussian(d) * textureLod(sp, U + scale * d, float(LOD));
	}

	//O / O.a;
	return vec4(O.x, O.y, O.z, 0.0)*17; //16 exact, 17 ~ a touch more haze to compensate res increase
}

int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){return mix(0.0, a*b, (a != 0.0) && (b != 0.0));}
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R123f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem3;

vec2 coord = passParameterSem3.xy*textureSize(textureUnitPS0, 0); //
vec2 ps = vec2(1.0) / textureSize(textureUnitPS0, 0);
vec2 uv = coord * ps;

R1f.xyz = blur(textureUnitPS0, R0f.xy, ps*scaleBlur).xyz; 
R2f.xyz = R1f.xyz;
R3f.xyz = R1f.xyz;
R0f.xyz = R1f.xyz;
/*
R1f.xyz = (texture(textureUnitPS0, R0f.xy).xyz);
R2f.xyz = (texture(textureUnitPS0, R0f.zy).xyz);
R3f.xyz = (texture(textureUnitPS0, R0f.xw).xyz);
R0f.xyz = (texture(textureUnitPS0, R0f.zw).xyz);
*/

// 0
PV0f.x = R1f.z + R2f.z;
PV0f.x /= 2.0;
PV0f.z = R1f.y + R2f.y;
PV0f.z /= 2.0;
PV0f.w = R1f.x + R2f.x;
PV0f.w /= 2.0;
// 1
R123f.x = (R3f.y * 0.5 + PV0f.z);
PV1f.x = R123f.x;
R123f.y = (R3f.x * 0.5 + PV0f.w);
PV1f.y = R123f.y;
R123f.w = (R3f.z * 0.5 + PV0f.x);
PV1f.w = R123f.w;
// 2
backupReg0f = R0f.x;
backupReg1f = R0f.y;
backupReg2f = R0f.z;
R0f.x = (backupReg0f * 0.5 + PV1f.y)/2.0;
R0f.y = (backupReg1f * 0.5 + PV1f.x)/2.0;
R0f.z = (backupReg2f * 0.5 + PV1f.w)/2.0;
// export
passPixelColor0 = vec4(R0f.x, R0f.y, R0f.z, R0f.w);
}
