#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
#ifdef VULKAN
#define ATTR_LAYOUT(__vkSet, __location) layout(set = __vkSet, location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation)
#define SET_POSITION(_v) gl_Position = _v; gl_Position.z = (gl_Position.z + gl_Position.w) / 2.0
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale.xy,gl_FragCoord.zw)
#define gl_VertexID gl_VertexIndex
#define gl_InstanceID gl_InstanceIndex
#else
#define ATTR_LAYOUT(__vkSet, __location) layout(location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation, std140) 
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation)
#define SET_POSITION(_v) gl_Position = _v
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw)
#endif
// This shaders was auto-converted from OpenGL to Cemu.

const float resXScale =  float($width)/float($gameWidth);
const float resYScale = float($height)/float($gameHeight); 
// shader fdb5a87dd0368c6b //shadow scaling
#ifdef VULKAN
layout(set = 1, binding = 4) uniform ufBlock
{
uniform ivec4 uf_remappedPS[23];
uniform vec4 uf_fragCoordScale;
};
#else
uniform ivec4 uf_remappedPS[23];
uniform vec2 uf_fragCoordScale;
#endif
TEXTURE_LAYOUT(0, 1, 0) uniform sampler2D textureUnitPS0;
TEXTURE_LAYOUT(1, 1, 1) uniform sampler2DShadow textureUnitPS1;
TEXTURE_LAYOUT(2, 1, 2) uniform sampler2DShadow textureUnitPS2;
TEXTURE_LAYOUT(3, 1, 3) uniform sampler2DShadow textureUnitPS3;
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 0) out vec4 passPixelColor0;
// uf_fragCoordScale was moved to the ufBlock
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ return min(a*b,min(abs(a)*3.40282347E+38F,abs(b)*3.40282347E+38F)); }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R7i = ivec4(0);
ivec4 R8i = ivec4(0);
ivec4 R9i = ivec4(0);
ivec4 R10i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
bool activeMaskStack[4];
bool activeMaskStackC[5];
activeMaskStack[0] = false;
activeMaskStack[1] = false;
activeMaskStack[2] = false;
activeMaskStackC[0] = false;
activeMaskStackC[1] = false;
activeMaskStackC[2] = false;
activeMaskStackC[3] = false;
activeMaskStack[0] = true;
activeMaskStackC[0] = true;
activeMaskStackC[1] = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = floatBitsToInt(passParameterSem0);
R1i = floatBitsToInt(passParameterSem1);
if( activeMaskStackC[1] == true ) {
R1i.xyz = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R1i.xy)).xyz);
}
if( activeMaskStackC[1] == true ) {
// 0
backupReg0i = R0i.z;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(uf_remappedPS[0].x),intBitsToFloat(uf_remappedPS[0].y),intBitsToFloat(uf_remappedPS[0].z),-0.0),vec4(intBitsToFloat(R1i.x),intBitsToFloat(R1i.y),intBitsToFloat(R1i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R5i.w = tempi.x;
PS0i = floatBitsToInt(1.0 / intBitsToFloat(backupReg0i));
// 1
PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.x) * intBitsToFloat(PS0i));
R6i.y = floatBitsToInt(intBitsToFloat(uf_remappedPS[1].y) * 1.0);
R127i.z = floatBitsToInt(intBitsToFloat(uf_remappedPS[2].y) * 1.0);
R127i.w = floatBitsToInt(intBitsToFloat(uf_remappedPS[2].x) * 1.0);
R4i.x = floatBitsToInt(intBitsToFloat(uf_remappedPS[1].x) * 1.0);
PS1i = R4i.x;
// 2
R5i.x = floatBitsToInt(intBitsToFloat(R0i.x) * intBitsToFloat(PV1i.x));
R7i.y = floatBitsToInt(intBitsToFloat(R0i.y) * intBitsToFloat(PV1i.x));
R5i.z = floatBitsToInt(intBitsToFloat(uf_remappedPS[1].z) * 1.0);
PV0i.w = floatBitsToInt(intBitsToFloat(uf_remappedPS[2].z) * 1.0);
// 3
backupReg0i = R127i.z;
R123i.x = floatBitsToInt((intBitsToFloat(R5i.w) * intBitsToFloat(uf_remappedPS[3].x) + intBitsToFloat(R127i.w)));
PV1i.x = R123i.x;
R127i.z = floatBitsToInt((intBitsToFloat(R5i.w) * intBitsToFloat(uf_remappedPS[3].z) + intBitsToFloat(PV0i.w)));
R123i.w = floatBitsToInt((intBitsToFloat(R5i.w) * intBitsToFloat(uf_remappedPS[3].y) + intBitsToFloat(backupReg0i)));
PV1i.w = R123i.w;
// 4
R127i.x = floatBitsToInt((intBitsToFloat(R7i.y) * intBitsToFloat(uf_remappedPS[4].y) + intBitsToFloat(PV1i.w)));
R127i.y = floatBitsToInt((intBitsToFloat(R7i.y) * intBitsToFloat(uf_remappedPS[4].x) + intBitsToFloat(PV1i.x)));
R126i.z = floatBitsToInt((intBitsToFloat(R5i.w) * intBitsToFloat(uf_remappedPS[5].x) + intBitsToFloat(R4i.x)));
R127i.w = floatBitsToInt((intBitsToFloat(R5i.w) * intBitsToFloat(uf_remappedPS[5].y) + intBitsToFloat(R6i.y)));
// 5
R126i.y = floatBitsToInt((intBitsToFloat(R5i.w) * intBitsToFloat(uf_remappedPS[5].z) + intBitsToFloat(R5i.z)));
R126i.w = floatBitsToInt((intBitsToFloat(R7i.y) * intBitsToFloat(uf_remappedPS[4].z) + intBitsToFloat(R127i.z)));
// 6
backupReg0i = R127i.x;
backupReg1i = R127i.y;
backupReg2i = R127i.w;
R127i.x = floatBitsToInt((intBitsToFloat(R7i.y) * intBitsToFloat(uf_remappedPS[6].x) + intBitsToFloat(R126i.z)));
R127i.y = floatBitsToInt((intBitsToFloat(R5i.x) * intBitsToFloat(uf_remappedPS[7].y) + intBitsToFloat(backupReg0i)));
PV0i.y = R127i.y;
R126i.z = floatBitsToInt((intBitsToFloat(R5i.x) * intBitsToFloat(uf_remappedPS[7].x) + intBitsToFloat(backupReg1i)));
PV0i.z = R126i.z;
R127i.w = floatBitsToInt((intBitsToFloat(R7i.y) * intBitsToFloat(uf_remappedPS[6].y) + intBitsToFloat(backupReg2i)));
// 7
backupReg0i = R126i.y;
backupReg1i = R126i.w;
PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.z) + -(0.5));
R126i.y = floatBitsToInt(intBitsToFloat(PV0i.y) + -(0.5));
R123i.z = floatBitsToInt((intBitsToFloat(R7i.y) * intBitsToFloat(uf_remappedPS[6].z) + intBitsToFloat(backupReg0i)));
PV1i.z = R123i.z;
R126i.w = floatBitsToInt((intBitsToFloat(R5i.x) * intBitsToFloat(uf_remappedPS[7].z) + intBitsToFloat(backupReg1i)));
// 8
R6i.x = floatBitsToInt((intBitsToFloat(R5i.x) * intBitsToFloat(uf_remappedPS[8].x) + intBitsToFloat(R127i.x)));
R5i.y = floatBitsToInt((intBitsToFloat(R5i.x) * intBitsToFloat(uf_remappedPS[8].y) + intBitsToFloat(R127i.w)));
R0i.z = floatBitsToInt((intBitsToFloat(R5i.x) * intBitsToFloat(uf_remappedPS[8].z) + intBitsToFloat(PV1i.z)));
R2i.x = floatBitsToInt(max(intBitsToFloat(PV1i.x), -(intBitsToFloat(PV1i.x))));
PS0i = R2i.x;
// 9
R127i.x = ((0.5 > intBitsToFloat(PS0i))?int(0xFFFFFFFF):int(0x0));
PV1i.y = floatBitsToInt(intBitsToFloat(R126i.w) + intBitsToFloat(uf_remappedPS[9].z) /resXScale);
PV1i.z = floatBitsToInt(intBitsToFloat(R126i.w) + intBitsToFloat(uf_remappedPS[10].z) /resXScale);
R0i.y = floatBitsToInt(max(intBitsToFloat(R126i.y), -(intBitsToFloat(R126i.y))));
PS1i = R0i.y;
// 10
R126i.x = ((0.5 > intBitsToFloat(PS1i))?int(0xFFFFFFFF):int(0x0));
PV0i.y = floatBitsToInt(intBitsToFloat(R126i.w) + intBitsToFloat(uf_remappedPS[11].z) /resXScale);
PV0i.z = floatBitsToInt(intBitsToFloat(R126i.w) + intBitsToFloat(uf_remappedPS[12].z) /resXScale);
R0i.w = PV1i.y;
R0i.w = clampFI32(R0i.w);
R1i.w = PV1i.z;
R1i.w = clampFI32(R1i.w);
PS0i = R1i.w;
// 11
R0i.x = floatBitsToInt(intBitsToFloat(R126i.z) + intBitsToFloat(uf_remappedPS[9].x) /resXScale);
PV1i.y = floatBitsToInt(intBitsToFloat(R0i.z) + intBitsToFloat(uf_remappedPS[13].z) /resXScale);
R0i.z = floatBitsToInt(intBitsToFloat(R127i.y) + intBitsToFloat(uf_remappedPS[9].y) /resXScale);
R2i.w = PV0i.z;
R2i.w = clampFI32(R2i.w);
R3i.w = PV0i.y;
R3i.w = clampFI32(R3i.w);
PS1i = R3i.w;
// 12
R1i.x = floatBitsToInt(intBitsToFloat(R126i.z) + intBitsToFloat(uf_remappedPS[10].x) /resXScale);
R1i.y = floatBitsToInt(intBitsToFloat(R127i.y) + intBitsToFloat(uf_remappedPS[10].y) /resXScale);
R2i.z = floatBitsToInt(intBitsToFloat(R126i.z) + intBitsToFloat(uf_remappedPS[12].x) /resXScale);
R4i.w = PV1i.y;
R4i.w = clampFI32(R4i.w);
R2i.y = floatBitsToInt(intBitsToFloat(R127i.y) + intBitsToFloat(uf_remappedPS[12].y) /resXScale);
PS0i = R2i.y;
// 13
R3i.x = floatBitsToInt(intBitsToFloat(R126i.z) + intBitsToFloat(uf_remappedPS[11].x) /resXScale);
R3i.y = floatBitsToInt(intBitsToFloat(R127i.y) + intBitsToFloat(uf_remappedPS[11].y) /resXScale);
R4i.z = floatBitsToInt(intBitsToFloat(R6i.x) + intBitsToFloat(uf_remappedPS[13].x) /resXScale);
R6i.w = ((R127i.x == 0)?(0):(R126i.x));
R4i.y = floatBitsToInt(intBitsToFloat(R5i.y) + intBitsToFloat(uf_remappedPS[13].y) /resXScale);
PS1i = R4i.y;
}
if( activeMaskStackC[1] == true ) {
R8i.x = floatBitsToInt(texture(textureUnitPS1, vec3(intBitsToFloat(R0i.xz), intBitsToFloat(R0i.w))));
R0i.x = floatBitsToInt(texture(textureUnitPS1, vec3(intBitsToFloat(R1i.xy), intBitsToFloat(R1i.w))));
R9i.x = floatBitsToInt(texture(textureUnitPS1, vec3(intBitsToFloat(R2i.zy), intBitsToFloat(R2i.w))));
R10i.x = floatBitsToInt(texture(textureUnitPS1, vec3(intBitsToFloat(R3i.xy), intBitsToFloat(R3i.w))));
R1i.x = floatBitsToInt(texture(textureUnitPS3, vec3(intBitsToFloat(R4i.zy), intBitsToFloat(R4i.w))));
}
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
R7i.x = floatBitsToInt(intBitsToFloat(uf_remappedPS[14].x) * 1.0);
PV0i.x = R7i.x;
R1i.y = floatBitsToInt(intBitsToFloat(uf_remappedPS[14].y) * 1.0);
PV0i.y = R1i.y;
R2i.z = floatBitsToInt(intBitsToFloat(uf_remappedPS[14].z) * 1.0);
PV0i.z = R2i.z;
// 1
R123i.x = floatBitsToInt((intBitsToFloat(R5i.w) * intBitsToFloat(uf_remappedPS[15].z) + intBitsToFloat(PV0i.z)));
PV1i.x = R123i.x;
R123i.z = floatBitsToInt((intBitsToFloat(R5i.w) * intBitsToFloat(uf_remappedPS[15].y) + intBitsToFloat(PV0i.y)));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((intBitsToFloat(R5i.w) * intBitsToFloat(uf_remappedPS[15].x) + intBitsToFloat(PV0i.x)));
PV1i.w = R123i.w;
// 2
R123i.y = floatBitsToInt((intBitsToFloat(R7i.y) * intBitsToFloat(uf_remappedPS[16].x) + intBitsToFloat(PV1i.w)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((intBitsToFloat(R7i.y) * intBitsToFloat(uf_remappedPS[16].z) + intBitsToFloat(PV1i.x)));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((intBitsToFloat(R7i.y) * intBitsToFloat(uf_remappedPS[16].y) + intBitsToFloat(PV1i.z)));
PV0i.w = R123i.w;
// 3
R3i.x = floatBitsToInt((intBitsToFloat(R5i.x) * intBitsToFloat(uf_remappedPS[17].x) + intBitsToFloat(PV0i.y)));
R3i.y = floatBitsToInt((intBitsToFloat(R5i.x) * intBitsToFloat(uf_remappedPS[17].y) + intBitsToFloat(PV0i.w)));
R0i.z = floatBitsToInt((intBitsToFloat(R5i.x) * intBitsToFloat(uf_remappedPS[17].z) + intBitsToFloat(PV0i.z)));
// 4
predResult = (R6i.w != 0);
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
activeMaskStack[2] = activeMaskStack[1];
activeMaskStackC[3] = activeMaskStackC[2];
// 0
PV0i.z = floatBitsToInt(intBitsToFloat(R8i.x) + intBitsToFloat(R0i.x));
R5i.w = floatBitsToInt(max(intBitsToFloat(R2i.x), intBitsToFloat(R0i.y)));
// 1
PV1i.y = floatBitsToInt(intBitsToFloat(PV0i.z) + intBitsToFloat(R9i.x));
// 2
PV0i.x = floatBitsToInt(intBitsToFloat(PV1i.y) + intBitsToFloat(R10i.x));
// 3
R1i.w = floatBitsToInt(intBitsToFloat(PV0i.x) * 0.25);
// 4
predResult = (intBitsToFloat(R5i.w) > intBitsToFloat(0x3eae147b));
activeMaskStack[2] = predResult;
activeMaskStackC[3] = predResult == true && activeMaskStackC[2] == true;
}
else {
activeMaskStack[2] = false;
activeMaskStackC[3] = false;
}
if( activeMaskStackC[3] == true ) {
// 0
R0i.x = floatBitsToInt(intBitsToFloat(R3i.x) + intBitsToFloat(uf_remappedPS[18].x) /resXScale);
R0i.y = floatBitsToInt(intBitsToFloat(R3i.y) + intBitsToFloat(uf_remappedPS[18].y) /resXScale);
R1i.z = floatBitsToInt(intBitsToFloat(R0i.z) + intBitsToFloat(uf_remappedPS[18].z) /resXScale);
PV0i.z = R1i.z;
// 1
R8i.x = floatBitsToInt(intBitsToFloat(R3i.x) + intBitsToFloat(uf_remappedPS[19].x) /resXScale);
R8i.y = floatBitsToInt(intBitsToFloat(R3i.y) + intBitsToFloat(uf_remappedPS[19].y) /resXScale);
R1i.z = floatBitsToInt(intBitsToFloat(R0i.z) + intBitsToFloat(uf_remappedPS[19].z) /resXScale);
PV1i.z = R1i.z;
R0i.w = PV0i.z;
R0i.w = clampFI32(R0i.w);
// 2
R2i.x = floatBitsToInt(intBitsToFloat(R3i.x) + intBitsToFloat(uf_remappedPS[20].x) /resXScale);
R2i.y = floatBitsToInt(intBitsToFloat(R3i.y) + intBitsToFloat(uf_remappedPS[20].y) /resXScale);
R1i.z = floatBitsToInt(intBitsToFloat(R0i.z) + intBitsToFloat(uf_remappedPS[20].z) /resXScale);
PV0i.z = R1i.z;
R8i.w = PV1i.z;
R8i.w = clampFI32(R8i.w);
// 3
backupReg0i = R3i.x;
backupReg1i = R3i.y;
R3i.x = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(uf_remappedPS[21].x) /resXScale);
R3i.y = floatBitsToInt(intBitsToFloat(backupReg1i) + intBitsToFloat(uf_remappedPS[21].y) /resXScale);
R1i.z = floatBitsToInt(intBitsToFloat(R0i.z) + intBitsToFloat(uf_remappedPS[21].z) /resXScale);
PV1i.z = R1i.z;
R2i.w = PV0i.z;
R2i.w = clampFI32(R2i.w);
// 4
R3i.w = PV1i.z;
R3i.w = clampFI32(R3i.w);
}
if( activeMaskStackC[3] == true ) {
R1i.x = floatBitsToInt(texture(textureUnitPS2, vec3(intBitsToFloat(R0i.xy), intBitsToFloat(R0i.w))));
R0i.x = floatBitsToInt(texture(textureUnitPS2, vec3(intBitsToFloat(R8i.xy), intBitsToFloat(R8i.w))));
R2i.x = floatBitsToInt(texture(textureUnitPS2, vec3(intBitsToFloat(R2i.xy), intBitsToFloat(R2i.w))));
R3i.x = floatBitsToInt(texture(textureUnitPS2, vec3(intBitsToFloat(R3i.xy), intBitsToFloat(R3i.w))));
}
if( activeMaskStackC[3] == true ) {
// 0
PV0i.y = floatBitsToInt(intBitsToFloat(R0i.x) + intBitsToFloat(R1i.x));
PV0i.z = floatBitsToInt(intBitsToFloat(R5i.w) + -(intBitsToFloat(0x3eae147b)));
// 1
PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.y) + intBitsToFloat(R2i.x));
R127i.y = floatBitsToInt(intBitsToFloat(PV0i.z) * intBitsToFloat(0x40c80000));
// 2
PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.x) + intBitsToFloat(R3i.x));
// 3
R123i.x = floatBitsToInt((intBitsToFloat(PV0i.w) * 0.25 + -(intBitsToFloat(R1i.w))));
PV1i.x = R123i.x;
// 4
backupReg0i = R1i.w;
R1i.w = floatBitsToInt((intBitsToFloat(PV1i.x) * intBitsToFloat(R127i.y) + intBitsToFloat(backupReg0i)));
}
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
activeMaskStack[1] = activeMaskStack[1] == false;
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
activeMaskStack[2] = activeMaskStack[1];
activeMaskStackC[3] = activeMaskStackC[2];
// 0
R123i.y = floatBitsToInt((intBitsToFloat(R5i.w) * intBitsToFloat(uf_remappedPS[15].z) + intBitsToFloat(R2i.z)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((intBitsToFloat(R5i.w) * intBitsToFloat(uf_remappedPS[15].y) + intBitsToFloat(R1i.y)));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((intBitsToFloat(R5i.w) * intBitsToFloat(uf_remappedPS[15].x) + intBitsToFloat(R7i.x)));
PV0i.w = R123i.w;
// 1
R123i.x = floatBitsToInt((intBitsToFloat(R7i.y) * intBitsToFloat(uf_remappedPS[16].x) + intBitsToFloat(PV0i.w)));
PV1i.x = R123i.x;
R123i.z = floatBitsToInt((intBitsToFloat(R7i.y) * intBitsToFloat(uf_remappedPS[16].z) + intBitsToFloat(PV0i.y)));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((intBitsToFloat(R7i.y) * intBitsToFloat(uf_remappedPS[16].y) + intBitsToFloat(PV0i.z)));
PV1i.w = R123i.w;
// 2
R3i.x = floatBitsToInt((intBitsToFloat(R5i.x) * intBitsToFloat(uf_remappedPS[17].x) + intBitsToFloat(PV1i.x)));
PV0i.x = R3i.x;
R3i.y = floatBitsToInt((intBitsToFloat(R5i.x) * intBitsToFloat(uf_remappedPS[17].y) + intBitsToFloat(PV1i.w)));
PV0i.y = R3i.y;
R0i.z = floatBitsToInt((intBitsToFloat(R5i.x) * intBitsToFloat(uf_remappedPS[17].z) + intBitsToFloat(PV1i.z)));
// 3
PV1i.z = floatBitsToInt(intBitsToFloat(PV0i.y) + -(0.5));
PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.x) + -(0.5));
// 4
R0i.x = floatBitsToInt(max(intBitsToFloat(PV1i.w), -(intBitsToFloat(PV1i.w))));
PV0i.x = R0i.x;
R0i.y = floatBitsToInt(max(intBitsToFloat(PV1i.z), -(intBitsToFloat(PV1i.z))));
PV0i.y = R0i.y;
// 5
PV1i.x = ((0.5 > intBitsToFloat(PV0i.y))?int(0xFFFFFFFF):int(0x0));
PV1i.y = ((0.5 > intBitsToFloat(PV0i.x))?int(0xFFFFFFFF):int(0x0));
// 6
R0i.w = ((PV1i.y == 0)?(0):(PV1i.x));
// 7
predResult = (R0i.w != 0);
activeMaskStack[2] = predResult;
activeMaskStackC[3] = predResult == true && activeMaskStackC[2] == true;
}
else {
activeMaskStack[2] = false;
activeMaskStackC[3] = false;
}
if( activeMaskStackC[3] == true ) {
// 0
backupReg0i = R0i.z;
R127i.x = floatBitsToInt(intBitsToFloat(R0i.z) + intBitsToFloat(uf_remappedPS[18].z) /resXScale);
PV0i.z = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(uf_remappedPS[19].z) /resXScale);
R6i.w = floatBitsToInt(max(intBitsToFloat(R0i.x), intBitsToFloat(R0i.y)));
// 1
R0i.x = floatBitsToInt(intBitsToFloat(R3i.x) + intBitsToFloat(uf_remappedPS[19].x) /resXScale);
R0i.y = floatBitsToInt(intBitsToFloat(R3i.y) + intBitsToFloat(uf_remappedPS[19].y) /resXScale);
R1i.z = floatBitsToInt(intBitsToFloat(R3i.x) + intBitsToFloat(uf_remappedPS[18].x) /resXScale);
R0i.w = PV0i.z;
R0i.w = clampFI32(R0i.w);
R1i.y = floatBitsToInt(intBitsToFloat(R3i.y) + intBitsToFloat(uf_remappedPS[18].y) /resXScale);
PS1i = R1i.y;
// 2
backupReg0i = R0i.z;
R2i.x = floatBitsToInt(intBitsToFloat(R3i.x) + intBitsToFloat(uf_remappedPS[20].x) /resXScale);
R2i.y = floatBitsToInt(intBitsToFloat(R3i.y) + intBitsToFloat(uf_remappedPS[20].y) /resXScale);
PV0i.z = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(uf_remappedPS[20].z) /resXScale);
R1i.w = R127i.x;
R1i.w = clampFI32(R1i.w);
// 3
backupReg0i = R3i.x;
R3i.x = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(uf_remappedPS[21].x) /resXScale);
PV1i.y = floatBitsToInt(intBitsToFloat(R0i.z) + intBitsToFloat(uf_remappedPS[21].z) /resXScale);
R3i.z = floatBitsToInt(intBitsToFloat(R3i.y) + intBitsToFloat(uf_remappedPS[21].y) /resXScale);
R2i.w = PV0i.z;
R2i.w = clampFI32(R2i.w);
// 4
R3i.w = PV1i.y;
R3i.w = clampFI32(R3i.w);
}
if( activeMaskStackC[3] == true ) {
R0i.x = floatBitsToInt(texture(textureUnitPS2, vec3(intBitsToFloat(R0i.xy), intBitsToFloat(R0i.w))));
R1i.x = floatBitsToInt(texture(textureUnitPS2, vec3(intBitsToFloat(R1i.zy), intBitsToFloat(R1i.w))));
R2i.x = floatBitsToInt(texture(textureUnitPS2, vec3(intBitsToFloat(R2i.xy), intBitsToFloat(R2i.w))));
R3i.x = floatBitsToInt(texture(textureUnitPS2, vec3(intBitsToFloat(R3i.xz), intBitsToFloat(R3i.w))));
}
if( activeMaskStackC[3] == true ) {
activeMaskStack[3] = activeMaskStack[2];
activeMaskStackC[4] = activeMaskStackC[3];
// 0
PV0i.y = floatBitsToInt(intBitsToFloat(R0i.x) + intBitsToFloat(R1i.x));
// 1
PV1i.z = floatBitsToInt(intBitsToFloat(PV0i.y) + intBitsToFloat(R2i.x));
// 2
PV0i.x = floatBitsToInt(intBitsToFloat(PV1i.z) + intBitsToFloat(R3i.x));
// 3
R1i.w = floatBitsToInt(intBitsToFloat(PV0i.x) * 0.25);
// 4
predResult = (intBitsToFloat(R6i.w) > intBitsToFloat(0x3eae147b));
activeMaskStack[3] = predResult;
activeMaskStackC[4] = predResult == true && activeMaskStackC[3] == true;
}
else {
activeMaskStack[3] = false;
activeMaskStackC[4] = false;
}
if( activeMaskStackC[4] == true ) {
// 0
backupReg0i = R4i.x;
R4i.x = floatBitsToInt((intBitsToFloat(R5i.w) * intBitsToFloat(uf_remappedPS[5].x) + intBitsToFloat(backupReg0i)));
PV0i.x = R4i.x;
R1i.y = floatBitsToInt((intBitsToFloat(R5i.w) * intBitsToFloat(uf_remappedPS[5].y) + intBitsToFloat(R6i.y)));
PV0i.y = R1i.y;
R0i.z = floatBitsToInt((intBitsToFloat(R5i.w) * intBitsToFloat(uf_remappedPS[5].z) + intBitsToFloat(R5i.z)));
PV0i.z = R0i.z;
// 1
R4i.x = floatBitsToInt((intBitsToFloat(R7i.y) * intBitsToFloat(uf_remappedPS[6].x) + intBitsToFloat(PV0i.x)));
PV1i.x = R4i.x;
R1i.y = floatBitsToInt((intBitsToFloat(R7i.y) * intBitsToFloat(uf_remappedPS[6].y) + intBitsToFloat(PV0i.y)));
PV1i.y = R1i.y;
R0i.z = floatBitsToInt((intBitsToFloat(R7i.y) * intBitsToFloat(uf_remappedPS[6].z) + intBitsToFloat(PV0i.z)));
PV1i.z = R0i.z;
// 2
R4i.x = floatBitsToInt((intBitsToFloat(R5i.x) * intBitsToFloat(uf_remappedPS[8].x) + intBitsToFloat(PV1i.x)));
PV0i.x = R4i.x;
R1i.y = floatBitsToInt((intBitsToFloat(R5i.x) * intBitsToFloat(uf_remappedPS[8].y) + intBitsToFloat(PV1i.y)));
PV0i.y = R1i.y;
R0i.z = floatBitsToInt((intBitsToFloat(R5i.x) * intBitsToFloat(uf_remappedPS[8].z) + intBitsToFloat(PV1i.z)));
PV0i.z = R0i.z;
// 3
R4i.x = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(uf_remappedPS[13].x) /resXScale);
R4i.y = floatBitsToInt(intBitsToFloat(PV0i.y) + intBitsToFloat(uf_remappedPS[13].y) /resXScale);
R0i.z = floatBitsToInt(intBitsToFloat(PV0i.z) + intBitsToFloat(uf_remappedPS[13].z) /resXScale);
PV1i.z = R0i.z;
// 4
R4i.w = PV1i.z;
R4i.w = clampFI32(R4i.w);
}
if( activeMaskStackC[4] == true ) {
R0i.x = floatBitsToInt(texture(textureUnitPS3, vec3(intBitsToFloat(R4i.xy), intBitsToFloat(R4i.w))));
}
if( activeMaskStackC[4] == true ) {
// 0
R127i.x = floatBitsToInt(-(intBitsToFloat(R1i.w)) + intBitsToFloat(R0i.x));
PV0i.z = floatBitsToInt(intBitsToFloat(R6i.w) + -(intBitsToFloat(0x3eae147b)));
// 1
PV1i.y = floatBitsToInt(intBitsToFloat(PV0i.z) * intBitsToFloat(0x40c80000));
// 2
backupReg0i = R1i.w;
R1i.w = floatBitsToInt((intBitsToFloat(R127i.x) * intBitsToFloat(PV1i.y) + intBitsToFloat(backupReg0i)));
}
activeMaskStackC[3] = activeMaskStack[2] == true && activeMaskStackC[2] == true;
activeMaskStack[2] = activeMaskStack[2] == false;
activeMaskStackC[3] = activeMaskStack[2] == true && activeMaskStackC[2] == true;
if( activeMaskStackC[3] == true ) {
// 0
R127i.x = floatBitsToInt(-(intBitsToFloat(R1i.x)) + 1.0);
PV0i.z = floatBitsToInt(intBitsToFloat(R5i.y) + -(0.5));
PV0i.w = floatBitsToInt(intBitsToFloat(R6i.x) + -(0.5));
// 1
PV1i.x = floatBitsToInt(max(intBitsToFloat(PV0i.z), -(intBitsToFloat(PV0i.z))));
PV1i.y = floatBitsToInt(max(intBitsToFloat(PV0i.w), -(intBitsToFloat(PV0i.w))));
// 2
PV0i.w = floatBitsToInt(max(intBitsToFloat(PV1i.y), intBitsToFloat(PV1i.x)));
// 3
PV1i.z = floatBitsToInt(intBitsToFloat(PV0i.w) + -(intBitsToFloat(0x3ecccccd)));
// 4
PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.z) * intBitsToFloat(0x41200000));
PV0i.y = clampFI32(PV0i.y);
// 5
R1i.w = floatBitsToInt((intBitsToFloat(R127i.x) * intBitsToFloat(PV0i.y) + intBitsToFloat(R1i.x)));
}
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
// 0
R0i.x = floatBitsToInt((intBitsToFloat(R1i.w) * intBitsToFloat(uf_remappedPS[22].x) + intBitsToFloat(uf_remappedPS[22].y) /resXScale));
R0i.w = 0;
}
// export
passPixelColor0 = vec4(intBitsToFloat(R0i.x), intBitsToFloat(R0i.x), intBitsToFloat(R0i.x), intBitsToFloat(R0i.w));
}
