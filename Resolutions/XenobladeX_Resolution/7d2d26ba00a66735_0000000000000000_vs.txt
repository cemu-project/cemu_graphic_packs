#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
#ifdef VULKAN
#define ATTR_LAYOUT(__vkSet, __location) layout(set = __vkSet, location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation)
#define SET_POSITION(_v) gl_Position = _v; gl_Position.z = (gl_Position.z + gl_Position.w) / 2.0
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale.xy,gl_FragCoord.zw)
#define gl_VertexID gl_VertexIndex
#define gl_InstanceID gl_InstanceIndex
#else
#define ATTR_LAYOUT(__vkSet, __location) layout(location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation, std140) 
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation)
#define SET_POSITION(_v) gl_Position = _v
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw)
#endif
// This shaders was auto-converted from OpenGL to Cemu.

// shader 7d2d26ba00a66735
// waterfall cascade
#ifdef VULKAN
layout(set = 0, binding = 0) uniform ufBlock
{
uniform ivec4 uf_remappedVS[27];
// uniform vec2 uf_windowSpaceToClipSpaceTransform; // Cemu optimized this uf_variable away in Cemu 1.15.7
};
#else
uniform ivec4 uf_remappedVS[27];
// uniform vec2 uf_windowSpaceToClipSpaceTransform; // Cemu optimized this uf_variable away in Cemu 1.15.7
#endif
// uf_windowSpaceToClipSpaceTransform was moved to the ufBlock
ATTR_LAYOUT(0, 0) in uvec4 attrDataSem0;
ATTR_LAYOUT(0, 1) in uvec4 attrDataSem1;
ATTR_LAYOUT(0, 2) in uvec4 attrDataSem2;
ATTR_LAYOUT(0, 3) in uvec4 attrDataSem3;
ATTR_LAYOUT(0, 4) in uvec4 attrDataSem4;
ATTR_LAYOUT(0, 5) in uvec4 attrDataSem5;
ATTR_LAYOUT(0, 6) in uvec4 attrDataSem6;
ATTR_LAYOUT(0, 7) in uvec4 attrDataSem7;
ATTR_LAYOUT(0, 8) in uvec4 attrDataSem8;
ATTR_LAYOUT(0, 9) in uvec4 attrDataSem9;
ATTR_LAYOUT(0, 10) in uvec4 attrDataSem10;
ATTR_LAYOUT(0, 11) in uvec4 attrDataSem11;
ATTR_LAYOUT(0, 12) in uvec4 attrDataSem12;
out gl_PerVertex
{
	vec4 gl_Position;
	float gl_PointSize;
};
layout(location = 0) out vec4 passParameterSem0;
layout(location = 1) out vec4 passParameterSem1;
layout(location = 2) out vec4 passParameterSem2;
layout(location = 5) out vec4 passParameterSem5;
layout(location = 3) out vec4 passParameterSem3;
layout(location = 4) out vec4 passParameterSem4;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R7i = ivec4(0);
ivec4 R8i = ivec4(0);
ivec4 R9i = ivec4(0);
ivec4 R10i = ivec4(0);
ivec4 R11i = ivec4(0);
ivec4 R12i = ivec4(0);
ivec4 R13i = ivec4(0);
ivec4 R14i = ivec4(0);
ivec4 R15i = ivec4(0);
ivec4 R16i = ivec4(0);
ivec4 R122i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R124i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
uvec4 attrDecoder;
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
bool activeMaskStack[5];
bool activeMaskStackC[6];
activeMaskStack[0] = false;
activeMaskStack[1] = false;
activeMaskStack[2] = false;
activeMaskStack[3] = false;
activeMaskStackC[0] = false;
activeMaskStackC[1] = false;
activeMaskStackC[2] = false;
activeMaskStackC[3] = false;
activeMaskStackC[4] = false;
activeMaskStack[0] = true;
activeMaskStackC[0] = true;
activeMaskStackC[1] = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = ivec4(gl_VertexID, 0, 0, gl_InstanceID);
attrDecoder.xy = attrDataSem0.xy;
attrDecoder.xy = (attrDecoder.xy>>24)|((attrDecoder.xy>>8)&0xFF00)|((attrDecoder.xy<<8)&0xFF0000)|((attrDecoder.xy<<24));
attrDecoder.z = 0;
attrDecoder.w = 0;
R1i = ivec4(int(attrDecoder.x), int(attrDecoder.y), floatBitsToInt(0.0), floatBitsToInt(1.0));
attrDecoder = attrDataSem1;
attrDecoder = (attrDecoder>>24)|((attrDecoder>>8)&0xFF00)|((attrDecoder<<8)&0xFF0000)|((attrDecoder<<24));
R2i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), int(attrDecoder.w));
attrDecoder = attrDataSem5;
attrDecoder = (attrDecoder>>24)|((attrDecoder>>8)&0xFF00)|((attrDecoder<<8)&0xFF0000)|((attrDecoder<<24));
R6i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), int(attrDecoder.w));
attrDecoder = attrDataSem6;
attrDecoder = (attrDecoder>>24)|((attrDecoder>>8)&0xFF00)|((attrDecoder<<8)&0xFF0000)|((attrDecoder<<24));
R7i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), int(attrDecoder.w));
attrDecoder.xyz = attrDataSem7.xyz;
attrDecoder.xyz = (attrDecoder.xyz>>24)|((attrDecoder.xyz>>8)&0xFF00)|((attrDecoder.xyz<<8)&0xFF0000)|((attrDecoder.xyz<<24));
attrDecoder.w = 0;
R8i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), floatBitsToInt(1.0));
attrDecoder.xyz = attrDataSem4.xyz;
attrDecoder.xyz = (attrDecoder.xyz>>24)|((attrDecoder.xyz>>8)&0xFF00)|((attrDecoder.xyz<<8)&0xFF0000)|((attrDecoder.xyz<<24));
attrDecoder.w = 0;
R5i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), floatBitsToInt(1.0));
attrDecoder = attrDataSem8;
attrDecoder = (attrDecoder>>24)|((attrDecoder>>8)&0xFF00)|((attrDecoder<<8)&0xFF0000)|((attrDecoder<<24));
R9i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), int(attrDecoder.w));
attrDecoder.xy = attrDataSem9.xy;
attrDecoder.xy = (attrDecoder.xy>>24)|((attrDecoder.xy>>8)&0xFF00)|((attrDecoder.xy<<8)&0xFF0000)|((attrDecoder.xy<<24));
attrDecoder.z = 0;
attrDecoder.w = 0;
R10i = ivec4(int(attrDecoder.x), int(attrDecoder.y), floatBitsToInt(0.0), floatBitsToInt(1.0));
attrDecoder = attrDataSem10;
attrDecoder = (attrDecoder>>24)|((attrDecoder>>8)&0xFF00)|((attrDecoder<<8)&0xFF0000)|((attrDecoder<<24));
R11i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), int(attrDecoder.w));
attrDecoder = attrDataSem11;
attrDecoder = (attrDecoder>>24)|((attrDecoder>>8)&0xFF00)|((attrDecoder<<8)&0xFF0000)|((attrDecoder<<24));
R12i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), int(attrDecoder.w));
attrDecoder.xy = attrDataSem12.xy;
attrDecoder.xy = (attrDecoder.xy>>24)|((attrDecoder.xy>>8)&0xFF00)|((attrDecoder.xy<<8)&0xFF0000)|((attrDecoder.xy<<24));
attrDecoder.z = 0;
attrDecoder.w = 0;
R13i = ivec4(int(attrDecoder.x), int(attrDecoder.y), floatBitsToInt(0.0), floatBitsToInt(1.0));
attrDecoder.xy = attrDataSem3.xy;
attrDecoder.xy = (attrDecoder.xy>>24)|((attrDecoder.xy>>8)&0xFF00)|((attrDecoder.xy<<8)&0xFF0000)|((attrDecoder.xy<<24));
attrDecoder.z = 0;
attrDecoder.w = 0;
R4i = ivec4(int(attrDecoder.x), int(attrDecoder.y), floatBitsToInt(0.0), floatBitsToInt(1.0));
attrDecoder.xyzw = floatBitsToUint(vec4(attrDataSem2.xyzw)/255.0);
R3i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), int(attrDecoder.w));
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
R126i.x = floatBitsToInt(max(intBitsToFloat(R5i.x), -(intBitsToFloat(R5i.x))));
PV0i.x = R126i.x;
R123i.y = floatBitsToInt((intBitsToFloat(R7i.x) * intBitsToFloat(0x3e22f983) + 0.5));
PV0i.y = R123i.y;
R126i.z = floatBitsToInt(max(intBitsToFloat(R5i.y), -(intBitsToFloat(R5i.y))));
PV0i.z = R126i.z;
R126i.w = R5i.z;
R127i.z = floatBitsToInt((intBitsToFloat(R7i.y) * intBitsToFloat(0x3e22f983) + 0.5));
PS0i = R127i.z;
// 1
PV1i.x = floatBitsToInt(fract(intBitsToFloat(PV0i.y)));
R123i.y = floatBitsToInt((intBitsToFloat(R7i.z) * intBitsToFloat(0x3e22f983) + 0.5));
PV1i.y = R123i.y;
PV1i.z = floatBitsToInt(intBitsToFloat(uf_remappedVS[0].x) + -(0.5));
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R8i.x), intBitsToFloat(PV0i.x)));
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R8i.y), intBitsToFloat(PV0i.z)));
PS1i = R127i.x;
// 2
R123i.x = floatBitsToInt((intBitsToFloat(PV1i.x) * intBitsToFloat(0x40c90fdb) + -(intBitsToFloat(0x40490fdb))));
PV0i.x = R123i.x;
PV0i.y = floatBitsToInt(fract(intBitsToFloat(R127i.z)));
R127i.z = floatBitsToInt(fract(intBitsToFloat(PV1i.y)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R8i.z), intBitsToFloat(R126i.w)));
R124i.w = ((intBitsToFloat(PV1i.z) >= 0.0)?(floatBitsToInt(1.0)):(0));
PS0i = R124i.w;
// 3
PV1i.x = floatBitsToInt(-(intBitsToFloat(R126i.w)) + intBitsToFloat(PV0i.w));
PV1i.y = floatBitsToInt(-(intBitsToFloat(R126i.z)) + intBitsToFloat(R127i.x));
PV1i.z = floatBitsToInt(-(intBitsToFloat(R126i.x)) + intBitsToFloat(R127i.w));
R5i.w = floatBitsToInt(intBitsToFloat(PV0i.x) * intBitsToFloat(0x3e22f983));
R127i.x = floatBitsToInt((intBitsToFloat(PV0i.y) * intBitsToFloat(0x40c90fdb) + -(intBitsToFloat(0x40490fdb))));
PS1i = R127i.x;
// 4
backupReg0i = R127i.z;
backupReg1i = R126i.x;
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),intBitsToFloat(R124i.w)) + intBitsToFloat(R126i.w)));
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.y),intBitsToFloat(R124i.w)) + intBitsToFloat(R126i.z)));
R127i.z = floatBitsToInt((intBitsToFloat(backupReg0i) * intBitsToFloat(0x40c90fdb) + -(intBitsToFloat(0x40490fdb))));
R126i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),intBitsToFloat(R124i.w)) + intBitsToFloat(backupReg1i)));
R125i.x = R6i.x;
R125i.x = floatBitsToInt(intBitsToFloat(R125i.x) * 2.0);
PS0i = R125i.x;
// 5
R124i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.y), intBitsToFloat(R8i.y)));
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.x), intBitsToFloat(R8i.x)));
R126i.z = R6i.z;
R126i.z = floatBitsToInt(intBitsToFloat(R126i.z) * 2.0);
R127i.w = R6i.y;
R127i.w = floatBitsToInt(intBitsToFloat(R127i.w) * 2.0);
R125i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.z), intBitsToFloat(R8i.z)));
PS1i = R125i.w;
// 6
PV0i.x = R8i.x;
PV0i.x = floatBitsToInt(intBitsToFloat(PV0i.x) / 2.0);
R125i.y = floatBitsToInt(intBitsToFloat(R127i.x) * intBitsToFloat(0x3e22f983));
PV0i.z = 0;
PV0i.w = R8i.y;
PV0i.w = floatBitsToInt(intBitsToFloat(PV0i.w) / 2.0);
R124i.y = floatBitsToInt(intBitsToFloat(R127i.z) * intBitsToFloat(0x3e22f983));
PS0i = R124i.y;
// 7
R0i.x = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(R126i.w));
R0i.y = floatBitsToInt(intBitsToFloat(PV0i.w) + intBitsToFloat(R127i.y));
R7i.z = floatBitsToInt(intBitsToFloat(PV0i.z) + intBitsToFloat(R126i.x));
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.x), intBitsToFloat(R125i.x)));
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.y), intBitsToFloat(R127i.w)));
PS1i = R127i.x;
// 8
R126i.x = R6i.x;
R126i.x = floatBitsToInt(intBitsToFloat(R126i.x) * 2.0);
PV0i.y = R6i.z;
PV0i.y = floatBitsToInt(intBitsToFloat(PV0i.y) * 2.0);
PV0i.z = R6i.y;
PV0i.z = floatBitsToInt(intBitsToFloat(PV0i.z) * 2.0);
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.z), intBitsToFloat(R126i.z)));
R125i.x = R6i.w;
R125i.x = floatBitsToInt(intBitsToFloat(R125i.x) * 2.0);
PS0i = R125i.x;
// 9
backupReg0i = R124i.x;
backupReg1i = R126i.y;
R124i.x = floatBitsToInt(-(intBitsToFloat(R5i.z)) + intBitsToFloat(R125i.w));
R126i.y = floatBitsToInt(-(intBitsToFloat(R5i.y)) + intBitsToFloat(backupReg0i));
PV1i.z = floatBitsToInt(-(intBitsToFloat(R5i.x)) + intBitsToFloat(backupReg1i));
R0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.z), intBitsToFloat(PV0i.z)));
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.x), intBitsToFloat(PV0i.y)));
PS1i = R127i.z;
// 10
backupReg0i = R0i.x;
backupReg0i = R0i.x;
backupReg1i = R0i.y;
backupReg1i = R0i.y;
R0i.x = floatBitsToInt(dot(vec4(intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),intBitsToFloat(R7i.z),-0.0),vec4(intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),intBitsToFloat(R7i.z),0.0)));
PV0i.x = R0i.x;
PV0i.y = R0i.x;
PV0i.z = R0i.x;
PV0i.w = R0i.x;
R125i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.z),intBitsToFloat(R124i.w)) + intBitsToFloat(R5i.x)));
PS0i = R125i.w;
// 11
backupReg0i = R126i.x;
backupReg1i = R126i.y;
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.y), intBitsToFloat(backupReg0i)));
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.x),intBitsToFloat(R124i.w)) + intBitsToFloat(R5i.z)));
R126i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg1i),intBitsToFloat(R124i.w)) + intBitsToFloat(R5i.y)));
R124i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.y), intBitsToFloat(R125i.x)));
R124i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.z), intBitsToFloat(R125i.x)));
PS1i = R124i.x;
// 12
PV0i.x = floatBitsToInt(intBitsToFloat(R126i.w) + intBitsToFloat(R127i.w));
PV0i.y = floatBitsToInt(intBitsToFloat(R127i.x) + intBitsToFloat(R127i.w));
R125i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.x), intBitsToFloat(R125i.x)));
R127i.w = floatBitsToInt(intBitsToFloat(R126i.w) + intBitsToFloat(R127i.x));
R1i.z = 0;
PS0i = R1i.z;
// 13
R5i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(R8i.x)));
PV1i.x = R5i.x;
R0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.y), intBitsToFloat(R8i.y)));
PV1i.y = R0i.y;
R0i.z = floatBitsToInt(-(intBitsToFloat(PV0i.x)) + 1.0);
R6i.w = floatBitsToInt(-(intBitsToFloat(PV0i.y)) + 1.0);
R15i.x = 0;
PS1i = R15i.x;
// 14
R5i.x = floatBitsToInt(intBitsToFloat(PV1i.x) + intBitsToFloat(R125i.w));
R8i.yzw = floatBitsToInt(vec3(intBitsToFloat(PV1i.y),intBitsToFloat(R1i.z),intBitsToFloat(R126i.x)) + vec3(intBitsToFloat(R126i.z),intBitsToFloat(R126i.y),-(intBitsToFloat(R124i.x))));
R6i.y = 0;
PS0i = R6i.y;
// 15
R6i.x = 0x3f800000;
R5i.y = 0x3f800000;
R6i.z = 0;
R10i.w = floatBitsToInt(intBitsToFloat(R127i.z) + intBitsToFloat(R124i.w));
R13i.w = floatBitsToInt(intBitsToFloat(R126i.x) + intBitsToFloat(R124i.x));
PS1i = R13i.w;
// 16
R1i.z = floatBitsToInt(intBitsToFloat(R0i.w) + intBitsToFloat(R125i.z));
R4i.w = floatBitsToInt(intBitsToFloat(R0i.w) + -(intBitsToFloat(R125i.z)));
R14i.w = floatBitsToInt(intBitsToFloat(R127i.z) + -(intBitsToFloat(R124i.w)));
PS0i = R14i.w;
// 17
R4i.z = floatBitsToInt(-(intBitsToFloat(R127i.w)) + 1.0);
R13i.z = 0;
PS1i = R13i.z;
// 18
R5i.z = 0;
PS0i = floatBitsToInt(sin((intBitsToFloat(R5i.w))/0.1591549367));
// 19
R126i.x = PS0i;
R0i.w = floatBitsToInt(-(intBitsToFloat(PS0i)) * 1.0);
PS1i = floatBitsToInt(cos((intBitsToFloat(R5i.w))/0.1591549367));
// 20
R127i.w = PS1i;
R1i.w = floatBitsToInt(intBitsToFloat(PS1i) * 1.0);
PS0i = R1i.w;
// 21
PS1i = floatBitsToInt(sin((intBitsToFloat(R125i.y))/0.1591549367));
// 22
R15i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.x), intBitsToFloat(PS1i)));
R14i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.w), intBitsToFloat(PS1i)));
R2i.w = floatBitsToInt(-(intBitsToFloat(PS1i)) * 1.0);
PS0i = floatBitsToInt(cos((intBitsToFloat(R125i.y))/0.1591549367));
// 23
R0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.x), intBitsToFloat(PS0i)));
R15i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.w), intBitsToFloat(PS0i)));
R5i.w = floatBitsToInt(intBitsToFloat(PS0i) * 1.0);
R127i.w = floatBitsToInt(sin((intBitsToFloat(R124i.y))/0.1591549367));
PS1i = R127i.w;
// 24
R14i.x = PS1i;
PS0i = floatBitsToInt(cos((intBitsToFloat(R124i.y))/0.1591549367));
// 25
R7i.x = PS0i;
R14i.y = floatBitsToInt(-(intBitsToFloat(R127i.w)));
R7i.y = PS0i;
PS1i = R7i.y;
// 26
R10i.z = floatBitsToInt(sqrt(intBitsToFloat(R0i.x)));
PS0i = R10i.z;
// 27
predResult = (intBitsToFloat(0xc0200000) > intBitsToFloat(R7i.w));
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
R127i.xyz = ivec3(R14i.z,R0i.w,R15i.z);
PV0i.x = R127i.x;
PV0i.y = R127i.y;
PV0i.z = R127i.z;
R127i.w = 0;
R14i.x = uf_remappedVS[1].z;
PS0i = R14i.x;
// 1
R126i.x = floatBitsToInt(dot(vec4(intBitsToFloat(uf_remappedVS[2].x),intBitsToFloat(uf_remappedVS[2].y),intBitsToFloat(uf_remappedVS[2].z),-0.0),vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),0.0)));
PV1i.x = R126i.x;
PV1i.y = R126i.x;
PV1i.z = R126i.x;
PV1i.w = R126i.x;
// 2
backupReg0i = R127i.y;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(uf_remappedVS[3].x),intBitsToFloat(uf_remappedVS[3].y),intBitsToFloat(uf_remappedVS[3].z),-0.0),vec4(intBitsToFloat(R127i.x),intBitsToFloat(backupReg0i),intBitsToFloat(R127i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.y = tempi.x;
// 3
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R126i.x),intBitsToFloat(PV0i.x),intBitsToFloat(R127i.w),-0.0),vec4(intBitsToFloat(R126i.x),intBitsToFloat(PV0i.x),intBitsToFloat(R127i.w),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R14i.y = uf_remappedVS[4].z;
PS1i = R14i.y;
// 4
R14i.z = uf_remappedVS[5].z;
tempResultf = 1.0 / sqrt(intBitsToFloat(PV1i.x));
PS0i = floatBitsToInt(tempResultf);
// 5
backupReg0i = R126i.x;
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), intBitsToFloat(PS0i)));
PV1i.x = R126i.x;
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PS0i)));
PV1i.y = R127i.y;
// 6
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), -(intBitsToFloat(PV1i.x))));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.x), intBitsToFloat(PV1i.y)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(PV1i.y)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.x), -(intBitsToFloat(PV1i.x))));
// 7
backupReg0i = R127i.y;
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.y),intBitsToFloat(R1i.y)) + intBitsToFloat(PV0i.x)));
PV1i.x = R123i.x;
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.x),intBitsToFloat(R1i.y)) + intBitsToFloat(PV0i.z)));
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(R8i.y)) + intBitsToFloat(PV0i.w)));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.x),intBitsToFloat(R8i.y)) + intBitsToFloat(PV0i.y)));
PV1i.w = R123i.w;
// 8
R0i.x = PV1i.z;
PV0i.x = R0i.x;
R0i.y = PV1i.w;
PV0i.y = R0i.y;
R5i.x = PV1i.x;
PS0i = R5i.x;
// 9
R8i.x = floatBitsToInt(dot(vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(R8i.z),-0.0),vec4(intBitsToFloat(uf_remappedVS[1].x),intBitsToFloat(uf_remappedVS[1].y),intBitsToFloat(uf_remappedVS[1].z),0.0)));
PV1i.x = R8i.x;
PV1i.y = R8i.x;
PV1i.z = R8i.x;
PV1i.w = R8i.x;
R5i.y = R127i.y;
PS1i = R5i.y;
// 10
backupReg0i = R0i.x;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(backupReg0i),intBitsToFloat(R0i.y),intBitsToFloat(R8i.z),-0.0),vec4(intBitsToFloat(uf_remappedVS[4].x),intBitsToFloat(uf_remappedVS[4].y),intBitsToFloat(uf_remappedVS[4].z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R8i.y = tempi.x;
// 11
backupReg0i = R0i.x;
backupReg1i = R0i.y;
backupReg2i = R8i.z;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),intBitsToFloat(backupReg2i),-0.0),vec4(intBitsToFloat(uf_remappedVS[5].x),intBitsToFloat(uf_remappedVS[5].y),intBitsToFloat(uf_remappedVS[5].z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R8i.z = tempi.x;
// 12
R15i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R5i.x),intBitsToFloat(R5i.y),intBitsToFloat(R5i.z),-0.0),vec4(intBitsToFloat(uf_remappedVS[1].x),intBitsToFloat(uf_remappedVS[1].y),intBitsToFloat(uf_remappedVS[1].z),0.0)));
PV0i.x = R15i.x;
PV0i.y = R15i.x;
PV0i.z = R15i.x;
PV0i.w = R15i.x;
// 13
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R5i.x),intBitsToFloat(R5i.y),intBitsToFloat(R5i.z),-0.0),vec4(intBitsToFloat(uf_remappedVS[4].x),intBitsToFloat(uf_remappedVS[4].y),intBitsToFloat(uf_remappedVS[4].z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R15i.y = tempi.x;
// 14
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R5i.x),intBitsToFloat(R5i.y),intBitsToFloat(R5i.z),-0.0),vec4(intBitsToFloat(uf_remappedVS[5].x),intBitsToFloat(uf_remappedVS[5].y),intBitsToFloat(uf_remappedVS[5].z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R15i.z = tempi.x;
}
activeMaskStack[1] = activeMaskStack[1] == false;
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
activeMaskStack[2] = activeMaskStack[1];
activeMaskStackC[3] = activeMaskStackC[2];
// 0
predResult = (0.5 > intBitsToFloat(R7i.w));
activeMaskStack[2] = predResult;
activeMaskStackC[3] = predResult == true && activeMaskStackC[2] == true;
}
else {
activeMaskStack[2] = false;
activeMaskStackC[3] = false;
}
if( activeMaskStackC[3] == true ) {
activeMaskStack[3] = activeMaskStack[2];
activeMaskStackC[4] = activeMaskStackC[3];
// 0
R6i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R7i.x),intBitsToFloat(R14i.y),intBitsToFloat(R6i.z),-0.0),vec4(intBitsToFloat(R5i.x),intBitsToFloat(R8i.y),intBitsToFloat(R8i.z),0.0)));
PV0i.x = R6i.x;
PV0i.y = R6i.x;
PV0i.z = R6i.x;
PV0i.w = R6i.x;
R0i.x = uf_remappedVS[1].x;
PS0i = R0i.x;
// 1
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R14i.x),intBitsToFloat(R7i.y),intBitsToFloat(R6i.z),-0.0),vec4(intBitsToFloat(R5i.x),intBitsToFloat(R8i.y),intBitsToFloat(R8i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R6i.y = tempi.x;
// 2
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.z), intBitsToFloat(R6i.z)));
R0i.y = uf_remappedVS[1].y;
R0i.z = uf_remappedVS[1].z;
// 3
R16i.xyz = ivec3(uf_remappedVS[4].x,uf_remappedVS[4].y,uf_remappedVS[4].z);
R122i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.y),intBitsToFloat(R14i.y)) + intBitsToFloat(PV0i.x)));
PS1i = R122i.x;
// 4
backupReg0i = R5i.z;
backupReg1i = R7i.x;
R5i.xyz = ivec3(uf_remappedVS[5].x,uf_remappedVS[5].y,uf_remappedVS[5].z);
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(R6i.z)));
R7i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.x),intBitsToFloat(backupReg1i)) + intBitsToFloat(PS1i)));
PS0i = R7i.x;
// 5
backupReg0i = R7i.y;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R1i.x),intBitsToFloat(R1i.y),intBitsToFloat(PV0i.w),-0.0),vec4(intBitsToFloat(R14i.x),intBitsToFloat(backupReg0i),1.0,0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R7i.y = tempi.x;
R1i.z = 0;
PS1i = R1i.z;
// 6
predResult = (intBitsToFloat(0xbfc00000) > intBitsToFloat(R7i.w));
activeMaskStack[3] = predResult;
activeMaskStackC[4] = predResult == true && activeMaskStackC[3] == true;
}
else {
activeMaskStack[3] = false;
activeMaskStackC[4] = false;
}
if( activeMaskStackC[4] == true ) {
// 0
R127i.x = uf_remappedVS[1].w;
PV0i.y = floatBitsToInt(intBitsToFloat(uf_remappedVS[1].z) * 1.0);
R127i.z = floatBitsToInt(intBitsToFloat(uf_remappedVS[4].z) * 1.0);
R126i.w = floatBitsToInt(-(intBitsToFloat(uf_remappedVS[4].w)));
// 1
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedVS[4].w), intBitsToFloat(uf_remappedVS[1].y)));
R0i.z = floatBitsToInt((intBitsToFloat(uf_remappedVS[1].x) * 0.0 + intBitsToFloat(PV0i.y)));
PS1i = R0i.z;
// 2
R0i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedVS[1].x),intBitsToFloat(R127i.x)) + intBitsToFloat(PV1i.z)));
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedVS[1].w), intBitsToFloat(uf_remappedVS[1].y)));
// 3
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedVS[4].w), intBitsToFloat(uf_remappedVS[4].y)));
R16i.z = floatBitsToInt((intBitsToFloat(uf_remappedVS[4].x) * 0.0 + intBitsToFloat(R127i.z)));
// 4
R16i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedVS[4].x),intBitsToFloat(R127i.x)) + intBitsToFloat(PV1i.x)));
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedVS[1].w), intBitsToFloat(uf_remappedVS[4].y)));
// 5
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedVS[4].w), intBitsToFloat(uf_remappedVS[5].y)));
// 6
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedVS[1].w), intBitsToFloat(uf_remappedVS[5].y)));
// 7
R0i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedVS[1].x),intBitsToFloat(R126i.w)) + intBitsToFloat(R127i.y)));
PV1i.w = floatBitsToInt(intBitsToFloat(uf_remappedVS[5].z) * 1.0);
// 8
R5i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedVS[5].x),intBitsToFloat(R127i.x)) + intBitsToFloat(R126i.y)));
R16i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedVS[4].x),intBitsToFloat(R126i.w)) + intBitsToFloat(R127i.w)));
R5i.z = floatBitsToInt((intBitsToFloat(uf_remappedVS[5].x) * 0.0 + intBitsToFloat(PV1i.w)));
R5i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedVS[5].x),intBitsToFloat(R126i.w)) + intBitsToFloat(R126i.x)));
PS0i = R5i.y;
}
activeMaskStack[3] = activeMaskStack[3] == false;
activeMaskStackC[4] = activeMaskStack[3] == true && activeMaskStackC[3] == true;
if( activeMaskStackC[4] == true ) {
activeMaskStack[4] = activeMaskStack[3];
activeMaskStackC[5] = activeMaskStackC[4];
// 0
predResult = (0.0 > intBitsToFloat(R7i.w));
activeMaskStack[4] = predResult;
activeMaskStackC[5] = predResult == true && activeMaskStackC[4] == true;
}
else {
activeMaskStack[4] = false;
activeMaskStackC[5] = false;
}
if( activeMaskStackC[5] == true ) {
// 0
R0i.y = 0;
R0i.z = floatBitsToInt(-(intBitsToFloat(uf_remappedVS[5].x)));
R16i.y = 0x3f800000;
PS0i = R16i.y;
// 1
R5i.y = 0;
R16i.z = 0;
R5i.z = uf_remappedVS[1].x;
PS1i = R5i.z;
// 2
R7i.z = 0;
// 3
R13i.z = R10i.z;
}
activeMaskStackC[3] = activeMaskStack[2] == true && activeMaskStackC[2] == true;
if( activeMaskStackC[3] == true ) {
// 0
backupReg0i = R0i.y;
backupReg1i = R0i.z;
backupReg1i = R0i.z;
R8i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R6i.x),intBitsToFloat(R6i.y),intBitsToFloat(R8i.z),-0.0),vec4(intBitsToFloat(R0i.x),intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),0.0)));
PV0i.x = R8i.x;
PV0i.y = R8i.x;
PV0i.z = R8i.x;
PV0i.w = R8i.x;
R14i.x = backupReg1i;
PS0i = R14i.x;
// 1
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R6i.x),intBitsToFloat(R6i.y),intBitsToFloat(R8i.z),-0.0),vec4(intBitsToFloat(R16i.x),intBitsToFloat(R16i.y),intBitsToFloat(R16i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R8i.y = tempi.x;
R14i.y = R16i.z;
PS1i = R14i.y;
// 2
backupReg0i = R8i.z;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R6i.x),intBitsToFloat(R6i.y),intBitsToFloat(backupReg0i),-0.0),vec4(intBitsToFloat(R5i.x),intBitsToFloat(R5i.y),intBitsToFloat(R5i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R8i.z = tempi.x;
R14i.z = R5i.z;
PS0i = R14i.z;
// 3
backupReg0i = R0i.y;
backupReg1i = R0i.z;
R15i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R7i.x),intBitsToFloat(R7i.y),intBitsToFloat(R1i.z),-0.0),vec4(intBitsToFloat(R0i.x),intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),0.0)));
PV1i.x = R15i.x;
PV1i.y = R15i.x;
PV1i.z = R15i.x;
PV1i.w = R15i.x;
PS1i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.z), intBitsToFloat(R16i.z)));
// 4
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R7i.x),intBitsToFloat(R7i.y),intBitsToFloat(PS1i),-0.0),vec4(intBitsToFloat(R16i.x),intBitsToFloat(R16i.y),1.0,0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R15i.y = tempi.x;
PS0i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.z), intBitsToFloat(R5i.z)));
// 5
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R7i.x),intBitsToFloat(R7i.y),intBitsToFloat(PS0i),-0.0),vec4(intBitsToFloat(R5i.x),intBitsToFloat(R5i.y),1.0,0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R15i.z = tempi.x;
}
activeMaskStack[2] = activeMaskStack[2] == false;
activeMaskStackC[3] = activeMaskStack[2] == true && activeMaskStackC[2] == true;
if( activeMaskStackC[3] == true ) {
activeMaskStack[3] = activeMaskStack[2];
activeMaskStackC[4] = activeMaskStackC[3];
// 0
predResult = (1.5 > intBitsToFloat(R7i.w));
activeMaskStack[3] = predResult;
activeMaskStackC[4] = predResult == true && activeMaskStackC[3] == true;
}
else {
activeMaskStack[3] = false;
activeMaskStackC[4] = false;
}
if( activeMaskStackC[4] == true ) {
// 0
R8i.x = R8i.z;
R8i.z = R5i.x;
R5i.x = R5i.z;
PS0i = R5i.x;
// 1
R5i.y = R1i.y;
R5i.z = R1i.x;
}
activeMaskStack[3] = activeMaskStack[3] == false;
activeMaskStackC[4] = activeMaskStack[3] == true && activeMaskStackC[3] == true;
if( activeMaskStackC[4] == true ) {
// 0
R127i.x = ((intBitsToFloat(0x40600000) > intBitsToFloat(R7i.w))?int(0xFFFFFFFF):int(0x0));
PV0i.x = R127i.x;
R127i.y = ((intBitsToFloat(0x40200000) > intBitsToFloat(R7i.w))?int(0xFFFFFFFF):int(0x0));
// 1
R123i.x = ((PV0i.x == 0)?(R8i.y):(R5i.x));
PV1i.x = R123i.x;
R123i.y = ((PV0i.x == 0)?(R8i.z):(R8i.z));
PV1i.y = R123i.y;
R123i.z = ((PV0i.x == 0)?(R1i.y):(R1i.x));
PV1i.z = R123i.z;
R123i.w = ((PV0i.x == 0)?(R5i.x):(R8i.y));
PV1i.w = R123i.w;
R127i.z = ((PV0i.x == 0)?(R1i.x):(R1i.y));
PS1i = R127i.z;
// 2
backupReg0i = R8i.y;
R8i.x = ((R127i.y == 0)?(PV1i.x):(R5i.x));
R8i.y = ((R127i.y == 0)?(PV1i.w):(R8i.z));
R8i.z = ((R127i.y == 0)?(PV1i.y):(backupReg0i));
R123i.w = ((R127i.x == 0)?(R5i.z):(R5i.z));
PV0i.w = R123i.w;
R5i.x = ((R127i.y == 0)?(PV1i.z):(R1i.x));
PS0i = R5i.x;
// 3
backupReg0i = R5i.y;
R6i.x = ((R127i.y == 0)?(0):(R15i.x));
R5i.y = ((R127i.y == 0)?(R127i.z):(R5i.z));
R5i.z = ((R127i.y == 0)?(PV0i.w):(R1i.y));
R6i.y = ((R127i.y == 0)?(0):(backupReg0i));
PS1i = R6i.y;
// 4
backupReg0i = R6i.z;
R6i.z = ((R127i.y == 0)?(0x3f800000):(backupReg0i));
}
activeMaskStackC[3] = activeMaskStack[2] == true && activeMaskStackC[2] == true;
if( activeMaskStackC[3] == true ) {
// 0
backupReg0i = R0i.y;
backupReg0i = R0i.y;
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R15i.y), intBitsToFloat(R14i.x)));
PV0i.y = floatBitsToInt(intBitsToFloat(R15i.z) * 1.0);
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(R14i.x)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(R7i.y)));
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R15i.y), intBitsToFloat(R7i.y)));
PS0i = R127i.z;
// 1
R125i.x = floatBitsToInt((intBitsToFloat(R2i.w) * 0.0 + intBitsToFloat(PV0i.y)));
PV1i.x = R125i.x;
R127i.y = floatBitsToInt(intBitsToFloat(R14i.z) * 1.0);
R125i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.w),intBitsToFloat(R7i.x)) + intBitsToFloat(PV0i.z)));
PV1i.z = R125i.z;
R126i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.w),intBitsToFloat(R14i.y)) + intBitsToFloat(PV0i.w)));
PV1i.w = R126i.w;
R124i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.w), intBitsToFloat(R14i.x)));
PS1i = R124i.w;
// 2
R124i.x = floatBitsToInt((intBitsToFloat(R1i.w) * 0.0 + intBitsToFloat(R0i.w)));
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.w), intBitsToFloat(R7i.y)));
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.z), intBitsToFloat(PV1i.w)));
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.z), intBitsToFloat(PV1i.z)));
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.z), intBitsToFloat(PV1i.x)));
PS0i = R126i.x;
// 3
backupReg0i = R127i.x;
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.w),intBitsToFloat(R7i.x)) + intBitsToFloat(backupReg0i)));
R125i.y = floatBitsToInt((intBitsToFloat(R5i.w) * 0.0 + intBitsToFloat(R127i.y)));
R124i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.w),intBitsToFloat(R14i.y)) + intBitsToFloat(R127i.z)));
R125i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.w), intBitsToFloat(R125i.z)));
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.w), intBitsToFloat(R126i.w)));
PS1i = R127i.z;
// 4
backupReg0i = R126i.x;
backupReg1i = R126i.z;
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.z),intBitsToFloat(R124i.x)) + intBitsToFloat(backupReg0i)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.w), intBitsToFloat(R125i.x)));
R126i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.z),intBitsToFloat(R124i.w)) + intBitsToFloat(R127i.w)));
R127i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.z),intBitsToFloat(R126i.y)) + intBitsToFloat(backupReg1i)));
R7i.z = 0;
PS0i = R7i.z;
// 5
backupReg0i = R125i.x;
backupReg1i = R127i.z;
R125i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R10i.w), intBitsToFloat(R126i.w)));
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R10i.w), intBitsToFloat(R125i.z)));
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R10i.w), intBitsToFloat(backupReg0i)));
R126i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.z),intBitsToFloat(R126i.y)) + intBitsToFloat(backupReg1i)));
R125i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.z),intBitsToFloat(R124i.x)) + intBitsToFloat(PV0i.y)));
PS1i = R125i.z;
// 6
backupReg0i = R126i.x;
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.z),intBitsToFloat(R124i.w)) + intBitsToFloat(R125i.w)));
R124i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R14i.w),intBitsToFloat(R127i.x)) + intBitsToFloat(R126i.z)));
R126i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R14i.w),intBitsToFloat(R125i.y)) + intBitsToFloat(backupReg0i)));
// 7
backupReg0i = R125i.x;
backupReg1i = R127i.z;
R125i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R8i.w),intBitsToFloat(R126i.y)) + intBitsToFloat(backupReg0i)));
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R14i.w),intBitsToFloat(R124i.z)) + intBitsToFloat(R127i.w)));
PV1i.y = R126i.y;
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R8i.w),intBitsToFloat(R124i.x)) + intBitsToFloat(backupReg1i)));
// 8
backupReg0i = R125i.z;
backupReg1i = R127i.y;
R124i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R13i.w),intBitsToFloat(R127i.x)) + intBitsToFloat(R126i.x)));
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.y), intBitsToFloat(PV1i.y)));
R125i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R13i.w),intBitsToFloat(R125i.y)) + intBitsToFloat(backupReg0i)));
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R8i.w),intBitsToFloat(R124i.w)) + intBitsToFloat(backupReg1i)));
PV0i.w = R123i.w;
PS0i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.z), intBitsToFloat(R126i.z)));
// 9
backupReg0i = R124i.z;
backupReg1i = R125i.y;
R0i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R6i.w),intBitsToFloat(R127i.x)) + intBitsToFloat(PV0i.w)));
R125i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R13i.w),intBitsToFloat(R124i.z)) + intBitsToFloat(R126i.w)));
R124i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R6i.w),intBitsToFloat(backupReg0i)) + intBitsToFloat(R125i.x)));
R0i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R6i.w),intBitsToFloat(backupReg1i)) + intBitsToFloat(R127i.z)));
R122i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R6i.y),intBitsToFloat(R126i.y)) + intBitsToFloat(PS0i)));
PS1i = R122i.x;
// 10
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R8i.x),intBitsToFloat(R8i.y),intBitsToFloat(R8i.z),-0.0),vec4(intBitsToFloat(R124i.y),intBitsToFloat(R126i.y),intBitsToFloat(R126i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.z = tempi.x;
R127i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R6i.x),intBitsToFloat(R124i.y)) + intBitsToFloat(PS1i)));
PS0i = R127i.w;
// 11
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R8i.x),intBitsToFloat(R8i.y),intBitsToFloat(R8i.z),-0.0),vec4(intBitsToFloat(R124i.x),intBitsToFloat(R125i.y),intBitsToFloat(R125i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R124i.w = tempi.x;
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(uf_remappedVS[6].x)));
PS1i = R126i.w;
// 12
backupReg0i = R127i.z;
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.z),intBitsToFloat(R126i.z)) + intBitsToFloat(R127i.y)));
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(uf_remappedVS[6].z)));
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(uf_remappedVS[6].y)));
R125i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.w), intBitsToFloat(uf_remappedVS[6].x)));
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.w), intBitsToFloat(uf_remappedVS[6].y)));
PS0i = R126i.y;
// 13
R126i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R8i.x),intBitsToFloat(R8i.y),intBitsToFloat(R8i.z),-0.0),vec4(intBitsToFloat(R0i.x),intBitsToFloat(R124i.z),intBitsToFloat(R0i.w),0.0)));
PV1i.x = R126i.x;
PV1i.y = R126i.x;
PV1i.z = R126i.x;
PV1i.w = R126i.x;
R125i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.w),intBitsToFloat(uf_remappedVS[7].x)) + intBitsToFloat(R126i.w)));
PS1i = R125i.x;
// 14
backupReg0i = R127i.x;
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.x),intBitsToFloat(R124i.y)) + intBitsToFloat(backupReg0i)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.x), intBitsToFloat(R124i.x)));
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.w),intBitsToFloat(uf_remappedVS[7].z)) + intBitsToFloat(R127i.y)));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.w),intBitsToFloat(uf_remappedVS[7].y)) + intBitsToFloat(R127i.z)));
PV0i.w = R123i.w;
PS0i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.z), intBitsToFloat(R125i.z)));
// 15
R8i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.x),intBitsToFloat(uf_remappedVS[8].x)) + intBitsToFloat(R125i.x)));
R8i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.x),intBitsToFloat(uf_remappedVS[8].y)) + intBitsToFloat(PV0i.w)));
R8i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.x),intBitsToFloat(uf_remappedVS[8].z)) + intBitsToFloat(PV0i.z)));
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R6i.y),intBitsToFloat(R125i.y)) + intBitsToFloat(PS0i)));
PV1i.w = R123i.w;
R122i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.y),intBitsToFloat(R125i.y)) + intBitsToFloat(PV0i.y)));
PS1i = R122i.x;
// 16
backupReg0i = R124i.x;
R124i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R6i.x),intBitsToFloat(backupReg0i)) + intBitsToFloat(PV1i.w)));
PV0i.x = R124i.x;
R125i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.z),intBitsToFloat(R125i.z)) + intBitsToFloat(PS1i)));
PV0i.y = R125i.y;
R125i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.w), intBitsToFloat(uf_remappedVS[6].z)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(uf_remappedVS[6].x)));
PS0i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(uf_remappedVS[6].y)));
// 17
backupReg0i = R127i.x;
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(uf_remappedVS[7].x)) + intBitsToFloat(R125i.w)));
R124i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(uf_remappedVS[7].x)) + intBitsToFloat(PV0i.w)));
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(uf_remappedVS[6].z)));
R125i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(uf_remappedVS[7].y)) + intBitsToFloat(R126i.y)));
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(uf_remappedVS[7].y)) + intBitsToFloat(PS0i)));
PS1i = R126i.x;
// 18
backupReg0i = R0i.x;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R6i.x),intBitsToFloat(R6i.y),intBitsToFloat(R6i.z),-0.0),vec4(intBitsToFloat(backupReg0i),intBitsToFloat(R124i.z),intBitsToFloat(R0i.w),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R126i.y = tempi.x;
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.x),intBitsToFloat(uf_remappedVS[7].z)) + intBitsToFloat(R125i.z)));
PS0i = R127i.y;
// 19
backupReg0i = R0i.x;
backupReg1i = R127i.z;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R5i.x),intBitsToFloat(R5i.y),intBitsToFloat(R5i.z),-0.0),vec4(intBitsToFloat(backupReg0i),intBitsToFloat(R124i.z),intBitsToFloat(R0i.w),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R127i.z = tempi.x;
R127i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.y),intBitsToFloat(uf_remappedVS[7].z)) + intBitsToFloat(backupReg1i)));
PS1i = R127i.w;
// 20
R14i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.y),intBitsToFloat(uf_remappedVS[8].x)) + intBitsToFloat(R127i.x)));
R14i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.y),intBitsToFloat(uf_remappedVS[8].y)) + intBitsToFloat(R125i.w)));
R14i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.y),intBitsToFloat(uf_remappedVS[8].z)) + intBitsToFloat(R127i.y)));
R15i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),intBitsToFloat(uf_remappedVS[8].x)) + intBitsToFloat(R124i.y)));
PS0i = R15i.x;
// 21
R15i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.z),intBitsToFloat(uf_remappedVS[8].y)) + intBitsToFloat(R126i.x)));
R15i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.z),intBitsToFloat(uf_remappedVS[8].z)) + intBitsToFloat(R127i.w)));
// 22
R13i.z = R10i.z;
}
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
// 0
PV0i.x = floatBitsToInt(intBitsToFloat(uf_remappedVS[9].w) * 1.0);
PV0i.y = floatBitsToInt(intBitsToFloat(uf_remappedVS[9].y) * 1.0);
PV0i.z = floatBitsToInt(intBitsToFloat(uf_remappedVS[9].x) * 1.0);
PV0i.w = floatBitsToInt(intBitsToFloat(uf_remappedVS[9].z) * 1.0);
R4i.w = 0;
PS0i = R4i.w;
// 1
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.z),intBitsToFloat(uf_remappedVS[6].w)) + intBitsToFloat(PV0i.x)));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.z),intBitsToFloat(uf_remappedVS[6].y)) + intBitsToFloat(PV0i.y)));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.z),intBitsToFloat(uf_remappedVS[6].x)) + intBitsToFloat(PV0i.z)));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.z),intBitsToFloat(uf_remappedVS[6].z)) + intBitsToFloat(PV0i.w)));
PV1i.w = R123i.w;
R10i.z = R3i.w;
R10i.z = floatBitsToInt(intBitsToFloat(R10i.z) * 2.0);
PS1i = R10i.z;
// 2
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.y),intBitsToFloat(uf_remappedVS[7].w)) + intBitsToFloat(PV1i.x)));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.y),intBitsToFloat(uf_remappedVS[7].y)) + intBitsToFloat(PV1i.y)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.y),intBitsToFloat(uf_remappedVS[7].x)) + intBitsToFloat(PV1i.z)));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.y),intBitsToFloat(uf_remappedVS[7].z)) + intBitsToFloat(PV1i.w)));
PV0i.w = R123i.w;
R5i.x = ((0.0 >= intBitsToFloat(PS1i))?int(0xFFFFFFFF):int(0x0));
PS0i = R5i.x;
// 3
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.x),intBitsToFloat(uf_remappedVS[8].x)) + intBitsToFloat(PV0i.z)));
PV1i.x = R127i.x;
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.x),intBitsToFloat(uf_remappedVS[8].y)) + intBitsToFloat(PV0i.y)));
PV1i.y = R126i.y;
R125i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.x),intBitsToFloat(uf_remappedVS[8].z)) + intBitsToFloat(PV0i.w)));
PV1i.z = R125i.z;
R2i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.x),intBitsToFloat(uf_remappedVS[8].w)) + intBitsToFloat(PV0i.x)));
PV1i.w = R2i.w;
R127i.y = floatBitsToInt((intBitsToFloat(R9i.w) * intBitsToFloat(0x3e22f983) + 0.5));
PS1i = R127i.y;
// 4
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.z),intBitsToFloat(PV1i.w)),vec4(intBitsToFloat(uf_remappedVS[10].x),intBitsToFloat(uf_remappedVS[10].y),intBitsToFloat(uf_remappedVS[10].z),intBitsToFloat(uf_remappedVS[10].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R126i.w = floatBitsToInt((intBitsToFloat(R13i.x) * intBitsToFloat(0x3e22f983) + 0.5));
PS0i = R126i.w;
// 5
PV1i.x = floatBitsToInt(intBitsToFloat(uf_remappedVS[11].y) + -(intBitsToFloat(0x3dcccccd)));
PV1i.y = floatBitsToInt(-(intBitsToFloat(R7i.z)) + -(intBitsToFloat(PV0i.x)));
PV1i.z = floatBitsToInt(intBitsToFloat(R13i.z) + intBitsToFloat(uf_remappedVS[11].w));
PV1i.w = floatBitsToInt(-(intBitsToFloat(R13i.z)) + intBitsToFloat(uf_remappedVS[11].x));
PS1i = floatBitsToInt(intBitsToFloat(uf_remappedVS[11].w) + -(intBitsToFloat(0x3dcccccd)));
// 6
PV0i.x = floatBitsToInt(-(intBitsToFloat(PV1i.y)) + intBitsToFloat(PV1i.w));
PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.y) + -(intBitsToFloat(PV1i.z)));
R127i.z = ((intBitsToFloat(PS1i) >= 0.0)?(floatBitsToInt(1.0)):(0));
R127i.w = ((intBitsToFloat(PV1i.x) >= 0.0)?(floatBitsToInt(1.0)):(0));
R126i.z = floatBitsToInt(-(intBitsToFloat(uf_remappedVS[12].w)) + 1.0);
PS0i = R126i.z;
// 7
R0i.x = ((-(1.0) > intBitsToFloat(uf_remappedVS[0].y))?int(0xFFFFFFFF):int(0x0));
R123i.y = floatBitsToInt((intBitsToFloat(R13i.y) * intBitsToFloat(0x3e22f983) + 0.5));
PV1i.y = R123i.y;
R123i.z = ((intBitsToFloat(PV0i.x) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV1i.z = R123i.z;
R123i.w = ((intBitsToFloat(PV0i.y) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV1i.w = R123i.w;
PS1i = floatBitsToInt(fract(intBitsToFloat(R127i.y)));
// 8
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.z), intBitsToFloat(R127i.w)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(R127i.z)));
PV0i.z = floatBitsToInt(fract(intBitsToFloat(R126i.w)));
PV0i.w = floatBitsToInt(fract(intBitsToFloat(PV1i.y)));
R122i.x = floatBitsToInt((intBitsToFloat(PS1i) * intBitsToFloat(0x40c90fdb) + -(intBitsToFloat(0x40490fdb))));
PS0i = R122i.x;
// 9
R123i.x = floatBitsToInt((intBitsToFloat(PV0i.w) * intBitsToFloat(0x40c90fdb) + -(intBitsToFloat(0x40490fdb))));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((intBitsToFloat(PV0i.z) * intBitsToFloat(0x40c90fdb) + -(intBitsToFloat(0x40490fdb))));
PV1i.y = R123i.y;
R127i.z = floatBitsToInt(intBitsToFloat(PS0i) * intBitsToFloat(0x3e22f983));
PV1i.z = R127i.z;
PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(PV0i.y));
R2i.z = floatBitsToInt(intBitsToFloat(uf_remappedVS[13].x) + -(1.0));
PS1i = R2i.z;
// 10
PV0i.x = floatBitsToInt(-(intBitsToFloat(PV1i.w)) + -(0.0));
R127i.y = floatBitsToInt(intBitsToFloat(PV1i.y) * intBitsToFloat(0x3e22f983));
R124i.z = floatBitsToInt(intBitsToFloat(PV1i.x) * intBitsToFloat(0x3e22f983));
R127i.w = floatBitsToInt(intBitsToFloat(uf_remappedVS[13].y) + -(1.0));
R125i.y = floatBitsToInt(sin((intBitsToFloat(PV1i.z))/0.1591549367));
PS0i = R125i.y;
// 11
R126i.x = floatBitsToInt(intBitsToFloat(uf_remappedVS[13].z) + -(1.0));
R13i.y = floatBitsToInt(intBitsToFloat(uf_remappedVS[14].x) + -(intBitsToFloat(uf_remappedVS[14].y)));
R1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(PS0i)));
R123i.w = ((intBitsToFloat(PV0i.x) >= 0.0)?(floatBitsToInt(1.0)):(0));
PV1i.w = R123i.w;
R0i.z = floatBitsToInt(cos((intBitsToFloat(R127i.z))/0.1591549367));
PS1i = R0i.z;
// 12
R125i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R8i.x), intBitsToFloat(PV1i.w)));
PV0i.x = R125i.x;
R124i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R8i.y), intBitsToFloat(PV1i.w)));
PV0i.y = R124i.y;
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R8i.z), intBitsToFloat(PV1i.w)));
PV0i.z = R127i.z;
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(PS1i)));
R125i.w = floatBitsToInt(sin((intBitsToFloat(R127i.y))/0.1591549367));
PS0i = R125i.w;
// 13
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(R126i.z)));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(R126i.z)));
R5i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(PS0i)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), intBitsToFloat(R126i.z)));
R4i.z = floatBitsToInt(cos((intBitsToFloat(R127i.y))/0.1591549367));
PS1i = R4i.z;
// 14
R2i.x = floatBitsToInt(intBitsToFloat(R127i.x) + intBitsToFloat(PV1i.y));
PV0i.x = R2i.x;
R0i.y = floatBitsToInt(intBitsToFloat(R126i.y) + intBitsToFloat(PV1i.x));
PV0i.y = R0i.y;
R6i.z = floatBitsToInt(intBitsToFloat(R125i.z) + intBitsToFloat(PV1i.w));
PV0i.z = R6i.z;
R124i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(PS1i)));
R2i.y = floatBitsToInt(sin((intBitsToFloat(R124i.z))/0.1591549367));
PS0i = R2i.y;
// 15
R7i.x = floatBitsToInt(dot(vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),intBitsToFloat(R2i.w)),vec4(intBitsToFloat(uf_remappedVS[2].x),intBitsToFloat(uf_remappedVS[2].y),intBitsToFloat(uf_remappedVS[2].z),intBitsToFloat(uf_remappedVS[2].w))));
PV1i.x = R7i.x;
PV1i.y = R7i.x;
PV1i.z = R7i.x;
PV1i.w = R7i.x;
R127i.x = floatBitsToInt(cos((intBitsToFloat(R124i.z))/0.1591549367));
PS1i = R127i.x;
// 16
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R2i.x),intBitsToFloat(R0i.y),intBitsToFloat(R6i.z),intBitsToFloat(R2i.w)),vec4(intBitsToFloat(uf_remappedVS[3].x),intBitsToFloat(uf_remappedVS[3].y),intBitsToFloat(uf_remappedVS[3].z),intBitsToFloat(uf_remappedVS[3].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R6i.y = tempi.x;
R1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(PS1i)));
PS0i = R1i.w;
// 17
backupReg0i = R0i.y;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R2i.x),intBitsToFloat(backupReg0i),intBitsToFloat(R6i.z),intBitsToFloat(R2i.w)),vec4(intBitsToFloat(uf_remappedVS[10].x),intBitsToFloat(uf_remappedVS[10].y),intBitsToFloat(uf_remappedVS[10].z),intBitsToFloat(uf_remappedVS[10].w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R8i.z = tempi.x;
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(R2i.y)));
PS1i = R126i.y;
// 18
R6i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.z),intBitsToFloat(uf_remappedVS[13].w)) + 1.0));
R5i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.x),intBitsToFloat(uf_remappedVS[13].w)) + 1.0));
R7i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.w),intBitsToFloat(uf_remappedVS[13].w)) + 1.0));
R127i.w = floatBitsToInt(-(intBitsToFloat(PV1i.x)) * intBitsToFloat(0x42800000));
R6i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R125i.y)),intBitsToFloat(R1i.y)) + intBitsToFloat(R126i.w)));
PS0i = R6i.w;
// 19
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(uf_remappedVS[2].x),intBitsToFloat(uf_remappedVS[2].y),intBitsToFloat(uf_remappedVS[2].z),-0.0),vec4(intBitsToFloat(R125i.x),intBitsToFloat(R124i.y),intBitsToFloat(R127i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R2i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R125i.w)),intBitsToFloat(R1i.y)) + intBitsToFloat(R124i.w)));
PS1i = R2i.z;
// 20
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(uf_remappedVS[3].x),intBitsToFloat(uf_remappedVS[3].y),intBitsToFloat(uf_remappedVS[3].z),-0.0),vec4(intBitsToFloat(R125i.x),intBitsToFloat(R124i.y),intBitsToFloat(R127i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R0i.w = floatBitsToInt(intBitsToFloat(PV1i.x) * intBitsToFloat(0x3a4ccccd));
PS0i = R0i.w;
// 21
backupReg0i = R0i.z;
backupReg1i = R13i.y;
R13i.x = floatBitsToInt(intBitsToFloat(PV0i.x) * intBitsToFloat(0x3ab60b61));
R13i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.x),intBitsToFloat(R1i.y)) + intBitsToFloat(R126i.y)));
R0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.w), intBitsToFloat(uf_remappedVS[12].w)));
R5i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(R1i.y)) + intBitsToFloat(R1i.z)));
R1i.z = floatBitsToInt(1.0 / intBitsToFloat(backupReg1i));
PS1i = R1i.z;
}
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
backupReg0i = R0i.y;
backupReg1i = R0i.z;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R2i.x),intBitsToFloat(backupReg0i),intBitsToFloat(R6i.z),intBitsToFloat(R2i.w)),vec4(intBitsToFloat(uf_remappedVS[15].x),intBitsToFloat(uf_remappedVS[15].y),intBitsToFloat(uf_remappedVS[15].z),intBitsToFloat(uf_remappedVS[15].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.w = tempi.x;
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg1i), intBitsToFloat(R0i.w)));
PS0i = R126i.y;
// 1
backupReg0i = R0i.y;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R2i.x),intBitsToFloat(backupReg0i),intBitsToFloat(R6i.z),intBitsToFloat(R2i.w)),vec4(intBitsToFloat(uf_remappedVS[16].x),intBitsToFloat(uf_remappedVS[16].y),intBitsToFloat(uf_remappedVS[16].z),intBitsToFloat(uf_remappedVS[16].w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R127i.z = tempi.x;
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.z), intBitsToFloat(R13i.x)));
PS1i = R127i.x;
// 2
backupReg0i = R0i.y;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R2i.x),intBitsToFloat(backupReg0i),intBitsToFloat(R6i.z),intBitsToFloat(R2i.w)),vec4(intBitsToFloat(uf_remappedVS[17].x),intBitsToFloat(uf_remappedVS[17].y),intBitsToFloat(uf_remappedVS[17].z),intBitsToFloat(uf_remappedVS[17].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R125i.w = floatBitsToInt(intBitsToFloat(R127i.w) + intBitsToFloat(R126i.y));
PS0i = R125i.w;
// 3
backupReg0i = R127i.x;
R127i.x = ((R0i.x == 0)?(PS0i):(PS0i));
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.z),intBitsToFloat(R1i.y)) + intBitsToFloat(R5i.z)));
R126i.z = floatBitsToInt(intBitsToFloat(R127i.z) + intBitsToFloat(backupReg0i));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(uf_remappedVS[0].z)));
R127i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R2i.y)),intBitsToFloat(R1i.y)) + intBitsToFloat(R1i.w)));
PS1i = R127i.z;
// 4
backupReg0i = R2i.x;
backupReg1i = R0i.y;
R2i.x = floatBitsToInt(dot(vec4(intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),intBitsToFloat(R6i.z),intBitsToFloat(R2i.w)),vec4(intBitsToFloat(uf_remappedVS[18].x),intBitsToFloat(uf_remappedVS[18].y),intBitsToFloat(uf_remappedVS[18].z),intBitsToFloat(uf_remappedVS[18].w))));
PV0i.x = R2i.x;
PV0i.y = R2i.x;
PV0i.z = R2i.x;
PV0i.w = R2i.x;
R125i.x = ((R0i.x == 0)?(PV1i.w):(R4i.w));
PS0i = R125i.x;
// 5
backupReg0i = R0i.x;
backupReg0i = R0i.x;
R0i.x = ((R5i.x == 0)?(R127i.x):(0x3f800000));
R123i.y = ((backupReg0i == 0)?(R126i.z):(R126i.z));
PV1i.y = R123i.y;
R124i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R10i.y),intBitsToFloat(R5i.w)) + intBitsToFloat(R9i.y)));
R123i.w = ((backupReg0i == 0)?(PV0i.x):(PV0i.x));
PV1i.w = R123i.w;
R124i.y = ((intBitsToFloat(uf_remappedVS[14].x) == intBitsToFloat(uf_remappedVS[14].y))?int(0xFFFFFFFF):int(0x0));
PS1i = R124i.y;
// 6
R124i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R11i.z),intBitsToFloat(R2i.z)) + intBitsToFloat(R11i.x)));
R1i.y = ((R5i.x == 0)?(PV1i.y):(0x3f800000));
R4i.z = ((R5i.x == 0)?(R125i.x):(0x3f800000));
R0i.w = ((R5i.x == 0)?(PV1i.w):(0x3f800000));
R125i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R11i.w),intBitsToFloat(R126i.y)) + intBitsToFloat(R11i.y)));
PS0i = R125i.z;
// 7
R126i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R15i.x),intBitsToFloat(R15i.y),intBitsToFloat(R15i.z),-0.0),vec4(intBitsToFloat(R15i.x),intBitsToFloat(R15i.y),intBitsToFloat(R15i.z),0.0)));
PV1i.x = R126i.x;
PV1i.y = R126i.x;
PV1i.z = R126i.x;
PV1i.w = R126i.x;
R125i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R10i.x),intBitsToFloat(R6i.w)) + intBitsToFloat(R9i.x)));
PS1i = R125i.x;
// 8
R127i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R14i.x),intBitsToFloat(R14i.y),intBitsToFloat(R14i.z),-0.0),vec4(intBitsToFloat(uf_remappedVS[2].x),intBitsToFloat(uf_remappedVS[2].y),intBitsToFloat(uf_remappedVS[2].z),0.0)));
PV0i.x = R127i.x;
PV0i.y = R127i.x;
PV0i.z = R127i.x;
PV0i.w = R127i.x;
R10i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R12i.z),intBitsToFloat(R127i.z)) + intBitsToFloat(R12i.x)));
PS0i = R10i.x;
// 9
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R14i.x),intBitsToFloat(R14i.y),intBitsToFloat(R14i.z),-0.0),vec4(intBitsToFloat(uf_remappedVS[3].x),intBitsToFloat(uf_remappedVS[3].y),intBitsToFloat(uf_remappedVS[3].z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R126i.y = tempi.x;
R127i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R12i.w),intBitsToFloat(R13i.y)) + intBitsToFloat(R12i.y)));
PS1i = R127i.w;
// 10
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R14i.x),intBitsToFloat(R14i.y),intBitsToFloat(R14i.z),-0.0),vec4(intBitsToFloat(uf_remappedVS[10].x),intBitsToFloat(uf_remappedVS[10].y),intBitsToFloat(uf_remappedVS[10].z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.z = tempi.x;
R9i.x = floatBitsToInt(intBitsToFloat(R125i.x) + 0.5);
PS0i = R9i.x;
// 11
backupReg0i = R126i.y;
backupReg0i = R126i.y;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(backupReg0i),intBitsToFloat(PV0i.x),-0.0),vec4(intBitsToFloat(R127i.x),intBitsToFloat(backupReg0i),intBitsToFloat(PV0i.x),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R126i.y = tempi.x;
R2i.y = floatBitsToInt(intBitsToFloat(R124i.z) + 0.5);
PS1i = R2i.y;
// 12
R8i.x = floatBitsToInt(intBitsToFloat(R124i.x) + 0.5);
R7i.y = floatBitsToInt(intBitsToFloat(R125i.z) + 0.5);
R125i.z = ((intBitsToFloat(uf_remappedVS[14].z) == 0.0)?int(0xFFFFFFFF):int(0x0));
R124i.w = floatBitsToInt(-(intBitsToFloat(R8i.z)));
tempResultf = 1.0 / sqrt(intBitsToFloat(R126i.x));
PS0i = floatBitsToInt(tempResultf);
// 13
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R15i.x), intBitsToFloat(PS0i)));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R15i.y), intBitsToFloat(PS0i)));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R15i.z), intBitsToFloat(PS0i)));
R5i.x = floatBitsToInt(intBitsToFloat(R10i.x) + 0.5);
PS1i = R5i.x;
// 14
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.z),-0.0),vec4(-(intBitsToFloat(uf_remappedVS[19].x)),-(intBitsToFloat(uf_remappedVS[19].y)),-(intBitsToFloat(uf_remappedVS[19].z)),0.0)));
tempi.x = floatBitsToInt(intBitsToFloat(tempi.x) / 2.0);
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R8i.y = floatBitsToInt(intBitsToFloat(R127i.w) + 0.5);
PS0i = R8i.y;
// 15
backupReg0i = R0i.y;
R1i.x = 0;
R0i.y = floatBitsToInt(intBitsToFloat(backupReg0i) + -(intBitsToFloat(uf_remappedVS[14].w)));
PV1i.z = floatBitsToInt(intBitsToFloat(PV0i.x) + 0.5);
// 16
PV0i.x = floatBitsToInt(max(intBitsToFloat(PV1i.z), 0.0));
R9i.y = floatBitsToInt(-(intBitsToFloat(R2i.y)) + 1.0);
R0i.z = 0;
R1i.w = 0;
tempResultf = 1.0 / sqrt(intBitsToFloat(R126i.y));
PS0i = floatBitsToInt(tempResultf);
// 17
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(PS0i)));
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(uf_remappedVS[20].x)) + intBitsToFloat(R6i.x)));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(uf_remappedVS[20].z)) + intBitsToFloat(R5i.y)));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(uf_remappedVS[20].y)) + intBitsToFloat(R7i.z)));
PV1i.w = R123i.w;
R11i.x = ((R125i.z == 0)?(R1i.x):(R125i.w));
PS1i = R11i.x;
// 18
backupReg0i = R0i.y;
PV0i.x = floatBitsToInt(intBitsToFloat(PV1i.w) + -(1.0));
PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.y) + -(1.0));
PV0i.z = floatBitsToInt(max(intBitsToFloat(PV1i.x), -(intBitsToFloat(PV1i.x))));
PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.z) + -(1.0));
R11i.y = ((R125i.z == 0)?(backupReg0i):(R126i.z));
PS0i = R11i.y;
// 19
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(uf_remappedVS[20].w)) + 1.0));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(uf_remappedVS[20].w)) + 1.0));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(uf_remappedVS[20].w)) + 1.0));
PV1i.z = R123i.z;
PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.z) + -(intBitsToFloat(uf_remappedVS[14].y)));
R11i.z = ((R125i.z == 0)?(R0i.z):(R124i.w));
PS1i = R11i.z;
// 20
backupReg0i = R2i.x;
R2i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.x), intBitsToFloat(PV1i.z)));
PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.w) * intBitsToFloat(R1i.z));
R2i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(PV1i.x)));
R11i.w = ((R125i.z == 0)?(R1i.w):(backupReg0i));
R2i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.y), intBitsToFloat(PV1i.y)));
PS0i = R2i.y;
// 21
backupReg0i = R8i.y;
R8i.y = floatBitsToInt(-(intBitsToFloat(R7i.y)) + 1.0);
R5i.z = R4i.x;
R123i.w = ((R124i.y == 0)?(PV0i.y):(0x3f800000));
PV1i.w = R123i.w;
R5i.y = floatBitsToInt(-(intBitsToFloat(backupReg0i)) + 1.0);
PS1i = R5i.y;
// 22
R0i.z = PV1i.w;
R0i.z = clampFI32(R0i.z);
R5i.w = R4i.y;
// 23
predResult = (intBitsToFloat(uf_remappedVS[11].y) > 0.0);
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
R127i.z = floatBitsToInt(-(intBitsToFloat(R8i.z)) + -(intBitsToFloat(uf_remappedVS[11].x)));
PV0i.w = floatBitsToInt(-(intBitsToFloat(uf_remappedVS[11].x)) + intBitsToFloat(uf_remappedVS[11].y));
// 1
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PV0i.w));
// 2
PV0i.x = floatBitsToInt(intBitsToFloat(R127i.z) * intBitsToFloat(PS1i));
PV0i.x = clampFI32(PV0i.x);
// 3
backupReg0i = R10i.z;
R10i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PV0i.x)));
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
predResult = (intBitsToFloat(uf_remappedVS[11].w) > 0.0);
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
R127i.z = floatBitsToInt(intBitsToFloat(R8i.z) + intBitsToFloat(uf_remappedVS[11].w));
PV0i.w = floatBitsToInt(-(intBitsToFloat(uf_remappedVS[11].z)) + intBitsToFloat(uf_remappedVS[11].w));
// 1
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PV0i.w));
// 2
PV0i.x = floatBitsToInt(intBitsToFloat(R127i.z) * intBitsToFloat(PS1i));
PV0i.x = clampFI32(PV0i.x);
// 3
backupReg0i = R10i.z;
R10i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PV0i.x)));
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
// 0
PV0i.x = ((0.0 >= intBitsToFloat(uf_remappedVS[0].w))?int(0xFFFFFFFF):int(0x0));
R127i.y = floatBitsToInt(-(intBitsToFloat(R8i.z)) + -(intBitsToFloat(uf_remappedVS[21].x)));
R2i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.z), intBitsToFloat(R10i.z)));
PS0i = floatBitsToInt(intBitsToFloat(R8i.z) * intBitsToFloat(R8i.z));
// 1
backupReg0i = R0i.x;
backupReg1i = R0i.w;
R0i.x = ((PV0i.x == 0)?(backupReg0i):(0x3f800000));
R0i.y = ((PV0i.x == 0)?(R1i.y):(0x3f800000));
R0i.z = ((PV0i.x == 0)?(R4i.z):(0x3f800000));
R0i.w = ((PV0i.x == 0)?(backupReg1i):(0x3f800000));
R122i.x = floatBitsToInt((intBitsToFloat(R6i.y) * intBitsToFloat(R6i.y) + intBitsToFloat(PS0i)));
PS1i = R122i.x;
// 2
R123i.z = floatBitsToInt((intBitsToFloat(R7i.x) * intBitsToFloat(R7i.x) + intBitsToFloat(PS1i)));
PV0i.z = R123i.z;
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), intBitsToFloat(uf_remappedVS[21].y)));
// 3
PV1i.z = floatBitsToInt(max(intBitsToFloat(PV0i.w), 0.0));
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.z));
PS1i = floatBitsToInt(tempResultf);
// 4
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R7i.x), intBitsToFloat(PS1i)));
PV0i.x = R127i.x;
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.y), intBitsToFloat(PS1i)));
PV0i.y = R126i.y;
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R8i.z), intBitsToFloat(PS1i)));
PV0i.z = R127i.z;
tempResultf = log2(intBitsToFloat(PV1i.z));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
R127i.y = floatBitsToInt(tempResultf);
PS0i = R127i.y;
// 5
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(uf_remappedVS[22].x),intBitsToFloat(uf_remappedVS[22].y),intBitsToFloat(uf_remappedVS[22].z),-0.0),vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
// 6
PV0i.x = floatBitsToInt(max(intBitsToFloat(PV1i.x), -(intBitsToFloat(PV1i.x))));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), intBitsToFloat(uf_remappedVS[21].z)));
PS0i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedVS[23].z), intBitsToFloat(R127i.z)));
// 7
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedVS[23].y),intBitsToFloat(R126i.y)) + intBitsToFloat(PS0i)));
PV1i.x = R123i.x;
PV1i.w = floatBitsToInt(-(intBitsToFloat(PV0i.x)) + 1.0);
PS1i = floatBitsToInt(exp2(intBitsToFloat(PV0i.y)));
// 8
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedVS[23].x),intBitsToFloat(R127i.x)) + intBitsToFloat(PV1i.x)));
R123i.x = clampFI32(R123i.x);
PV0i.x = R123i.x;
PV0i.z = floatBitsToInt(min(intBitsToFloat(PS1i), 1.0));
tempResultf = log2(intBitsToFloat(PV1i.w));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0i = floatBitsToInt(tempResultf);
// 9
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), intBitsToFloat(uf_remappedVS[21].w)));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(uf_remappedVS[24].w)));
tempResultf = log2(intBitsToFloat(PV0i.x));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1i = floatBitsToInt(tempResultf);
// 10
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(uf_remappedVS[25].w)));
R1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(uf_remappedVS[19].w)));
R127i.x = floatBitsToInt(exp2(intBitsToFloat(PV1i.y)));
PS0i = R127i.x;
// 11
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PS0i),intBitsToFloat(uf_remappedVS[24].y)) + intBitsToFloat(uf_remappedVS[26].y)));
R127i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PS0i),intBitsToFloat(uf_remappedVS[24].x)) + intBitsToFloat(uf_remappedVS[26].x)));
R126i.y = floatBitsToInt(exp2(intBitsToFloat(PV0i.z)));
PS1i = R126i.y;
// 12
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.x),intBitsToFloat(uf_remappedVS[24].z)) + intBitsToFloat(uf_remappedVS[26].z)));
PV0i.y = R123i.y;
// 13
R1i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.y),intBitsToFloat(uf_remappedVS[25].x)) + intBitsToFloat(R127i.w)));
R1i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.y),intBitsToFloat(uf_remappedVS[25].y)) + intBitsToFloat(R127i.z)));
R1i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.y),intBitsToFloat(uf_remappedVS[25].z)) + intBitsToFloat(PV0i.y)));
}
// export

float origRatio = (float(1280)/float(720));
float newRatio = (float($width)/float($height)) ;
// *(origRatio / newRatio)

SET_POSITION(vec4(intBitsToFloat(R0i.x)*(origRatio / newRatio), intBitsToFloat(R0i.y), intBitsToFloat(R0i.z), intBitsToFloat(R0i.w)));
// export
passParameterSem0 = vec4(intBitsToFloat(R2i.x), intBitsToFloat(R2i.y), intBitsToFloat(R2i.z), intBitsToFloat(R2i.w));
// export
passParameterSem1 = vec4(intBitsToFloat(R1i.x), intBitsToFloat(R1i.y), intBitsToFloat(R1i.z), intBitsToFloat(R1i.w));
// export
passParameterSem2 = vec4(intBitsToFloat(R11i.x)*(origRatio / newRatio), intBitsToFloat(R11i.y), intBitsToFloat(R11i.z), intBitsToFloat(R11i.w));
// export
passParameterSem5 = vec4(intBitsToFloat(R5i.x), intBitsToFloat(R5i.y), intBitsToFloat(R5i.z), intBitsToFloat(R5i.w));
// export
passParameterSem3 = vec4(intBitsToFloat(R9i.x), intBitsToFloat(R9i.y), intBitsToFloat(R9i.z), intBitsToFloat(R9i.w));
// export
passParameterSem4 = vec4(intBitsToFloat(R8i.x), intBitsToFloat(R8i.y), intBitsToFloat(R8i.z), intBitsToFloat(R8i.z));
if( activeMaskStackC[1] == true ) {
// 0
}
}
