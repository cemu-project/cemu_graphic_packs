#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
#ifdef VULKAN
#define ATTR_LAYOUT(__vkSet, __location) layout(set = __vkSet, location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation)
#define SET_POSITION(_v) gl_Position = _v; gl_Position.z = (gl_Position.z + gl_Position.w) / 2.0
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale.xy,gl_FragCoord.zw)
#define gl_VertexID gl_VertexIndex
#define gl_InstanceID gl_InstanceIndex
#else
#define ATTR_LAYOUT(__vkSet, __location) layout(location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation, std140) 
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation)
#define SET_POSITION(_v) gl_Position = _v
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw)
#endif
// This shaders was auto-converted from OpenGL to Cemu.

// shader 6093720c5ca6289c
//lensflare
#ifdef VULKAN
layout(set = 0, binding = 1) uniform ufBlock
{
uniform ivec4 uf_remappedVS[8];
// uniform vec2 uf_windowSpaceToClipSpaceTransform; // Cemu optimized this uf_variable away in Cemu 1.15.7
};
#else
uniform ivec4 uf_remappedVS[8];
// uniform vec2 uf_windowSpaceToClipSpaceTransform; // Cemu optimized this uf_variable away in Cemu 1.15.7
#endif
// uf_windowSpaceToClipSpaceTransform was moved to the ufBlock
TEXTURE_LAYOUT(32, 0, 0) uniform sampler2D textureUnitVS0;
ATTR_LAYOUT(0, 0) in uvec4 attrDataSem0;
ATTR_LAYOUT(0, 1) in uvec4 attrDataSem1;
ATTR_LAYOUT(0, 2) in uvec4 attrDataSem2;
ATTR_LAYOUT(0, 3) in uvec4 attrDataSem3;
ATTR_LAYOUT(0, 4) in uvec4 attrDataSem4;
out gl_PerVertex
{
	vec4 gl_Position;
	float gl_PointSize;
};
layout(location = 0) out vec4 passParameterSem0;
layout(location = 1) out vec4 passParameterSem1;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R7i = ivec4(0);
ivec4 R8i = ivec4(0);
ivec4 R9i = ivec4(0);
ivec4 R10i = ivec4(0);
ivec4 R11i = ivec4(0);
ivec4 R12i = ivec4(0);
ivec4 R122i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R124i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
uvec4 attrDecoder;
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
bool activeMaskStack[2];
bool activeMaskStackC[3];
activeMaskStack[0] = false;
activeMaskStackC[0] = false;
activeMaskStackC[1] = false;
activeMaskStack[0] = true;
activeMaskStackC[0] = true;
activeMaskStackC[1] = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = ivec4(gl_VertexID, 0, 0, gl_InstanceID);
attrDecoder.xy = attrDataSem0.xy;
attrDecoder.xy = (attrDecoder.xy>>24)|((attrDecoder.xy>>8)&0xFF00)|((attrDecoder.xy<<8)&0xFF0000)|((attrDecoder.xy<<24));
attrDecoder.z = 0;
attrDecoder.w = 0;
R1i = ivec4(int(attrDecoder.x), int(attrDecoder.y), floatBitsToInt(0.0), floatBitsToInt(1.0));
attrDecoder.xyz = attrDataSem1.xyz;
attrDecoder.xyz = (attrDecoder.xyz>>24)|((attrDecoder.xyz>>8)&0xFF00)|((attrDecoder.xyz<<8)&0xFF0000)|((attrDecoder.xyz<<24));
attrDecoder.w = 0;
R2i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), floatBitsToInt(1.0));
attrDecoder.xyzw = floatBitsToUint(vec4(attrDataSem2.xyzw)/255.0);
R3i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), int(attrDecoder.w));
attrDecoder = attrDataSem4;
attrDecoder = (attrDecoder>>24)|((attrDecoder>>8)&0xFF00)|((attrDecoder<<8)&0xFF0000)|((attrDecoder<<24));
R5i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), int(attrDecoder.w));
attrDecoder.xyzw = floatBitsToUint(vec4(attrDataSem3.xyzw)/255.0);
R4i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), int(attrDecoder.w));
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
tempi.x = floatBitsToInt(dot(vec4(-(intBitsToFloat(uf_remappedVS[0].x)),-(intBitsToFloat(uf_remappedVS[0].y)),-(intBitsToFloat(uf_remappedVS[0].z)),-0.0),vec4(-(intBitsToFloat(uf_remappedVS[0].x)),-(intBitsToFloat(uf_remappedVS[0].y)),-(intBitsToFloat(uf_remappedVS[0].z)),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
// 1
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.x));
PS1i = floatBitsToInt(tempResultf);
// 2
R0i.x = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(uf_remappedVS[0].x)), intBitsToFloat(PS1i)));
R0i.y = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(uf_remappedVS[0].y)), intBitsToFloat(PS1i)));
R0i.z = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(uf_remappedVS[0].z)), intBitsToFloat(PS1i)));
// 3
predResult = (0.5 > intBitsToFloat(uf_remappedVS[1].w));
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
R10i.xyz = ivec3(uf_remappedVS[1].x,uf_remappedVS[1].y,uf_remappedVS[1].z);
// 1
R6i.x = floatBitsToInt(intBitsToFloat(uf_remappedVS[1].x) + -(intBitsToFloat(uf_remappedVS[2].x)));
R6i.y = floatBitsToInt(intBitsToFloat(uf_remappedVS[1].y) + -(intBitsToFloat(uf_remappedVS[2].y)));
// 2
R6i.z = floatBitsToInt(intBitsToFloat(uf_remappedVS[1].z) + -(intBitsToFloat(uf_remappedVS[2].z)));
}
activeMaskStack[1] = activeMaskStack[1] == false;
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
// 0
R10i.x = floatBitsToInt(intBitsToFloat(uf_remappedVS[1].x) + intBitsToFloat(uf_remappedVS[3].x));
R10i.y = floatBitsToInt(intBitsToFloat(uf_remappedVS[1].y) + intBitsToFloat(uf_remappedVS[3].y));
R6i.x = uf_remappedVS[1].x;
PS0i = R6i.x;
// 1
R10i.z = floatBitsToInt(intBitsToFloat(uf_remappedVS[1].z) + intBitsToFloat(uf_remappedVS[3].z));
// 2
R6i.y = uf_remappedVS[1].y;
R6i.z = uf_remappedVS[1].z;
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
R123i.x = floatBitsToInt((intBitsToFloat(R2i.y) * intBitsToFloat(0x3e22f983) + 0.5));
PV0i.x = R123i.x;
R127i.y = ((0.0 > intBitsToFloat(R2i.x))?int(0xFFFFFFFF):int(0x0));
R126i.z = ((intBitsToFloat(R2i.y) > intBitsToFloat(0x41400000))?int(0xFFFFFFFF):int(0x0));
R1i.w = 0x3f800000;
PV0i.w = R1i.w;
R125i.y = floatBitsToInt(intBitsToFloat(R2i.z) * intBitsToFloat(0x42800000));
PS0i = R125i.y;
// 1
R7i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R10i.x),intBitsToFloat(R10i.y),intBitsToFloat(R10i.z),intBitsToFloat(PV0i.w)),vec4(intBitsToFloat(uf_remappedVS[4].x),intBitsToFloat(uf_remappedVS[4].y),intBitsToFloat(uf_remappedVS[4].z),intBitsToFloat(uf_remappedVS[4].w))));
PV1i.x = R7i.x;
PV1i.y = R7i.x;
PV1i.z = R7i.x;
PV1i.w = R7i.x;
R127i.w = floatBitsToInt(fract(intBitsToFloat(PV0i.x)));
PS1i = R127i.w;
// 2
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R10i.x),intBitsToFloat(R10i.y),intBitsToFloat(R10i.z),intBitsToFloat(R1i.w)),vec4(intBitsToFloat(uf_remappedVS[5].x),intBitsToFloat(uf_remappedVS[5].y),intBitsToFloat(uf_remappedVS[5].z),intBitsToFloat(uf_remappedVS[5].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R2i.y = tempi.x;
R1i.z = 0;
PS0i = R1i.z;
// 3
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R7i.x),intBitsToFloat(PV0i.x),intBitsToFloat(PS0i),-0.0),vec4(intBitsToFloat(R7i.x),intBitsToFloat(PV0i.x),intBitsToFloat(PS0i),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R122i.x = floatBitsToInt((intBitsToFloat(R127i.w) * intBitsToFloat(0x40c90fdb) + -(intBitsToFloat(0x40490fdb))));
PS1i = R122i.x;
// 4
R125i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.x), intBitsToFloat(R7i.x)));
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.x), intBitsToFloat(R2i.y)));
R127i.z = floatBitsToInt(intBitsToFloat(PS1i) * intBitsToFloat(0x3e22f983));
PV0i.z = R127i.z;
tempResultf = 1.0 / sqrt(intBitsToFloat(PV1i.x));
PS0i = floatBitsToInt(tempResultf);
// 5
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R7i.x), intBitsToFloat(PS0i)));
R11i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.w), intBitsToFloat(uf_remappedVS[6].w)));
R1i.z = 0;
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.y), intBitsToFloat(PS0i)));
R127i.x = floatBitsToInt(sin((intBitsToFloat(PV0i.z))/0.1591549367));
PS1i = R127i.x;
// 6
R123i.x = floatBitsToInt(((R127i.y == 0)?(intBitsToFloat(PV1i.w)):(-(intBitsToFloat(PV1i.w)))));
PV0i.x = R123i.x;
R123i.z = floatBitsToInt(((R127i.y == 0)?(intBitsToFloat(PV1i.x)):(-(intBitsToFloat(PV1i.x)))));
PV0i.z = R123i.z;
R0i.w = floatBitsToInt(1.0);
R127i.w = floatBitsToInt(cos((intBitsToFloat(R127i.z))/0.1591549367));
PS0i = R127i.w;
// 7
backupReg0i = R126i.z;
R11i.x = floatBitsToInt(intBitsToFloat(R1i.x) + 0.5);
R123i.y = ((R126i.z == 0)?(PV0i.z):(0));
PV1i.y = R123i.y;
R126i.z = ((backupReg0i == 0)?(PV0i.x):(0x3f800000));
PV1i.z = R126i.z;
R12i.y = floatBitsToInt(intBitsToFloat(R1i.y) + 0.5);
PS1i = R12i.y;
// 8
backupReg0i = R127i.w;
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.z), intBitsToFloat(R127i.x)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.y), intBitsToFloat(R127i.x)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.z), intBitsToFloat(R127i.w)));
PV0i.w = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(PV1i.y)), intBitsToFloat(R127i.w)));
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.y), intBitsToFloat(backupReg0i)));
PS0i = R127i.w;
// 9
backupReg0i = R127i.x;
R127i.x = floatBitsToInt(intBitsToFloat(PV0i.y) + intBitsToFloat(PV0i.z));
PV1i.x = R127i.x;
PV1i.y = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(PV0i.w));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.z), -(intBitsToFloat(backupReg0i))));
// 10
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(PV1i.y)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(PV1i.x)));
PV0i.z = floatBitsToInt(intBitsToFloat(R127i.w) + intBitsToFloat(PV1i.z));
// 11
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R6i.x),intBitsToFloat(R6i.y),intBitsToFloat(R6i.z),-0.0),vec4(intBitsToFloat(R6i.x),intBitsToFloat(R6i.y),intBitsToFloat(R6i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R122i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(R1i.y)) + intBitsToFloat(PV0i.y)));
PS1i = R122i.x;
// 12
backupReg0i = R127i.x;
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(R1i.y)) + intBitsToFloat(R126i.x)));
R126i.w = floatBitsToInt(intBitsToFloat(PS1i) * intBitsToFloat(0x3a4ccccd));
tempResultf = 1.0 / sqrt(intBitsToFloat(PV1i.x));
R127i.w = floatBitsToInt(tempResultf);
PS0i = R127i.w;
// 13
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R10i.x),intBitsToFloat(R10i.y),intBitsToFloat(R10i.z),intBitsToFloat(R1i.w)),vec4(intBitsToFloat(uf_remappedVS[7].x),intBitsToFloat(uf_remappedVS[7].y),intBitsToFloat(uf_remappedVS[7].z),intBitsToFloat(uf_remappedVS[7].w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.x), intBitsToFloat(PS0i)));
PS1i = R126i.x;
// 14
backupReg0i = R127i.x;
R127i.x = floatBitsToInt(intBitsToFloat(backupReg0i) * intBitsToFloat(0x3ab60b61));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.y), intBitsToFloat(R127i.w)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.z), intBitsToFloat(R127i.w)));
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.y), intBitsToFloat(R126i.w)));
R2i.z = floatBitsToInt(1.0 / intBitsToFloat(PV1i.x));
PS0i = R2i.z;
// 15
backupReg0i = R0i.x;
backupReg1i = R0i.y;
backupReg2i = R0i.z;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),intBitsToFloat(backupReg2i),-0.0),vec4(intBitsToFloat(R126i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R2i.w = tempi.x;
PS1i = floatBitsToInt(intBitsToFloat(R125i.x) * intBitsToFloat(PS0i));
// 16
PV0i.x = floatBitsToInt(intBitsToFloat(R126i.y) * intBitsToFloat(R2i.z));
R126i.z = ((0.0 > intBitsToFloat(PV1i.x))?int(0xFFFFFFFF):int(0x0));
PV0i.z = R126i.z;
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.y), intBitsToFloat(R127i.x)));
R0i.x = floatBitsToInt(intBitsToFloat(PS1i) + intBitsToFloat(R127i.w));
PS0i = R0i.x;
// 17
R6i.x = ((PV0i.z == 0)?(PS0i):(0x3f800000));
R0i.y = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(PV0i.w));
PV1i.y = R0i.y;
// 18
backupReg0i = R1i.z;
R8i.y = ((R126i.z == 0)?(PV1i.y):(0x3f800000));
R1i.z = ((R126i.z == 0)?(backupReg0i):(0x3f800000));
R4i.w = ((R126i.z == 0)?(R0i.w):(0x3f800000));
// 19
predResult = (intBitsToFloat(R2i.w) > intBitsToFloat(R3i.y));
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
R127i.y = floatBitsToInt(-(intBitsToFloat(R3i.x)) + intBitsToFloat(R2i.w));
PV0i.w = floatBitsToInt(-(intBitsToFloat(R3i.x)) + intBitsToFloat(R3i.y));
// 1
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PV0i.w));
// 2
PV0i.x = floatBitsToInt(intBitsToFloat(R127i.y) * intBitsToFloat(PS1i));
PV0i.x = clampFI32(PV0i.x);
// 3
backupReg0i = R11i.y;
R11i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PV0i.x)));
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
predResult = (intBitsToFloat(R3i.z) > intBitsToFloat(R2i.w));
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
R127i.y = floatBitsToInt(-(intBitsToFloat(R3i.w)) + intBitsToFloat(R2i.w));
PV0i.w = floatBitsToInt(intBitsToFloat(R3i.z) + -(intBitsToFloat(R3i.w)));
// 1
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PV0i.w));
// 2
PV0i.x = floatBitsToInt(intBitsToFloat(R127i.y) * intBitsToFloat(PS1i));
PV0i.x = clampFI32(PV0i.x);
// 3
backupReg0i = R11i.y;
R11i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PV0i.x)));
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
// 0
PV0i.x = floatBitsToInt(intBitsToFloat(uf_remappedVS[6].x) * intBitsToFloat(0x41000000));
PV0i.y = floatBitsToInt(intBitsToFloat(uf_remappedVS[6].y) * intBitsToFloat(0x41000000));
PV0i.z = floatBitsToInt(intBitsToFloat(R7i.x) * intBitsToFloat(R2i.z));
PV0i.w = floatBitsToInt(intBitsToFloat(R2i.y) * intBitsToFloat(R2i.z));
R127i.w = 0;
PS0i = R127i.w;
// 1
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(uf_remappedVS[6].z)));
PV1i.x = R127i.x;
PV1i.y = PV0i.z;
PV1i.y = floatBitsToInt(intBitsToFloat(PV1i.y) / 2.0);
PV1i.z = floatBitsToInt(-(intBitsToFloat(PV0i.w)));
PV1i.z = floatBitsToInt(intBitsToFloat(PV1i.z) / 2.0);
R125i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(uf_remappedVS[6].z)));
PV1i.w = R125i.w;
R126i.w = 0;
PS1i = R126i.w;
// 2
R0i.x = floatBitsToInt(intBitsToFloat(PV1i.y) + 0.5);
PV0i.x = R0i.x;
R0i.y = floatBitsToInt(intBitsToFloat(PV1i.z) + 0.5);
PV0i.y = R0i.y;
PV0i.z = PV1i.x;
PV0i.z = floatBitsToInt(intBitsToFloat(PV0i.z) * 2.0);
PV0i.w = PV1i.w;
PV0i.w = floatBitsToInt(intBitsToFloat(PV0i.w) * 2.0);
PS0i = floatBitsToInt(-(intBitsToFloat(PV1i.x)));
PS0i = floatBitsToInt(intBitsToFloat(PS0i) * 2.0);
// 3
R1i.x = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(PV0i.z));
R1i.y = floatBitsToInt(intBitsToFloat(PV0i.y) + intBitsToFloat(PV0i.w));
PV1i.z = R125i.w;
PV1i.z = floatBitsToInt(intBitsToFloat(PV1i.z) * 2.0);
R2i.w = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(PS0i));
PS1i = R127i.x;
PS1i = floatBitsToInt(intBitsToFloat(PS1i) * 2.0);
// 4
R3i.x = floatBitsToInt(intBitsToFloat(R0i.x) + intBitsToFloat(PS1i));
R2i.y = floatBitsToInt(intBitsToFloat(R0i.y) + intBitsToFloat(PV1i.z));
PV0i.z = floatBitsToInt(-(intBitsToFloat(R125i.w)));
PV0i.z = floatBitsToInt(intBitsToFloat(PV0i.z) * 2.0);
PV0i.w = floatBitsToInt(-(intBitsToFloat(R127i.x)));
PV0i.w = floatBitsToInt(intBitsToFloat(PV0i.w) * 2.0);
PS0i = floatBitsToInt(-(intBitsToFloat(R125i.w)));
PS0i = floatBitsToInt(intBitsToFloat(PS0i) * 2.0);
// 5
R2i.x = floatBitsToInt(intBitsToFloat(R0i.x) + intBitsToFloat(PV0i.w));
R3i.y = floatBitsToInt(intBitsToFloat(R0i.y) + intBitsToFloat(PV0i.z));
R2i.z = floatBitsToInt(intBitsToFloat(R0i.y) + intBitsToFloat(PS0i));
R6i.w = floatBitsToInt(intBitsToFloat(R0i.x) + intBitsToFloat(R127i.x));
R6i.y = floatBitsToInt(intBitsToFloat(R0i.y) + intBitsToFloat(R127i.w));
PS1i = R6i.y;
// 6
PV0i.x = floatBitsToInt(-(intBitsToFloat(R125i.w)));
R7i.y = floatBitsToInt(intBitsToFloat(R0i.y) + intBitsToFloat(R126i.w));
PV0i.z = floatBitsToInt(-(intBitsToFloat(R127i.x)));
PV0i.w = 0;
R9i.y = ((0.0 >= intBitsToFloat(R11i.y))?int(0xFFFFFFFF):int(0x0));
PS0i = R9i.y;
// 7
backupReg0i = R8i.y;
R7i.x = floatBitsToInt(intBitsToFloat(R0i.x) + intBitsToFloat(PV0i.z));
R8i.y = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(R0i.y));
R8i.z = floatBitsToInt(intBitsToFloat(PV0i.w) + intBitsToFloat(R0i.x));
R0i.w = ((PS0i == 0)?(R6i.x):(0x3f800000));
R0i.z = ((PS0i == 0)?(backupReg0i):(0x3f800000));
PS1i = R0i.z;
}
if( activeMaskStackC[1] == true ) {
R0i.x = floatBitsToInt(textureLod(textureUnitVS0, intBitsToFloat(R0i.xy),0.0).x);
R1i.x = floatBitsToInt(textureLod(textureUnitVS0, intBitsToFloat(R1i.xy),0.0).x);
R6i.x = floatBitsToInt(textureLod(textureUnitVS0, intBitsToFloat(R2i.wy),0.0).x);
R3i.x = floatBitsToInt(textureLod(textureUnitVS0, intBitsToFloat(R3i.xy),0.0).x);
R2i.x = floatBitsToInt(textureLod(textureUnitVS0, intBitsToFloat(R2i.xz),0.0).x);
R8i.x = floatBitsToInt(textureLod(textureUnitVS0, intBitsToFloat(R6i.wy),0.0).x);
R7i.x = floatBitsToInt(textureLod(textureUnitVS0, intBitsToFloat(R7i.xy),0.0).x);
R9i.x = floatBitsToInt(textureLod(textureUnitVS0, intBitsToFloat(R8i.zy),0.0).x);
}
if( activeMaskStackC[1] == true ) {
// 0
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R10i.x),intBitsToFloat(R10i.y),intBitsToFloat(R10i.z),intBitsToFloat(R1i.w)),vec4(intBitsToFloat(uf_remappedVS[0].x),intBitsToFloat(uf_remappedVS[0].y),intBitsToFloat(uf_remappedVS[0].z),intBitsToFloat(uf_remappedVS[0].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R125i.w = ((R9i.y == 0)?(R1i.z):(0x3f800000));
PS0i = R125i.w;
// 1
backupReg0i = R9i.y;
backupReg1i = R5i.x;
R127i.x = floatBitsToInt(min(-(intBitsToFloat(PV0i.x)), intBitsToFloat(0x45fef900)));
PV1i.x = R127i.x;
R9i.y = ((backupReg0i == 0)?(R4i.w):(0x3f800000));
R5i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.z),intBitsToFloat(R11i.x)) + intBitsToFloat(backupReg1i)));
PS1i = R5i.x;
// 2
backupReg0i = R5i.y;
PV0i.y = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + intBitsToFloat(R1i.x));
PV0i.z = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + intBitsToFloat(R0i.x));
PV0i.w = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + intBitsToFloat(R6i.x));
R5i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.w),intBitsToFloat(R12i.y)) + intBitsToFloat(backupReg0i)));
PS0i = R5i.y;
// 3
R126i.x = ((0.0 > intBitsToFloat(PV0i.y))?int(0xFFFFFFFF):int(0x0));
PV1i.y = ((0.0 > intBitsToFloat(PV0i.z))?int(0xFFFFFFFF):int(0x0));
R127i.z = ((0.0 > intBitsToFloat(PV0i.w))?int(0xFFFFFFFF):int(0x0));
PV1i.w = floatBitsToInt(-(intBitsToFloat(R127i.x)) + intBitsToFloat(R3i.x));
PS1i = floatBitsToInt(-(intBitsToFloat(R127i.x)) + intBitsToFloat(R2i.x));
// 4
R125i.x = ((0.0 > intBitsToFloat(PS1i))?int(0xFFFFFFFF):int(0x0));
R127i.y = ((0.0 > intBitsToFloat(PV1i.w))?int(0xFFFFFFFF):int(0x0));
PV0i.z = floatBitsToInt(-(intBitsToFloat(R127i.x)) + intBitsToFloat(R8i.x));
R126i.w = ((PV1i.y == 0)?(0):(0x3e4ccccd));
PV0i.w = R126i.w;
PS0i = floatBitsToInt(-(intBitsToFloat(R127i.x)) + intBitsToFloat(R7i.x));
// 5
backupReg0i = R127i.x;
R127i.x = ((0.0 > intBitsToFloat(PV0i.z))?int(0xFFFFFFFF):int(0x0));
R125i.y = ((0.0 > intBitsToFloat(PS0i))?int(0xFFFFFFFF):int(0x0));
PV1i.z = floatBitsToInt(intBitsToFloat(PV0i.w) + intBitsToFloat(0x3dcccccd));
PV1i.w = floatBitsToInt(-(intBitsToFloat(backupReg0i)) + intBitsToFloat(R9i.x));
// 6
backupReg0i = R126i.w;
R124i.y = ((0.0 > intBitsToFloat(PV1i.w))?int(0xFFFFFFFF):int(0x0));
R126i.w = ((R126i.x == 0)?(backupReg0i):(PV1i.z));
PV0i.w = R126i.w;
// 7
PV1i.z = floatBitsToInt(intBitsToFloat(PV0i.w) + intBitsToFloat(0x3dcccccd));
// 8
R126i.y = ((R127i.z == 0)?(R126i.w):(PV1i.z));
PV0i.y = R126i.y;
// 9
PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.y) + intBitsToFloat(0x3dcccccd));
// 10
R127i.z = ((R127i.y == 0)?(R126i.y):(PV1i.x));
PV0i.z = R127i.z;
// 11
PV1i.z = floatBitsToInt(intBitsToFloat(PV0i.z) + intBitsToFloat(0x3dcccccd));
// 12
R127i.y = ((R125i.x == 0)?(R127i.z):(PV1i.z));
PV0i.y = R127i.y;
// 13
PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.y) + intBitsToFloat(0x3dcccccd));
// 14
backupReg0i = R127i.y;
R127i.y = ((R127i.x == 0)?(backupReg0i):(PV1i.w));
PV0i.y = R127i.y;
// 15
PV1i.y = floatBitsToInt(intBitsToFloat(PV0i.y) + intBitsToFloat(0x3dcccccd));
// 16
R126i.w = ((R125i.y == 0)?(R127i.y):(PV1i.y));
PV0i.w = R126i.w;
// 17
PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.w) + intBitsToFloat(0x3dcccccd));
// 18
R127i.z = ((R124i.y == 0)?(R126i.w):(PV1i.x));
PV0i.z = R127i.z;
// 19
PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.z) + intBitsToFloat(0x3dcccccd));
// 20
R123i.y = ((R124i.y == 0)?(R127i.z):(PV1i.w));
PV0i.y = R123i.y;
// 21
PV1i.x = floatBitsToInt(-(intBitsToFloat(PV0i.y)) + 1.0);
// 22
R4i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R11i.y), intBitsToFloat(PV1i.x)));
PV0i.w = R4i.w;
// 23
PV1i.z = ((0.0 >= intBitsToFloat(PV0i.w))?int(0xFFFFFFFF):int(0x0));
// 24
R0i.x = ((PV1i.z == 0)?(R0i.w):(0x3f800000));
R0i.y = ((PV1i.z == 0)?(R0i.z):(0x3f800000));
R0i.z = ((PV1i.z == 0)?(R125i.w):(0x3f800000));
R0i.w = ((PV1i.z == 0)?(R9i.y):(0x3f800000));
}
// export
float origRatio = (float(1280)/float(720));
float newRatio = (float($width)/float($height)) ;
// *(origRatio / newRatio)
SET_POSITION(vec4(intBitsToFloat(R0i.x)*(origRatio / newRatio), intBitsToFloat(R0i.y), intBitsToFloat(R0i.z), intBitsToFloat(R0i.w)));
// export
passParameterSem0 = vec4(intBitsToFloat(R4i.x), intBitsToFloat(R4i.y), intBitsToFloat(R4i.z), intBitsToFloat(R4i.w));
// export
passParameterSem1 = vec4(intBitsToFloat(R5i.x), intBitsToFloat(R5i.y), intBitsToFloat(R5i.z), intBitsToFloat(R5i.z));
if( activeMaskStackC[1] == true ) {
// 0
}
}
