#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_packing : enable
// shader 3259d3b3ca333bf3
const float resXScale = float($width)/float($gameWidth);
const float resYScale = float($height)/float($gameHeight);
uniform ivec4 uf_remappedVS[1];
uniform vec2 uf_windowSpaceToClipSpaceTransform;
layout(location = 0) in uvec4 attrDataSem0;
layout(location = 1) in uvec4 attrDataSem8;
out gl_PerVertex
{
	vec4 gl_Position;
	float gl_PointSize;
};
layout(location = 2) out vec4 passParameterSem138;
layout(location = 1) out vec4 passParameterSem137;
layout(location = 0) out vec4 passParameterSem136;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){return mix(0.0, a*b, (a != 0.0) && (b != 0.0));}
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R127f = vec4(0.0);
uvec4 attrDecoder;
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = floatBitsToInt(ivec4(gl_VertexID, 0, 0, gl_InstanceID));
attrDecoder = attrDataSem0;
attrDecoder = (attrDecoder>>24)|((attrDecoder>>8)&0xFF00)|((attrDecoder<<8)&0xFF0000)|((attrDecoder<<24));
R1f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(int(attrDecoder.z)), intBitsToFloat(int(attrDecoder.w)));
attrDecoder.xy = attrDataSem8.xy;
attrDecoder.xy = (attrDecoder.xy>>24)|((attrDecoder.xy>>8)&0xFF00)|((attrDecoder.xy<<8)&0xFF0000)|((attrDecoder.xy<<24));
attrDecoder.z = 0;
attrDecoder.w = 0;
R2f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(floatBitsToInt(0.0)), intBitsToFloat(floatBitsToInt(1.0)));
// 0
R127f.x = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[0].y)/ resXScale,intBitsToFloat(uf_remappedVS[0].z)) + R2f.y);
PV0f.x = R127f.x;
R123f.y = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[0].x)/ resXScale,intBitsToFloat(uf_remappedVS[0].z)) + R2f.x);
PV0f.y = R123f.y;
R127f.z = mul_nonIEEE(intBitsToFloat(uf_remappedVS[0].y) / resYScale, intBitsToFloat(uf_remappedVS[0].w));
PV0f.z = R127f.z;
PV0f.w = mul_nonIEEE(intBitsToFloat(uf_remappedVS[0].x) / resXScale, intBitsToFloat(uf_remappedVS[0].w));
// 1
PV1f.x = PV0f.x + -(PV0f.z);
PV1f.y = PV0f.y + -(PV0f.w);
R3f.x = PV0f.y + PV0f.w;
PS1f = R3f.x;
// 2
R0f.x = (intBitsToFloat(uf_remappedVS[0].x) / resXScale * 2.0 + PS1f);
PV0f.x = R0f.x;
R3f.y = R127f.x + R127f.z;
PV0f.y = R3f.y;
R3f.z = PV1f.y;
PV0f.z = R3f.z;
R3f.w = PV1f.x;
PV0f.w = R3f.w;
// 3
R2f.x = (intBitsToFloat(uf_remappedVS[0].x) / resXScale * 2.0 + PV0f.x);
R0f.y = (intBitsToFloat(uf_remappedVS[0].y) / resYScale * 2.0 + PV0f.y);
PV1f.y = R0f.y;
R123f.z = (-(intBitsToFloat(uf_remappedVS[0].y)) / resYScale * 2.0 + PV0f.w);
PV1f.z = R123f.z;
R123f.w = (-(intBitsToFloat(uf_remappedVS[0].x)) / resXScale * 2.0 + PV0f.z);
PV1f.w = R123f.w;
// 4
R2f.y = (intBitsToFloat(uf_remappedVS[0].y) / resYScale * 2.0 + PV1f.y);
R0f.z = PV1f.w;
PV0f.z = R0f.z;
R0f.w = PV1f.z;
PV0f.w = R0f.w;
// 5
R123f.x = (-(intBitsToFloat(uf_remappedVS[0].y)) / resYScale * 2.0 + PV0f.w);
PV1f.x = R123f.x;
R123f.y = (-(intBitsToFloat(uf_remappedVS[0].x)) / resXScale * 2.0 + PV0f.z);
PV1f.y = R123f.y;
// 6
R2f.z = PV1f.y;
R2f.w = PV1f.x;
// export
gl_Position = vec4(R1f.x, R1f.y, R1f.z, R1f.w);
// export
passParameterSem138 = vec4(R2f.x, R2f.y, R2f.z, R2f.w);
// export
passParameterSem137 = vec4(R0f.x, R0f.y, R0f.z, R0f.w);
// export
passParameterSem136 = vec4(R3f.x, R3f.y, R3f.z, R3f.w);
}
