#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
#ifdef VULKAN
#define ATTR_LAYOUT(__vkSet, __location) layout(set = __vkSet, location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation)
#define SET_POSITION(_v) gl_Position = _v; gl_Position.z = (gl_Position.z + gl_Position.w) / 2.0
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale.xy,gl_FragCoord.zw)
#define gl_VertexID gl_VertexIndex
#define gl_InstanceID gl_InstanceIndex
#else
#define ATTR_LAYOUT(__vkSet, __location) layout(location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation, std140) 
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation)
#define SET_POSITION(_v) gl_Position = _v
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw)
#endif
// This shader was automatically converted to be cross-compatible with Vulkan and OpenGL.

// shader d121b990e877579c
//shadow penumbra
const float resXScale = float($width)/float($gameWidth);
const float resYScale = float($height)/float($gameHeight); 

#ifdef VULKAN
layout(set = 1, binding = 5) uniform ufBlock
{
uniform ivec4 uf_remappedPS[11];
uniform vec4 uf_fragCoordScale;
};
#else
uniform ivec4 uf_remappedPS[11];
uniform vec2 uf_fragCoordScale;
#endif
TEXTURE_LAYOUT(11, 1, 0) uniform sampler2D textureUnitPS11;
TEXTURE_LAYOUT(12, 1, 1) uniform sampler2DShadow textureUnitPS12;
TEXTURE_LAYOUT(13, 1, 2) uniform sampler2D textureUnitPS13;
TEXTURE_LAYOUT(14, 1, 3) uniform sampler2D textureUnitPS14;
TEXTURE_LAYOUT(15, 1, 4) uniform sampler2D textureUnitPS15;
layout(location = 0) in vec4 passParameterSem130;
layout(location = 1) in vec4 passParameterSem131;
layout(location = 2) in vec4 passParameterSem132;
layout(location = 0) out vec4 passPixelColor0;
// uf_fragCoordScale was moved to the ufBlock
int clampFI32(int v)
{
	if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
	else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
	return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){return mix(0.0, a*b, (a != 0.0) && (b != 0.0));}
void main()
{
	vec4 R0f = vec4(0.0);
	vec4 R1f = vec4(0.0);
	vec4 R2f = vec4(0.0);
	vec4 R3f = vec4(0.0);
	vec4 R4f = vec4(0.0);
	vec4 R5f = vec4(0.0);
	vec4 R6f = vec4(0.0);
	vec4 R7f = vec4(0.0);
	vec4 R123f = vec4(0.0);
	vec4 R124f = vec4(0.0);
	vec4 R125f = vec4(0.0);
	vec4 R126f = vec4(0.0);
	vec4 R127f = vec4(0.0);
	float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
	vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
	float PS0f = 0.0, PS1f = 0.0;
	vec4 tempf = vec4(0.0);
	float tempResultf;
	int tempResulti;
	ivec4 ARi = ivec4(0);
	bool predResult = true;
	vec3 cubeMapSTM;
	int cubeMapFaceId;
	R0f = passParameterSem130;
	R1f = passParameterSem131;
	R2f = passParameterSem132;
	R3f.x = (texture(textureUnitPS15, R0f.xy).x);
	R4f.xyz = (texture(textureUnitPS11, R0f.xy).xyz);
	R7f.xy = (texture(textureUnitPS13, R0f.xy).xy);
	R0f.xyz = (texture(textureUnitPS14, R0f.xy).xyz);
	// 0
	PV0f.x = R2f.x;
	PV0f.x /= 2.0;
	PV0f.y = R2f.y;
	PV0f.y /= 2.0;
	PV0f.z = R3f.x + -(intBitsToFloat(uf_remappedPS[0].y));
	R127f.w = 1.0;
	R6f.x = (R4f.x * 2.0 + -(1.0));
	PS0f = R6f.x;
	// 1
	R5f.x = (R4f.y * 2.0 + -(1.0));
	R127f.y = fract(PV0f.y);
	PV1f.y = R127f.y;
	R127f.z = fract(PV0f.x);
	PV1f.z = R127f.z;
	R7f.w = (R4f.z * 2.0 + -(1.0));
	PS1f = 1.0 / PV0f.z;
	// 2
	R123f.x = (mul_nonIEEE(PV1f.z,intBitsToFloat(uf_remappedPS[1].x)) + intBitsToFloat(uf_remappedPS[1].y));
	PV0f.x = R123f.x;
	R123f.y = (mul_nonIEEE(PV1f.y,intBitsToFloat(uf_remappedPS[1].x)) + intBitsToFloat(uf_remappedPS[1].y));
	PV0f.y = R123f.y;
	R5f.z = R0f.x;
	R126f.w = PS1f * intBitsToFloat(uf_remappedPS[0].x);
	PV0f.w = R126f.w;
	R6f.w = 0.0;
	PS0f = R6f.w;
	// 3
	R123f.x = (mul_nonIEEE(R127f.z,intBitsToFloat(uf_remappedPS[1].x)) + intBitsToFloat(uf_remappedPS[1].z)/resXScale);
	PV1f.x = R123f.x;
	R123f.y = (mul_nonIEEE(R127f.y,intBitsToFloat(uf_remappedPS[1].x)) + intBitsToFloat(uf_remappedPS[1].z)/resXScale);
	PV1f.y = R123f.y;
	R2f.z = mul_nonIEEE(R1f.z, PV0f.w);
	PV1f.z = R2f.z;
	R124f.w = PV0f.x + 0.0;
	R0f.w = PV0f.y + 0.0;
	PS1f = R0f.w;
	// 4
	R127f.x = mul_nonIEEE(R1f.x, PV1f.z);
	PV0f.x = R127f.x;
	R127f.y = mul_nonIEEE(R1f.y, PV1f.z);
	PV0f.y = R127f.y;
	R127f.z = mul_nonIEEE(R1f.z, PV1f.z);
	PV0f.z = R127f.z;
	R125f.w = PV1f.x + 0.0;
	R126f.z = PV1f.y + 0.0;
	PS0f = R126f.z;
	// 5
	tempf.x = dot(vec4(PV0f.x,PV0f.y,PV0f.z,R127f.w),vec4(intBitsToFloat(uf_remappedPS[2].x),intBitsToFloat(uf_remappedPS[2].y),intBitsToFloat(uf_remappedPS[2].z),intBitsToFloat(uf_remappedPS[2].w)));
	PV1f.x = tempf.x;
	PV1f.y = tempf.x;
	PV1f.z = tempf.x;
	PV1f.w = tempf.x;
	R3f.x = mul_nonIEEE(R1f.x, R126f.w);
	PS1f = R3f.x;
	// 6
	tempf.x = dot(vec4(R127f.x,R127f.y,R127f.z,R127f.w),vec4(intBitsToFloat(uf_remappedPS[3].x),intBitsToFloat(uf_remappedPS[3].y),intBitsToFloat(uf_remappedPS[3].z),intBitsToFloat(uf_remappedPS[3].w)));
	PV0f.x = tempf.x;
	PV0f.y = tempf.x;
	PV0f.z = tempf.x;
	PV0f.w = tempf.x;
	R126f.x = 1.0 / PV1f.x;
	PS0f = R126f.x;
	// 7
	tempf.x = dot(vec4(R127f.x,R127f.y,R127f.z,R127f.w),vec4(intBitsToFloat(uf_remappedPS[4].x),intBitsToFloat(uf_remappedPS[4].y),intBitsToFloat(uf_remappedPS[4].z),intBitsToFloat(uf_remappedPS[4].w)));
	PV1f.x = tempf.x;
	PV1f.y = tempf.x;
	PV1f.z = tempf.x;
	PV1f.w = tempf.x;
	R126f.y = PV0f.x * PS0f;
	PS1f = R126f.y;
	// 8
	tempf.x = dot(vec4(R127f.x,R127f.y,R127f.z,R127f.w),vec4(intBitsToFloat(uf_remappedPS[5].x),intBitsToFloat(uf_remappedPS[5].y),intBitsToFloat(uf_remappedPS[5].z),intBitsToFloat(uf_remappedPS[5].w)));
	PV0f.x = tempf.x;
	PV0f.y = tempf.x;
	PV0f.z = tempf.x;
	PV0f.w = tempf.x;
	R127f.w = PV1f.x * R126f.x;
	PS0f = R127f.w;
	// 9
	backupReg0f = R126f.x;
	R126f.x = R126f.y;
	R126f.x = clamp(R126f.x, 0.0, 1.0);
	PV1f.x = R126f.x;
	R4f.y = mul_nonIEEE(R1f.y, R126f.w);
	R127f.z = PV0f.x * backupReg0f;
	PV1f.z = R127f.z;
	R5f.w = -(R3f.x) + intBitsToFloat(uf_remappedPS[6].x);
	R1f.x = PS0f + R125f.w;
	PS1f = R1f.x;
	// 10
	R4f.x = R127f.w + R125f.w;
	R1f.y = PV1f.z + R126f.z;
	R4f.z = PV1f.z + R0f.w;
	R1f.w = PV1f.x;
	R2f.y = PV1f.z + R126f.z;
	PS0f = R2f.y;
	// 11
	R2f.x = R127f.w + R124f.w;
	R3f.y = R127f.z + R0f.w;
	R3f.z = R127f.w + R124f.w;
	R4f.w = R126f.x;
	R2f.w = R126f.x;
	PS1f = R2f.w;
	// 12
	backupReg0f = R0f.z;
	R0f.x = R0f.y;
	R0f.y = -(R4f.y) + intBitsToFloat(uf_remappedPS[6].y)/3;
	R0f.z = -(R2f.z) + intBitsToFloat(uf_remappedPS[6].z)/3;
	R3f.w = R126f.x;
	R1f.z = backupReg0f;
	PS0f = R1f.z;
	R1f.x = (texture(textureUnitPS12, vec3(R1f.xy, R1f.w)));
	R1f.y = (texture(textureUnitPS12, vec3(R4f.xz, R4f.w)));
	R4f.z = (texture(textureUnitPS12, vec3(R2f.xy, R2f.w)));
	R3f.w = (texture(textureUnitPS12, vec3(R3f.zy, R3f.w)));
	// 0
	tempf.x = dot(vec4(R3f.x,R4f.y,R2f.z,-0.0),vec4(R3f.x,R4f.y,R2f.z,0.0));
	PV0f.x = tempf.x;
	PV0f.y = tempf.x;
	PV0f.z = tempf.x;
	PV0f.w = tempf.x;
	R126f.x = intBitsToFloat(uf_remappedPS[7].x);
	PS0f = R126f.x;
	// 1
	backupReg0f = R0f.y;
	backupReg0f = R0f.y;
	backupReg1f = R0f.z;
	backupReg1f = R0f.z;
	tempf.x = dot(vec4(R5f.w,backupReg0f,backupReg1f,-0.0),vec4(R5f.w,backupReg0f,backupReg1f,0.0));
	PV1f.x = tempf.x;
	PV1f.y = tempf.x;
	PV1f.z = tempf.x;
	PV1f.w = tempf.x;
	tempResultf = 1.0 / sqrt(PV0f.x);
	PS1f = tempResultf;
	// 2
	R127f.x = mul_nonIEEE(R3f.x, PS1f);
	PV0f.x = R127f.x;
	R126f.y = mul_nonIEEE(R4f.y, PS1f);
	PV0f.y = R126f.y;
	R127f.z = mul_nonIEEE(R2f.z, PS1f);
	PV0f.z = R127f.z;
	R127f.w = intBitsToFloat(uf_remappedPS[7].y);
	R127f.y = sqrt(PV1f.x);
	PS0f = R127f.y;
	// 3
	tempf.x = dot(vec4(R6f.x,R5f.x,R7f.w,-0.0),vec4(PV0f.x,PV0f.y,PV0f.z,0.0));
	PV1f.x = tempf.x;
	PV1f.y = tempf.x;
	PV1f.z = tempf.x;
	PV1f.w = tempf.x;
	PS1f = 1.0 / PS0f;
	// 4
	R125f.x = R5f.w * PS1f;
	PV0f.x = R125f.x;
	R125f.y = R0f.y * PS1f;
	PV0f.y = R125f.y;
	R126f.z = R0f.z * PS1f;
	PV0f.z = R126f.z;
	R124f.w = PV1f.x + PV1f.x;
	PV0f.w = R124f.w;
	PS0f = intBitsToFloat(uf_remappedPS[7].z);
	// 5
	backupReg0f = R127f.x;
	tempf.x = dot(vec4(-(R126f.x),-(R127f.w),-(PS0f),-(R6f.w)),vec4(PV0f.x,PV0f.y,PV0f.z,PV0f.z));
	PV1f.x = tempf.x;
	PV1f.y = tempf.x;
	PV1f.z = tempf.x;
	PV1f.w = tempf.x;
	R127f.x = (mul_nonIEEE(-(PV0f.w),R6f.x) + backupReg0f);
	PS1f = R127f.x;
	// 6
	backupReg0f = R127f.z;
	backupReg1f = R127f.y;
	R123f.x = (mul_nonIEEE(PV1f.x,intBitsToFloat(uf_remappedPS[8].z)) + intBitsToFloat(uf_remappedPS[8].w));
	R123f.x = clamp(R123f.x, 0.0, 1.0);
	PV0f.x = R123f.x;
	R127f.y = (mul_nonIEEE(-(R124f.w),R5f.x) + R126f.y);
	R127f.z = (mul_nonIEEE(-(R124f.w),R7f.w) + backupReg0f);
	R123f.w = (mul_nonIEEE(backupReg1f,intBitsToFloat(uf_remappedPS[8].x)) + intBitsToFloat(uf_remappedPS[8].y));
	R123f.w = clamp(R123f.w, 0.0, 1.0);
	PV0f.w = R123f.w;
	R2f.w = 0.0;
	PS0f = R2f.w;
	// 7
	tempf.x = dot(vec4(R1f.x,R1f.y,R4f.z,R3f.w),vec4(0.25,0.25,0.25,0.25));
	PV1f.x = tempf.x;
	PV1f.y = tempf.x;
	PV1f.z = tempf.x;
	PV1f.w = tempf.x;
	R126f.x = mul_nonIEEE(PV0f.w, PV0f.x);
	PS1f = R126f.x;
	// 8
	tempf.x = dot(vec4(R125f.x,R125f.y,R126f.z,-0.0),vec4(R127f.x,R127f.y,R127f.z,0.0));
	tempf.x = clamp(tempf.x, 0.0, 1.0);
	PV0f.x = tempf.x;
	PV0f.y = tempf.x;
	PV0f.z = tempf.x;
	PV0f.w = tempf.x;
	R127f.x = PV1f.x + -(1.0);
	PS0f = R127f.x;
	// 9
	backupReg0f = R126f.z;
	R124f.x = mul_nonIEEE(R7f.y, intBitsToFloat(uf_remappedPS[9].y));
	R127f.y = mul_nonIEEE(R126f.x, intBitsToFloat(uf_remappedPS[10].x));
	R126f.z = mul_nonIEEE(R126f.x, intBitsToFloat(uf_remappedPS[10].y));
	PV1f.w = max(PV0f.x, -(PV0f.x));
	PS1f = mul_nonIEEE(R7f.w, backupReg0f);
	// 10
	R123f.x = (mul_nonIEEE(R5f.x,R125f.y) + PS1f);
	PV0f.x = R123f.x;
	PV0f.y = mul_nonIEEE(R126f.x, intBitsToFloat(uf_remappedPS[10].z));
	R123f.w = (mul_nonIEEE(R127f.x,intBitsToFloat(uf_remappedPS[10].w)) + 1.0);
	PV0f.w = R123f.w;
	tempResultf = log2(PV1f.w);
	if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
	PS0f = tempResultf;
	// 11
	backupReg0f = R126f.z;
	R123f.x = (mul_nonIEEE(R6f.x,R125f.x) + PV0f.x);
	R123f.x = clamp(R123f.x, 0.0, 1.0);
	PV1f.x = R123f.x;
	PV1f.y = mul_nonIEEE(R124f.x, PS0f);
	R126f.z = mul_nonIEEE(R127f.y, PV0f.w);
	PV1f.z = R126f.z;
	R124f.w = mul_nonIEEE(backupReg0f, PV0f.w);
	PV1f.w = R124f.w;
	R124f.x = mul_nonIEEE(PV0f.y, PV0f.w);
	PS1f = R124f.x;
	// 12
	PV0f.x = mul_nonIEEE(PV1f.x, PV1f.z);
	PV0f.x *= 2.0;
	PV0f.z = mul_nonIEEE(PV1f.x, PS1f);
	PV0f.z *= 2.0;
	PV0f.w = mul_nonIEEE(PV1f.x, PV1f.w);
	PV0f.w *= 2.0;
	R125f.x = exp2(PV1f.y);
	PS0f = R125f.x;
	// 13
	backupReg0f = R0f.x;
	backupReg1f = R124f.w;
	PV1f.x = mul_nonIEEE(backupReg0f, PV0f.w);
	PV1f.y = mul_nonIEEE(R5f.z, PV0f.x);
	PV1f.z = mul_nonIEEE(PS0f, R126f.z);
	R124f.w = mul_nonIEEE(R1f.z, PV0f.z);
	PS1f = mul_nonIEEE(PS0f, backupReg1f);
	// 14
	R123f.x = (mul_nonIEEE(R7f.x,PS1f) + PV1f.x);
	PV0f.x = R123f.x;
	PV0f.y = mul_nonIEEE(R125f.x, R124f.x);
	R123f.z = (mul_nonIEEE(R7f.x,PV1f.z) + PV1f.y);
	PV0f.z = R123f.z;
	// 15
	R123f.x = (mul_nonIEEE(R7f.x,PV0f.y) + R124f.w);
	PV1f.x = R123f.x;
	R2f.y = PV0f.x * 0.25;
	R2f.x = PV0f.z * 0.25;
	PS1f = R2f.x;
	// 16
	R2f.z = PV1f.x * 0.25;
	// export
	passPixelColor0 = vec4(R2f.x, R2f.y, R2f.z, R2f.w);
}
