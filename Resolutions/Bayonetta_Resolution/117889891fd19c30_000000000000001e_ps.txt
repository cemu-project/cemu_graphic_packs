#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
#ifdef VULKAN
#define ATTR_LAYOUT(__vkSet, __location) layout(set = __vkSet, location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation)
#define SET_POSITION(_v) gl_Position = _v; gl_Position.z = (gl_Position.z + gl_Position.w) / 2.0
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale.xy,gl_FragCoord.zw)
#define gl_VertexID gl_VertexIndex
#define gl_InstanceID gl_InstanceIndex
#else
#define ATTR_LAYOUT(__vkSet, __location) layout(location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation, std140) 
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation)
#define SET_POSITION(_v) gl_Position = _v
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw)
#endif
// This shader was automatically converted to be cross-compatible with Vulkan and OpenGL.

// shader 117889891fd19c30
//menu
const float resScale = float($height)/float($gameHeight);
#ifdef VULKAN
layout(set = 1, binding = 1) uniform ufBlock
{
uniform ivec4 uf_remappedPS[1];
uniform float uf_alphaTestRef;
uniform vec4 uf_fragCoordScale;
};
#else
uniform ivec4 uf_remappedPS[1];
uniform float uf_alphaTestRef;
uniform vec2 uf_fragCoordScale;
#endif
// uf_alphaTestRef was moved to the ufBlock
TEXTURE_LAYOUT(1, 1, 0) uniform sampler2D textureUnitPS1;
layout(location = 0) in vec4 passParameterSem129;
layout(location = 1) in vec4 passParameterSem128;
layout(location = 0) out vec4 passPixelColor0;
// uf_fragCoordScale was moved to the ufBlock
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R8f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem129;
R1f = passParameterSem128;
// 0
backupReg0f = R0f.w;
R7f.x = intBitsToFloat(uf_remappedPS[0].z) * intBitsToFloat(0x3e124925);
PV0f.w = mul_nonIEEE(backupReg0f, intBitsToFloat(uf_remappedPS[0].w));
PV0f.w *= 2.0;
PS0f = 1.0 / R1f.w;
PS0f /= 2.0;
// 1
R127f.x = PV0f.w * intBitsToFloat(0x3a4ccccd)/ resScale;
R127f.y = PV0f.w * intBitsToFloat(0x3acccccd)/ resScale;
PV1f.z = mul_nonIEEE(R1f.x, PS0f);
PV1f.w = mul_nonIEEE(-(R1f.y), PS0f);
R127f.w = PV0f.w * intBitsToFloat(0x3b19999a)/ resScale;
PS1f = R127f.w;
// 2
R6f.x = PV1f.z + 0.5;
PV0f.x = R6f.x;
R6f.y = PV1f.w + 0.5;
PV0f.y = R6f.y;
R8f.w = 1.0;
// 3
R1f.x = PV0f.x + -(R127f.x);
R1f.y = PV0f.y;
R0f.z = PV0f.y;
R0f.x = PV0f.x + R127f.x;
PS1f = R0f.x;
// 4
R2f.x = R6f.x + -(R127f.y);
R2f.y = R6f.y;
R3f.z = R6f.y;
R3f.x = R6f.x + R127f.y;
PS0f = R3f.x;
// 5
R4f.x = R6f.x + -(R127f.w);
R4f.y = R6f.y;
R5f.z = R6f.y;
R5f.x = R6f.x + R127f.w;
PS1f = R5f.x;
R1f.xyz = (texture(textureUnitPS1, R1f.xy).xyz);
R0f.xyz = (texture(textureUnitPS1, R0f.xz).xyz);
R2f.xyz = (texture(textureUnitPS1, R2f.xy).xyz);
R3f.xyz = (texture(textureUnitPS1, R3f.xz).xyz);
R4f.xyz = (texture(textureUnitPS1, R4f.xy).xyz);
R5f.xyz = (texture(textureUnitPS1, R5f.xz).xyz);
R6f.xyz = (texture(textureUnitPS1, R6f.xy).xyz);
// 0
backupReg0f = R0f.x;
PV0f.x = R1f.x + backupReg0f;
R127f.z = R1f.z + R0f.z;
PV0f.w = R1f.y + R0f.y;
// 1
R127f.x = R6f.x + PV0f.x;
R127f.y = R2f.x + R3f.x;
R126f.z = R2f.z + R3f.z;
R127f.w = R2f.y + R3f.y;
R126f.w = R6f.y + PV0f.w;
PS1f = R126f.w;
// 2
PV0f.x = R4f.y + R5f.y;
PV0f.y = R4f.x + R5f.x;
PV0f.w = R4f.z + R5f.z;
// 3
PV1f.x = PV0f.y + R127f.y;
PV1f.y = PV0f.x + R127f.w;
PV1f.z = R6f.z + R127f.z;
PV1f.w = PV0f.w + R126f.z;
// 4
PV0f.y = PV1f.z + PV1f.w;
PV0f.z = R126f.w + PV1f.y;
PV0f.w = R127f.x + PV1f.x;
// 5
R8f.x = mul_nonIEEE(PV0f.w, R7f.x);
R8f.y = mul_nonIEEE(PV0f.z, R7f.x);
R8f.z = mul_nonIEEE(PV0f.y, R7f.x);
// export
if( ((vec4(R8f.x, R8f.y, R8f.z, R8f.w)).a >= uf_alphaTestRef) == false) discard;
passPixelColor0 = vec4(R8f.x, R8f.y, R8f.z, R8f.w);
}
