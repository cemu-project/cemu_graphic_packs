#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
#ifdef VULKAN
#define ATTR_LAYOUT(__vkSet, __location) layout(set = __vkSet, location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation)
#define SET_POSITION(_v) gl_Position = _v; gl_Position.z = (gl_Position.z + gl_Position.w) / 2.0
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale.xy,gl_FragCoord.zw)
#define gl_VertexID gl_VertexIndex
#define gl_InstanceID gl_InstanceIndex
#else
#define ATTR_LAYOUT(__vkSet, __location) layout(location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation, std140) 
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation)
#define SET_POSITION(_v) gl_Position = _v
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw)
#endif
// This shader was automatically converted to be cross-compatible with Vulkan and OpenGL.

// shader 212e4514290f2693
const float resScale = float($height)/float($gameHeight);
#ifdef VULKAN
layout(set = 1, binding = 1) uniform ufBlock
{
uniform ivec4 uf_remappedPS[1];
uniform vec4 uf_fragCoordScale;
};
#else
uniform ivec4 uf_remappedPS[1];
uniform vec2 uf_fragCoordScale;
#endif
TEXTURE_LAYOUT(1, 1, 0) uniform sampler2D textureUnitPS1;
layout(location = 0) in vec4 passParameterSem128;
layout(location = 0) out vec4 passPixelColor0;
// uf_fragCoordScale was moved to the ufBlock
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R123f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem128;
R4f.xyzw = (texture(textureUnitPS1, R0f.xy).xyzw);
// 0
R1f.x = R0f.x + intBitsToFloat(0x3c400000)/ resScale;
R1f.y = R0f.y;
R2f.z = R0f.y;
R5f.w = intBitsToFloat(uf_remappedPS[0].w);
R2f.x = R0f.x + intBitsToFloat(0x3bc00000)/ resScale;
PS0f = R2f.x;
// 1
R3f.x = R0f.x + -(intBitsToFloat(0x3c400000))/ resScale;
R3f.y = R0f.y;
R0f.z = R0f.x + -(intBitsToFloat(0x3bc00000))/ resScale;
R1f.xyzw = (texture(textureUnitPS1, R1f.xy).xyzw);
R2f.xyzw = (texture(textureUnitPS1, R2f.xz).xyzw);
R3f.xyzw = (texture(textureUnitPS1, R3f.xy).xyzw);
R0f.xyzw = (texture(textureUnitPS1, R0f.zy).xyzw);
// 0
R123f.x = (R1f.x * intBitsToFloat(0x3ee66666) + R4f.x);
PV0f.x = R123f.x;
R123f.y = (R1f.w * intBitsToFloat(0x3ee66666) + R4f.w);
PV0f.y = R123f.y;
R123f.z = (R1f.z * intBitsToFloat(0x3ee66666) + R4f.z);
PV0f.z = R123f.z;
R123f.w = (R1f.y * intBitsToFloat(0x3ee66666) + R4f.y);
PV0f.w = R123f.w;
// 1
R123f.x = (R2f.w * intBitsToFloat(0x3f4ccccd) + PV0f.y);
PV1f.x = R123f.x;
R123f.y = (R2f.z * intBitsToFloat(0x3f4ccccd) + PV0f.z);
PV1f.y = R123f.y;
R123f.z = (R2f.y * intBitsToFloat(0x3f4ccccd) + PV0f.w);
PV1f.z = R123f.z;
R123f.w = (R2f.x * intBitsToFloat(0x3f4ccccd) + PV0f.x);
PV1f.w = R123f.w;
// 2
R123f.x = (R3f.w * intBitsToFloat(0x3ee66666) + PV1f.x);
PV0f.x = R123f.x;
R123f.y = (R3f.z * intBitsToFloat(0x3ee66666) + PV1f.y);
PV0f.y = R123f.y;
R123f.z = (R3f.y * intBitsToFloat(0x3ee66666) + PV1f.z);
PV0f.z = R123f.z;
R123f.w = (R3f.x * intBitsToFloat(0x3ee66666) + PV1f.w);
PV0f.w = R123f.w;
// 3
R123f.x = (R0f.z * intBitsToFloat(0x3f4ccccd) + PV0f.y);
PV1f.x = R123f.x;
R123f.y = (R0f.y * intBitsToFloat(0x3f4ccccd) + PV0f.z);
PV1f.y = R123f.y;
R123f.z = (R0f.x * intBitsToFloat(0x3f4ccccd) + PV0f.w);
PV1f.z = R123f.z;
R123f.w = (R0f.w * intBitsToFloat(0x3f4ccccd) + PV0f.x);
PV1f.w = R123f.w;
// 4
PV0f.x = PV1f.x * intBitsToFloat(0x3e924925);
PV0f.y = PV1f.y * intBitsToFloat(0x3e924925);
PV0f.z = PV1f.z * intBitsToFloat(0x3e924925);
PV0f.w = PV1f.w * intBitsToFloat(0x3e924925);
// 5
PV1f.x = mul_nonIEEE(PV0f.x, PV0f.w);
PV1f.y = mul_nonIEEE(PV0f.y, PV0f.w);
PV1f.z = mul_nonIEEE(PV0f.z, PV0f.w);
// 6
R5f.x = mul_nonIEEE(PV1f.z, intBitsToFloat(uf_remappedPS[0].x));
R5f.y = mul_nonIEEE(PV1f.y, intBitsToFloat(uf_remappedPS[0].y));
R5f.z = mul_nonIEEE(PV1f.x, intBitsToFloat(uf_remappedPS[0].z));
// export
passPixelColor0 = vec4(R5f.x, R5f.y, R5f.z, R5f.w);
}
