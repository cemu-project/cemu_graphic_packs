#version 420
#extension GL_ARB_texture_gather : enable
// shader 6279271034da8f93 // horizontal bloom 2560
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0xf4247000 res 96x96x1 dim 1 tm: 4 format 0005 compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;

float data = passParameterSem0.z - passParameterSem0.w;
float w = data / 1.38461538 * uf_fragCoordScale.x;

uniform float o_weight[] = float[]( 0.29411765, 0.35294118 );
uniform float o_offset[] = float[]( 0.00000000, 1.33333333 );

uniform float weight[] = float[]( 0.16122494, 0.26575540, 0.12180456, 0.02865990, 0.00316767 );
uniform float offset[] = float[]( 0.00000000, 1.44000000, 3.36000000, 5.28000000, 7.20000000 );

void main()
{
vec2 R0f = vec2(passParameterSem0.w, passParameterSem0.x);

vec4 R1f = texture( textureUnitPS0, R0f ) * weight[0];
for (int i=1; i<5; i++) {
	R1f += texture( textureUnitPS0, R0f + vec2(offset[i]*w, 0.0) ) * weight[i];
	R1f += texture( textureUnitPS0, R0f - vec2(offset[i]*w, 0.0) ) * weight[i];
	}

vec4 R2f = texture( textureUnitPS0, R0f ) * o_weight[0];
for (int i=1; i<2; i++) {
	R2f += texture( textureUnitPS0, R0f + vec2(o_offset[i]*w, 0.0) ) * o_weight[i];
	R2f += texture( textureUnitPS0, R0f - vec2(o_offset[i]*w, 0.0) ) * o_weight[i];
	}

passPixelColor0 = ( (uf_fragCoordScale.y == 1.0) ? R2f : R1f );
}

//py blurninja.py --expand 4 --reduce 4 17 --linear
//game original --expand 2 --reduce 2 9 --linear
