#version 400
#extension GL_ARB_texture_gather : enable
// shader c797a1f793b1e3ac//mag temple
const float overwriteWidth = 2560.0;  //overwidth value.0 
const float overwriteHeight = 1440.0;
uniform ivec4 uf_remappedPS[8];
uniform sampler2D textureUnitPS0;// Tex0 addr 0xf5054000 res 640x360x1 dim 1 tm: 4 format 080e compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
uniform sampler2D textureUnitPS1;// Tex1 addr 0xf494a800 res 1280x720x1 dim 1 tm: 4 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 2 2 2 border: 1
in vec4 passParameter0;
noperspective in vec4 passParameter1;
layout(location = 0) out vec4 passPixelColor0;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R124i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = floatBitsToInt(gl_FragCoord.xyzw);
R1i = floatBitsToInt(passParameter1);
vec2 scaleFactor = vec2(overwriteWidth,overwriteHeight)/vec2(1280.0,720.0); // factor = newResolution / expectedResolution
R0i.xy = floatBitsToInt(intBitsToFloat(R0i.xy) / scaleFactor);
// 0
R3i.x = uf_remappedPS[0].y;
R3i.x = floatBitsToInt(intBitsToFloat(R3i.x) / 2.0);
PV0i.x = R3i.x;
R127i.y = uf_remappedPS[0].x;
R127i.y = floatBitsToInt(intBitsToFloat(R127i.y) / 2.0);
PV0i.y = R127i.y;
R2i.w = 0x3f800000;
PV0i.w = R2i.w;
PS0i = floatBitsToInt(1.0 / intBitsToFloat(uf_remappedPS[1].x));
// 1
R2i.x = floatBitsToInt(intBitsToFloat(R0i.x) * intBitsToFloat(PS0i));
PV1i.x = R2i.x;
R1i.w = uf_remappedPS[0].z;
R1i.w = floatBitsToInt(intBitsToFloat(R1i.w) / 2.0);
PV1i.w = R1i.w;
PS1i = floatBitsToInt(1.0 / intBitsToFloat(uf_remappedPS[1].y));
// 2
R0i.x = uf_remappedPS[2].x;
R0i.x = floatBitsToInt(intBitsToFloat(R0i.x) / 2.0);
PV0i.x = R0i.x;
R2i.y = floatBitsToInt(intBitsToFloat(R0i.y) * intBitsToFloat(PS1i));
PV0i.y = R2i.y;
R0i.z = uf_remappedPS[2].z;
R0i.z = floatBitsToInt(intBitsToFloat(R0i.z) / 2.0);
PV0i.z = R0i.z;
R4i.w = 0;
PV0i.w = R4i.w;
R3i.w = floatBitsToInt(1.0 / intBitsToFloat(R127i.y));
PS0i = R3i.w;
R0i.w = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R2i.xy)).x);
R2i.xyz = floatBitsToInt(texture(textureUnitPS1, intBitsToFloat(R2i.xy)).xyz);
// 0
R125i.x = floatBitsToInt((intBitsToFloat(R2i.x) * intBitsToFloat(0x40000000) + -(1.0)));
PV0i.x = R125i.x;
R125i.y = floatBitsToInt((intBitsToFloat(R2i.y) * intBitsToFloat(0x40000000) + -(1.0)));
PV0i.y = R125i.y;
R124i.z = floatBitsToInt((intBitsToFloat(R2i.z) * intBitsToFloat(0x40000000) + -(1.0)));
PV0i.z = R124i.z;
R123i.w = floatBitsToInt((intBitsToFloat(uf_remappedPS[3].y) * intBitsToFloat(R0i.w) + intBitsToFloat(uf_remappedPS[3].x)));
PV0i.w = R123i.w;
R126i.y = floatBitsToInt(1.0 / intBitsToFloat(R1i.w));
PS0i = R126i.y;
// 1
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), -(intBitsToFloat(PV0i.w))));
PV1i.x = R127i.x;
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.y), -(intBitsToFloat(PV0i.w))));
PV1i.y = R127i.y;
R127i.z = floatBitsToInt(-(intBitsToFloat(PV0i.w)));
PV1i.z = R127i.z;
PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.z) * intBitsToFloat(PV0i.z));
R126i.z = floatBitsToInt(1.0 / intBitsToFloat(R3i.x));
PS1i = R126i.z;
// 2
R124i.x = floatBitsToInt(intBitsToFloat(PV1i.x) * intBitsToFloat(uf_remappedPS[4].x) + intBitsToFloat(PV1i.y) * intBitsToFloat(uf_remappedPS[4].y) + intBitsToFloat(PV1i.z) * intBitsToFloat(uf_remappedPS[4].z) + intBitsToFloat(R2i.w) * intBitsToFloat(uf_remappedPS[4].w));
PV0i.x = R124i.x;
PV0i.y = R124i.x;
PV0i.z = R124i.x;
PV0i.w = R124i.x;
R126i.x = floatBitsToInt((intBitsToFloat(R125i.y) * intBitsToFloat(R125i.y) + intBitsToFloat(PV1i.w)));
PS0i = R126i.x;
// 3
tempi.x = floatBitsToInt(intBitsToFloat(R127i.x) * intBitsToFloat(uf_remappedPS[5].x) + intBitsToFloat(R127i.y) * intBitsToFloat(uf_remappedPS[5].y) + intBitsToFloat(R127i.z) * intBitsToFloat(uf_remappedPS[5].z) + intBitsToFloat(R2i.w) * intBitsToFloat(uf_remappedPS[5].w));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R2i.z = tempi.x;
R125i.z = floatBitsToInt(max(intBitsToFloat(PV0i.x), -(intBitsToFloat(PV0i.x))));
PS1i = R125i.z;
// 4
backupReg0i = R127i.y;
tempi.x = floatBitsToInt(intBitsToFloat(R127i.x) * intBitsToFloat(uf_remappedPS[6].x) + intBitsToFloat(backupReg0i) * intBitsToFloat(uf_remappedPS[6].y) + intBitsToFloat(R127i.z) * intBitsToFloat(uf_remappedPS[6].z) + intBitsToFloat(R2i.w) * intBitsToFloat(uf_remappedPS[6].w));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.y = tempi.x;
R127i.x = floatBitsToInt(max(intBitsToFloat(PV1i.x), -(intBitsToFloat(PV1i.x))));
PS0i = R127i.x;
// 5
backupReg0i = R0i.x;
PV1i.x = floatBitsToInt(intBitsToFloat(R125i.z) * intBitsToFloat(R3i.w));
PV1i.y = floatBitsToInt(max(intBitsToFloat(PV0i.x), -(intBitsToFloat(PV0i.x))));
PV1i.z = floatBitsToInt(intBitsToFloat(PS0i) * intBitsToFloat(R126i.y));
R123i.w = floatBitsToInt((intBitsToFloat(R125i.x) * intBitsToFloat(R125i.x) + intBitsToFloat(R126i.x)));
PV1i.w = R123i.w;
PS1i = floatBitsToInt(1.0 / intBitsToFloat(backupReg0i));
// 6
R1i.x = floatBitsToInt(intBitsToFloat(R125i.z) * intBitsToFloat(PS1i));
R1i.x = clampFI32(R1i.x);
PV0i.x = R1i.x;
R126i.y = floatBitsToInt(max(intBitsToFloat(PV1i.x), intBitsToFloat(PV1i.z)));
PV0i.y = R126i.y;
PV0i.z = floatBitsToInt(intBitsToFloat(R2i.z) * intBitsToFloat(R2i.z));
R125i.w = floatBitsToInt(intBitsToFloat(PV1i.y) * intBitsToFloat(R126i.z));
PV0i.w = R125i.w;
tempResultf = 1.0 / sqrt(intBitsToFloat(PV1i.w));
R127i.w = floatBitsToInt(tempResultf);
PS0i = R127i.w;
// 7
tempi.x = floatBitsToInt(intBitsToFloat(R124i.x) * intBitsToFloat(R124i.x) + intBitsToFloat(R127i.y) * intBitsToFloat(R127i.y) + intBitsToFloat(PV0i.z) * 1.0 + intBitsToFloat(0x80000000) * 0.0);
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R127i.z = floatBitsToInt(max(intBitsToFloat(PV0i.w), intBitsToFloat(PV0i.y)));
PS1i = R127i.z;
// 8
backupReg0i = R125i.x;
backupReg1i = R125i.y;
backupReg2i = R124i.z;
R125i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(R127i.w)));
PV0i.x = R125i.x;
R125i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg1i), intBitsToFloat(R127i.w)));
PV0i.y = R125i.y;
R124i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg2i), intBitsToFloat(R127i.w)));
PV0i.z = R124i.z;
R124i.w = ((1.0 > intBitsToFloat(PS1i))?int(0xFFFFFFFF):int(0x0));
PV0i.w = R124i.w;
tempResultf = 1.0 / sqrt(intBitsToFloat(PV1i.x));
PS0i = floatBitsToInt(tempResultf);
// 9
backupReg0i = R124i.x;
backupReg1i = R127i.y;
R124i.x = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(backupReg0i)), intBitsToFloat(PS0i)));
PV1i.x = R124i.x;
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(R127i.z)));
PV1i.y = R127i.y;
R126i.z = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(R2i.z)), intBitsToFloat(PS0i)));
PV1i.z = R126i.z;
R127i.w = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(backupReg1i)), intBitsToFloat(PS0i)));
PV1i.w = R127i.w;
R0i.x = floatBitsToInt(1.0 / intBitsToFloat(R126i.y));
PS1i = R0i.x;
// 10
backupReg0i = R0i.z;
R126i.x = floatBitsToInt(intBitsToFloat(R125i.x) * intBitsToFloat(uf_remappedPS[4].x) + intBitsToFloat(R125i.y) * intBitsToFloat(uf_remappedPS[4].y) + intBitsToFloat(R124i.z) * intBitsToFloat(uf_remappedPS[4].z) + intBitsToFloat(0x80000000) * 0.0);
PV0i.x = R126i.x;
PV0i.y = R126i.x;
PV0i.z = R126i.x;
PV0i.w = R126i.x;
R125i.z = floatBitsToInt(1.0 / intBitsToFloat(backupReg0i));
PS0i = R125i.z;
// 11
tempi.x = floatBitsToInt(intBitsToFloat(R125i.x) * intBitsToFloat(uf_remappedPS[6].x) + intBitsToFloat(R125i.y) * intBitsToFloat(uf_remappedPS[6].y) + intBitsToFloat(R124i.z) * intBitsToFloat(uf_remappedPS[6].z) + intBitsToFloat(0x80000000) * 0.0);
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R126i.y = tempi.x;
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.w), intBitsToFloat(R125i.w)));
PS1i = R126i.w;
// 12
backupReg0i = R124i.z;
backupReg1i = R127i.y;
backupReg1i = R127i.y;
tempi.x = floatBitsToInt(intBitsToFloat(R125i.x) * intBitsToFloat(uf_remappedPS[5].x) + intBitsToFloat(R125i.y) * intBitsToFloat(uf_remappedPS[5].y) + intBitsToFloat(backupReg0i) * intBitsToFloat(uf_remappedPS[5].z) + intBitsToFloat(0x80000000) * 0.0);
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R124i.z = tempi.x;
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg1i), intBitsToFloat(backupReg1i)));
PS0i = R127i.y;
// 13
backupReg0i = R127i.x;
R123i.x = floatBitsToInt(((R124i.w == 0)?(intBitsToFloat(R124i.x)):(-(intBitsToFloat(R124i.x)))));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt(((R124i.w == 0)?(intBitsToFloat(R127i.w)):(-(intBitsToFloat(R127i.w)))));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt(((R124i.w == 0)?(intBitsToFloat(R126i.z)):(-(intBitsToFloat(R126i.z)))));
PV1i.z = R123i.z;
R127i.x = floatBitsToInt(intBitsToFloat(backupReg0i) * intBitsToFloat(R125i.z));
R127i.x = clampFI32(R127i.x);
PS1i = R127i.x;
// 14
backupReg0i = R126i.y;
backupReg1i = R0i.x;
backupReg1i = R0i.x;
tempi.x = floatBitsToInt(intBitsToFloat(R126i.x) * intBitsToFloat(PV1i.x) + intBitsToFloat(backupReg0i) * intBitsToFloat(PV1i.y) + intBitsToFloat(R124i.z) * intBitsToFloat(PV1i.z) + intBitsToFloat(0x80000000) * 0.0);
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R126i.y = tempi.x;
PS0i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg1i), intBitsToFloat(backupReg1i)));
// 15
backupReg0i = R127i.x;
R127i.x = ((R124i.w == 0)?(PS0i):(R127i.y));
PV1i.x = R127i.x;
R123i.y = floatBitsToInt((-(intBitsToFloat(R125i.w)) * intBitsToFloat(R0i.x) + 1.0));
R123i.y = clampFI32(R123i.y);
PV1i.y = R123i.y;
PV1i.z = floatBitsToInt(max(intBitsToFloat(R1i.x), intBitsToFloat(backupReg0i)));
R123i.w = ((R124i.w == 0)?(R0i.x):(R127i.y));
PV1i.w = R123i.w;
PS1i = floatBitsToInt(1.0 / intBitsToFloat(R126i.w));
PS1i = clampFI32(PS1i);
// 16
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(PV1i.y)));
PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.w) + intBitsToFloat(R126i.y));
PV0i.y = clampFI32(PV0i.y);
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.z), intBitsToFloat(PV1i.z)));
// 17
R123i.y = floatBitsToInt((-(intBitsToFloat(PV0i.z)) * intBitsToFloat(PV0i.z) + 1.0));
PV1i.y = R123i.y;
R123i.z = ((R124i.w == 0)?(PV0i.x):(0x3f800000));
PV1i.z = R123i.z;
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(PV0i.y)));
// 18
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.y), intBitsToFloat(PV1i.y)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.z), intBitsToFloat(PV1i.w)));
// 19
backupReg0i = R127i.z;
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), intBitsToFloat(uf_remappedPS[7].y)));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), intBitsToFloat(uf_remappedPS[7].x)));
R127i.z = ((R124i.w == 0)?(PV0i.x):(backupReg0i));
PV1i.z = R127i.z;
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), intBitsToFloat(uf_remappedPS[7].z)));
// 20
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(0x3ea2f983)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(0x3ea2f983)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.y), intBitsToFloat(0x3ea2f983)));
// 21
R4i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(PV0i.z)));
PV1i.x = R4i.x;
R4i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(PV0i.y)));
PV1i.y = R4i.y;
R4i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(PV0i.x)));
PV1i.z = R4i.z;
// export
passPixelColor0 = vec4(intBitsToFloat(R4i.x), intBitsToFloat(R4i.y), intBitsToFloat(R4i.z), intBitsToFloat(R4i.w));
}
